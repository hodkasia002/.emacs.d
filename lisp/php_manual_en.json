{"apc_add":{"id":"function.apc-add","purpose":"Cache a new variable in the data store","prototype":"array apc_add(string $key, mixed $var [, int $ttl = '', array $values [, mixed $unused = null]])","return":"<p class=\"para\">   Returns TRUE if something has effectively been added into the cache, FALSE otherwise.   Second syntax returns array with error keys.  <\/p>","versions":"PECL apc >= 3.0.13"},"apc_bin_dump":{"id":"function.apc-bin-dump","purpose":"Get a binary dump of the given files and user variables","prototype":"string apc_bin_dump([array $files = null [, array $user_vars = null]])","return":"<p class=\"para\">   Returns a binary dump of the given files and user variables from the APC cache,   <strong><code>FALSE<\/code><\/strong> if APC is not enabled, or <strong><code>NULL<\/code><\/strong> if an unknown error is encountered.  <\/p>","versions":"PECL apc >= 3.1.4"},"apc_bin_dumpfile":{"id":"function.apc-bin-dumpfile","purpose":"Output a binary dump of cached files and user variables to a file","prototype":"int apc_bin_dumpfile(array $files, array $user_vars, string $filename [, int $flags = '' [, resource $context = null]])","return":"<p class=\"para\">   The number of bytes written to the file, otherwise   <strong><code>FALSE<\/code><\/strong> if APC is not enabled, <code class=\"parameter\">filename<\/code> is an invalid file name,   <code class=\"parameter\">filename<\/code> can&#039;t be opened, the file dump can&#039;t be completed   (e.g., the hard drive is out of disk space), or an unknown error was encountered.  <\/p>","versions":"PECL apc >= 3.1.4"},"apc_bin_load":{"id":"function.apc-bin-load","purpose":"Load a binary dump into the APC file\/user cache","prototype":"bool apc_bin_load(string $data [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the binary dump <code class=\"parameter\">data<\/code> was loaded   with success, otherwise <strong><code>FALSE<\/code><\/strong> is returned. <strong><code>FALSE<\/code><\/strong> is returned if APC   is not enabled, or if the <code class=\"parameter\">data<\/code> is not a valid APC   binary dump (e.g., unexpected size).  <\/p>","versions":"PECL apc >= 3.1.4"},"apc_bin_loadfile":{"id":"function.apc-bin-loadfile","purpose":"Load a binary dump from a file into the APC file\/user cache","prototype":"bool apc_bin_loadfile(string $filename [, resource $context = null [, int $flags = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, otherwise <strong><code>FALSE<\/code><\/strong> Reasons it may return <strong><code>FALSE<\/code><\/strong> include   APC is not enabled, <code class=\"parameter\">filename<\/code> is an invalid file name or empty,   <code class=\"parameter\">filename<\/code> can&#039;t be opened, the file dump can&#039;t be completed, or   if the <code class=\"parameter\">data<\/code> is not a valid APC binary dump (e.g., unexpected   size).  <\/p>","versions":"PECL apc >= 3.1.4"},"apc_cache_info":{"id":"function.apc-cache-info","purpose":"Retrieves cached information from APC's data store","prototype":"array apc_cache_info([string $cache_type = \"\" [, bool $limited = '']])","return":"<p class=\"para\">   Array of cached data (and meta-data) or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <span class=\"simpara\">    <span class=\"function\">apc_cache_info<\/span> will raise a warning if it is unable to    retrieve APC cache data. This typically occurs when APC is not enabled.   <\/span>  <\/p><\/blockquote>","versions":"PECL apc >= 2.0.0"},"apc_cas":{"id":"function.apc-cas","purpose":"Updates an old value with a new value","prototype":"bool apc_cas(string $key, int $old, int $new)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.1.1"},"apc_clear_cache":{"id":"function.apc-clear-cache","purpose":"Clears the APC cache","prototype":"bool apc_clear_cache([string $cache_type = \"\"])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> always  <\/p>","versions":"PECL apc >= 2.0.0"},"apc_compile_file":{"id":"function.apc-compile-file","purpose":"Stores a file in the bytecode cache, bypassing all filters","prototype":"mixed apc_compile_file(string $filename [, bool $atomic = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.0.13"},"apc_dec":{"id":"function.apc-dec","purpose":"Decrease a stored number","prototype":"int apc_dec(string $key [, int $step = 1 [, bool $success = '']])","return":"<p class=\"para\">   Returns the current value of <code class=\"parameter\">key<\/code>&#039;s value on success,    or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL apc >= 3.1.1"},"apc_define_constants":{"id":"function.apc-define-constants","purpose":"Defines a set of constants for retrieval and mass-definition","prototype":"bool apc_define_constants(string $key, array $constants [, bool $case_sensitive = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.0.0"},"apc_delete_file":{"id":"function.apc-delete-file","purpose":"Deletes files from the opcode cache","prototype":"mixed apc_delete_file(mixed $keys)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Or if <code class=\"parameter\">keys<\/code> is an <span class=\"type\">array<\/span>, then   an empty array is returned on success, or an array of failed files   is returned.  <\/p>","versions":"PECL apc >= 3.1.1"},"apc_delete":{"id":"function.apc-delete","purpose":"Removes a stored variable from the cache","prototype":"mixed apc_delete(string $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.0.0"},"apc_exists":{"id":"function.apc-exists","purpose":"Checks if APC key exists","prototype":"mixed apc_exists(mixed $keys)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the key exists, otherwise <strong><code>FALSE<\/code><\/strong> Or if an   <span class=\"type\">array<\/span> was passed to <code class=\"parameter\">keys<\/code>, then   an array is returned that contains all existing keys, or an empty   array if none exist.  <\/p>","versions":"PECL apc >= 3.1.4"},"apc_fetch":{"id":"function.apc-fetch","purpose":"Fetch a stored variable from the cache","prototype":"mixed apc_fetch(mixed $key [, bool $success = ''])","return":"<p class=\"para\">   The stored variable or array of variables on success; <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL apc >= 3.0.0"},"apc_inc":{"id":"function.apc-inc","purpose":"Increase a stored number","prototype":"int apc_inc(string $key [, int $step = 1 [, bool $success = '']])","return":"<p class=\"para\">   Returns the current value of <code class=\"parameter\">key<\/code>&#039;s value on success,    or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL apc >= 3.1.1"},"apc_load_constants":{"id":"function.apc-load-constants","purpose":"Loads a set of constants from the cache","prototype":"bool apc_load_constants(string $key [, bool $case_sensitive = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.0.0"},"apc_sma_info":{"id":"function.apc-sma-info","purpose":"Retrieves APC's Shared Memory Allocation information","prototype":"array apc_sma_info([bool $limited = ''])","return":"<p class=\"para\">   Array of Shared Memory Allocation data; <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 2.0.0"},"apc_store":{"id":"function.apc-store","purpose":"Cache a variable in the data store","prototype":"array apc_store(string $key, mixed $var [, int $ttl = '', array $values [, mixed $unused = null]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Second syntax returns array with error keys.  <\/p>","versions":"PECL apc >= 3.0.0"},"APCIterator::__construct":{"id":"apciterator.construct","purpose":"Constructs an APCIterator iterator object","prototype":"object APCIterator::__construct(string $cache [, mixed $search = '' [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]])","return":"<p class=\"para\">   An <span class=\"classname\">APCIterator<\/span> <span class=\"type\">object<\/span> on success,   or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::current":{"id":"apciterator.current","purpose":"Get current item","prototype":"mixed APCIterator::current()","return":"<p class=\"para\">   Returns the current item on success, or <strong><code>FALSE<\/code><\/strong> if no   more items or exist, or on failure.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::getTotalCount":{"id":"apciterator.gettotalcount","purpose":"Get total count","prototype":"int APCIterator::getTotalCount()","return":"<p class=\"para\">   The total count.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::getTotalHits":{"id":"apciterator.gettotalhits","purpose":"Get total cache hits","prototype":"int APCIterator::getTotalHits()","return":"<p class=\"para\">   The number of hits on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::getTotalSize":{"id":"apciterator.gettotalsize","purpose":"Get total cache size","prototype":"int APCIterator::getTotalSize()","return":"<p class=\"para\">   The total cache size.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::key":{"id":"apciterator.key","purpose":"Get iterator key","prototype":"string APCIterator::key()","return":"<p class=\"para\">   Returns the key on success, or <strong><code>FALSE<\/code><\/strong> upon failure.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::next":{"id":"apciterator.next","purpose":"Move pointer to next item","prototype":"void APCIterator::next()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::rewind":{"id":"apciterator.rewind","purpose":"Rewinds iterator","prototype":"void APCIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL apc >= 3.1.1"},"APCIterator::valid":{"id":"apciterator.valid","purpose":"Checks if current position is valid","prototype":"void APCIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current iterator position is valid, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL apc >= 3.1.1"},"apcu_add":{"id":"function.apcu-add","purpose":"Cache a new variable in the data store","prototype":"array apcu_add(string $key, mixed $var [, int $ttl = '', array $values [, mixed $unused = null]])","return":"<p class=\"para\">   Returns TRUE if something has effectively been added into the cache, FALSE otherwise.   Second syntax returns array with error keys.  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_cache_info":{"id":"function.apcu-cache-info","purpose":"Retrieves cached information from APCu's data store","prototype":"array apcu_cache_info([bool $limited = ''])","return":"<p class=\"para\">   Array of cached data (and meta-data) or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <span class=\"simpara\">    <span class=\"function\">apcu_cache_info<\/span> will raise a warning if it is unable to    retrieve APC cache data. This typically occurs when APC is not enabled.   <\/span>  <\/p><\/blockquote>","versions":"PECL apcu >= 4.0.0"},"apcu_cas":{"id":"function.apcu-cas","purpose":"Updates an old value with a new value","prototype":"bool apcu_cas(string $key, int $old, int $new)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_clear_cache":{"id":"function.apcu-clear-cache","purpose":"Clears the APCu cache","prototype":"bool apcu_clear_cache()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> always  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_dec":{"id":"function.apcu-dec","purpose":"Decrease a stored number","prototype":"int apcu_dec(string $key [, int $step = 1 [, bool $success = '']])","return":"<p class=\"para\">   Returns the current value of <code class=\"parameter\">key<\/code>&#039;s value on success,    or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_delete":{"id":"function.apcu-delete","purpose":"Removes a stored variable from the cache","prototype":"bool apcu_delete(mixed $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_entry":{"id":"function.apcu-entry","purpose":"Atomically fetch or generate a cache entry","prototype":"mixed apcu_entry(string $key, callable $generator [, int $ttl = ''])","return":"<p class=\"para\">   Returns the cached value  <\/p>","versions":"PECL apcu >= 5.1.0"},"apcu_exists":{"id":"function.apcu-exists","purpose":"Checks if entry exists","prototype":"mixed apcu_exists(mixed $keys)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the key exists, otherwise <strong><code>FALSE<\/code><\/strong> Or if an   <span class=\"type\">array<\/span> was passed to <code class=\"parameter\">keys<\/code>, then   an array is returned that contains all existing keys, or an empty   array if none exist.  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_fetch":{"id":"function.apcu-fetch","purpose":"Fetch a stored variable from the cache","prototype":"mixed apcu_fetch(mixed $key [, bool $success = ''])","return":"<p class=\"para\">   The stored variable or array of variables on success; <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_inc":{"id":"function.apcu-inc","purpose":"Increase a stored number","prototype":"int apcu_inc(string $key [, int $step = 1 [, bool $success = '']])","return":"<p class=\"para\">   Returns the current value of <code class=\"parameter\">key<\/code>&#039;s value on success,    or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_sma_info":{"id":"function.apcu-sma-info","purpose":"Retrieves APCu Shared Memory Allocation information","prototype":"array apcu_sma_info([bool $limited = ''])","return":"<p class=\"para\">   Array of Shared Memory Allocation data; <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apcu >= 4.0.0"},"apcu_store":{"id":"function.apcu-store","purpose":"Cache a variable in the data store","prototype":"array apcu_store(string $key, mixed $var [, int $ttl = '', array $values [, mixed $unused = null]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Second syntax returns array with error keys.  <\/p>","versions":"PECL apcu >= 4.0.0"},"APCUIterator::__construct":{"id":"apcuiterator.construct","purpose":"Constructs an APCUIterator iterator object","prototype":"object APCUIterator::__construct([mixed $search = '' [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]])","return":"<p class=\"para\">   An <span class=\"classname\">APCUIterator<\/span> <span class=\"type\">object<\/span> on success,   or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::current":{"id":"apcuiterator.current","purpose":"Get current item","prototype":"mixed APCUIterator::current()","return":"<p class=\"para\">   Returns the current item on success, or <strong><code>FALSE<\/code><\/strong> if no   more items or exist, or on failure.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::getTotalCount":{"id":"apcuiterator.gettotalcount","purpose":"Get total count","prototype":"int APCUIterator::getTotalCount()","return":"<p class=\"para\">   The total count.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::getTotalHits":{"id":"apcuiterator.gettotalhits","purpose":"Get total cache hits","prototype":"int APCUIterator::getTotalHits()","return":"<p class=\"para\">   The number of hits on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::getTotalSize":{"id":"apcuiterator.gettotalsize","purpose":"Get total cache size","prototype":"int APCUIterator::getTotalSize()","return":"<p class=\"para\">   The total cache size.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::key":{"id":"apcuiterator.key","purpose":"Get iterator key","prototype":"string APCUIterator::key()","return":"<p class=\"para\">   Returns the key on success, or <strong><code>FALSE<\/code><\/strong> upon failure.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::next":{"id":"apcuiterator.next","purpose":"Move pointer to next item","prototype":"void APCUIterator::next()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::rewind":{"id":"apcuiterator.rewind","purpose":"Rewinds iterator","prototype":"void APCUIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL apcu >= 5.0.0"},"APCUIterator::valid":{"id":"apcuiterator.valid","purpose":"Checks if current position is valid","prototype":"void APCUIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current iterator position is valid, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL apcu >= 5.0.0"},"apd_breakpoint":{"id":"function.apd-breakpoint","purpose":"Stops the interpreter and waits on a CR from the socket","prototype":"bool apd_breakpoint(int $debug_level)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apd >= 0.2"},"apd_callstack":{"id":"function.apd-callstack","purpose":"Returns the current call stack as an array","prototype":"array apd_callstack()","return":"<p class=\"para\">   An array containing the current call stack.  <\/p>","versions":"PECL apd 0.2-0.4"},"apd_clunk":{"id":"function.apd-clunk","purpose":"Throw a warning and a callstack","prototype":"void apd_clunk(string $warning [, string $delimiter = \"\"])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL apd 0.2-0.4"},"apd_continue":{"id":"function.apd-continue","purpose":"Restarts the interpreter","prototype":"bool apd_continue(int $debug_level)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apd >= 0.2"},"apd_croak":{"id":"function.apd-croak","purpose":"Throw an error, a callstack and then exit","prototype":"void apd_croak(string $warning [, string $delimiter = \"\"])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL apd 0.2-0.4"},"apd_dump_function_table":{"id":"function.apd-dump-function-table","purpose":"Outputs the current function table","prototype":"void apd_dump_function_table()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"Unknown"},"apd_dump_persistent_resources":{"id":"function.apd-dump-persistent-resources","purpose":"Return all persistent resources as an array","prototype":"array apd_dump_persistent_resources()","return":"<p class=\"para\">   An array containing the current persistent resources.  <\/p>","versions":"PECL apd 0.2-0.4"},"apd_dump_regular_resources":{"id":"function.apd-dump-regular-resources","purpose":"Return all current regular resources as an array","prototype":"array apd_dump_regular_resources()","return":"<p class=\"para\">   An array containing the current regular resources.  <\/p>","versions":"PECL apd 0.2-0.4"},"apd_echo":{"id":"function.apd-echo","purpose":"Echo to the debugging socket","prototype":"bool apd_echo(string $output)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apd >= 0.2"},"apd_get_active_symbols":{"id":"function.apd-get-active-symbols","purpose":"Get an array of the current variables names in the local scope","prototype":"array apd_get_active_symbols()","return":"<p class=\"para\">   A multidimensional array with all the variables.  <\/p>","versions":"PECL apd 0.2"},"apd_set_pprof_trace":{"id":"function.apd-set-pprof-trace","purpose":"Starts the session debugging","prototype":"string apd_set_pprof_trace([string $dump_directory = ini_get(\"apd.dumpdir\") [, string $fragment = \"pprof\"]])","return":"<p class=\"para\">   Returns path of the destination file.  <\/p>","versions":"PECL apd >= 0.2"},"apd_set_session_trace_socket":{"id":"function.apd-set-session-trace-socket","purpose":"Starts the remote session debugging","prototype":"bool apd_set_session_trace_socket(string $tcp_server, int $socket_type, int $port, int $debug_level)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apd >= 0.2"},"apd_set_session_trace":{"id":"function.apd-set-session-trace","purpose":"Starts the session debugging","prototype":"void apd_set_session_trace(int $debug_level [, string $dump_directory = ini_get(\"apd.dumpdir\")])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL apd 0.2-0.4"},"apd_set_session":{"id":"function.apd-set-session","purpose":"Changes or sets the current debugging level","prototype":"void apd_set_session(int $debug_level)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL apd 0.2-0.4"},"override_function":{"id":"function.override-function","purpose":"Overrides built-in functions","prototype":"bool override_function(string $function_name, string $function_args, string $function_code)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apd >= 0.2"},"rename_function":{"id":"function.rename-function","purpose":"Renames orig_name to new_name in the global function table","prototype":"bool rename_function(string $original_name, string $new_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL apd >= 0.2"},"bcompiler_load_exe":{"id":"function.bcompiler-load-exe","purpose":"Reads and creates classes from a bcompiler exe file","prototype":"bool bcompiler_load_exe(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_load":{"id":"function.bcompiler-load","purpose":"Reads and creates classes from a bz compressed file","prototype":"bool bcompiler_load(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_parse_class":{"id":"function.bcompiler-parse-class","purpose":"Reads the bytecodes of a class and calls back to a user function","prototype":"bool bcompiler_parse_class(string $class, string $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_read":{"id":"function.bcompiler-read","purpose":"Reads and creates classes from a filehandle","prototype":"bool bcompiler_read(resource $filehandle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_write_class":{"id":"function.bcompiler-write-class","purpose":"Writes a defined class as bytecodes","prototype":"bool bcompiler_write_class(resource $filehandle, string $className [, string $extends = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_write_constant":{"id":"function.bcompiler-write-constant","purpose":"Writes a defined constant as bytecodes","prototype":"bool bcompiler_write_constant(resource $filehandle, string $constantName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.5"},"bcompiler_write_exe_footer":{"id":"function.bcompiler-write-exe-footer","purpose":"Writes the start pos, and sig to the end of a exe type file","prototype":"bool bcompiler_write_exe_footer(resource $filehandle, int $startpos)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_write_file":{"id":"function.bcompiler-write-file","purpose":"Writes a php source file as bytecodes","prototype":"bool bcompiler_write_file(resource $filehandle, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.6"},"bcompiler_write_footer":{"id":"function.bcompiler-write-footer","purpose":"Writes the single character \\x00 to indicate End of compiled data","prototype":"bool bcompiler_write_footer(resource $filehandle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.4"},"bcompiler_write_function":{"id":"function.bcompiler-write-function","purpose":"Writes a defined function as bytecodes","prototype":"bool bcompiler_write_function(resource $filehandle, string $functionName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.5"},"bcompiler_write_functions_from_file":{"id":"function.bcompiler-write-functions-from-file","purpose":"Writes all functions defined in a file as bytecodes","prototype":"bool bcompiler_write_functions_from_file(resource $filehandle, string $fileName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.5"},"bcompiler_write_header":{"id":"function.bcompiler-write-header","purpose":"Writes the bcompiler header","prototype":"bool bcompiler_write_header(resource $filehandle [, string $write_ver = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.3"},"bcompiler_write_included_filename":{"id":"function.bcompiler-write-included-filename","purpose":"Writes an included file as bytecodes","prototype":"bool bcompiler_write_included_filename(resource $filehandle, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bcompiler >= 0.5"},"blenc_encrypt":{"id":"function.blenc-encrypt","purpose":"Encrypt a PHP script with BLENC","prototype":"string blenc_encrypt(string $plaintext, string $encodedfile [, string $encryption_key = ''])","return":"<p class=\"para\">   BLENC will return the redistributable key that must be saved into key_file:   the path of key_file is specified at runtime with the option blenc.key_file  <\/p>","versions":"PECL blenc >= 5"},"Componere\\Abstract\\Definition::addInterface":{"id":"componere-abstract-definition.addinterface","purpose":"Add Interface","prototype":"Definition Componere\\Abstract\\Definition::addInterface(string $interface)","return":"<p class=\"para\">   The current Definition  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Abstract\\Definition::addMethod":{"id":"componere-abstract-definition.addmethod","purpose":"Add Method","prototype":"Definition Componere\\Abstract\\Definition::addMethod(string $name, \\Componere\\Method $method)","return":"<p class=\"para\">   The current Definition  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Abstract\\Definition::addTrait":{"id":"componere-abstract-definition.addtrait","purpose":"Add Trait","prototype":"Definition Componere\\Abstract\\Definition::addTrait(string $trait)","return":"<p class=\"para\">   The current Definition  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Abstract\\Definition::getReflector":{"id":"componere-abstract-definition.getreflector","purpose":"Reflection","prototype":"\\ReflectionClass Componere\\Abstract\\Definition::getReflector()","return":"<p class=\"para\">   A ReflectionClass for the current definition (cached)  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::__construct":{"id":"componere-definition.construct","purpose":"Definition Construction","prototype":" Componere\\Definition::__construct(string $name, string $parent, array $interfaces)","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::addConstant":{"id":"componere-definition.addconstant","purpose":"Add Constant","prototype":"Definition Componere\\Definition::addConstant(string $name, \\Componere\\Value $value)","return":"<p class=\"para\">   The current Definition  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::addProperty":{"id":"componere-definition.addproperty","purpose":"Add Property","prototype":"Definition Componere\\Definition::addProperty(string $name, \\Componere\\Value $value)","return":"<p class=\"para\">   The current Definition  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::register":{"id":"componere-definition.register","purpose":"Registration","prototype":"void Componere\\Definition::register()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::isRegistered":{"id":"componere-definition.isregistered","purpose":"State Detection","prototype":"bool Componere\\Definition::isRegistered()","return":"<p class=\"para\">   Shall return true if this Definition is registered  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::getClosure":{"id":"componere-definition.getclosure","purpose":"Get Closure","prototype":"\\Closure Componere\\Definition::getClosure(string $name)","return":"<p class=\"para\">   A Closure bound to the correct scope  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Definition::getClosures":{"id":"componere-definition.getclosures","purpose":"Get Closures","prototype":"array Componere\\Definition::getClosures()","return":"<p class=\"para\">   Shall return all methods as an array of Closure objects bound to the correct scope  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Patch::__construct":{"id":"componere-patch.construct","purpose":"Patch Construction","prototype":" Componere\\Patch::__construct(object $instance, array $interfaces)","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Patch::apply":{"id":"componere-patch.apply","purpose":"Application","prototype":"void Componere\\Patch::apply()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Patch::revert":{"id":"componere-patch.revert","purpose":"Reversal","prototype":"void Componere\\Patch::revert()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Patch::isApplied":{"id":"componere-patch.isapplied","purpose":"State Detection","prototype":"bool Componere\\Patch::isApplied()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Patch::derive":{"id":"componere-patch.derive","purpose":"Patch Derivation","prototype":"Patch Componere\\Patch::derive(object $instance)","return":"<p class=\"para\">   <span class=\"type\">Patch<\/span> for <code class=\"parameter\">instance<\/code> derived from the current <span class=\"type\">Patch<\/span>   <\/p>","versions":"Componere 2 >= 2.1.1"},"Componere\\Patch::getClosure":{"id":"componere-patch.getclosure","purpose":"Get Closure","prototype":"\\Closure Componere\\Patch::getClosure(string $name)","return":"<p class=\"para\">   A Closure bound to the correct scope and object    <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Patch::getClosures":{"id":"componere-patch.getclosures","purpose":"Get Closures","prototype":"array Componere\\Patch::getClosures()","return":"<p class=\"para\">    Shall return all methods as an array of Closure objects bound to the correct scope and object  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Method::__construct":{"id":"componere-method.construct","purpose":"Method Construction","prototype":" Componere\\Method::__construct(\\Closure $closure)","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Method::setPrivate":{"id":"componere-method.setprivate","purpose":"Accessibility Modification","prototype":"Method Componere\\Method::setPrivate()","return":"<p class=\"para\">   The current Method  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Method::setProtected":{"id":"componere-method.setprotected","purpose":"Accessibility Modification","prototype":"Method Componere\\Method::setProtected()","return":"<p class=\"para\">   The current Method  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Method::setStatic":{"id":"componere-method.setstatic","purpose":"Accessibility Modification","prototype":"Method Componere\\Method::setStatic()","return":"<p class=\"para\">   The current Method  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Method::getReflector":{"id":"componere-method.getreflector","purpose":"Reflection","prototype":"\\ReflectionMethod Componere\\Method::getReflector()","return":"<p class=\"para\">   A ReflectionMethod for the current method (cached)  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::__construct":{"id":"componere-value.construct","purpose":"Value Construction","prototype":" Componere\\Value::__construct([ $default = ''])","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::setPrivate":{"id":"componere-value.setprivate","purpose":"Accessibility Modification","prototype":"Value Componere\\Value::setPrivate()","return":"<p class=\"para\">   The current Value  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::setProtected":{"id":"componere-value.setprotected","purpose":"Accessibility Modification","prototype":"Value Componere\\Value::setProtected()","return":"<p class=\"para\">   The current Value  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::setStatic":{"id":"componere-value.setstatic","purpose":"Accessibility Modification","prototype":"Value Componere\\Value::setStatic()","return":"<p class=\"para\">   The current Value  <\/p>","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::isPrivate":{"id":"componere-value.isprivate","purpose":"Accessibility Detection","prototype":"bool Componere\\Value::isPrivate()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::isProtected":{"id":"componere-value.isprotected","purpose":"Accessibility Detection","prototype":"bool Componere\\Value::isProtected()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::isStatic":{"id":"componere-value.isstatic","purpose":"Accessibility Detection","prototype":"bool Componere\\Value::isStatic()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\Value::hasDefault":{"id":"componere-value.hasdefault","purpose":"Value Interaction","prototype":"bool Componere\\Value::hasDefault()","return":"","versions":"Componere 2 >= 2.1.0"},"Componere\\cast":{"id":"componere.cast","purpose":"Casting","prototype":"Type Componere\\cast( $,  $object)","return":"<p class=\"para\">   An <span class=\"type\">object<\/span> of type <span class=\"exceptionname\">Type<\/span>, cast from <code class=\"parameter\">object<\/code>  <\/p>","versions":"Componere 2 >= 2.1.2"},"Componere\\cast_by_ref":{"id":"componere.cast_by_ref","purpose":"Casting","prototype":"Type Componere\\cast_by_ref( $,  $object)","return":"<p class=\"para\">   An <span class=\"type\">object<\/span> of type <span class=\"exceptionname\">Type<\/span>, cast from <code class=\"parameter\">object<\/code>, where members are references to <code class=\"parameter\">object<\/code> members  <\/p>","versions":"Componere 2 >= 2.1.2"},"debug_backtrace":{"id":"function.debug-backtrace","purpose":"Generates a backtrace","prototype":"array debug_backtrace([int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = '']])","return":"<p class=\"para\">   Returns an array of associative <span class=\"type\">array<\/span>s. The possible returned elements   are as follows:  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Possible returned elements from <span class=\"function\">debug_backtrace<\/span><\/strong><\/caption>         <thead>      <tr>       <th>Name<\/th>       <th>Type<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>function<\/td>       <td><span class=\"type\">string<\/span><\/td>       <td>        The current function name.  See also        <a href=\"language.constants.predefined.html\" class=\"link\">__FUNCTION__<\/a>.       <\/td>      <\/tr>      <tr>       <td>line<\/td>       <td><span class=\"type\">integer<\/span><\/td>       <td>        The current line number.  See also        <a href=\"language.constants.predefined.html\" class=\"link\">__LINE__<\/a>.       <\/td>      <\/tr>      <tr>       <td>file<\/td>       <td><span class=\"type\">string<\/span><\/td>       <td>        The current file name.  See also        <a href=\"language.constants.predefined.html\" class=\"link\">__FILE__<\/a>.       <\/td>      <\/tr>      <tr>       <td>class<\/td>       <td><span class=\"type\">string<\/span><\/td>       <td>        The current <a href=\"language.oop5.html\" class=\"link\">class<\/a> name.  See also        <a href=\"language.constants.predefined.html\" class=\"link\">__CLASS__<\/a>       <\/td>      <\/tr>      <tr>       <td>object<\/td>       <td><span class=\"type\">object<\/span><\/td>       <td>        The current <a href=\"language.oop5.html\" class=\"link\">object<\/a>.       <\/td>      <\/tr>      <tr>       <td>type<\/td>       <td><span class=\"type\">string<\/span><\/td>       <td>        The current call type. If a method call, &quot;-&gt;&quot; is returned. If a static        method call, &quot;::&quot; is returned. If a function call, nothing is returned.       <\/td>      <\/tr>      <tr>       <td>args<\/td>       <td><span class=\"type\">array<\/span><\/td>       <td>        If inside a function, this lists the functions arguments.  If        inside an included file, this lists the included file name(s).       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"debug_print_backtrace":{"id":"function.debug-print-backtrace","purpose":"Prints a backtrace","prototype":"void debug_print_backtrace([int $options = '' [, int $limit = '']])","return":"<p class=\"para\">     No value is returned.    <\/p>","versions":"PHP 5, PHP 7"},"error_clear_last":{"id":"function.error-clear-last","purpose":"Clear the most recent error","prototype":"void error_clear_last()","return":"<p class=\"para\">   Clears the most recent errors, making it unable to be retrieved with   <span class=\"function\">error_get_last<\/span>.  <\/p>","versions":"PHP 7"},"error_get_last":{"id":"function.error-get-last","purpose":"Get the last occurred error","prototype":"array error_get_last()","return":"<p class=\"para\">   Returns an associative array describing the last error with keys &quot;type&quot;,   &quot;message&quot;, &quot;file&quot; and &quot;line&quot;. If the error has been caused by a PHP   internal function then the &quot;message&quot; begins with its name.   Returns <strong><code>NULL<\/code><\/strong> if there hasn&#039;t been an error yet.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"error_log":{"id":"function.error-log","purpose":"Send an error message to the defined error handling routines","prototype":"bool error_log(string $message [, int $message_type = '' [, string $destination = '' [, string $extra_headers = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"error_reporting":{"id":"function.error-reporting","purpose":"Sets which PHP errors are reported","prototype":"int error_reporting([int $level = ''])","return":"<p class=\"para\">   Returns the old <a href=\"errorfunc.configuration.html#ini.error-reporting\" class=\"link\">error_reporting<\/a>   level or the current level if no <code class=\"parameter\">level<\/code> parameter is   given.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"restore_error_handler":{"id":"function.restore-error-handler","purpose":"Restores the previous error handler function","prototype":"bool restore_error_handler()","return":"<p class=\"para\">   This function always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"restore_exception_handler":{"id":"function.restore-exception-handler","purpose":"Restores the previously defined exception handler function","prototype":"bool restore_exception_handler()","return":"<p class=\"para\">   This function always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"set_error_handler":{"id":"function.set-error-handler","purpose":"Sets a user-defined error handler function","prototype":"mixed set_error_handler(callable $error_handler [, int $error_types = E_ALL | E_STRICT])","return":"<p class=\"para\">   Returns a string containing the previously defined error handler (if any). If   the built-in error handler is used <strong><code>NULL<\/code><\/strong> is returned. <strong><code>NULL<\/code><\/strong> is also returned   in case of an error such as an invalid callback. If the previous error handler   was a class method, this function will return an indexed array with the class   and the method name.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"set_exception_handler":{"id":"function.set-exception-handler","purpose":"Sets a user-defined exception handler function","prototype":"callable set_exception_handler(callable $exception_handler)","return":"<p class=\"para\">   Returns the name of the previously defined exception handler, or <strong><code>NULL<\/code><\/strong> on error. If   no previous handler was defined, <strong><code>NULL<\/code><\/strong> is also returned.  <\/p>","versions":"PHP 5, PHP 7"},"trigger_error":{"id":"function.trigger-error","purpose":"Generates a user-level error\/warning\/notice message","prototype":"bool trigger_error(string $error_msg [, int $error_type = E_USER_NOTICE])","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if wrong <code class=\"parameter\">error_type<\/code> is   specified, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"user_error":{"id":"function.user-error","purpose":"Alias of trigger_error","prototype":" user_error()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"inclued_get_data":{"id":"function.inclued-get-data","purpose":"Get the inclued data","prototype":"array inclued_get_data()","return":"<p class=\"para\">   The inclued data.  <\/p>","versions":"PECL inclued >= 0.1.0"},"opcache_compile_file":{"id":"function.opcache-compile-file","purpose":"Compiles and caches a PHP script without executing it","prototype":"bool opcache_compile_file(string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">file<\/code> was compiled successfully    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.5, PHP 7, PECL ZendOpcache > 7.0.2"},"opcache_get_configuration":{"id":"function.opcache-get-configuration","purpose":"Get configuration information about the cache","prototype":"array opcache_get_configuration()","return":"<p class=\"para\">   Returns an array of information, including ini, blacklist and version  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL ZendOpcache > 7.0.2"},"opcache_get_status":{"id":"function.opcache-get-status","purpose":"Get status information about the cache","prototype":"array opcache_get_status([bool $get_scripts = ''])","return":"<p class=\"para\">   Returns an array of information, optionally containing script specific state information  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL ZendOpcache > 7.0.2"},"opcache_invalidate":{"id":"function.opcache-invalidate","purpose":"Invalidates a cached script","prototype":"bool opcache_invalidate(string $script [, bool $force = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the opcode cache for <code class=\"parameter\">script<\/code> was   invalidated or if there was nothing to invalidate, or <strong><code>FALSE<\/code><\/strong> if the opcode   cache is disabled.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL ZendOpcache >= 7.0.0"},"opcache_is_script_cached":{"id":"function.opcache-is-script-cached","purpose":"Tells whether a script is cached in OPCache","prototype":"bool opcache_is_script_cached(string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">file<\/code> is cached in OPCache,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.5.11, PHP 7, PECL ZendOpcache >= 7.0.4"},"opcache_reset":{"id":"function.opcache-reset","purpose":"Resets the contents of the opcode cache","prototype":"bool opcache_reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the opcode cache was reset, or <strong><code>FALSE<\/code><\/strong> if the opcode   cache is disabled.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL ZendOpcache >= 7.0.0"},"flush":{"id":"function.flush","purpose":"Flush system output buffer","prototype":"void flush()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ob_clean":{"id":"function.ob-clean","purpose":"Clean (erase) the output buffer","prototype":"void ob_clean()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ob_end_clean":{"id":"function.ob-end-clean","purpose":"Clean (erase) the output buffer and turn off output buffering","prototype":"bool ob_end_clean()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. Reasons for failure are first that you called the   function without an active buffer or that for some reason a buffer could   not be deleted (possible for special buffer).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ob_end_flush":{"id":"function.ob-end-flush","purpose":"Flush (send) the output buffer and turn off output buffering","prototype":"bool ob_end_flush()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. Reasons for failure are first that you called the   function without an active buffer or that for some reason a buffer could   not be deleted (possible for special buffer).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ob_flush":{"id":"function.ob-flush","purpose":"Flush (send) the output buffer","prototype":"void ob_flush()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ob_get_clean":{"id":"function.ob-get-clean","purpose":"Get current buffer contents and delete current output buffer","prototype":"string ob_get_clean()","return":"<p class=\"para\">   Returns the contents of the output buffer and end output buffering.   If output buffering isn&#039;t active then <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ob_get_contents":{"id":"function.ob-get-contents","purpose":"Return the contents of the output buffer","prototype":"string ob_get_contents()","return":"<p class=\"para\">   This will return the contents of the output buffer or <strong><code>FALSE<\/code><\/strong>, if output   buffering isn&#039;t active.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ob_get_flush":{"id":"function.ob-get-flush","purpose":"Flush the output buffer, return it as a string and turn off output buffering","prototype":"string ob_get_flush()","return":"<p class=\"para\">   Returns the output buffer or <strong><code>FALSE<\/code><\/strong> if no buffering is active.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ob_get_length":{"id":"function.ob-get-length","purpose":"Return the length of the output buffer","prototype":"int ob_get_length()","return":"<p class=\"para\">   Returns the length of the output buffer contents, in bytes, or <strong><code>FALSE<\/code><\/strong> if no   buffering is active.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"ob_get_level":{"id":"function.ob-get-level","purpose":"Return the nesting level of the output buffering mechanism","prototype":"int ob_get_level()","return":"<p class=\"para\">   Returns the level of nested output buffering handlers or zero if output   buffering is not active.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ob_get_status":{"id":"function.ob-get-status","purpose":"Get status of output buffers","prototype":"array ob_get_status([bool $full_status = FALSE])","return":"<p class=\"para\">   If called without the <code class=\"parameter\">full_status<\/code> parameter   or with <code class=\"parameter\">full_status<\/code> = <strong><code>FALSE<\/code><\/strong> a simple array   with the following elements is returned:   <div class=\"informalexample\">    <div class=\"example-contents screen\"><div class=\"cdata\"><pre>Array(    [level] =&gt; 2    [type] =&gt; 0    [status] =&gt; 0    [name] =&gt; URL-Rewriter    [del] =&gt; 1)<\/pre><\/div>    <\/div>   <\/div>   <table class=\"segmentedlist\">    <caption><strong>Simple <span class=\"function\">ob_get_status<\/span> results<\/strong><\/caption>    <thead><tr><th>Key<\/th><th>Value<\/th>    <\/tr><\/thead><tbody><tr class=\"seglistitem\"><td class=\"seg\">level<\/td><td class=\"seg\">Output nesting level<\/td><\/tr>    <tr class=\"seglistitem\"><td class=\"seg\">type<\/td><td class=\"seg\"><em>PHP_OUTPUT_HANDLER_INTERNAL (0)<\/em> or <em>PHP_OUTPUT_HANDLER_USER (1)<\/em><\/td><\/tr>    <tr class=\"seglistitem\"><td class=\"seg\">status<\/td><td class=\"seg\">One of <em>PHP_OUTPUT_HANDLER_START<\/em> (0), <em>PHP_OUTPUT_HANDLER_CONT<\/em> (1) or <em>PHP_OUTPUT_HANDLER_END<\/em> (2)<\/td><\/tr>    <tr class=\"seglistitem\"><td class=\"seg\">name<\/td><td class=\"seg\">Name of active output handler or &#039; default output handler&#039; if none is set<\/td><\/tr>    <tr class=\"seglistitem\"><td class=\"seg\">del<\/td><td class=\"seg\">Erase-flag as set by <span class=\"function\">ob_start<\/span><\/td><\/tr>   <\/tbody><\/table>  <\/p>  <p class=\"para\">   If called with <code class=\"parameter\">full_status<\/code> = <strong><code>TRUE<\/code><\/strong> an array   with one element for each active output buffer level is returned.   The output level is used as key of the top level array and each array   element itself is another array holding status information   on one active output level.   <div class=\"informalexample\">    <div class=\"example-contents screen\"><div class=\"cdata\"><pre>Array(    [0] =&gt; Array        (            [chunk_size] =&gt; 0            [size] =&gt; 40960            [block_size] =&gt; 10240            [type] =&gt; 1            [status] =&gt; 0            [name] =&gt; default output handler            [del] =&gt; 1        )    [1] =&gt; Array        (            [chunk_size] =&gt; 0            [size] =&gt; 40960            [block_size] =&gt; 10240            [type] =&gt; 0            [buffer_size] =&gt; 0            [status] =&gt; 0            [name] =&gt; URL-Rewriter            [del] =&gt; 1        ))<\/pre><\/div>    <\/div>   <\/div>  <\/p>  <p class=\"para\">   The full output contains these additional elements:   <table class=\"segmentedlist\">    <caption><strong>Full <span class=\"function\">ob_get_status<\/span> results<\/strong><\/caption>    <thead><tr><th>Key<\/th><th>Value<\/th>    <\/tr><\/thead><tbody><tr class=\"seglistitem\"><td class=\"seg\">chunk_size<\/td><td class=\"seg\">Chunk size as set by <span class=\"function\">ob_start<\/span><\/td><\/tr>    <tr class=\"seglistitem\"><td class=\"seg\">size<\/td><td class=\"seg\">...<\/td><\/tr>    <tr class=\"seglistitem\"><td class=\"seg\">blocksize<\/td><td class=\"seg\">...<\/td><\/tr>   <\/tbody><\/table>  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ob_gzhandler":{"id":"function.ob-gzhandler","purpose":"ob_start callback function to gzip output buffer","prototype":"string ob_gzhandler(string $buffer, int $mode)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ob_implicit_flush":{"id":"function.ob-implicit-flush","purpose":"Turn implicit flush on\/off","prototype":"void ob_implicit_flush([int $flag = 1])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ob_list_handlers":{"id":"function.ob-list-handlers","purpose":"List all output handlers in use","prototype":"array ob_list_handlers()","return":"<p class=\"para\">   This will return an array with the output handlers in use (if any). If   <a href=\"outcontrol.configuration.html#ini.output-buffering\" class=\"link\">output_buffering<\/a> is enabled or   an anonymous function was used with <span class=\"function\">ob_start<\/span>,   <span class=\"function\">ob_list_handlers<\/span> will return &quot;default output   handler&quot;.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ob_start":{"id":"function.ob-start","purpose":"Turn on output buffering","prototype":"bool ob_start([callable $output_callback = '' [, int $chunk_size = '' [, int $flags = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"output_add_rewrite_var":{"id":"function.output-add-rewrite-var","purpose":"Add URL rewriter values","prototype":"bool output_add_rewrite_var(string $name, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"output_reset_rewrite_vars":{"id":"function.output-reset-rewrite-vars","purpose":"Reset URL rewriter values","prototype":"bool output_reset_rewrite_vars()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"assert_options":{"id":"function.assert-options","purpose":"Set\/get the various assert flags","prototype":"mixed assert_options(int $what [, mixed $value = ''])","return":"<p class=\"para\">   Returns the original setting of any option or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"assert":{"id":"function.assert","purpose":"Checks if assertion is FALSE","prototype":"bool assert(mixed $assertion [, string $description = '' [, Throwable $exception = '']])","return":"<p class=\"para\">   <strong><code>FALSE<\/code><\/strong> if the assertion is false, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"cli_get_process_title":{"id":"function.cli-get-process-title","purpose":"Returns the current process title","prototype":"string cli_get_process_title()","return":"<p class=\"para\">   Return a string with the current process title or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"cli_set_process_title":{"id":"function.cli-set-process-title","purpose":"Sets the process title","prototype":"bool cli_set_process_title(string $title)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"dl":{"id":"function.dl","purpose":"Loads a PHP extension at runtime","prototype":"bool dl(string $library)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. If the functionality of loading modules is not available   or has been disabled (either by setting   <a href=\"info.configuration.html#ini.enable-dl\" class=\"link\">enable_dl<\/a> off or by enabling <a href=\"ini.sect.safe-mode.html#ini.safe-mode\" class=\"link\">safe mode<\/a>   in <var class=\"filename\">php.ini<\/var>) an <strong><code>E_ERROR<\/code><\/strong> is emitted   and execution is stopped. If <span class=\"function\">dl<\/span> fails because the   specified library couldn&#039;t be loaded, in addition to <strong><code>FALSE<\/code><\/strong> an   <strong><code>E_WARNING<\/code><\/strong> message is emitted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"extension_loaded":{"id":"function.extension-loaded","purpose":"Find out whether an extension is loaded","prototype":"bool extension_loaded(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the extension identified by <code class=\"parameter\">name<\/code>   is loaded, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gc_collect_cycles":{"id":"function.gc-collect-cycles","purpose":"Forces collection of any existing garbage cycles","prototype":"int gc_collect_cycles()","return":"<p class=\"para\">   Returns number of collected cycles.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"gc_disable":{"id":"function.gc-disable","purpose":"Deactivates the circular reference collector","prototype":"void gc_disable()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"gc_enable":{"id":"function.gc-enable","purpose":"Activates the circular reference collector","prototype":"void gc_enable()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"gc_enabled":{"id":"function.gc-enabled","purpose":"Returns status of the circular reference collector","prototype":"bool gc_enabled()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the garbage collector is enabled, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"gc_mem_caches":{"id":"function.gc-mem-caches","purpose":"Reclaims memory used by the Zend Engine memory manager","prototype":"int gc_mem_caches()","return":"<p class=\"para\">   Returns the number of bytes freed.  <\/p>","versions":"PHP 7"},"get_cfg_var":{"id":"function.get-cfg-var","purpose":"Gets the value of a PHP configuration option","prototype":"mixed get_cfg_var(string $option)","return":"<p class=\"para\">   Returns the current value of the PHP configuration variable specified by   <code class=\"parameter\">option<\/code>, or <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_current_user":{"id":"function.get-current-user","purpose":"Gets the name of the owner of the current PHP script","prototype":"string get_current_user()","return":"<p class=\"para\">   Returns the username as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_defined_constants":{"id":"function.get-defined-constants","purpose":"Returns an associative array with the names of all the constants and their values","prototype":"array get_defined_constants([bool $categorize = ''])","return":"<p class=\"para\">   Returns an array of constant name =&gt; constant value array, optionally   groupped by extension name registering the constant.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"get_extension_funcs":{"id":"function.get-extension-funcs","purpose":"Returns an array with the names of the functions of a module","prototype":"array get_extension_funcs(string $module_name)","return":"<p class=\"para\">   Returns an array with all the functions, or <strong><code>FALSE<\/code><\/strong> if    <code class=\"parameter\">module_name<\/code> is not a valid extension.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_include_path":{"id":"function.get-include-path","purpose":"Gets the current include_path configuration option","prototype":"string get_include_path()","return":"<p class=\"para\">   Returns the path, as a string.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"get_included_files":{"id":"function.get-included-files","purpose":"Returns an array with the names of included or required files","prototype":"array get_included_files()","return":"<p class=\"para\">   Returns an array of the names of all files.  <\/p>  <p class=\"para\">   The script originally called is considered an &quot;included file,&quot; so it will   be listed together with the files referenced by    <span class=\"function\">include<\/span> and family.  <\/p>  <p class=\"para\">   Files that are included or required multiple times only show up once in   the returned array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_loaded_extensions":{"id":"function.get-loaded-extensions","purpose":"Returns an array with the names of all modules compiled and loaded","prototype":"array get_loaded_extensions([bool $zend_extensions = ''])","return":"<p class=\"para\">   Returns an indexed array of all the modules names.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_magic_quotes_gpc":{"id":"function.get-magic-quotes-gpc","purpose":"Gets the current configuration setting of magic_quotes_gpc","prototype":"bool get_magic_quotes_gpc()","return":"<p class=\"para\">   Returns 0 if magic_quotes_gpc is off, 1 otherwise.    Or always returns <strong><code>FALSE<\/code><\/strong> as of PHP 5.4.0.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_magic_quotes_runtime":{"id":"function.get-magic-quotes-runtime","purpose":"Gets the current active configuration setting of magic_quotes_runtime","prototype":"bool get_magic_quotes_runtime()","return":"<p class=\"para\">   Returns 0 if magic_quotes_runtime is off, 1 otherwise.    Or always returns <strong><code>FALSE<\/code><\/strong> as of PHP 5.4.0.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_required_files":{"id":"function.get-required-files","purpose":"Alias of get_included_files","prototype":" get_required_files()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"get_resources":{"id":"function.get-resources","purpose":"Returns active resources","prototype":"resource get_resources([string $type = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> of currently active resources, indexed by   resource number.  <\/p>","versions":"PHP 7"},"getenv":{"id":"function.getenv","purpose":"Gets the value of an environment variable","prototype":"array getenv(string $varname [, bool $local_only = ''])","return":"<p class=\"para\">   Returns the value of the environment variable   <code class=\"parameter\">varname<\/code>, or <strong><code>FALSE<\/code><\/strong> if the environment   variable <code class=\"parameter\">varname<\/code> does not exist.   If <code class=\"parameter\">varname<\/code> is omitted, all environment variables are   returned as associative <span class=\"type\">array<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getlastmod":{"id":"function.getlastmod","purpose":"Gets time of last page modification","prototype":"int getlastmod()","return":"<p class=\"para\">   Returns the time of the last modification of the current   page. The value returned is a Unix timestamp, suitable for   feeding to <span class=\"function\">date<\/span>. Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getmygid":{"id":"function.getmygid","purpose":"Get PHP script owner's GID","prototype":"int getmygid()","return":"<p class=\"para\">   Returns the group ID of the current script, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"getmyinode":{"id":"function.getmyinode","purpose":"Gets the inode of the current script","prototype":"int getmyinode()","return":"<p class=\"para\">   Returns the current script&#039;s inode as an integer, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getmypid":{"id":"function.getmypid","purpose":"Gets PHP's process ID","prototype":"int getmypid()","return":"<p class=\"para\">   Returns the current PHP process ID, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getmyuid":{"id":"function.getmyuid","purpose":"Gets PHP script owner's UID","prototype":"int getmyuid()","return":"<p class=\"para\">   Returns the user ID of the current script, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getopt":{"id":"function.getopt","purpose":"Gets options from the command line argument list","prototype":"array getopt(string $options [, array $longopts = '' [, int $optind = '']])","return":"<p class=\"para\">   This function will return an array of option \/ argument pairs,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The parsing of options will end at the first non-option found, anything    that follows is discarded.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"getrusage":{"id":"function.getrusage","purpose":"Gets the current resource usages","prototype":"array getrusage([int $who = ''])","return":"<p class=\"para\">   Returns an associative array containing the data returned from the system   call. All entries are accessible by using their documented field names.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ini_alter":{"id":"function.ini-alter","purpose":"Alias of ini_set","prototype":" ini_alter()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"ini_get_all":{"id":"function.ini-get-all","purpose":"Gets all configuration options","prototype":"array ini_get_all([string $extension = '' [, bool $details = '']])","return":"<p class=\"para\">   Returns an associative array with directive name as the array key.  <\/p>  <p class=\"para\">   When <code class=\"parameter\">details<\/code> is <strong><code>TRUE<\/code><\/strong> (default) the array will   contain <em>global_value<\/em> (set in   <var class=\"filename\">php.ini<\/var>), <em>local_value<\/em> (perhaps set with   <span class=\"function\">ini_set<\/span> or <var class=\"filename\">.htaccess<\/var>), and   <em>access<\/em> (the access level).  <\/p>  <p class=\"para\">   When <code class=\"parameter\">details<\/code> is <strong><code>FALSE<\/code><\/strong> the value will be the   current value of the option.  <\/p>  <p class=\"para\">   See the <a href=\"configuration.changes.modes.html\" class=\"link\">manual section<\/a>   for information on what access levels mean.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    It&#039;s possible for a directive to have multiple access levels, which is    why <em>access<\/em> shows the appropriate bitmask values.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ini_get":{"id":"function.ini-get","purpose":"Gets the value of a configuration option","prototype":"string ini_get(string $varname)","return":"<p class=\"para\">   Returns the value of the configuration option as a string on success, or an   empty string for <em>null<\/em> values. Returns <strong><code>FALSE<\/code><\/strong> if the   configuration option doesn&#039;t exist.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ini_restore":{"id":"function.ini-restore","purpose":"Restores the value of a configuration option","prototype":"void ini_restore(string $varname)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ini_set":{"id":"function.ini-set","purpose":"Sets the value of a configuration option","prototype":"string ini_set(string $varname, string $newvalue)","return":"<p class=\"para\">   Returns the old value on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"magic_quotes_runtime":{"id":"function.magic-quotes-runtime","purpose":"Alias of set_magic_quotes_runtime","prototype":" magic_quotes_runtime()","return":"","versions":"PHP 4, PHP 5"},"main":{"id":"function.main","purpose":"Dummy for main","prototype":" main()","return":"","versions":""},"memory_get_peak_usage":{"id":"function.memory-get-peak-usage","purpose":"Returns the peak of memory allocated by PHP","prototype":"int memory_get_peak_usage([bool $real_usage = ''])","return":"<p class=\"para\">   Returns the memory peak in bytes.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"memory_get_usage":{"id":"function.memory-get-usage","purpose":"Returns the amount of memory allocated to PHP","prototype":"int memory_get_usage([bool $real_usage = ''])","return":"<p class=\"para\">   Returns the memory amount in bytes.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"php_ini_loaded_file":{"id":"function.php-ini-loaded-file","purpose":"Retrieve a path to the loaded php.ini file","prototype":"string php_ini_loaded_file()","return":"<p class=\"para\">   The loaded <var class=\"filename\">php.ini<\/var> path, or <strong><code>FALSE<\/code><\/strong> if one is not loaded.  <\/p>","versions":"PHP 5 >= 5.2.4, PHP 7"},"php_ini_scanned_files":{"id":"function.php-ini-scanned-files","purpose":"Return a list of .ini files parsed from the additional ini dir","prototype":"string php_ini_scanned_files()","return":"<p class=\"para\">   Returns a comma-separated string of .ini files on success. Each comma is   followed by a newline. If the configure directive <strong class=\"option configure\">--with-config-file-scan-dir<\/strong> wasn&#039;t set and the   <var class=\"varname\">PHP_INI_SCAN_DIR<\/var> environment variable isn&#039;t set, <strong><code>FALSE<\/code><\/strong>   is returned.  If it was set and the directory was empty, an empty string is   returned.  If a file is unrecognizable, the file will still make it into   the returned string but a PHP error will also result.  This PHP error will   be seen both at compile time and while using   <span class=\"function\">php_ini_scanned_files<\/span>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"php_logo_guid":{"id":"function.php-logo-guid","purpose":"Gets the logo guid","prototype":"string php_logo_guid()","return":"<p class=\"para\">   Returns <em>PHPE9568F34-D428-11d2-A769-00AA001ACF42<\/em>.  <\/p>","versions":"PHP 4, PHP 5 < 5.5.0"},"php_sapi_name":{"id":"function.php-sapi-name","purpose":"Returns the type of interface between web server and PHP","prototype":"string php_sapi_name()","return":"<p class=\"para\">   Returns the interface type, as a lowercase string.  <\/p>  <p class=\"para\">   Although not exhaustive, the possible return values include    <em>aolserver<\/em>, <em>apache<\/em>,    <em>apache2filter<\/em>, <em>apache2handler<\/em>,    <em>caudium<\/em>, <em>cgi<\/em> (until PHP 5.3),    <em>cgi-fcgi<\/em>, <em>cli<\/em>, <em>cli-server<\/em>,   <em>continuity<\/em>, <em>embed<\/em>, <em>fpm-fcgi<\/em>,   <em>isapi<\/em>, <em>litespeed<\/em>,    <em>milter<\/em>, <em>nsapi<\/em>,    <em>phttpd<\/em>, <em>pi3web<\/em>, <em>roxen<\/em>,   <em>thttpd<\/em>, <em>tux<\/em>, and <em>webjames<\/em>.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"php_uname":{"id":"function.php-uname","purpose":"Returns information about the operating system PHP is running on","prototype":"string php_uname([string $mode = \"a\"])","return":"<p class=\"para\">   Returns the description, as a string.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"phpcredits":{"id":"function.phpcredits","purpose":"Prints out the credits for PHP","prototype":"bool phpcredits([int $flag = CREDITS_ALL])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"phpinfo":{"id":"function.phpinfo","purpose":"Outputs information about PHP's configuration","prototype":"bool phpinfo([int $what = INFO_ALL])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"phpversion":{"id":"function.phpversion","purpose":"Gets the current PHP version","prototype":"string phpversion([string $extension = ''])","return":"<p class=\"para\">   If the optional <code class=\"parameter\">extension<\/code> parameter is   specified, <span class=\"function\">phpversion<\/span> returns the version of that   extension, or <strong><code>FALSE<\/code><\/strong> if there is no version information associated or   the extension isn&#039;t enabled.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"putenv":{"id":"function.putenv","purpose":"Sets the value of an environment variable","prototype":"bool putenv(string $setting)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"restore_include_path":{"id":"function.restore-include-path","purpose":"Restores the value of the include_path configuration option","prototype":"void restore_include_path()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"set_include_path":{"id":"function.set-include-path","purpose":"Sets the include_path configuration option","prototype":"string set_include_path(string $new_include_path)","return":"<p class=\"para\">   Returns the old <a href=\"ini.core.html#ini.include-path\" class=\"link\">include_path<\/a> on   success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"set_magic_quotes_runtime":{"id":"function.set-magic-quotes-runtime","purpose":"Sets the current active configuration setting of magic_quotes_runtime","prototype":"bool set_magic_quotes_runtime(bool $new_setting)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"set_time_limit":{"id":"function.set-time-limit","purpose":"Limits the maximum execution time","prototype":"bool set_time_limit(int $seconds)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sys_get_temp_dir":{"id":"function.sys-get-temp-dir","purpose":"Returns directory path used for temporary files","prototype":"string sys_get_temp_dir()","return":"<p class=\"para\">   Returns the path of the temporary directory.  <\/p>","versions":"PHP 5 >= 5.2.1, PHP 7"},"version_compare":{"id":"function.version-compare","purpose":"Compares two \"PHP-standardized\" version number strings","prototype":"bool version_compare(string $version1, string $version2, string $operator)","return":"<p class=\"para\">   By default, <span class=\"function\">version_compare<\/span> returns   <em>-1<\/em> if the first version is lower than the second,    <em>0<\/em> if they are equal, and   <em>1<\/em> if the second is lower.   <\/p>  <p class=\"para\">   When using the optional <code class=\"parameter\">operator<\/code> argument, the   function will return <strong><code>TRUE<\/code><\/strong> if the relationship is the one specified   by the operator, <strong><code>FALSE<\/code><\/strong> otherwise.     <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"zend_logo_guid":{"id":"function.zend-logo-guid","purpose":"Gets the Zend guid","prototype":"string zend_logo_guid()","return":"<p class=\"para\">   Returns <em>PHPE9568F35-D428-11d2-A769-00AA001ACF42<\/em>.  <\/p>","versions":"PHP 4, PHP < 5.5.0"},"zend_thread_id":{"id":"function.zend-thread-id","purpose":"Returns a unique identifier for the current thread","prototype":"int zend_thread_id()","return":"<p class=\"para\">   Returns the thread id as an integer.  <\/p>","versions":"PHP 5, PHP 7"},"zend_version":{"id":"function.zend-version","purpose":"Gets the version of the current Zend engine","prototype":"string zend_version()","return":"<p class=\"para\">   Returns the Zend Engine version number, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"Runkit_Sandbox":{"id":"runkit.sandbox","purpose":"Runkit Sandbox Class -- PHP Virtual Machine","prototype":" Runkit_Sandbox()","return":"","versions":"PECL runkit >= 0.7.0"},"Runkit_Sandbox_Parent":{"id":"runkit.sandbox-parent","purpose":"Runkit Anti-Sandbox Class","prototype":"void Runkit_Sandbox_Parent()","return":"","versions":"PECL runkit >= 0.7.0"},"runkit_class_adopt":{"id":"function.runkit-class-adopt","purpose":"Convert a base class to an inherited class, add ancestral methods when appropriate","prototype":"bool runkit_class_adopt(string $classname, string $parentname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_class_emancipate":{"id":"function.runkit-class-emancipate","purpose":"Convert an inherited class to a base class, removes any method whose scope is ancestral","prototype":"bool runkit_class_emancipate(string $classname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_constant_add":{"id":"function.runkit-constant-add","purpose":"Similar to define(), but allows defining in class definitions as well","prototype":"bool runkit_constant_add(string $constname, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_constant_redefine":{"id":"function.runkit-constant-redefine","purpose":"Redefine an already defined constant","prototype":"bool runkit_constant_redefine(string $constname, mixed $newvalue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_constant_remove":{"id":"function.runkit-constant-remove","purpose":"Remove\/Delete an already defined constant","prototype":"bool runkit_constant_remove(string $constname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_function_add":{"id":"function.runkit-function-add","purpose":"Add a new function, similar to create_function","prototype":"bool runkit_function_add(string $funcname, string $arglist, string $code [, bool $return_by_reference = '' [, string $doc_comment = '', Closure $closure]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_function_copy":{"id":"function.runkit-function-copy","purpose":"Copy a function to a new function name","prototype":"bool runkit_function_copy(string $funcname, string $targetname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_function_redefine":{"id":"function.runkit-function-redefine","purpose":"Replace a function definition with a new implementation","prototype":"bool runkit_function_redefine(string $funcname, string $arglist, string $code [, bool $return_by_reference = '' [, string $doc_comment = '', Closure $closure]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_function_remove":{"id":"function.runkit-function-remove","purpose":"Remove a function definition","prototype":"bool runkit_function_remove(string $funcname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_function_rename":{"id":"function.runkit-function-rename","purpose":"Change a function's name","prototype":"bool runkit_function_rename(string $funcname, string $newname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_import":{"id":"function.runkit-import","purpose":"Process a PHP file importing function and class definitions, overwriting where appropriate","prototype":"bool runkit_import(string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_lint_file":{"id":"function.runkit-lint-file","purpose":"Check the PHP syntax of the specified file","prototype":"bool runkit_lint_file(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_lint":{"id":"function.runkit-lint","purpose":"Check the PHP syntax of the specified php code","prototype":"bool runkit_lint(string $code)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_method_add":{"id":"function.runkit-method-add","purpose":"Dynamically adds a new method to a given class","prototype":"bool runkit_method_add(string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = '', Closure $closure]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_method_copy":{"id":"function.runkit-method-copy","purpose":"Copies a method from class to another","prototype":"bool runkit_method_copy(string $dClass, string $dMethod, string $sClass [, string $sMethod = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_method_redefine":{"id":"function.runkit-method-redefine","purpose":"Dynamically changes the code of the given method","prototype":"bool runkit_method_redefine(string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = '', Closure $closure]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_method_remove":{"id":"function.runkit-method-remove","purpose":"Dynamically removes the given method","prototype":"bool runkit_method_remove(string $classname, string $methodname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_method_rename":{"id":"function.runkit-method-rename","purpose":"Dynamically changes the name of the given method","prototype":"bool runkit_method_rename(string $classname, string $methodname, string $newname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_return_value_used":{"id":"function.runkit-return-value-used","purpose":"Determines if the current functions return value will be used","prototype":"bool runkit_return_value_used()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the function&#039;s return value is used by the calling scope,   otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL runkit >= 0.8.0"},"runkit_sandbox_output_handler":{"id":"function.runkit-sandbox-output-handler","purpose":"Specify a function to capture and\/or process output from a runkit sandbox","prototype":"mixed runkit_sandbox_output_handler(object $sandbox [, mixed $callback = ''])","return":"<p class=\"para\">   Returns the name of the previously defined output handler callback, or   <strong><code>FALSE<\/code><\/strong> if no handler was previously defined.  <\/p>","versions":"PECL runkit >= 0.7.0"},"runkit_superglobals":{"id":"function.runkit-superglobals","purpose":"Return numerically indexed array of registered superglobals","prototype":"array runkit_superglobals()","return":"<p class=\"para\">   Returns a numerically indexed array of the currently registered superglobals.   i.e. _GET, _POST, _REQUEST, _COOKIE, _SESSION, _SERVER, _ENV, _FILES  <\/p>","versions":"PECL runkit >= 0.7.0"},"uopz_allow_exit":{"id":"function.uopz-allow-exit","purpose":"Allows control over disabled exit opcode","prototype":"void uopz_allow_exit(bool $allow)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL uopz 5"},"uopz_backup":{"id":"function.uopz-backup","purpose":"Backup a function","prototype":"void uopz_backup([string $class = '', string $function])","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1 >= 1.0.3, PECL uopz 2"},"uopz_compose":{"id":"function.uopz-compose","purpose":"Compose a class","prototype":"void uopz_compose(string $name, array $classes [, array $methods = '' [, array $properties = '' [, int $flags = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1, PECL uopz 2"},"uopz_copy":{"id":"function.uopz-copy","purpose":"Copy a function","prototype":"Closure uopz_copy([string $class = '', string $function])","return":"<p class=\"para\">   A Closure for the specified function  <\/p>","versions":"PECL uopz 1 >= 1.0.4, PECL uopz 2"},"uopz_delete":{"id":"function.uopz-delete","purpose":"Delete a function","prototype":"void uopz_delete([string $class = '', string $function])","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1, PECL uopz 2"},"uopz_extend":{"id":"function.uopz-extend","purpose":"Extend a class at runtime","prototype":"bool uopz_extend(string $class, string $parent)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL uopz 1, PECL uopz 2, PECL uopz 5"},"uopz_flags":{"id":"function.uopz-flags","purpose":"Get or set flags on function or class","prototype":"int uopz_flags([string $class = '', string $function, int $flags])","return":"<p class=\"para\"> If setting, returns old flags, else returns flags  <\/p>","versions":"PECL uopz 2 >= 2.0.2, PECL uopz 5"},"uopz_function":{"id":"function.uopz-function","purpose":"Creates a function at runtime","prototype":"void uopz_function([string $class = '', string $function, Closure $handler [, int $modifiers = '']])","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1, PECL uopz 2"},"uopz_get_exit_status":{"id":"function.uopz-get-exit-status","purpose":"Retrieve the last set exit status","prototype":"mixed uopz_get_exit_status()","return":"<p class=\"para\">   This function returns the last exit status, or <strong><code>NULL<\/code><\/strong> if <span class=\"function\">exit<\/span>   has not been called.  <\/p>","versions":"PECL uopz 5"},"uopz_get_mock":{"id":"function.uopz-get-mock","purpose":"Get the current mock for a class","prototype":"mixed uopz_get_mock(string $class)","return":"<p class=\"para\">         Either a string containing the name of the mock, or an object,         or <strong><code>NULL<\/code><\/strong> if no mock has been set.      <\/p>","versions":"PECL uopz 5"},"uopz_get_return":{"id":"function.uopz-get-return","purpose":"Gets a previous set return value for a function","prototype":"mixed uopz_get_return([string $class = '', string $function])","return":"<p class=\"para\">  The return value or Closure previously set.  <\/p>","versions":"PECL uopz 5"},"uopz_implement":{"id":"function.uopz-implement","purpose":"Implements an interface at runtime","prototype":"bool uopz_implement(string $class, string $interface)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL uopz 1, PECL uopz 2, PECL uopz 5"},"uopz_overload":{"id":"function.uopz-overload","purpose":"Overload a VM opcode","prototype":"void uopz_overload(int $opcode, Callable $callable)","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1, PECL uopz 2"},"uopz_redefine":{"id":"function.uopz-redefine","purpose":"Redefine a constant","prototype":"bool uopz_redefine([string $class = '', string $constant, mixed $value])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL uopz 1, PECL uopz 2, PECL uopz 5"},"uopz_rename":{"id":"function.uopz-rename","purpose":"Rename a function at runtime","prototype":"void uopz_rename([string $class = '', string $function, string $rename])","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1, PECL uopz 2"},"uopz_restore":{"id":"function.uopz-restore","purpose":"Restore a previously backed up function","prototype":"void uopz_restore([string $class = '', string $function])","return":"<p class=\"para\">     <\/p>","versions":"PECL uopz 1 >= 1.0.3, PECL uopz 2"},"uopz_set_mock":{"id":"function.uopz-set-mock","purpose":"Use mock instead of class for new objects","prototype":"void uopz_set_mock(string $class, mixed $mock)","return":"","versions":"PECL uopz 5"},"uopz_set_return":{"id":"function.uopz-set-return","purpose":"Provide a return value for an existing function","prototype":"bool uopz_set_return([string $class = '', string $function, mixed $value [, bool $execute = '']])","return":"<p class=\"para\">  True if succeeded, false otherwise.  <\/p>","versions":"PECL uopz 5"},"uopz_undefine":{"id":"function.uopz-undefine","purpose":"Undefine a constant","prototype":"bool uopz_undefine([string $class = '', string $constant])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL uopz 1, PECL uopz 2, PECL uopz 5"},"uopz_unset_mock":{"id":"function.uopz-unset-mock","purpose":"Unset previously set mock","prototype":"void uopz_unset_mock(string $class)","return":"","versions":"PECL uopz 5"},"uopz_unset_return":{"id":"function.uopz-unset-return","purpose":"Unsets a previously set return value for a function","prototype":"bool uopz_unset_return([string $class = '', string $function])","return":"<p class=\"para\">  True on success  <\/p>","versions":"PECL uopz 5"},"Weakref::acquire":{"id":"weakref.acquire","purpose":"Acquires a strong reference on that object","prototype":"bool Weakref::acquire()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the reference was valid and could be turned into a strong   reference, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL weakref >= 0.1.0"},"Weakref::__construct":{"id":"weakref.construct","purpose":"Constructs a new weak reference","prototype":" Weakref::__construct(object $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL weakref >= 0.1.0"},"Weakref::get":{"id":"weakref.get","purpose":"Returns the object pointed to by the weak reference","prototype":"object Weakref::get()","return":"<p class=\"para\">   Returns the object if the reference is still valid, <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PECL weakref >= 0.1.0"},"Weakref::release":{"id":"weakref.release","purpose":"Releases a previously acquired reference","prototype":"bool Weakref::release()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the reference was previously acquired and thus could be   released, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL weakref >= 0.1.0"},"Weakref::valid":{"id":"weakref.valid","purpose":"Checks whether the object referenced still exists","prototype":"bool Weakref::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the object still exists and is thus still accessible via    <span class=\"methodname\">Weakref::get<\/span>, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL weakref >= 0.1.0"},"WeakMap::__construct":{"id":"weakmap.construct","purpose":"Constructs a new map","prototype":" WeakMap::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::count":{"id":"weakmap.count","purpose":"Counts the number of live entries in the map","prototype":"int WeakMap::count()","return":"<p class=\"para\">   Returns the number of live entries in the map.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::current":{"id":"weakmap.current","purpose":"Returns the current value under iteration","prototype":"mixed WeakMap::current()","return":"<p class=\"para\">   The value currently being iterated on.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::key":{"id":"weakmap.key","purpose":"Returns the current key under iteration","prototype":"object WeakMap::key()","return":"<p class=\"para\">   The object key currently being iterated.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::next":{"id":"weakmap.next","purpose":"Advances to the next map element","prototype":"void WeakMap::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::offsetExists":{"id":"weakmap.offsetexists","purpose":"Checks whether a certain object is in the map","prototype":"bool WeakMap::offsetExists(object $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the object is contained in the map, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::offsetGet":{"id":"weakmap.offsetget","purpose":"Returns the value pointed to by a certain object","prototype":"mixed WeakMap::offsetGet(object $object)","return":"<p class=\"para\">   Returns the value associated to the object passed as argument, <strong><code>NULL<\/code><\/strong>   otherwise.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::offsetSet":{"id":"weakmap.offsetset","purpose":"Updates the map with a new key-value pair","prototype":"void WeakMap::offsetSet(object $object, mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::offsetUnset":{"id":"weakmap.offsetunset","purpose":"Removes an entry from the map","prototype":"void WeakMap::offsetUnset(object $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::rewind":{"id":"weakmap.rewind","purpose":"Rewinds the iterator to the beginning of the map","prototype":"void WeakMap::rewind()","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL weakref >= 0.2.0"},"WeakMap::valid":{"id":"weakmap.valid","purpose":"Returns whether the iterator is still on a valid map element","prototype":"bool WeakMap::valid()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the iterator is on a valid element that can be    accessed, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL weakref >= 0.2.0"},"wincache_fcache_fileinfo":{"id":"function.wincache-fcache-fileinfo","purpose":"Retrieves information about files cached in the file cache","prototype":"array wincache_fcache_fileinfo([bool $summaryonly = ''])","return":"<p class=\"para\">   Array of meta data about file cache  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_cache_uptime<\/em> - total time in seconds that the file cache has been active     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_file_count<\/em> - total number of files that are currently in the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_hit_count<\/em> - number of times the files have been served from the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_miss_count<\/em> - number of times the files have not been found in the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <em>file_entries<\/em> - an array that contains the information about all the cached files:      <ul class=\"itemizedlist\">       <li class=\"listitem\">        <span class=\"simpara\">         <em>file_name<\/em> - absolute file name of the cached file        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>add_time<\/em> - time in seconds since the file has been added to the file cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>use_time<\/em> - time in seconds since the file has been accessed in the file cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>last_check<\/em> - time in seconds since the file has been checked for modifications        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>hit_count<\/em> - number of times the file has been served from the cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>file_size<\/em> - size of the cached file in bytes        <\/span>       <\/li>      <\/ul>     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.0.0"},"wincache_fcache_meminfo":{"id":"function.wincache-fcache-meminfo","purpose":"Retrieves information about file cache memory usage","prototype":"array wincache_fcache_meminfo()","return":"<p class=\"para\">   Array of meta data about file cache memory usage  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_total<\/em> - amount of memory in bytes allocated for the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_free<\/em> - amount of free memory in bytes available for the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_used_blks<\/em> - number of memory blocks used by the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_free_blks<\/em> - number of free memory blocks available for the file cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_overhead<\/em> - amount of memory in bytes used for the file cache internal structures     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.0.0"},"wincache_lock":{"id":"function.wincache-lock","purpose":"Acquires an exclusive lock on a given key","prototype":"bool wincache_lock(string $key [, bool $isglobal = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ocache_fileinfo":{"id":"function.wincache-ocache-fileinfo","purpose":"Retrieves information about files cached in the opcode cache","prototype":"array wincache_ocache_fileinfo([bool $summaryonly = ''])","return":"<p class=\"para\">   Array of meta data about opcode cache  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_cache_uptime<\/em> - total time in seconds that the opcode cache has been active     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_file_count<\/em> - total number of files that are currently in the opcode cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_hit_count<\/em> - number of times the compiled opcode have been served from the cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_miss_count<\/em> - number of times the compiled opcode have not been found in the cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>is_local_cache<\/em> - true is the cache metadata is for a local cache instance,        false if the metadata is for the global cache     <\/span>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <em>file_entries<\/em> - an array that contains the information about all the cached files:      <ul class=\"itemizedlist\">       <li class=\"listitem\">        <span class=\"simpara\">         <em>file_name<\/em> - absolute file name of the cached file        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>add_time<\/em> - time in seconds since the file has been added to the opcode cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>use_time<\/em> - time in seconds since the file has been accessed in the opcode cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>last_check<\/em> - time in seconds since the file has been checked for modifications        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>hit_count<\/em> - number of times the file has been served from the cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>function_count<\/em> - number of functions in the cached file        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>class_count<\/em> - number of classes in the cached file        <\/span>       <\/li>      <\/ul>     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.0.0"},"wincache_ocache_meminfo":{"id":"function.wincache-ocache-meminfo","purpose":"Retrieves information about opcode cache memory usage","prototype":"array wincache_ocache_meminfo()","return":"<p class=\"para\">   Array of meta data about opcode cache memory usage  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_total<\/em> - amount of memory in bytes allocated for the opcode cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_free<\/em> - amount of free memory in bytes available for the opcode cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_used_blks<\/em> - number of memory blocks used by the opcode cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_free_blks<\/em> - number of free memory blocks available for the opcode cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_overhead<\/em> - amount of memory in bytes used for the opcode cache internal structures     <\/span>    <\/li>   <\/ul>  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function was<em class=\"emphasis\">REMOVED<\/em> in PHP 7.0.0.<\/p><\/div>","versions":"PECL wincache >= 1.0.0"},"wincache_refresh_if_changed":{"id":"function.wincache-refresh-if-changed","purpose":"Refreshes the cache entries for the cached files","prototype":"bool wincache_refresh_if_changed([array $files = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.0.0"},"wincache_rplist_fileinfo":{"id":"function.wincache-rplist-fileinfo","purpose":"Retrieves information about resolve file path cache","prototype":"array wincache_rplist_fileinfo([bool $summaryonly = ''])","return":"<p class=\"para\">   Array of meta data about the resolve file path cache  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_file_count<\/em> - total number of file path        mappings stored in the cache     <\/span>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <em>rplist_entries<\/em> - an array that contains the information about all        the cached file paths:      <ul class=\"itemizedlist\">       <li class=\"listitem\">        <span class=\"simpara\">         <em>resolve_path<\/em> - path to a file        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>subkey_data<\/em> - corresponding absolute path to a file        <\/span>       <\/li>      <\/ul>     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.0.0"},"wincache_rplist_meminfo":{"id":"function.wincache-rplist-meminfo","purpose":"Retrieves information about memory usage by the resolve file path cache","prototype":"array wincache_rplist_meminfo()","return":"<p class=\"para\">   Array of meta data that describes memory usage by resolve file path cache.  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_total<\/em> - amount of memory in bytes allocated for the resolve file path cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_free<\/em> - amount of free memory in bytes available for the resolve file path cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_used_blks<\/em> - number of memory blocks used by the resolve file path cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_free_blks<\/em> - number of free memory blocks available for the resolve file path cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_overhead<\/em> - amount of memory in bytes used for the internal structures of resolve file path cache     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.0.0"},"wincache_scache_info":{"id":"function.wincache-scache-info","purpose":"Retrieves information about files cached in the session cache","prototype":"array wincache_scache_info([bool $summaryonly = ''])","return":"<p class=\"para\">   Array of meta data about session cache  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>    <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_cache_uptime<\/em> - total time in seconds that the session cache has been active     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_item_count<\/em> - total number of elements that are currently in the session cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>is_local_cache<\/em> - true is the cache metadata is for a local cache instance,        false if the metadata is for the global cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_hit_count<\/em> - number of times the data has been served from the cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_miss_count<\/em> - number of times the data has not been found in the cache     <\/span>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <em>scache_entries<\/em> - an array that contains the information about all the cached items:      <ul class=\"itemizedlist\">       <li class=\"listitem\">        <span class=\"simpara\">         <em>key_name<\/em> - name of the key which is used to store the data        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>value_type<\/em> - type of value stored by the key        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>use_time<\/em> - time in seconds since the file has been accessed in the opcode cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>last_check<\/em> - time in seconds since the file has been checked for modifications        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>ttl_seconds<\/em> - time remaining for the data to live in the cache, 0 meaning infinite        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>age_seconds<\/em> - time elapsed from the time data has been added in the cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>hitcount<\/em> - number of times data has been served from the cache        <\/span>       <\/li>      <\/ul>     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_scache_meminfo":{"id":"function.wincache-scache-meminfo","purpose":"Retrieves information about session cache memory usage","prototype":"array wincache_scache_meminfo()","return":"<p class=\"para\">   Array of meta data about session cache memory usage  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_total<\/em> - amount of memory in bytes allocated for the session cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_free<\/em> - amount of free memory in bytes available for the session cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_used_blks<\/em> - number of memory blocks used by the session cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_free_blks<\/em> - number of free memory blocks available for the session cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_overhead<\/em> - amount of memory in bytes used for the session cache internal structures     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_add":{"id":"function.wincache-ucache-add","purpose":"Adds a variable in user cache only if variable does not already exist in the cache","prototype":"bool wincache_ucache_add(string $key, mixed $value [, int $ttl = '', array $values [, mixed $unused = null]])","return":"<p class=\"simpara\">   If <code class=\"parameter\">key<\/code> is string, the function returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">key<\/code> is an array, the function returns:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      If all the name =&gt; value pairs in the array can be set, function returns an empty array;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">     If all the name =&gt; value pairs in the array cannot be set, function returns <strong><code>FALSE<\/code><\/strong>;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      If some can be set while others cannot, function returns an array with name=&gt;value pair for which the addition failed in the user cache.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_cas":{"id":"function.wincache-ucache-cas","purpose":"Compares the variable with old value and assigns new value to it","prototype":"bool wincache_ucache_cas(string $key, int $old_value, int $new_value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_clear":{"id":"function.wincache-ucache-clear","purpose":"Deletes entire content of the user cache","prototype":"bool wincache_ucache_clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_dec":{"id":"function.wincache-ucache-dec","purpose":"Decrements the value associated with the key","prototype":"mixed wincache_ucache_dec(string $key [, int $dec_by = 1 [, bool $success = '']])","return":"<p class=\"simpara\">   Returns the decremented value on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_delete":{"id":"function.wincache-ucache-delete","purpose":"Deletes variables from the user cache","prototype":"bool wincache_ucache_delete(mixed $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">key<\/code> is an array then the function returns <strong><code>FALSE<\/code><\/strong>    if every element of the array fails to get deleted from the user cache, otherwise returns an    array which consists of all the keys that are deleted.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_exists":{"id":"function.wincache-ucache-exists","purpose":"Checks if a variable exists in the user cache","prototype":"bool wincache_ucache_exists(string $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if variable with the <code class=\"parameter\">key<\/code> exitsts,    otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_get":{"id":"function.wincache-ucache-get","purpose":"Gets a variable stored in the user cache","prototype":"mixed wincache_ucache_get(mixed $key [, bool $success = ''])","return":"<p class=\"simpara\">   If <code class=\"parameter\">key<\/code> is a string, the function returns the value of the variable stored with that key.    The <code class=\"parameter\">success<\/code> is set to <strong><code>TRUE<\/code><\/strong> on success and    to <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"simpara\">   The <code class=\"parameter\">key<\/code> is an array, the parameter <code class=\"parameter\">success<\/code>    is always set to <strong><code>TRUE<\/code><\/strong>. The returned array (name =&gt; value pairs) will    contain only those name =&gt; value pairs for which the get operation in user cache was    successful. If none of the keys in the key array finds a match in the user cache    an empty array will be returned.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_inc":{"id":"function.wincache-ucache-inc","purpose":"Increments the value associated with the key","prototype":"mixed wincache_ucache_inc(string $key [, int $inc_by = 1 [, bool $success = '']])","return":"<p class=\"simpara\">   Returns the incremented value on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_info":{"id":"function.wincache-ucache-info","purpose":"Retrieves information about data stored in the user cache","prototype":"array wincache_ucache_info([bool $summaryonly = '' [, string $key = null]])","return":"<p class=\"para\">   Array of meta data about user cache  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>    <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_cache_uptime<\/em> - total time in seconds that the user cache has been active     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_item_count<\/em> - total number of elements that are currently in the user cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>is_local_cache<\/em> - true is the cache metadata is for a local cache instance,        false if the metadata is for the global cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_hit_count<\/em> - number of times the data has been served from the cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>total_miss_count<\/em> - number of times the data has not been found in the cache     <\/span>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <em>ucache_entries<\/em> - an array that contains the information about all the cached items:      <ul class=\"itemizedlist\">       <li class=\"listitem\">        <span class=\"simpara\">         <em>key_name<\/em> - name of the key which is used to store the data        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>value_type<\/em> - type of value stored by the key        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>use_time<\/em> - time in seconds since the file has been accessed in the opcode cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>last_check<\/em> - time in seconds since the file has been checked for modifications        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>is_session<\/em> - indicates if the data is a session variable        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>ttl_seconds<\/em> - time remaining for the data to live in the cache, 0 meaning infinite        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>age_seconds<\/em> - time elapsed from the time data has been added in the cache        <\/span>       <\/li>       <li class=\"listitem\">        <span class=\"simpara\">         <em>hitcount<\/em> - number of times data has been served from the cache        <\/span>       <\/li>      <\/ul>     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_meminfo":{"id":"function.wincache-ucache-meminfo","purpose":"Retrieves information about user cache memory usage","prototype":"array wincache_ucache_meminfo()","return":"<p class=\"para\">   Array of meta data about user cache memory usage  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>  <p class=\"para\">   The array returned by this function contains the following elements:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_total<\/em> - amount of memory in bytes allocated for the user cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_free<\/em> - amount of free memory in bytes available for the user cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_used_blks<\/em> - number of memory blocks used by the user cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>num_free_blks<\/em> - number of free memory blocks available for the user cache     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>memory_overhead<\/em> - amount of memory in bytes used for the user cache internal structures     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_ucache_set":{"id":"function.wincache-ucache-set","purpose":"Adds a variable in user cache and overwrites a variable if it already exists in the cache","prototype":"bool wincache_ucache_set(mixed $key, mixed $value [, int $ttl = '', array $values [, mixed $unused = null]])","return":"<p class=\"simpara\">   If <code class=\"parameter\">key<\/code> is string, the function returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">key<\/code> is an array, the function returns:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      If all the name =&gt; value pairs in the array can be set, function returns an empty array;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">     If all the name =&gt; value pairs in the array cannot be set, function returns <strong><code>FALSE<\/code><\/strong>;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      If some can be set while others cannot, function returns an array with name=&gt;value pair for which the addition failed in the user cache.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL wincache >= 1.1.0"},"wincache_unlock":{"id":"function.wincache-unlock","purpose":"Releases an exclusive lock on a given key","prototype":"bool wincache_unlock(string $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL wincache >= 1.1.0"},"xhprof_disable":{"id":"function.xhprof-disable","purpose":"Stops xhprof profiler","prototype":"array xhprof_disable()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of xhprof data, from the run.  <\/p>","versions":"PECL xhprof >= 0.9.0"},"xhprof_enable":{"id":"function.xhprof-enable","purpose":"Start xhprof profiler","prototype":"void xhprof_enable([int $flags = '' [, array $options = '']])","return":"<p class=\"para\">   <strong><code>NULL<\/code><\/strong>  <\/p>","versions":"PECL xhprof >= 0.9.0"},"xhprof_sample_disable":{"id":"function.xhprof-sample-disable","purpose":"Stops xhprof sample profiler","prototype":"array xhprof_sample_disable()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of xhprof sample data, from the run.  <\/p>","versions":"PECL xhprof >= 0.9.0"},"xhprof_sample_enable":{"id":"function.xhprof-sample-enable","purpose":"Start XHProf profiling in sampling mode","prototype":"void xhprof_sample_enable()","return":"<p class=\"para\">   <strong><code>NULL<\/code><\/strong>  <\/p>","versions":"PECL xhprof >= 0.9.0"},"id3_get_frame_long_name":{"id":"function.id3-get-frame-long-name","purpose":"Get the long name of an ID3v2 frame","prototype":"string id3_get_frame_long_name(string $frameId)","return":"<p class=\"para\">   Returns the frame long name or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PECL id3 >= 0.2"},"id3_get_frame_short_name":{"id":"function.id3-get-frame-short-name","purpose":"Get the short name of an ID3v2 frame","prototype":"string id3_get_frame_short_name(string $frameId)","return":"<p class=\"para\">   Returns the frame short name or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>  <p class=\"para\">   The values returned by <span class=\"function\">id3_get_frame_short_name<\/span> are used in the   array returned by <span class=\"function\">id3_get_tag<\/span>.  <\/p>","versions":"PECL id3 >= 0.2"},"id3_get_genre_id":{"id":"function.id3-get-genre-id","purpose":"Get the id for a genre","prototype":"int id3_get_genre_id(string $genre)","return":"<p class=\"para\">   The genre id or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PECL id3 >= 0.1"},"id3_get_genre_list":{"id":"function.id3-get-genre-list","purpose":"Get all possible genre values","prototype":"array id3_get_genre_list()","return":"<p class=\"para\">   Returns an array containing all possible genres that may be stored in an   ID3 tag.  <\/p>","versions":"PECL id3 >= 0.1"},"id3_get_genre_name":{"id":"function.id3-get-genre-name","purpose":"Get the name for a genre id","prototype":"string id3_get_genre_name(int $genre_id)","return":"<p class=\"para\">   Returns the name as a string.  <\/p>","versions":"PECL id3 >= 0.1"},"id3_get_tag":{"id":"function.id3-get-tag","purpose":"Get all information stored in an ID3 tag","prototype":"array id3_get_tag(string $filename [, int $version = ID3_BEST])","return":"<p class=\"para\">   Returns an associative array with various keys like:    <em>title<\/em>, <em>artist<\/em>, ..  <\/p>  <p class=\"para\">   The key <em>genre<\/em> will contain an integer between 0 and   147. You may use <span class=\"function\">id3_get_genre_name<\/span> to convert it to   a human readable string.  <\/p>","versions":"PECL id3 >= 0.1"},"id3_get_version":{"id":"function.id3-get-version","purpose":"Get version of an ID3 tag","prototype":"int id3_get_version(string $filename)","return":"<p class=\"para\">   Returns the version number of the ID3 tag of the file.   As a tag can contain ID3 v1.x and v2.x tags, the return value of this   function should be bitwise compared with the predefined constants    <strong><code>ID3_V1_0<\/code><\/strong>, <strong><code>ID3_V1_1<\/code><\/strong> and     <strong><code>ID3_V2<\/code><\/strong>.  <\/p>","versions":"PECL id3 >= 0.1"},"id3_remove_tag":{"id":"function.id3-remove-tag","purpose":"Remove an existing ID3 tag","prototype":"bool id3_remove_tag(string $filename [, int $version = ID3_V1_0])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL id3 >= 0.1"},"id3_set_tag":{"id":"function.id3-set-tag","purpose":"Update information stored in an ID3 tag","prototype":"bool id3_set_tag(string $filename, array $tag [, int $version = ID3_V1_0])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL id3 >= 0.1"},"KTaglib_MPEG_File::__construct":{"id":"mpegfile.construct","purpose":"Opens a new file","prototype":" KTaglib_MPEG_File::__construct(string $filename)","return":"","versions":"0.0.1"},"KTaglib_MPEG_File::getAudioProperties":{"id":"mpegfile.getaudioproperties","purpose":"Returns an object that provides access to the audio properties","prototype":"KTaglib_MPEG_File KTaglib_MPEG_File::getAudioProperties()","return":"<p class=\"para\">    Returns an KTaglib_MPEG_AudioProperties object or false.  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_File::getID3v1Tag":{"id":"mpegfile.getid3v1tag","purpose":"Returns an object representing an ID3v1 tag","prototype":"KTaglib_ID3v1_Tag KTaglib_MPEG_File::getID3v1Tag([bool $create = ''])","return":"<p class=\"para\">    Returns an KTaglib_MPEG_ID3v1Tag object or false if there is no ID3v1 tag.  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_File::getID3v2Tag":{"id":"mpegfile.getid3v2tag","purpose":"Returns a ID3v2 object","prototype":"KTaglib_ID3v2_Tag KTaglib_MPEG_File::getID3v2Tag([bool $create = ''])","return":"<p class=\"para\">      Returns the KTaglib_ID3v2_Tag object of the MPEG file or false if there isno ID3v2 tag    <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::getBitrate":{"id":"audioproperties.getbitrate","purpose":"Returns the bitrate of the MPEG file","prototype":"int KTaglib_MPEG_AudioProperties::getBitrate()","return":"<p class=\"para\">   Returns the bitrate as an integer  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::getChannels":{"id":"audioproperties.getchannels","purpose":"Returns the amount of channels of a MPEG file","prototype":"int KTaglib_MPEG_AudioProperties::getChannels()","return":"<p class=\"para\">   Returns the channel count as an integer  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::getLayer":{"id":"audioproperties.getlayer","purpose":"Returns the layer of a MPEG file","prototype":"int KTaglib_MPEG_AudioProperties::getLayer()","return":"<p class=\"para\">   Returns the layer as an integer  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::getLength":{"id":"audioproperties.getlength","purpose":"Returns the length of a MPEG file","prototype":"int KTaglib_MPEG_AudioProperties::getLength()","return":"<p class=\"para\">   Returns the length as an integer  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::getSampleBitrate":{"id":"audioproperties.getsamplebitrate","purpose":"Returns the sample bitrate of a MPEG file","prototype":"int KTaglib_MPEG_AudioProperties::getSampleBitrate()","return":"<p class=\"para\">   Returns the sample bitrate as an integer  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::getVersion":{"id":"audioproperties.getversion","purpose":"Returns the version of a MPEG file","prototype":"int KTaglib_MPEG_AudioProperties::getVersion()","return":"<p class=\"para\">   Returns the version  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::isCopyrighted":{"id":"audioproperties.iscopyrighted","purpose":"Returns the copyright status of an MPEG file","prototype":"bool KTaglib_MPEG_AudioProperties::isCopyrighted()","return":"<p class=\"para\">   Returns true if the MPEG file is copyrighted  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::isOriginal":{"id":"audioproperties.isoriginal","purpose":"Returns if the file is marked as the original file","prototype":"bool KTaglib_MPEG_AudioProperties::isOriginal()","return":"<p class=\"para\">   Returns true if the file is marked as the original file  <\/p>","versions":"0.0.1"},"KTaglib_MPEG_AudioProperties::isProtectionEnabled":{"id":"audioproperties.isprotectionenabled","purpose":"Returns if protection mechanisms of an MPEG file are enabled","prototype":"bool KTaglib_MPEG_AudioProperties::isProtectionEnabled()","return":"<p class=\"para\">   Returns true if protection mechanisms (like DRM) are enabled for this file  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getAlbum":{"id":"tag.getalbum","purpose":"Returns the album string from a ID3 tag","prototype":"string KTaglib_Tag::getAlbum()","return":"<p class=\"para\">    Returns the album string  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getArtist":{"id":"tag.getartist","purpose":"Returns the artist string from a ID3 tag","prototype":"string KTaglib_Tag::getArtist()","return":"<p class=\"para\">    Returns the artist string  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getComment":{"id":"tag.getcomment","purpose":"Returns the comment from a ID3 tag","prototype":"string KTaglib_Tag::getComment()","return":"<p class=\"para\">    Returns the comment string  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getGenre":{"id":"tag.getgenre","purpose":"Returns the genre from a ID3 tag","prototype":"string KTaglib_Tag::getGenre()","return":"<p class=\"para\">    Returns the genre string  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getTitle":{"id":"tag.gettitle","purpose":"Returns the title string from a ID3 tag","prototype":"string KTaglib_Tag::getTitle()","return":"<p class=\"para\">    Returns the title string  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getTrack":{"id":"tag.gettrack","purpose":"Returns the track number from a ID3 tag","prototype":"int KTaglib_Tag::getTrack()","return":"<p class=\"para\">    Returns the track number as an integer  <\/p>","versions":"0.0.1"},"KTaglib_Tag::getYear":{"id":"tag.getyear","purpose":"Returns the year from a ID3 tag","prototype":"int KTaglib_Tag::getYear()","return":"<p class=\"para\">    Returns the year as an integer  <\/p>","versions":"0.0.1"},"KTaglib_Tag::isEmpty":{"id":"tag.isempty","purpose":"Returns true if the tag is empty","prototype":"bool KTaglib_Tag::isEmpty()","return":"<p class=\"para\">      Returns true if the tag is empty, otherwise false.    <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_Tag::addFrame":{"id":"id3v2tag.addframe","purpose":"Add a frame to the ID3v2 tag","prototype":"bool KTaglib_ID3v2_Tag::addFrame(KTaglib_ID3v2_Frame $frame)","return":"<p class=\"para\">   Returns true on success, otherwise false.  <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_Tag::getFrameList":{"id":"id3v2tag.getframelist","purpose":"Returns an array of ID3v2 frames, associated with the ID3v2 tag","prototype":"array KTaglib_ID3v2_Tag::getFrameList()","return":"<p class=\"para\">      Return an array of KTaglib_ID3v2_Frame objects    <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_Frame::getSize":{"id":"id3v2frame.getsize","purpose":"Returns the size of the frame in bytes","prototype":"int KTaglib_ID3v2_Frame::getSize()","return":"<p class=\"para\">      Returns the size of the frame in bytes    <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_Frame::__toString":{"id":"id3v2frame.tostring","purpose":"Returns a string representation of the frame","prototype":"string KTaglib_ID3v2_Frame::__toString()","return":"<p class=\"para\">      Returns a string representation of the frame.    <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_AttachedPictureFrame::getDescription":{"id":"id3v2attachedpictureframe.getdescription","purpose":"Returns a description for the picture in a picture frame","prototype":"string KTaglib_ID3v2_AttachedPictureFrame::getDescription()","return":"<p class=\"para\">    Returns a description for the picture in a picture frame  <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_AttachedPictureFrame::getMimeType":{"id":"id3v2attachedpictureframe.getmimetype","purpose":"Returns the mime type of the picture","prototype":"string KTaglib_ID3v2_AttachedPictureFrame::getMimeType()","return":"<p class=\"para\">    Returns the mime type of the image represented by the attached picture frame.  <\/p>","versions":"0.2.0"},"KTaglib_ID3v2_AttachedPictureFrame::getType":{"id":"id3v2attachedpictureframe.gettype","purpose":"Returns the type of the image","prototype":"int KTaglib_ID3v2_AttachedPictureFrame::getType()","return":"<p class=\"para\">    Returns the integer representation of the type.  <\/p>","versions":"0.2.0"},"KTaglib_ID3v2_AttachedPictureFrame::savePicture":{"id":"id3v2attachedpictureframe.savepicture","purpose":"Saves the picture to a file","prototype":"bool KTaglib_ID3v2_AttachedPictureFrame::savePicture(string $filename)","return":"<p class=\"para\">    Returns true on success, otherwise false  <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_AttachedPictureFrame::setMimeType":{"id":"id3v2attachedpictureframe.setmimetype","purpose":"Set's the mime type of the picture","prototype":"string KTaglib_ID3v2_AttachedPictureFrame::setMimeType(string $type)","return":"","versions":"0.2.0"},"KTaglib_ID3v2_AttachedPictureFrame::setPicture":{"id":"id3v2attachedpictureframe.setpicture","purpose":"Sets the frame picture to the given image","prototype":"void KTaglib_ID3v2_AttachedPictureFrame::setPicture(string $filename)","return":"<p class=\"para\">   Returns true on success, otherwise false  <\/p>","versions":"0.0.1"},"KTaglib_ID3v2_AttachedPictureFrame::setType":{"id":"id3v2attachedpictureframe.settype","purpose":"Set the type of the image","prototype":"void KTaglib_ID3v2_AttachedPictureFrame::setType(int $type)","return":"","versions":"0.2.0"},"openal_buffer_create":{"id":"function.openal-buffer-create","purpose":"Generate OpenAL buffer","prototype":"resource openal_buffer_create()","return":"<p class=\"para\">   Returns an <a href=\"openal.resources.html\" class=\"link\">Open AL(Buffer)<\/a> resource on success or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_buffer_data":{"id":"function.openal-buffer-data","purpose":"Load a buffer with data","prototype":"bool openal_buffer_data(resource $buffer, int $format, string $data, int $freq)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_buffer_destroy":{"id":"function.openal-buffer-destroy","purpose":"Destroys an OpenAL buffer","prototype":"bool openal_buffer_destroy(resource $buffer)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_buffer_get":{"id":"function.openal-buffer-get","purpose":"Retrieve an OpenAL buffer property","prototype":"int openal_buffer_get(resource $buffer, int $property)","return":"<p class=\"para\">   Returns an integer value appropriate to the <code class=\"parameter\">property<\/code>   requested or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_buffer_loadwav":{"id":"function.openal-buffer-loadwav","purpose":"Load a .wav file into a buffer","prototype":"bool openal_buffer_loadwav(resource $buffer, string $wavfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_context_create":{"id":"function.openal-context-create","purpose":"Create an audio processing context","prototype":"resource openal_context_create(resource $device)","return":"<p class=\"para\">   Returns an <a href=\"openal.resources.html\" class=\"link\">Open AL(Context)<\/a> resource on success or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_context_current":{"id":"function.openal-context-current","purpose":"Make the specified context current","prototype":"bool openal_context_current(resource $context)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_context_destroy":{"id":"function.openal-context-destroy","purpose":"Destroys a context","prototype":"bool openal_context_destroy(resource $context)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_context_process":{"id":"function.openal-context-process","purpose":"Process the specified context","prototype":"bool openal_context_process(resource $context)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_context_suspend":{"id":"function.openal-context-suspend","purpose":"Suspend the specified context","prototype":"bool openal_context_suspend(resource $context)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_device_close":{"id":"function.openal-device-close","purpose":"Close an OpenAL device","prototype":"bool openal_device_close(resource $device)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_device_open":{"id":"function.openal-device-open","purpose":"Initialize the OpenAL audio layer","prototype":"resource openal_device_open([string $device_desc = ''])","return":"<p class=\"para\">   Returns an <a href=\"openal.resources.html\" class=\"link\">Open AL(Device)<\/a> resource on success or    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_listener_get":{"id":"function.openal-listener-get","purpose":"Retrieve a listener property","prototype":"mixed openal_listener_get(int $property)","return":"<p class=\"para\">   Returns a float or array of floats (as appropriate) or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_listener_set":{"id":"function.openal-listener-set","purpose":"Set a listener property","prototype":"bool openal_listener_set(int $property, mixed $setting)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_create":{"id":"function.openal-source-create","purpose":"Generate a source resource","prototype":"resource openal_source_create()","return":"<p class=\"para\">   Returns an <a href=\"openal.resources.html\" class=\"link\">Open AL(Source)<\/a> resource on success or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_destroy":{"id":"function.openal-source-destroy","purpose":"Destroy a source resource","prototype":"bool openal_source_destroy(resource $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_get":{"id":"function.openal-source-get","purpose":"Retrieve an OpenAL source property","prototype":"mixed openal_source_get(resource $source, int $property)","return":"<p class=\"para\">   Returns the type associated with the property being retrieved   or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_pause":{"id":"function.openal-source-pause","purpose":"Pause the source","prototype":"bool openal_source_pause(resource $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_play":{"id":"function.openal-source-play","purpose":"Start playing the source","prototype":"bool openal_source_play(resource $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_rewind":{"id":"function.openal-source-rewind","purpose":"Rewind the source","prototype":"bool openal_source_rewind(resource $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_set":{"id":"function.openal-source-set","purpose":"Set source property","prototype":"bool openal_source_set(resource $source, int $property, mixed $setting)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_source_stop":{"id":"function.openal-source-stop","purpose":"Stop playing the source","prototype":"bool openal_source_stop(resource $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"openal_stream":{"id":"function.openal-stream","purpose":"Begin streaming on a source","prototype":"resource openal_stream(resource $source, int $format, int $rate)","return":"<p class=\"para\">   Returns a stream resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL openal >= 0.1.0"},"kadm5_chpass_principal":{"id":"function.kadm5-chpass-principal","purpose":"Changes the principal's password","prototype":"bool kadm5_chpass_principal(resource $handle, string $principal, string $password)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_create_principal":{"id":"function.kadm5-create-principal","purpose":"Creates a kerberos principal with the given parameters","prototype":"bool kadm5_create_principal(resource $handle, string $principal [, string $password = '' [, array $options = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_delete_principal":{"id":"function.kadm5-delete-principal","purpose":"Deletes a kerberos principal","prototype":"bool kadm5_delete_principal(resource $handle, string $principal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_destroy":{"id":"function.kadm5-destroy","purpose":"Closes the connection to the admin server and releases all related resources","prototype":"bool kadm5_destroy(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_flush":{"id":"function.kadm5-flush","purpose":"Flush all changes to the Kerberos database","prototype":"bool kadm5_flush(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_get_policies":{"id":"function.kadm5-get-policies","purpose":"Gets all policies from the Kerberos database","prototype":"array kadm5_get_policies(resource $handle)","return":"<p class=\"para\">   Returns array of policies on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_get_principal":{"id":"function.kadm5-get-principal","purpose":"Gets the principal's entries from the Kerberos database","prototype":"array kadm5_get_principal(resource $handle, string $principal)","return":"<p class=\"para\">   Returns array of options containing the following keys: KADM5_PRINCIPAL,   KADM5_PRINC_EXPIRE_TIME, KADM5_PW_EXPIRATION, KADM5_ATTRIBUTES,   KADM5_MAX_LIFE, KADM5_MOD_NAME, KADM5_MOD_TIME, KADM5_KVNO, KADM5_POLICY,   KADM5_MAX_RLIFE, KADM5_LAST_SUCCESS, KADM5_LAST_FAILED,   KADM5_FAIL_AUTH_COUNT on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_get_principals":{"id":"function.kadm5-get-principals","purpose":"Gets all principals from the Kerberos database","prototype":"array kadm5_get_principals(resource $handle)","return":"<p class=\"para\">   Returns array of principals on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_init_with_password":{"id":"function.kadm5-init-with-password","purpose":"Opens a connection to the KADM5 library","prototype":"resource kadm5_init_with_password(string $admin_server, string $realm, string $principal, string $password)","return":"<p class=\"para\">   Returns a KADM5 handle on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"kadm5_modify_principal":{"id":"function.kadm5-modify-principal","purpose":"Modifies a kerberos principal with the given parameters","prototype":"bool kadm5_modify_principal(resource $handle, string $principal, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL kadm5 >= 0.2.3"},"radius_acct_open":{"id":"function.radius-acct-open","purpose":"Creates a Radius handle for accounting","prototype":"resource radius_acct_open()","return":"<p class=\"para\">   Returns a handle on success, <strong><code>FALSE<\/code><\/strong> on error. This function only fails if   insufficient memory is available.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_add_server":{"id":"function.radius-add-server","purpose":"Adds a server","prototype":"bool radius_add_server(resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_auth_open":{"id":"function.radius-auth-open","purpose":"Creates a Radius handle for authentication","prototype":"resource radius_auth_open()","return":"<p class=\"para\">   Returns a handle on success, <strong><code>FALSE<\/code><\/strong> on error. This function only fails if   insufficient memory is available.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_close":{"id":"function.radius-close","purpose":"Frees all ressources","prototype":"bool radius_close(resource $radius_handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_config":{"id":"function.radius-config","purpose":"Causes the library to read the given configuration file","prototype":"bool radius_config(resource $radius_handle, string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_create_request":{"id":"function.radius-create-request","purpose":"Create accounting or authentication request","prototype":"bool radius_create_request(resource $radius_handle, int $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_cvt_addr":{"id":"function.radius-cvt-addr","purpose":"Converts raw data to IP-Address","prototype":"string radius_cvt_addr(string $data)","return":"","versions":"PECL radius >= 1.1.0"},"radius_cvt_int":{"id":"function.radius-cvt-int","purpose":"Converts raw data to integer","prototype":"int radius_cvt_int(string $data)","return":"","versions":"PECL radius >= 1.1.0"},"radius_cvt_string":{"id":"function.radius-cvt-string","purpose":"Converts raw data to string","prototype":"string radius_cvt_string(string $data)","return":"","versions":"PECL radius >= 1.1.0"},"radius_demangle_mppe_key":{"id":"function.radius-demangle-mppe-key","purpose":"Derives mppe-keys from mangled data","prototype":"string radius_demangle_mppe_key(resource $radius_handle, string $mangled)","return":"<p class=\"para\">   Returns the demangled string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL radius >= 1.2.0"},"radius_demangle":{"id":"function.radius-demangle","purpose":"Demangles data","prototype":"string radius_demangle(resource $radius_handle, string $mangled)","return":"<p class=\"para\">   Returns the demangled string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL radius >= 1.2.0"},"radius_get_attr":{"id":"function.radius-get-attr","purpose":"Extracts an attribute","prototype":"mixed radius_get_attr(resource $radius_handle)","return":"<p class=\"para\">   Returns an associative array containing the attribute-type and the data, or   error number &lt;= 0.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_get_tagged_attr_data":{"id":"function.radius-get-tagged-attr-data","purpose":"Extracts the data from a tagged attribute","prototype":"string radius_get_tagged_attr_data(string $data)","return":"<p class=\"para\">   Returns the data from the tagged attribute  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.3.0"},"radius_get_tagged_attr_tag":{"id":"function.radius-get-tagged-attr-tag","purpose":"Extracts the tag from a tagged attribute","prototype":"int radius_get_tagged_attr_tag(string $data)","return":"<p class=\"para\">   Returns the tag from the tagged attribute  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.3.0"},"radius_get_vendor_attr":{"id":"function.radius-get-vendor-attr","purpose":"Extracts a vendor specific attribute","prototype":"array radius_get_vendor_attr(string $data)","return":"<p class=\"para\">   Returns an associative array containing the attribute-type, vendor and the   data, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_addr":{"id":"function.radius-put-addr","purpose":"Attaches an IP address attribute","prototype":"bool radius_put_addr(resource $radius_handle, int $type, string $addr [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_attr":{"id":"function.radius-put-attr","purpose":"Attaches a binary attribute","prototype":"bool radius_put_attr(resource $radius_handle, int $type, string $value [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_int":{"id":"function.radius-put-int","purpose":"Attaches an integer attribute","prototype":"bool radius_put_int(resource $radius_handle, int $type, int $value [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_string":{"id":"function.radius-put-string","purpose":"Attaches a string attribute","prototype":"bool radius_put_string(resource $radius_handle, int $type, string $value [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_vendor_addr":{"id":"function.radius-put-vendor-addr","purpose":"Attaches a vendor specific IP address attribute","prototype":"bool radius_put_vendor_addr(resource $radius_handle, int $vendor, int $type, string $addr)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_vendor_attr":{"id":"function.radius-put-vendor-attr","purpose":"Attaches a vendor specific binary attribute","prototype":"bool radius_put_vendor_attr(resource $radius_handle, int $vendor, int $type, string $value [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_vendor_int":{"id":"function.radius-put-vendor-int","purpose":"Attaches a vendor specific integer attribute","prototype":"bool radius_put_vendor_int(resource $radius_handle, int $vendor, int $type, int $value [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_put_vendor_string":{"id":"function.radius-put-vendor-string","purpose":"Attaches a vendor specific string attribute","prototype":"bool radius_put_vendor_string(resource $radius_handle, int $vendor, int $type, string $value [, int $options = '' [, int $tag = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_request_authenticator":{"id":"function.radius-request-authenticator","purpose":"Returns the request authenticator","prototype":"string radius_request_authenticator(resource $radius_handle)","return":"<p class=\"para\">   Returns the request authenticator as string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_salt_encrypt_attr":{"id":"function.radius-salt-encrypt-attr","purpose":"Salt-encrypts a value","prototype":"string radius_salt_encrypt_attr(resource $radius_handle, string $data)","return":"<p class=\"para\">   Returns the salt-encrypted data  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL radius >= 1.3.0"},"radius_send_request":{"id":"function.radius-send-request","purpose":"Sends the request and waits for a reply","prototype":"int radius_send_request(resource $radius_handle)","return":"<p class=\"para\">   If a valid response is received, <span class=\"function\">radius_send_request<\/span>   returns the Radius code which specifies the type of the response. This will   typically be <strong><code>RADIUS_ACCESS_ACCEPT<\/code><\/strong>,   <strong><code>RADIUS_ACCESS_REJECT<\/code><\/strong>, or   <strong><code>RADIUS_ACCESS_CHALLENGE<\/code><\/strong>. If no valid response is   received, <span class=\"function\">radius_send_request<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_server_secret":{"id":"function.radius-server-secret","purpose":"Returns the shared secret","prototype":"string radius_server_secret(resource $radius_handle)","return":"<p class=\"para\">   Returns the server&#039;s shared secret as string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL radius >= 1.1.0"},"radius_strerror":{"id":"function.radius-strerror","purpose":"Returns an error message","prototype":"string radius_strerror(resource $radius_handle)","return":"<p class=\"para\">   Returns error messages as string from failed radius functions.  <\/p>","versions":"PECL radius >= 1.1.0"},"ncurses_addch":{"id":"function.ncurses-addch","purpose":"Add character at current position and advance cursor","prototype":"int ncurses_addch(int $ch)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_addchnstr":{"id":"function.ncurses-addchnstr","purpose":"Add attributed string with specified length at current position","prototype":"int ncurses_addchnstr(string $s, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_addchstr":{"id":"function.ncurses-addchstr","purpose":"Add attributed string at current position","prototype":"int ncurses_addchstr(string $s)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_addnstr":{"id":"function.ncurses-addnstr","purpose":"Add string with specified length at current position","prototype":"int ncurses_addnstr(string $s, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_addstr":{"id":"function.ncurses-addstr","purpose":"Output text at current position","prototype":"int ncurses_addstr(string $text)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_assume_default_colors":{"id":"function.ncurses-assume-default-colors","purpose":"Define default colors for color 0","prototype":"int ncurses_assume_default_colors(int $fg, int $bg)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_attroff":{"id":"function.ncurses-attroff","purpose":"Turn off the given attributes","prototype":"int ncurses_attroff(int $attributes)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_attron":{"id":"function.ncurses-attron","purpose":"Turn on the given attributes","prototype":"int ncurses_attron(int $attributes)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_attrset":{"id":"function.ncurses-attrset","purpose":"Set given attributes","prototype":"int ncurses_attrset(int $attributes)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_baudrate":{"id":"function.ncurses-baudrate","purpose":"Returns baudrate of terminal","prototype":"int ncurses_baudrate()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_beep":{"id":"function.ncurses-beep","purpose":"Let the terminal beep","prototype":"int ncurses_beep()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_bkgd":{"id":"function.ncurses-bkgd","purpose":"Set background property for terminal screen","prototype":"int ncurses_bkgd(int $attrchar)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_bkgdset":{"id":"function.ncurses-bkgdset","purpose":"Control screen background","prototype":"void ncurses_bkgdset(int $attrchar)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_border":{"id":"function.ncurses-border","purpose":"Draw a border around the screen using attributed characters","prototype":"int ncurses_border(int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_bottom_panel":{"id":"function.ncurses-bottom-panel","purpose":"Moves a visible panel to the bottom of the stack","prototype":"int ncurses_bottom_panel(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_can_change_color":{"id":"function.ncurses-can-change-color","purpose":"Checks if terminal color definitions can be changed","prototype":"bool ncurses_can_change_color()","return":"<p class=\"para\">   Return <strong><code>TRUE<\/code><\/strong> if the programmer can change color definitions,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_cbreak":{"id":"function.ncurses-cbreak","purpose":"Switch off input buffering","prototype":"bool ncurses_cbreak()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> or <strong><code>NCURSES_ERR<\/code><\/strong> if any error occurred.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_clear":{"id":"function.ncurses-clear","purpose":"Clear screen","prototype":"bool ncurses_clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_clrtobot":{"id":"function.ncurses-clrtobot","purpose":"Clear screen from current position to bottom","prototype":"bool ncurses_clrtobot()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_clrtoeol":{"id":"function.ncurses-clrtoeol","purpose":"Clear screen from current position to end of line","prototype":"bool ncurses_clrtoeol()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_color_content":{"id":"function.ncurses-color-content","purpose":"Retrieves RGB components of a color","prototype":"int ncurses_color_content(int $color, int $r, int $g, int $b)","return":"<p class=\"para\">   Returns <em>-1<\/em> if the function was successful, and   <em>0<\/em> if ncurses or terminal color capabilities have not been   initialized.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_color_set":{"id":"function.ncurses-color-set","purpose":"Set active foreground and background colors","prototype":"int ncurses_color_set(int $pair)","return":"<p class=\"para\">   Returns <em>-1<\/em> on success, and <em>0<\/em> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_curs_set":{"id":"function.ncurses-curs-set","purpose":"Set cursor state","prototype":"int ncurses_curs_set(int $visibility)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_def_prog_mode":{"id":"function.ncurses-def-prog-mode","purpose":"Saves terminals (program) mode","prototype":"bool ncurses_def_prog_mode()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, otherwise <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_def_shell_mode":{"id":"function.ncurses-def-shell-mode","purpose":"Saves terminals (shell) mode","prototype":"bool ncurses_def_shell_mode()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_define_key":{"id":"function.ncurses-define-key","purpose":"Define a keycode","prototype":"int ncurses_define_key(string $definition, int $keycode)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_del_panel":{"id":"function.ncurses-del-panel","purpose":"Remove panel from the stack and delete it (but not the associated window)","prototype":"bool ncurses_del_panel(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_delay_output":{"id":"function.ncurses-delay-output","purpose":"Delay output on terminal using padding characters","prototype":"int ncurses_delay_output(int $milliseconds)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_delch":{"id":"function.ncurses-delch","purpose":"Delete character at current position, move rest of line left","prototype":"bool ncurses_delch()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_deleteln":{"id":"function.ncurses-deleteln","purpose":"Delete line at current position, move rest of screen up","prototype":"bool ncurses_deleteln()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, otherwise <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_delwin":{"id":"function.ncurses-delwin","purpose":"Delete a ncurses window","prototype":"bool ncurses_delwin(resource $window)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_doupdate":{"id":"function.ncurses-doupdate","purpose":"Write all prepared refreshes to terminal","prototype":"bool ncurses_doupdate()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_echo":{"id":"function.ncurses-echo","purpose":"Activate keyboard input echo","prototype":"bool ncurses_echo()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, <strong><code>TRUE<\/code><\/strong> if any error occurred.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_echochar":{"id":"function.ncurses-echochar","purpose":"Single character output including refresh","prototype":"int ncurses_echochar(int $character)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_end":{"id":"function.ncurses-end","purpose":"Stop using ncurses, clean up the screen","prototype":"int ncurses_end()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_erase":{"id":"function.ncurses-erase","purpose":"Erase terminal screen","prototype":"bool ncurses_erase()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_erasechar":{"id":"function.ncurses-erasechar","purpose":"Returns current erase character","prototype":"string ncurses_erasechar()","return":"<p class=\"para\">   The current erase char, as a string.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_filter":{"id":"function.ncurses-filter","purpose":"Set LINES for iniscr() and newterm() to 1","prototype":"void ncurses_filter()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_flash":{"id":"function.ncurses-flash","purpose":"Flash terminal screen (visual bell)","prototype":"bool ncurses_flash()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, otherwise <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_flushinp":{"id":"function.ncurses-flushinp","purpose":"Flush keyboard input buffer","prototype":"bool ncurses_flushinp()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, otherwise <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_getch":{"id":"function.ncurses-getch","purpose":"Read a character from keyboard","prototype":"int ncurses_getch()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_getmaxyx":{"id":"function.ncurses-getmaxyx","purpose":"Returns the size of a window","prototype":"void ncurses_getmaxyx(resource $window, int $y, int $x)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_getmouse":{"id":"function.ncurses-getmouse","purpose":"Reads mouse event","prototype":"bool ncurses_getmouse(array $mevent)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if a mouse event is actually visible in the given window,   otherwise returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_getyx":{"id":"function.ncurses-getyx","purpose":"Returns the current cursor position for a window","prototype":"void ncurses_getyx(resource $window, int $y, int $x)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_halfdelay":{"id":"function.ncurses-halfdelay","purpose":"Put terminal into halfdelay mode","prototype":"int ncurses_halfdelay(int $tenth)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_has_colors":{"id":"function.ncurses-has-colors","purpose":"Checks if terminal has color capabilities","prototype":"bool ncurses_has_colors()","return":"<p class=\"para\">   Return <strong><code>TRUE<\/code><\/strong> if the terminal has color capabilities, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_has_ic":{"id":"function.ncurses-has-ic","purpose":"Check for insert- and delete-capabilities","prototype":"bool ncurses_has_ic()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the terminal has insert\/delete-capabilities, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_has_il":{"id":"function.ncurses-has-il","purpose":"Check for line insert- and delete-capabilities","prototype":"bool ncurses_has_il()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the terminal has insert\/delete-line capabilities,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_has_key":{"id":"function.ncurses-has-key","purpose":"Check for presence of a function key on terminal keyboard","prototype":"int ncurses_has_key(int $keycode)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_hide_panel":{"id":"function.ncurses-hide-panel","purpose":"Remove panel from the stack, making it invisible","prototype":"int ncurses_hide_panel(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_hline":{"id":"function.ncurses-hline","purpose":"Draw a horizontal line at current position using an attributed character and max. n characters long","prototype":"int ncurses_hline(int $charattr, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_inch":{"id":"function.ncurses-inch","purpose":"Get character and attribute at current position","prototype":"string ncurses_inch()","return":"<p class=\"para\">   Returns the character, as a string.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_init_color":{"id":"function.ncurses-init-color","purpose":"Define a terminal color","prototype":"int ncurses_init_color(int $color, int $r, int $g, int $b)","return":"<p class=\"para\">   Returns <em>-1<\/em> if the function was successful,   and <em>0<\/em> if ncurses or terminal   color capabilities have not been initialized or the terminal does not   have color changing capabilities.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_init_pair":{"id":"function.ncurses-init-pair","purpose":"Define a color pair","prototype":"int ncurses_init_pair(int $pair, int $fg, int $bg)","return":"<p class=\"para\">   Returns <em>-1<\/em> if the function was successful, and   <em>0<\/em> if ncurses or color support were not initialized.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_init":{"id":"function.ncurses-init","purpose":"Initialize ncurses","prototype":"void ncurses_init()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_insch":{"id":"function.ncurses-insch","purpose":"Insert character moving rest of line including character at current position","prototype":"int ncurses_insch(int $character)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_insdelln":{"id":"function.ncurses-insdelln","purpose":"Insert lines before current line scrolling down (negative numbers delete and scroll up)","prototype":"int ncurses_insdelln(int $count)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_insertln":{"id":"function.ncurses-insertln","purpose":"Insert a line, move rest of screen down","prototype":"int ncurses_insertln()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_insstr":{"id":"function.ncurses-insstr","purpose":"Insert string at current position, moving rest of line right","prototype":"int ncurses_insstr(string $text)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_instr":{"id":"function.ncurses-instr","purpose":"Reads string from terminal screen","prototype":"int ncurses_instr(string $buffer)","return":"<p class=\"para\">   Returns the number of characters.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_isendwin":{"id":"function.ncurses-isendwin","purpose":"Ncurses is in endwin mode, normal screen output may be performed","prototype":"bool ncurses_isendwin()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>, if <span class=\"function\">ncurses_end<\/span> has been called   without any subsequent calls to <span class=\"function\">ncurses_wrefresh<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_keyok":{"id":"function.ncurses-keyok","purpose":"Enable or disable a keycode","prototype":"int ncurses_keyok(int $keycode, bool $enable)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_keypad":{"id":"function.ncurses-keypad","purpose":"Turns keypad on or off","prototype":"int ncurses_keypad(resource $window, bool $bf)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_killchar":{"id":"function.ncurses-killchar","purpose":"Returns current line kill character","prototype":"string ncurses_killchar()","return":"<p class=\"para\">   Returns the kill character, as a string.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_longname":{"id":"function.ncurses-longname","purpose":"Returns terminals description","prototype":"string ncurses_longname()","return":"<p class=\"para\">   Returns the description, as a string truncated to 128 characters.   On errors, returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_meta":{"id":"function.ncurses-meta","purpose":"Enables\/Disable 8-bit meta key information","prototype":"int ncurses_meta(resource $window, bool $8bit)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mouse_trafo":{"id":"function.ncurses-mouse-trafo","purpose":"Transforms coordinates","prototype":"bool ncurses_mouse_trafo(int $y, int $x, bool $toscreen)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mouseinterval":{"id":"function.ncurses-mouseinterval","purpose":"Set timeout for mouse button clicks","prototype":"int ncurses_mouseinterval(int $milliseconds)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mousemask":{"id":"function.ncurses-mousemask","purpose":"Sets mouse options","prototype":"int ncurses_mousemask(int $newmask, int $oldmask)","return":"<p class=\"para\">   Returns the mask of reportable events. On complete failure, it returns   <em>0<\/em>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_move_panel":{"id":"function.ncurses-move-panel","purpose":"Moves a panel so that its upper-left corner is at [startx, starty]","prototype":"int ncurses_move_panel(resource $panel, int $startx, int $starty)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_move":{"id":"function.ncurses-move","purpose":"Move output position","prototype":"int ncurses_move(int $y, int $x)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvaddch":{"id":"function.ncurses-mvaddch","purpose":"Move current position and add character","prototype":"int ncurses_mvaddch(int $y, int $x, int $c)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvaddchnstr":{"id":"function.ncurses-mvaddchnstr","purpose":"Move position and add attributed string with specified length","prototype":"int ncurses_mvaddchnstr(int $y, int $x, string $s, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvaddchstr":{"id":"function.ncurses-mvaddchstr","purpose":"Move position and add attributed string","prototype":"int ncurses_mvaddchstr(int $y, int $x, string $s)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvaddnstr":{"id":"function.ncurses-mvaddnstr","purpose":"Move position and add string with specified length","prototype":"int ncurses_mvaddnstr(int $y, int $x, string $s, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvaddstr":{"id":"function.ncurses-mvaddstr","purpose":"Move position and add string","prototype":"int ncurses_mvaddstr(int $y, int $x, string $s)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvcur":{"id":"function.ncurses-mvcur","purpose":"Move cursor immediately","prototype":"int ncurses_mvcur(int $old_y, int $old_x, int $new_y, int $new_x)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvdelch":{"id":"function.ncurses-mvdelch","purpose":"Move position and delete character, shift rest of line left","prototype":"int ncurses_mvdelch(int $y, int $x)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvgetch":{"id":"function.ncurses-mvgetch","purpose":"Move position and get character at new position","prototype":"int ncurses_mvgetch(int $y, int $x)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvhline":{"id":"function.ncurses-mvhline","purpose":"Set new position and draw a horizontal line using an attributed character and max. n characters long","prototype":"int ncurses_mvhline(int $y, int $x, int $attrchar, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvinch":{"id":"function.ncurses-mvinch","purpose":"Move position and get attributed character at new position","prototype":"int ncurses_mvinch(int $y, int $x)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvvline":{"id":"function.ncurses-mvvline","purpose":"Set new position and draw a vertical line using an attributed character and max. n characters long","prototype":"int ncurses_mvvline(int $y, int $x, int $attrchar, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_mvwaddstr":{"id":"function.ncurses-mvwaddstr","purpose":"Add string at new position in window","prototype":"int ncurses_mvwaddstr(resource $window, int $y, int $x, string $text)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_napms":{"id":"function.ncurses-napms","purpose":"Sleep","prototype":"int ncurses_napms(int $milliseconds)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_new_panel":{"id":"function.ncurses-new-panel","purpose":"Create a new panel and associate it with window","prototype":"resource ncurses_new_panel(resource $window)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_newpad":{"id":"function.ncurses-newpad","purpose":"Creates a new pad (window)","prototype":"resource ncurses_newpad(int $rows, int $cols)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_newwin":{"id":"function.ncurses-newwin","purpose":"Create a new window","prototype":"resource ncurses_newwin(int $rows, int $cols, int $y, int $x)","return":"<p class=\"para\">   Returns a resource ID for the new window.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_nl":{"id":"function.ncurses-nl","purpose":"Translate newline and carriage return \/ line feed","prototype":"bool ncurses_nl()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_nocbreak":{"id":"function.ncurses-nocbreak","purpose":"Switch terminal to cooked mode","prototype":"bool ncurses_nocbreak()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if any error occurred, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_noecho":{"id":"function.ncurses-noecho","purpose":"Switch off keyboard input echo","prototype":"bool ncurses_noecho()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if any error occurred, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_nonl":{"id":"function.ncurses-nonl","purpose":"Do not translate newline and carriage return \/ line feed","prototype":"bool ncurses_nonl()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_noqiflush":{"id":"function.ncurses-noqiflush","purpose":"Do not flush on signal characters","prototype":"void ncurses_noqiflush()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_noraw":{"id":"function.ncurses-noraw","purpose":"Switch terminal out of raw mode","prototype":"bool ncurses_noraw()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if any error occurred, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_pair_content":{"id":"function.ncurses-pair-content","purpose":"Retrieves foreground and background colors of a color pair","prototype":"int ncurses_pair_content(int $pair, int $f, int $b)","return":"<p class=\"para\">   Returns <em>-1<\/em> if the function was successful, and   <em>0<\/em> if ncurses or terminal color capabilities have   not been initialized.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_panel_above":{"id":"function.ncurses-panel-above","purpose":"Returns the panel above panel","prototype":"resource ncurses_panel_above(resource $panel)","return":"<p class=\"para\">   If panel is null, returns the bottom panel in the stack.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_panel_below":{"id":"function.ncurses-panel-below","purpose":"Returns the panel below panel","prototype":"resource ncurses_panel_below(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_panel_window":{"id":"function.ncurses-panel-window","purpose":"Returns the window associated with panel","prototype":"resource ncurses_panel_window(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_pnoutrefresh":{"id":"function.ncurses-pnoutrefresh","purpose":"Copies a region from a pad into the virtual screen","prototype":"int ncurses_pnoutrefresh(resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_prefresh":{"id":"function.ncurses-prefresh","purpose":"Copies a region from a pad into the virtual screen","prototype":"int ncurses_prefresh(resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_putp":{"id":"function.ncurses-putp","purpose":"Apply padding information to the string and output it","prototype":"int ncurses_putp(string $text)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_qiflush":{"id":"function.ncurses-qiflush","purpose":"Flush on signal characters","prototype":"void ncurses_qiflush()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_raw":{"id":"function.ncurses-raw","purpose":"Switch terminal into raw mode","prototype":"bool ncurses_raw()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if any error occurred, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_refresh":{"id":"function.ncurses-refresh","purpose":"Refresh screen","prototype":"int ncurses_refresh(int $ch)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_replace_panel":{"id":"function.ncurses-replace-panel","purpose":"Replaces the window associated with panel","prototype":"int ncurses_replace_panel(resource $panel, resource $window)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_reset_prog_mode":{"id":"function.ncurses-reset-prog-mode","purpose":"Resets the prog mode saved by def_prog_mode","prototype":"int ncurses_reset_prog_mode()","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_reset_shell_mode":{"id":"function.ncurses-reset-shell-mode","purpose":"Resets the shell mode saved by def_shell_mode","prototype":"int ncurses_reset_shell_mode()","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_resetty":{"id":"function.ncurses-resetty","purpose":"Restores saved terminal state","prototype":"bool ncurses_resetty()","return":"<p class=\"para\">   Always returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_savetty":{"id":"function.ncurses-savetty","purpose":"Saves terminal state","prototype":"bool ncurses_savetty()","return":"<p class=\"para\">   Always returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_scr_dump":{"id":"function.ncurses-scr-dump","purpose":"Dump screen content to file","prototype":"int ncurses_scr_dump(string $filename)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_scr_init":{"id":"function.ncurses-scr-init","purpose":"Initialize screen from file dump","prototype":"int ncurses_scr_init(string $filename)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_scr_restore":{"id":"function.ncurses-scr-restore","purpose":"Restore screen from file dump","prototype":"int ncurses_scr_restore(string $filename)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_scr_set":{"id":"function.ncurses-scr-set","purpose":"Inherit screen from file dump","prototype":"int ncurses_scr_set(string $filename)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_scrl":{"id":"function.ncurses-scrl","purpose":"Scroll window content up or down without changing current position","prototype":"int ncurses_scrl(int $count)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_show_panel":{"id":"function.ncurses-show-panel","purpose":"Places an invisible panel on top of the stack, making it visible","prototype":"int ncurses_show_panel(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_attr":{"id":"function.ncurses-slk-attr","purpose":"Returns current soft label key attribute","prototype":"int ncurses_slk_attr()","return":"<p class=\"para\">   The attribute, as an integer.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_attroff":{"id":"function.ncurses-slk-attroff","purpose":"Turn off the given attributes for soft function-key labels","prototype":"int ncurses_slk_attroff(int $intarg)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_attron":{"id":"function.ncurses-slk-attron","purpose":"Turn on the given attributes for soft function-key labels","prototype":"int ncurses_slk_attron(int $intarg)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_attrset":{"id":"function.ncurses-slk-attrset","purpose":"Set given attributes for soft function-key labels","prototype":"int ncurses_slk_attrset(int $intarg)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_clear":{"id":"function.ncurses-slk-clear","purpose":"Clears soft labels from screen","prototype":"bool ncurses_slk_clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on errors, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_color":{"id":"function.ncurses-slk-color","purpose":"Sets color for soft label keys","prototype":"int ncurses_slk_color(int $intarg)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_init":{"id":"function.ncurses-slk-init","purpose":"Initializes soft label key functions","prototype":"bool ncurses_slk_init(int $format)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_noutrefresh":{"id":"function.ncurses-slk-noutrefresh","purpose":"Copies soft label keys to virtual screen","prototype":"bool ncurses_slk_noutrefresh()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_refresh":{"id":"function.ncurses-slk-refresh","purpose":"Copies soft label keys to screen","prototype":"int ncurses_slk_refresh()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_restore":{"id":"function.ncurses-slk-restore","purpose":"Restores soft label keys","prototype":"int ncurses_slk_restore()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_set":{"id":"function.ncurses-slk-set","purpose":"Sets function key labels","prototype":"bool ncurses_slk_set(int $labelnr, string $label, int $format)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_slk_touch":{"id":"function.ncurses-slk-touch","purpose":"Forces output when ncurses_slk_noutrefresh is performed","prototype":"int ncurses_slk_touch()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_standend":{"id":"function.ncurses-standend","purpose":"Stop using 'standout' attribute","prototype":"int ncurses_standend()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_standout":{"id":"function.ncurses-standout","purpose":"Start using 'standout' attribute","prototype":"int ncurses_standout()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_start_color":{"id":"function.ncurses-start-color","purpose":"Initializes color functionality","prototype":"int ncurses_start_color()","return":"<p class=\"para\">   Returns <em>0<\/em> on success, or <em>-1<\/em> if the   color table could not be allocated or ncurses was not initialized.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_termattrs":{"id":"function.ncurses-termattrs","purpose":"Returns a logical OR of all attribute flags supported by terminal","prototype":"bool ncurses_termattrs()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_termname":{"id":"function.ncurses-termname","purpose":"Returns terminals (short)-name","prototype":"string ncurses_termname()","return":"<p class=\"para\">   Returns the shortname of the terminal, truncated to 14 characters.   On errors, returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_timeout":{"id":"function.ncurses-timeout","purpose":"Set timeout for special key sequences","prototype":"void ncurses_timeout(int $millisec)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_top_panel":{"id":"function.ncurses-top-panel","purpose":"Moves a visible panel to the top of the stack","prototype":"int ncurses_top_panel(resource $panel)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_typeahead":{"id":"function.ncurses-typeahead","purpose":"Specify different filedescriptor for typeahead checking","prototype":"int ncurses_typeahead(int $fd)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_ungetch":{"id":"function.ncurses-ungetch","purpose":"Put a character back into the input stream","prototype":"int ncurses_ungetch(int $keycode)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_ungetmouse":{"id":"function.ncurses-ungetmouse","purpose":"Pushes mouse event to queue","prototype":"bool ncurses_ungetmouse(array $mevent)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on success, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_update_panels":{"id":"function.ncurses-update-panels","purpose":"Refreshes the virtual screen to reflect the relations between panels in the stack","prototype":"void ncurses_update_panels()","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_use_default_colors":{"id":"function.ncurses-use-default-colors","purpose":"Assign terminal default colors to color id -1","prototype":"bool ncurses_use_default_colors()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_use_env":{"id":"function.ncurses-use-env","purpose":"Control use of environment information about terminal size","prototype":"void ncurses_use_env(bool $flag)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_use_extended_names":{"id":"function.ncurses-use-extended-names","purpose":"Control use of extended names in terminfo descriptions","prototype":"int ncurses_use_extended_names(bool $flag)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_vidattr":{"id":"function.ncurses-vidattr","purpose":"Display the string on the terminal in the video attribute mode","prototype":"int ncurses_vidattr(int $intarg)","return":"","versions":"PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_vline":{"id":"function.ncurses-vline","purpose":"Draw a vertical line at current position using an attributed character and max. n characters long","prototype":"int ncurses_vline(int $charattr, int $n)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_waddch":{"id":"function.ncurses-waddch","purpose":"Adds character at current position in a window and advance cursor","prototype":"int ncurses_waddch(resource $window, int $ch)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_waddstr":{"id":"function.ncurses-waddstr","purpose":"Outputs text at current postion in window","prototype":"int ncurses_waddstr(resource $window, string $str [, int $n = ''])","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wattroff":{"id":"function.ncurses-wattroff","purpose":"Turns off attributes for a window","prototype":"int ncurses_wattroff(resource $window, int $attrs)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wattron":{"id":"function.ncurses-wattron","purpose":"Turns on attributes for a window","prototype":"int ncurses_wattron(resource $window, int $attrs)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wattrset":{"id":"function.ncurses-wattrset","purpose":"Set the attributes for a window","prototype":"int ncurses_wattrset(resource $window, int $attrs)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wborder":{"id":"function.ncurses-wborder","purpose":"Draws a border around the window using attributed characters","prototype":"int ncurses_wborder(resource $window, int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wclear":{"id":"function.ncurses-wclear","purpose":"Clears window","prototype":"int ncurses_wclear(resource $window)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wcolor_set":{"id":"function.ncurses-wcolor-set","purpose":"Sets windows color pairings","prototype":"int ncurses_wcolor_set(resource $window, int $color_pair)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_werase":{"id":"function.ncurses-werase","purpose":"Erase window contents","prototype":"int ncurses_werase(resource $window)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wgetch":{"id":"function.ncurses-wgetch","purpose":"Reads a character from keyboard (window)","prototype":"int ncurses_wgetch(resource $window)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_whline":{"id":"function.ncurses-whline","purpose":"Draws a horizontal line in a window at current position using an attributed character and max. n characters long","prototype":"int ncurses_whline(resource $window, int $charattr, int $n)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wmouse_trafo":{"id":"function.ncurses-wmouse-trafo","purpose":"Transforms window\/stdscr coordinates","prototype":"bool ncurses_wmouse_trafo(resource $window, int $y, int $x, bool $toscreen)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wmove":{"id":"function.ncurses-wmove","purpose":"Moves windows output position","prototype":"int ncurses_wmove(resource $window, int $y, int $x)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wnoutrefresh":{"id":"function.ncurses-wnoutrefresh","purpose":"Copies window to virtual screen","prototype":"int ncurses_wnoutrefresh(resource $window)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wrefresh":{"id":"function.ncurses-wrefresh","purpose":"Refresh window on terminal screen","prototype":"int ncurses_wrefresh(resource $window)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wstandend":{"id":"function.ncurses-wstandend","purpose":"End standout mode for a window","prototype":"int ncurses_wstandend(resource $window)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wstandout":{"id":"function.ncurses-wstandout","purpose":"Enter standout mode for a window","prototype":"int ncurses_wstandout(resource $window)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"ncurses_wvline":{"id":"function.ncurses-wvline","purpose":"Draws a vertical line in a window at current position using an attributed character and max. n characters long","prototype":"int ncurses_wvline(resource $window, int $charattr, int $n)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0"},"newt_bell":{"id":"function.newt-bell","purpose":"Send a beep to the terminal","prototype":"void newt_bell()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_button_bar":{"id":"function.newt-button-bar","purpose":"This function returns a grid containing the buttons created","prototype":"resource newt_button_bar(array $buttons)","return":"<p class=\"para\">   Returns grid containing the buttons created.  <\/p>","versions":"PECL newt >= 0.1"},"newt_button":{"id":"function.newt-button","purpose":"Create a new button","prototype":"resource newt_button(int $left, int $top, string $text)","return":"<p class=\"para\">   Returns a resource link to the created button component, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PECL newt >= 0.1"},"newt_centered_window":{"id":"function.newt-centered-window","purpose":"Open a centered window of the specified size","prototype":"int newt_centered_window(int $width, int $height [, string $title = ''])","return":"<p class=\"para\">   Undefined value.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_get_value":{"id":"function.newt-checkbox-get-value","purpose":"Retreives value of checkox resource","prototype":"string newt_checkbox_get_value(resource $checkbox)","return":"<p class=\"para\">   Returns character indicating the value of the checkbox.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_set_flags":{"id":"function.newt-checkbox-set-flags","purpose":"Configures checkbox resource","prototype":"void newt_checkbox_set_flags(resource $checkbox, int $flags, int $sense)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_set_value":{"id":"function.newt-checkbox-set-value","purpose":"Sets the value of the checkbox","prototype":"void newt_checkbox_set_value(resource $checkbox, string $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_add_item":{"id":"function.newt-checkbox-tree-add-item","purpose":"Adds new item to the checkbox tree","prototype":"void newt_checkbox_tree_add_item(resource $checkboxtree, string $text, mixed $data, int $flags, int $index [, int $... = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_find_item":{"id":"function.newt-checkbox-tree-find-item","purpose":"Finds an item in the checkbox tree","prototype":"array newt_checkbox_tree_find_item(resource $checkboxtree, mixed $data)","return":"<p class=\"para\">   Returns checkbox tree item resource, or <strong><code>NULL<\/code><\/strong> if it wasn&#039;t found.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_get_current":{"id":"function.newt-checkbox-tree-get-current","purpose":"Returns checkbox tree selected item","prototype":"mixed newt_checkbox_tree_get_current(resource $checkboxtree)","return":"<p class=\"para\">   Returns current (selected) checkbox tree item.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_get_entry_value":{"id":"function.newt-checkbox-tree-get-entry-value","purpose":"","prototype":"string newt_checkbox_tree_get_entry_value(resource $checkboxtree, mixed $data)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_get_multi_selection":{"id":"function.newt-checkbox-tree-get-multi-selection","purpose":"","prototype":"array newt_checkbox_tree_get_multi_selection(resource $checkboxtree, string $seqnum)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_get_selection":{"id":"function.newt-checkbox-tree-get-selection","purpose":"","prototype":"array newt_checkbox_tree_get_selection(resource $checkboxtree)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_multi":{"id":"function.newt-checkbox-tree-multi","purpose":"","prototype":"resource newt_checkbox_tree_multi(int $left, int $top, int $height, string $seq [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_set_current":{"id":"function.newt-checkbox-tree-set-current","purpose":"","prototype":"void newt_checkbox_tree_set_current(resource $checkboxtree, mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_set_entry_value":{"id":"function.newt-checkbox-tree-set-entry-value","purpose":"","prototype":"void newt_checkbox_tree_set_entry_value(resource $checkboxtree, mixed $data, string $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_set_entry":{"id":"function.newt-checkbox-tree-set-entry","purpose":"","prototype":"void newt_checkbox_tree_set_entry(resource $checkboxtree, mixed $data, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree_set_width":{"id":"function.newt-checkbox-tree-set-width","purpose":"","prototype":"void newt_checkbox_tree_set_width(resource $checkbox_tree, int $width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox_tree":{"id":"function.newt-checkbox-tree","purpose":"","prototype":"resource newt_checkbox_tree(int $left, int $top, int $height [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_checkbox":{"id":"function.newt-checkbox","purpose":"","prototype":"resource newt_checkbox(int $left, int $top, string $text, string $def_value [, string $seq = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_clear_key_buffer":{"id":"function.newt-clear-key-buffer","purpose":"Discards the contents of the terminal's input buffer without  waiting for additional input","prototype":"void newt_clear_key_buffer()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_cls":{"id":"function.newt-cls","purpose":"","prototype":"void newt_cls()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_compact_button":{"id":"function.newt-compact-button","purpose":"","prototype":"resource newt_compact_button(int $left, int $top, string $text)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_component_add_callback":{"id":"function.newt-component-add-callback","purpose":"","prototype":"void newt_component_add_callback(resource $component, mixed $func_name, mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_component_takes_focus":{"id":"function.newt-component-takes-focus","purpose":"","prototype":"void newt_component_takes_focus(resource $component, bool $takes_focus)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_create_grid":{"id":"function.newt-create-grid","purpose":"","prototype":"resource newt_create_grid(int $cols, int $rows)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_cursor_off":{"id":"function.newt-cursor-off","purpose":"","prototype":"void newt_cursor_off()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_cursor_on":{"id":"function.newt-cursor-on","purpose":"","prototype":"void newt_cursor_on()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_delay":{"id":"function.newt-delay","purpose":"","prototype":"void newt_delay(int $microseconds)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_draw_form":{"id":"function.newt-draw-form","purpose":"","prototype":"void newt_draw_form(resource $form)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_draw_root_text":{"id":"function.newt-draw-root-text","purpose":"Displays the string text at the position indicated","prototype":"void newt_draw_root_text(int $left, int $top, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_entry_get_value":{"id":"function.newt-entry-get-value","purpose":"","prototype":"string newt_entry_get_value(resource $entry)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_entry_set_filter":{"id":"function.newt-entry-set-filter","purpose":"","prototype":"void newt_entry_set_filter(resource $entry, callable $filter, mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_entry_set_flags":{"id":"function.newt-entry-set-flags","purpose":"","prototype":"void newt_entry_set_flags(resource $entry, int $flags, int $sense)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_entry_set":{"id":"function.newt-entry-set","purpose":"","prototype":"void newt_entry_set(resource $entry, string $value [, bool $cursor_at_end = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_entry":{"id":"function.newt-entry","purpose":"","prototype":"resource newt_entry(int $left, int $top, int $width [, string $init_value = '' [, int $flags = '']])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_finished":{"id":"function.newt-finished","purpose":"Uninitializes newt interface","prototype":"int newt_finished()","return":"<p class=\"para\">   Returns 1 on success, 0 on failure.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_add_component":{"id":"function.newt-form-add-component","purpose":"Adds a single component to the form","prototype":"void newt_form_add_component(resource $form, resource $component)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_add_components":{"id":"function.newt-form-add-components","purpose":"Add several components to the form","prototype":"void newt_form_add_components(resource $form, array $components)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_add_hot_key":{"id":"function.newt-form-add-hot-key","purpose":"","prototype":"void newt_form_add_hot_key(resource $form, int $key)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_destroy":{"id":"function.newt-form-destroy","purpose":"Destroys a form","prototype":"void newt_form_destroy(resource $form)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_get_current":{"id":"function.newt-form-get-current","purpose":"","prototype":"resource newt_form_get_current(resource $form)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_run":{"id":"function.newt-form-run","purpose":"Runs a form","prototype":"void newt_form_run(resource $form, array $exit_struct)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_set_background":{"id":"function.newt-form-set-background","purpose":"","prototype":"void newt_form_set_background(resource $from, int $background)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_set_height":{"id":"function.newt-form-set-height","purpose":"","prototype":"void newt_form_set_height(resource $form, int $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_set_size":{"id":"function.newt-form-set-size","purpose":"","prototype":"void newt_form_set_size(resource $form)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_set_timer":{"id":"function.newt-form-set-timer","purpose":"","prototype":"void newt_form_set_timer(resource $form, int $milliseconds)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_set_width":{"id":"function.newt-form-set-width","purpose":"","prototype":"void newt_form_set_width(resource $form, int $width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form_watch_fd":{"id":"function.newt-form-watch-fd","purpose":"","prototype":"void newt_form_watch_fd(resource $form, resource $stream [, int $flags = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_form":{"id":"function.newt-form","purpose":"Create a form","prototype":"resource newt_form([resource $vert_bar = '' [, string $help = '' [, int $flags = '']]])","return":"<p class=\"para\">   Returns a resource link to the created form component, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PECL newt >= 0.1"},"newt_get_screen_size":{"id":"function.newt-get-screen-size","purpose":"Fills in the passed references with the current size of the  terminal","prototype":"void newt_get_screen_size(int $cols, int $rows)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_add_components_to_form":{"id":"function.newt-grid-add-components-to-form","purpose":"","prototype":"void newt_grid_add_components_to_form(resource $grid, resource $form, bool $recurse)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_basic_window":{"id":"function.newt-grid-basic-window","purpose":"","prototype":"resource newt_grid_basic_window(resource $text, resource $middle, resource $buttons)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_free":{"id":"function.newt-grid-free","purpose":"","prototype":"void newt_grid_free(resource $grid, bool $recurse)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_get_size":{"id":"function.newt-grid-get-size","purpose":"","prototype":"void newt_grid_get_size(resouce $grid, int $width, int $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_h_close_stacked":{"id":"function.newt-grid-h-close-stacked","purpose":"","prototype":"resource newt_grid_h_close_stacked(int $element1_type, resource $element1 [, resource $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_h_stacked":{"id":"function.newt-grid-h-stacked","purpose":"","prototype":"resource newt_grid_h_stacked(int $element1_type, resource $element1 [, resource $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_place":{"id":"function.newt-grid-place","purpose":"","prototype":"void newt_grid_place(resource $grid, int $left, int $top)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_set_field":{"id":"function.newt-grid-set-field","purpose":"","prototype":"void newt_grid_set_field(resource $grid, int $col, int $row, int $type, resource $val, int $pad_left, int $pad_top, int $pad_right, int $pad_bottom, int $anchor [, int $flags = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_simple_window":{"id":"function.newt-grid-simple-window","purpose":"","prototype":"resource newt_grid_simple_window(resource $text, resource $middle, resource $buttons)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_v_close_stacked":{"id":"function.newt-grid-v-close-stacked","purpose":"","prototype":"resource newt_grid_v_close_stacked(int $element1_type, resource $element1 [, resource $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_v_stacked":{"id":"function.newt-grid-v-stacked","purpose":"","prototype":"resource newt_grid_v_stacked(int $element1_type, resource $element1 [, resource $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_wrapped_window_at":{"id":"function.newt-grid-wrapped-window-at","purpose":"","prototype":"void newt_grid_wrapped_window_at(resource $grid, string $title, int $left, int $top)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_grid_wrapped_window":{"id":"function.newt-grid-wrapped-window","purpose":"","prototype":"void newt_grid_wrapped_window(resource $grid, string $title)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_init":{"id":"function.newt-init","purpose":"Initialize newt","prototype":"int newt_init()","return":"<p class=\"para\">   Returns 1 on success, 0 on failure.  <\/p>","versions":"PECL newt >= 0.1"},"newt_label_set_text":{"id":"function.newt-label-set-text","purpose":"","prototype":"void newt_label_set_text(resource $label, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_label":{"id":"function.newt-label","purpose":"","prototype":"resource newt_label(int $left, int $top, string $text)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_append_entry":{"id":"function.newt-listbox-append-entry","purpose":"","prototype":"void newt_listbox_append_entry(resource $listbox, string $text, mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_clear_selection":{"id":"function.newt-listbox-clear-selection","purpose":"","prototype":"void newt_listbox_clear_selection(resource $listbox)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_clear":{"id":"function.newt-listbox-clear","purpose":"","prototype":"void newt_listbox_clear(resource $listobx)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_delete_entry":{"id":"function.newt-listbox-delete-entry","purpose":"","prototype":"void newt_listbox_delete_entry(resource $listbox, mixed $key)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_get_current":{"id":"function.newt-listbox-get-current","purpose":"","prototype":"string newt_listbox_get_current(resource $listbox)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_get_selection":{"id":"function.newt-listbox-get-selection","purpose":"","prototype":"array newt_listbox_get_selection(resource $listbox)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_insert_entry":{"id":"function.newt-listbox-insert-entry","purpose":"","prototype":"void newt_listbox_insert_entry(resource $listbox, string $text, mixed $data, mixed $key)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_item_count":{"id":"function.newt-listbox-item-count","purpose":"","prototype":"int newt_listbox_item_count(resource $listbox)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_select_item":{"id":"function.newt-listbox-select-item","purpose":"","prototype":"void newt_listbox_select_item(resource $listbox, mixed $key, int $sense)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_set_current_by_key":{"id":"function.newt-listbox-set-current-by-key","purpose":"","prototype":"void newt_listbox_set_current_by_key(resource $listbox, mixed $key)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_set_current":{"id":"function.newt-listbox-set-current","purpose":"","prototype":"void newt_listbox_set_current(resource $listbox, int $num)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_set_data":{"id":"function.newt-listbox-set-data","purpose":"","prototype":"void newt_listbox_set_data(resource $listbox, int $num, mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_set_entry":{"id":"function.newt-listbox-set-entry","purpose":"","prototype":"void newt_listbox_set_entry(resource $listbox, int $num, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox_set_width":{"id":"function.newt-listbox-set-width","purpose":"","prototype":"void newt_listbox_set_width(resource $listbox, int $width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listbox":{"id":"function.newt-listbox","purpose":"","prototype":"resource newt_listbox(int $left, int $top, int $height [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_listitem_get_data":{"id":"function.newt-listitem-get-data","purpose":"","prototype":"mixed newt_listitem_get_data(resource $item)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_listitem_set":{"id":"function.newt-listitem-set","purpose":"","prototype":"void newt_listitem_set(resource $item, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_listitem":{"id":"function.newt-listitem","purpose":"","prototype":"resource newt_listitem(int $left, int $top, string $text, bool $is_default, resouce $prev_item, mixed $data [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_open_window":{"id":"function.newt-open-window","purpose":"Open a window of the specified size and position","prototype":"int newt_open_window(int $left, int $top, int $width, int $height [, string $title = ''])","return":"<p class=\"para\">   Returns 1 on success, 0 on failure.  <\/p>","versions":"PECL newt >= 0.1"},"newt_pop_help_line":{"id":"function.newt-pop-help-line","purpose":"Replaces the current help line with the one from the stack","prototype":"void newt_pop_help_line()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_pop_window":{"id":"function.newt-pop-window","purpose":"Removes the top window from the display","prototype":"void newt_pop_window()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_push_help_line":{"id":"function.newt-push-help-line","purpose":"Saves the current help line on a stack, and displays the new line","prototype":"void newt_push_help_line([string $text = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_radio_get_current":{"id":"function.newt-radio-get-current","purpose":"","prototype":"resource newt_radio_get_current(resource $set_member)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_radiobutton":{"id":"function.newt-radiobutton","purpose":"","prototype":"resource newt_radiobutton(int $left, int $top, string $text, bool $is_default [, resource $prev_button = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_redraw_help_line":{"id":"function.newt-redraw-help-line","purpose":"","prototype":"void newt_redraw_help_line()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_reflow_text":{"id":"function.newt-reflow-text","purpose":"","prototype":"string newt_reflow_text(string $text, int $width, int $flex_down, int $flex_up, int $actual_width, int $actual_height)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_refresh":{"id":"function.newt-refresh","purpose":"Updates modified portions of the screen","prototype":"void newt_refresh()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_resize_screen":{"id":"function.newt-resize-screen","purpose":"","prototype":"void newt_resize_screen([bool $redraw = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_resume":{"id":"function.newt-resume","purpose":"Resume using the newt interface after calling  newt_suspend","prototype":"void newt_resume()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_run_form":{"id":"function.newt-run-form","purpose":"Runs a form","prototype":"resource newt_run_form(resource $form)","return":"<p class=\"para\">   The component which caused the form to stop running.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Notice that this function doesn&#039;t fit in with newt&#039;s normal naming    convention. It is an older interface which will not work for all forms. It    was left in newt only for legacy applications. It is a simpler interface    than the new <span class=\"function\">newt_form_run<\/span> though, and is still used quite often as a    result. When an application is done with a form, it destroys the form and    all of the components the form contains.   <\/p>  <\/p><\/blockquote>","versions":"PECL newt >= 0.1"},"newt_scale_set":{"id":"function.newt-scale-set","purpose":"","prototype":"void newt_scale_set(resource $scale, int $amount)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_scale":{"id":"function.newt-scale","purpose":"","prototype":"resource newt_scale(int $left, int $top, int $width, int $full_value)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_scrollbar_set":{"id":"function.newt-scrollbar-set","purpose":"","prototype":"void newt_scrollbar_set(resource $scrollbar, int $where, int $total)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_set_help_callback":{"id":"function.newt-set-help-callback","purpose":"","prototype":"void newt_set_help_callback(mixed $function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_set_suspend_callback":{"id":"function.newt-set-suspend-callback","purpose":"Set a callback function which gets invoked when user  presses the suspend key","prototype":"void newt_set_suspend_callback(callable $function, mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_suspend":{"id":"function.newt-suspend","purpose":"Tells newt to return the terminal to its initial state","prototype":"void newt_suspend()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_textbox_get_num_lines":{"id":"function.newt-textbox-get-num-lines","purpose":"","prototype":"int newt_textbox_get_num_lines(resource $textbox)","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_textbox_reflowed":{"id":"function.newt-textbox-reflowed","purpose":"","prototype":"resource newt_textbox_reflowed(int $left, int $top, char $*text, int $width, int $flex_down, int $flex_up [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_textbox_set_height":{"id":"function.newt-textbox-set-height","purpose":"","prototype":"void newt_textbox_set_height(resource $textbox, int $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_textbox_set_text":{"id":"function.newt-textbox-set-text","purpose":"","prototype":"void newt_textbox_set_text(resource $textbox, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_textbox":{"id":"function.newt-textbox","purpose":"","prototype":"resource newt_textbox(int $left, int $top, int $width, int $height [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_vertical_scrollbar":{"id":"function.newt-vertical-scrollbar","purpose":"","prototype":"resource newt_vertical_scrollbar(int $left, int $top, int $height [, int $normal_colorset = '' [, int $thumb_colorset = '']])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_wait_for_key":{"id":"function.newt-wait-for-key","purpose":"Doesn't return until a key has been pressed","prototype":"void newt_wait_for_key()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_win_choice":{"id":"function.newt-win-choice","purpose":"","prototype":"int newt_win_choice(string $title, string $button1_text, string $button2_text, string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_win_entries":{"id":"function.newt-win-entries","purpose":"","prototype":"int newt_win_entries(string $title, string $text, int $suggested_width, int $flex_down, int $flex_up, int $data_width, array $items, string $button1 [, string $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL newt >= 0.1"},"newt_win_menu":{"id":"function.newt-win-menu","purpose":"","prototype":"int newt_win_menu(string $title, string $text, int $suggestedWidth, int $flexDown, int $flexUp, int $maxListHeight, array $items, int $listItem [, string $button1 = '' [, string $... = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_win_message":{"id":"function.newt-win-message","purpose":"","prototype":"void newt_win_message(string $title, string $button_text, string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_win_messagev":{"id":"function.newt-win-messagev","purpose":"","prototype":"void newt_win_messagev(string $title, string $button_text, string $format, array $args)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL newt >= 0.1"},"newt_win_ternary":{"id":"function.newt-win-ternary","purpose":"","prototype":"int newt_win_ternary(string $title, string $button1_text, string $button2_text, string $button3_text, string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   What the function returns, first on success, then on failure. See   also the &amp;return.success; entity  <\/p>","versions":"PECL newt >= 0.1"},"readline_add_history":{"id":"function.readline-add-history","purpose":"Adds a line to the history","prototype":"bool readline_add_history(string $line)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline_callback_handler_install":{"id":"function.readline-callback-handler-install","purpose":"Initializes the readline callback interface and terminal, prints the prompt and returns immediately","prototype":"bool readline_callback_handler_install(string $prompt, callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"readline_callback_handler_remove":{"id":"function.readline-callback-handler-remove","purpose":"Removes a previously installed callback handler and restores terminal settings","prototype":"bool readline_callback_handler_remove()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a previously installed callback handler was removed, or   <strong><code>FALSE<\/code><\/strong> if one could not be found.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"readline_callback_read_char":{"id":"function.readline-callback-read-char","purpose":"Reads a character and informs the readline callback interface when a line is received","prototype":"void readline_callback_read_char()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"readline_clear_history":{"id":"function.readline-clear-history","purpose":"Clears the history","prototype":"bool readline_clear_history()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline_completion_function":{"id":"function.readline-completion-function","purpose":"Registers a completion function","prototype":"bool readline_completion_function(callable $function)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline_info":{"id":"function.readline-info","purpose":"Gets\/sets various internal readline variables","prototype":"mixed readline_info([string $varname = '' [, string $newvalue = '']])","return":"<p class=\"para\">   If called with no parameters, this function returns an array of   values for all the setting readline uses.  The elements will   be indexed by the following values: done, end, erase_empty_line,   library_version, line_buffer, mark, pending_input, point, prompt,   readline_name, and terminal_name.  <\/p>  <p class=\"para\">   If called with one or two parameters, the old value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline_list_history":{"id":"function.readline-list-history","purpose":"Lists the history","prototype":"array readline_list_history()","return":"<p class=\"para\">   Returns an array of the entire command line history.  The elements are   indexed by integers starting at zero.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline_on_new_line":{"id":"function.readline-on-new-line","purpose":"Inform readline that the cursor has moved to a new line","prototype":"void readline_on_new_line()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"readline_read_history":{"id":"function.readline-read-history","purpose":"Reads the history","prototype":"bool readline_read_history([string $filename = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline_redisplay":{"id":"function.readline-redisplay","purpose":"Redraws the display","prototype":"void readline_redisplay()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"readline_write_history":{"id":"function.readline-write-history","purpose":"Writes the history","prototype":"bool readline_write_history([string $filename = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readline":{"id":"function.readline","purpose":"Reads a line","prototype":"string readline([string $prompt = ''])","return":"<p class=\"para\">   Returns a single string from the user. The line returned has the ending   newline removed.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bzclose":{"id":"function.bzclose","purpose":"Close a bzip2 file","prototype":"int bzclose(resource $bz)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzcompress":{"id":"function.bzcompress","purpose":"Compress a string into bzip2 encoded data","prototype":"mixed bzcompress(string $source [, int $blocksize = 4 [, int $workfactor = '']])","return":"<p class=\"para\">   The compressed string, or an error number if an error occurred.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzdecompress":{"id":"function.bzdecompress","purpose":"Decompresses bzip2 encoded data","prototype":"mixed bzdecompress(string $source [, int $small = ''])","return":"<p class=\"para\">   The decompressed string, or an error number if an error occurred.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzerrno":{"id":"function.bzerrno","purpose":"Returns a bzip2 error number","prototype":"int bzerrno(resource $bz)","return":"<p class=\"para\">   Returns the error number as an integer.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzerror":{"id":"function.bzerror","purpose":"Returns the bzip2 error number and error string in an array","prototype":"array bzerror(resource $bz)","return":"<p class=\"para\">   Returns an associative array, with the error code in the    <em>errno<\/em> entry, and the error message in the   <em>errstr<\/em> entry.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzerrstr":{"id":"function.bzerrstr","purpose":"Returns a bzip2 error string","prototype":"string bzerrstr(resource $bz)","return":"<p class=\"para\">   Returns a string containing the error message.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzflush":{"id":"function.bzflush","purpose":"Force a write of all buffered data","prototype":"bool bzflush(resource $bz)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzopen":{"id":"function.bzopen","purpose":"Opens a bzip2 compressed file","prototype":"resource bzopen(mixed $file, string $mode)","return":"<p class=\"para\">   If the open fails, <span class=\"function\">bzopen<\/span> returns <strong><code>FALSE<\/code><\/strong>, otherwise   it returns a pointer to the newly opened file.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzread":{"id":"function.bzread","purpose":"Binary safe bzip2 file read","prototype":"string bzread(resource $bz [, int $length = 1024])","return":"<p class=\"para\">   Returns the uncompressed data, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"bzwrite":{"id":"function.bzwrite","purpose":"Binary safe bzip2 file write","prototype":"int bzwrite(resource $bz, string $data [, int $length = ''])","return":"<p class=\"para\">   Returns the number of bytes written, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"lzf_compress":{"id":"function.lzf-compress","purpose":"LZF compression","prototype":"string lzf_compress(string $data)","return":"<p class=\"para\">   Returns the compressed data or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL lzf >= 0.1.0"},"lzf_decompress":{"id":"function.lzf-decompress","purpose":"LZF decompression","prototype":"string lzf_decompress(string $data)","return":"<p class=\"para\">   Returns the decompressed data or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL lzf >= 0.1.0"},"lzf_optimized_for":{"id":"function.lzf-optimized-for","purpose":"Determines what LZF extension was optimized for","prototype":"int lzf_optimized_for()","return":"<p class=\"para\">   Returns 1 if LZF was optimized for speed, 0 for compression.  <\/p>","versions":"PECL lzf >= 1.0.0"},"Phar::addEmptyDir":{"id":"phar.addemptydir","purpose":"Add an empty directory to the phar archive","prototype":"void Phar::addEmptyDir(string $dirname)","return":"<p class=\"para\">   no return value, exception is thrown on failure.  <\/p>","versions":"Unknown"},"Phar::addFile":{"id":"phar.addfile","purpose":"Add a file from the filesystem to the phar archive","prototype":"void Phar::addFile(string $file [, string $localname = ''])","return":"<p class=\"para\">   no return value, exception is thrown on failure.  <\/p>","versions":"Unknown"},"Phar::addFromString":{"id":"phar.addfromstring","purpose":"Add a file from a string to the phar archive","prototype":"void Phar::addFromString(string $localname, string $contents)","return":"<p class=\"para\">   no return value, exception is thrown on failure.  <\/p>","versions":"Unknown"},"Phar::apiVersion":{"id":"phar.apiversion","purpose":"Returns the api version","prototype":"string Phar::apiVersion()","return":"<p class=\"para\">   The API version string as in <em>&quot;1.0.0&quot;<\/em>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::buildFromDirectory":{"id":"phar.buildfromdirectory","purpose":"Construct a phar archive from the files within a directory","prototype":"array Phar::buildFromDirectory(string $base_dir [, string $regex = ''])","return":"<p class=\"para\">   <span class=\"function\">Phar::buildFromDirectory<\/span> returns an associative array   mapping internal path of file to the full path of the file on the   filesystem.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::buildFromIterator":{"id":"phar.buildfromiterator","purpose":"Construct a phar archive from an iterator","prototype":"array Phar::buildFromIterator(Iterator $iter [, string $base_directory = ''])","return":"<p class=\"para\">   <span class=\"function\">Phar::buildFromIterator<\/span> returns an associative array   mapping internal path of file to the full path of the file on the   filesystem.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::canCompress":{"id":"phar.cancompress","purpose":"Returns whether phar extension supports compression using either zlib or bzip2","prototype":"bool Phar::canCompress([int $type = ''])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if compression\/decompression is available, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::canWrite":{"id":"phar.canwrite","purpose":"Returns whether phar extension supports writing and creating phars","prototype":"bool Phar::canWrite()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if write access is enabled, <strong><code>FALSE<\/code><\/strong> if it is disabled.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::compress":{"id":"phar.compress","purpose":"Compresses the entire Phar archive using Gzip or Bzip2 compression","prototype":"object Phar::compress(int $compression [, string $extension = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">Phar<\/span> object.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::compressAllFilesBZIP2":{"id":"phar.compressallfilesbzip2","purpose":"Compresses all files in the current Phar archive using Bzip2 compression","prototype":"bool Phar::compressAllFilesBZIP2()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::compressAllFilesGZ":{"id":"phar.compressallfilesgz","purpose":"Compresses all files in the current Phar archive using Gzip compression","prototype":"bool Phar::compressAllFilesGZ()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::compressFiles":{"id":"phar.compressfiles","purpose":"Compresses all files in the current Phar archive","prototype":"void Phar::compressFiles(int $compression)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::__construct":{"id":"phar.construct","purpose":"Construct a Phar archive object","prototype":" Phar::__construct(string $fname [, int $flags = '' [, string $alias = '']])","return":"","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::convertToData":{"id":"phar.converttodata","purpose":"Convert a phar archive to a non-executable tar or zip file","prototype":"PharData Phar::convertToData([int $format = 9021976 [, int $compression = 9021976 [, string $extension = '']]])","return":"<p class=\"para\">   The method returns a <span class=\"classname\">PharData<\/span> object on success and throws an   exception on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::convertToExecutable":{"id":"phar.converttoexecutable","purpose":"Convert a phar archive to another executable phar archive file format","prototype":"Phar Phar::convertToExecutable([int $format = 9021976 [, int $compression = 9021976 [, string $extension = '']]])","return":"<p class=\"para\">   The method returns a <span class=\"classname\">Phar<\/span> object on success and throws an   exception on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::copy":{"id":"phar.copy","purpose":"Copy a file internal to the phar archive to another new file within the phar","prototype":"bool Phar::copy(string $oldfile, string $newfile)","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is safer to encase method call in a   try\/catch block and assume success if no exception is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::count":{"id":"phar.count","purpose":"Returns the number of entries (files) in the Phar archive","prototype":"int Phar::count()","return":"<p class=\"para\">   The number of files contained within this phar, or <em>0<\/em> (the number zero)   if none.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::createDefaultStub":{"id":"phar.createdefaultstub","purpose":"Create a phar-file format specific stub","prototype":"string Phar::createDefaultStub([string $indexfile = '' [, string $webindexfile = '']])","return":"<p class=\"para\">   Returns a string containing the contents of a customized bootstrap loader (stub)   that allows the created Phar archive to work with or without the Phar extension   enabled.  <\/p>","versions":"Unknown"},"Phar::decompress":{"id":"phar.decompress","purpose":"Decompresses the entire Phar archive","prototype":"object Phar::decompress([string $extension = ''])","return":"<p class=\"para\">   A <span class=\"classname\">Phar<\/span> object is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::decompressFiles":{"id":"phar.decompressfiles","purpose":"Decompresses all files in the current Phar archive","prototype":"bool Phar::decompressFiles()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::delMetadata":{"id":"phar.delmetadata","purpose":"Deletes the global metadata of the phar","prototype":"bool Phar::delMetadata()","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.0"},"Phar::delete":{"id":"phar.delete","purpose":"Delete a file within a phar archive","prototype":"bool Phar::delete(string $entry)","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::extractTo":{"id":"phar.extractto","purpose":"Extract the contents of a phar archive to a directory","prototype":"bool Phar::extractTo(string $pathto [, string|array $files = '' [, bool $overwrite = '']])","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  <\/p>","versions":"Unknown"},"Phar::getAlias":{"id":"phar.getalias","purpose":"Get the alias for Phar","prototype":"string Phar::getAlias()","return":"<p class=\"para\">   Returns the alias or <strong><code>NULL<\/code><\/strong> if there&#039;s no alias.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.1"},"Phar::getMetadata":{"id":"phar.getmetadata","purpose":"Returns phar archive meta-data","prototype":"mixed Phar::getMetadata()","return":"<p class=\"para\">   any PHP variable that can be serialized and is stored as meta-data for the Phar archive,   or <strong><code>NULL<\/code><\/strong> if no meta-data is stored.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::getModified":{"id":"phar.getmodified","purpose":"Return whether phar was modified","prototype":"bool Phar::getModified()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the phar has been modified since opened, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::getPath":{"id":"phar.getpath","purpose":"Get the real path to the Phar archive on disk","prototype":"string Phar::getPath()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"Phar::getSignature":{"id":"phar.getsignature","purpose":"Return MD5\/SHA1\/SHA256\/SHA512\/OpenSSL signature of a Phar archive","prototype":"array Phar::getSignature()","return":"<p class=\"para\">   Array with the opened archive&#039;s signature in <em>hash<\/em> key and <em>MD5<\/em>,   <em>SHA-1<\/em>,   <em>SHA-256<\/em>, <em>SHA-512<\/em>, or <em>OpenSSL<\/em>   in <em>hash_type<\/em>.  This signature is a hash calculated on the   entire phar&#039;s contents, and may be used to verify the integrity of the archive.   A valid signature is absolutely required of all executable phar archives if the   <a href=\"phar.configuration.html#ini.phar.require-hash\" class=\"link\">phar.require_hash<\/a> INI variable   is set to true.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::getStub":{"id":"phar.getstub","purpose":"Return the PHP loader or bootstrap stub of a Phar archive","prototype":"string Phar::getStub()","return":"<p class=\"para\">   Returns a string containing the contents of the bootstrap loader (stub) of   the current Phar archive.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::getSupportedCompression":{"id":"phar.getsupportedcompression","purpose":"Return array of supported compression algorithms","prototype":"array Phar::getSupportedCompression()","return":"<p class=\"para\">   Returns an array containing any of <em>Phar::GZ<\/em> or   <em>Phar::BZ2<\/em>, depending on the availability of   the <a href=\"book.zlib.html\" class=\"link\">zlib<\/a> extension or the   <a href=\"book.bzip2.html\" class=\"link\">bz2<\/a> extension.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.0"},"Phar::getSupportedSignatures":{"id":"phar.getsupportedsignatures","purpose":"Return array of supported signature types","prototype":"array Phar::getSupportedSignatures()","return":"<p class=\"para\">   Returns an array containing any of <em>MD5<\/em>, <em>SHA-1<\/em>,   <em>SHA-256<\/em>, <em>SHA-512<\/em>, or <em>OpenSSL<\/em>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.1.0"},"Phar::getVersion":{"id":"phar.getversion","purpose":"Return version info of Phar archive","prototype":"string Phar::getVersion()","return":"<p class=\"para\">   The opened archive&#039;s API version.  This is not to be confused with   the API version that the loaded phar extension will use to create   new phars.  Each Phar archive has the API version hard-coded into   its manifest.  See <a href=\"phar.fileformat.html\" class=\"link\">Phar file format<\/a>   documentation for more information.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::hasMetadata":{"id":"phar.hasmetadata","purpose":"Returns whether phar has global meta-data","prototype":"bool Phar::hasMetadata()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if meta-data has been set, and <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.0"},"Phar::interceptFileFuncs":{"id":"phar.interceptfilefuncs","purpose":"Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions","prototype":"void Phar::interceptFileFuncs()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::isBuffering":{"id":"phar.isbuffering","purpose":"Used to determine whether Phar write operations are being buffered, or are flushing directly to disk","prototype":"bool Phar::isBuffering()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the write operations are being buffer, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::isCompressed":{"id":"phar.iscompressed","purpose":"Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz\/tar.bz and so on)","prototype":"mixed Phar::isCompressed()","return":"<p class=\"para\">   <em>Phar::GZ<\/em>, <em>Phar::BZ2<\/em> or <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::isFileFormat":{"id":"phar.isfileformat","purpose":"Returns true if the phar archive is based on the tar\/phar\/zip file format depending on the parameter","prototype":"bool Phar::isFileFormat(int $format)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the phar archive matches the file format requested by the parameter  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::isValidPharFilename":{"id":"phar.isvalidpharfilename","purpose":"Returns whether the given filename is a valid phar filename","prototype":"bool Phar::isValidPharFilename(string $filename [, bool $executable = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the filename is valid, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.0"},"Phar::isWritable":{"id":"phar.iswritable","purpose":"Returns true if the phar archive can be modified","prototype":"bool Phar::isWritable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the phar archive can be modified  <\/p>","versions":"Unknown"},"Phar::loadPhar":{"id":"phar.loadphar","purpose":"Loads any phar archive with an alias","prototype":"bool Phar::loadPhar(string $filename [, string $alias = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::mapPhar":{"id":"phar.mapphar","purpose":"Reads the currently executed file (a phar) and registers its manifest","prototype":"bool Phar::mapPhar([string $alias = '' [, int $dataoffset = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::mount":{"id":"phar.mount","purpose":"Mount an external path or file to a virtual location within the phar archive","prototype":"void Phar::mount(string $pharpath, string $externalpath)","return":"<p class=\"para\">   No return.  <span class=\"classname\">PharException<\/span> is thrown on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::mungServer":{"id":"phar.mungserver","purpose":"Defines a list of up to 4 $_SERVER variables that should be modified for execution","prototype":"void Phar::mungServer(array $munglist)","return":"<p class=\"para\">   No return.  <\/p>","versions":"Unknown"},"Phar::offsetExists":{"id":"phar.offsetexists","purpose":"Determines whether a file exists in the phar","prototype":"bool Phar::offsetExists(string $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file exists within the phar, or <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::offsetGet":{"id":"phar.offsetget","purpose":"Gets a PharFileInfo object for a specific file","prototype":"int Phar::offsetGet(string $offset)","return":"<p class=\"para\">   A <span class=\"classname\">PharFileInfo<\/span> object is returned that can be used to   iterate over a file&#039;s contents or to retrieve information about the current file.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::offsetSet":{"id":"phar.offsetset","purpose":"Set the contents of an internal file to those of an external file","prototype":"void Phar::offsetSet(string $offset, string $value)","return":"<p class=\"para\">   No return values.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::offsetUnset":{"id":"phar.offsetunset","purpose":"Remove a file from a phar","prototype":"bool Phar::offsetUnset(string $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::running":{"id":"phar.running","purpose":"Returns the full path on disk or full phar URL to the currently executing Phar archive","prototype":"string Phar::running([bool $retphar = ''])","return":"<p class=\"para\">   Returns the filename if valid, empty string otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::setAlias":{"id":"phar.setalias","purpose":"Set the alias for the Phar archive","prototype":"bool Phar::setAlias(string $alias)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.1"},"Phar::setDefaultStub":{"id":"phar.setdefaultstub","purpose":"Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader","prototype":"bool Phar::setDefaultStub([string $index = '' [, string $webindex = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"Unknown"},"Phar::setMetadata":{"id":"phardata.setmetadata","purpose":"Sets phar archive meta-data","prototype":"void Phar::setMetadata(mixed $metadata)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::setSignatureAlgorithm":{"id":"phardata.setsignaturealgorithm","purpose":"Set the signature algorithm for a phar and apply it","prototype":"void Phar::setSignatureAlgorithm(int $sigtype)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.1.0"},"Phar::setStub":{"id":"phar.setstub","purpose":"Used to set the PHP loader or bootstrap stub of a Phar archive","prototype":"bool Phar::setStub(string $stub [, int $len = -1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::startBuffering":{"id":"phar.startbuffering","purpose":"Start buffering Phar write operations, do not modify the Phar object on disk","prototype":"void Phar::startBuffering()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::stopBuffering":{"id":"phar.stopbuffering","purpose":"Stop buffering write requests to the Phar archive, and save changes to disk","prototype":"void Phar::stopBuffering()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"Phar::uncompressAllFiles":{"id":"phar.uncompressallfiles","purpose":"Uncompresses all files in the current Phar archive","prototype":"bool Phar::uncompressAllFiles()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL phar < 2.0.0"},"Phar::unlinkArchive":{"id":"phar.unlinkarchive","purpose":"Completely remove a phar archive from disk and from memory","prototype":"bool Phar::unlinkArchive(string $archive)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"Phar::webPhar":{"id":"phar.webphar","purpose":"mapPhar for web-based phars. front controller for web applications","prototype":"void Phar::webPhar([string $alias = '' [, string $index = \"index.php\" [, string $f404 = '' [, array $mimetypes = '' [, callable $rewrites = '']]]]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::addEmptyDir":{"id":"phardata.addemptydir","purpose":"Add an empty directory to the tar\/zip archive","prototype":"void PharData::addEmptyDir(string $dirname)","return":"<p class=\"para\">   no return value, exception is thrown on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::addFile":{"id":"phardata.addfile","purpose":"Add a file from the filesystem to the tar\/zip archive","prototype":"void PharData::addFile(string $file [, string $localname = ''])","return":"<p class=\"para\">   no return value, exception is thrown on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::addFromString":{"id":"phardata.addfromstring","purpose":"Add a file from the filesystem to the tar\/zip archive","prototype":"void PharData::addFromString(string $localname, string $contents)","return":"<p class=\"para\">   no return value, exception is thrown on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::buildFromDirectory":{"id":"phardata.buildfromdirectory","purpose":"Construct a tar\/zip archive from the files within a directory","prototype":"array PharData::buildFromDirectory(string $base_dir [, string $regex = ''])","return":"<p class=\"para\">   <span class=\"function\">Phar::buildFromDirectory<\/span> returns an associative array   mapping internal path of file to the full path of the file on the   filesystem.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::buildFromIterator":{"id":"phardata.buildfromiterator","purpose":"Construct a tar or zip archive from an iterator","prototype":"array PharData::buildFromIterator(Iterator $iter [, string $base_directory = ''])","return":"<p class=\"para\">   <span class=\"function\">PharData::buildFromIterator<\/span> returns an associative array   mapping internal path of file to the full path of the file on the   filesystem.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::compress":{"id":"phardata.compress","purpose":"Compresses the entire tar\/zip archive using Gzip or Bzip2 compression","prototype":"object PharData::compress(int $compression [, string $extension = ''])","return":"<p class=\"para\">   A <span class=\"classname\">PharData<\/span> object is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::compressFiles":{"id":"phardata.compressfiles","purpose":"Compresses all files in the current tar\/zip archive","prototype":"void PharData::compressFiles(int $compression)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::__construct":{"id":"phardata.construct","purpose":"Construct a non-executable tar or zip archive object","prototype":" PharData::__construct(string $fname [, int $flags = '' [, string $alias = '' [, int $format = '']]])","return":"","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::convertToData":{"id":"phardata.converttodata","purpose":"Convert a phar archive to a non-executable tar or zip file","prototype":"PharData PharData::convertToData([int $format = '' [, int $compression = '' [, string $extension = '']]])","return":"<p class=\"para\">   The method returns a <span class=\"classname\">PharData<\/span> object on success and throws an   exception on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::convertToExecutable":{"id":"phardata.converttoexecutable","purpose":"Convert a non-executable tar\/zip archive to an executable phar archive","prototype":"Phar PharData::convertToExecutable([int $format = '' [, int $compression = '' [, string $extension = '']]])","return":"<p class=\"para\">   The method returns a <span class=\"classname\">Phar<\/span> object on success and throws an   exception on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::copy":{"id":"phardata.copy","purpose":"Copy a file internal to the phar archive to another new file within the phar","prototype":"bool PharData::copy(string $oldfile, string $newfile)","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is safer to encase method call in a   try\/catch block and assume success if no exception is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::decompress":{"id":"phardata.decompress","purpose":"Decompresses the entire Phar archive","prototype":"object PharData::decompress([string $extension = ''])","return":"<p class=\"para\">   A <span class=\"classname\">PharData<\/span> object is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::decompressFiles":{"id":"phardata.decompressfiles","purpose":"Decompresses all files in the current zip archive","prototype":"bool PharData::decompressFiles()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::delMetadata":{"id":"phardata.delmetadata","purpose":"Deletes the global metadata of a zip archive","prototype":"bool PharData::delMetadata()","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::delete":{"id":"phardata.delete","purpose":"Delete a file within a tar\/zip archive","prototype":"bool PharData::delete(string $entry)","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::extractTo":{"id":"phardata.extractto","purpose":"Extract the contents of a tar\/zip archive to a directory","prototype":"bool PharData::extractTo(string $pathto [, string|array $files = '' [, bool $overwrite = '']])","return":"<p class=\"para\">   returns <strong><code>TRUE<\/code><\/strong> on success, but it is better to check for thrown exception,   and assume success if none is thrown.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::isWritable":{"id":"phardata.iswritable","purpose":"Returns true if the tar\/zip archive can be modified","prototype":"bool PharData::isWritable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the tar\/zip archive can be modified  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::offsetSet":{"id":"phardata.offsetset","purpose":"Set the contents of a file within the tar\/zip to those of an external file or string","prototype":"void PharData::offsetSet(string $offset, string $value)","return":"<p class=\"para\">   No return values.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::offsetUnset":{"id":"phardata.offsetunset","purpose":"Remove a file from a tar\/zip archive","prototype":"bool PharData::offsetUnset(string $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::setAlias":{"id":"phardata.setalias","purpose":"Dummy function (Phar::setAlias is not valid for PharData)","prototype":"bool PharData::setAlias(string $alias)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::setDefaultStub":{"id":"phardata.setdefaultstub","purpose":"Dummy function (Phar::setDefaultStub is not valid for PharData)","prototype":"bool PharData::setDefaultStub([string $index = '' [, string $webindex = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharData::setStub":{"id":"phardata.setstub","purpose":"Dummy function (Phar::setStub is not valid for PharData)","prototype":"bool PharData::setStub(string $stub [, int $len = -1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharFileInfo::chmod":{"id":"pharfileinfo.chmod","purpose":"Sets file-specific permission bits","prototype":"void PharFileInfo::chmod(int $permissions)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::compress":{"id":"pharfileinfo.compress","purpose":"Compresses the current Phar entry with either zlib or bzip2 compression","prototype":"bool PharFileInfo::compress(int $compression)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharFileInfo::__construct":{"id":"pharfileinfo.construct","purpose":"Construct a Phar entry object","prototype":" PharFileInfo::__construct(string $entry)","return":"","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::decompress":{"id":"pharfileinfo.decompress","purpose":"Decompresses the current Phar entry within the phar","prototype":"bool PharFileInfo::decompress()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 2.0.0"},"PharFileInfo::delMetadata":{"id":"pharfileinfo.delmetadata","purpose":"Deletes the metadata of the entry","prototype":"bool PharFileInfo::delMetadata()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if successful, <strong><code>FALSE<\/code><\/strong> if the entry had no metadata.   As with all functionality that modifies the contents of   a phar, the <a href=\"phar.configuration.html#ini.phar.readonly\" class=\"link\">phar.readonly<\/a> INI variable   must be off in order to succeed if the file is within a <span class=\"classname\">Phar<\/span>   archive.  Files within <span class=\"classname\">PharData<\/span> archives do not have   this restriction.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.0"},"PharFileInfo::getCRC32":{"id":"pharfileinfo.getcrc32","purpose":"Returns CRC32 code or throws an exception if CRC has not been verified","prototype":"int PharFileInfo::getCRC32()","return":"<p class=\"para\">   The <span class=\"function\">crc32<\/span> checksum of the file within the Phar archive.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::getCompressedSize":{"id":"pharfileinfo.getcompressedsize","purpose":"Returns the actual size of the file (with compression) inside the Phar archive","prototype":"int PharFileInfo::getCompressedSize()","return":"<p class=\"para\">   The size in bytes of the file within the Phar archive on disk.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::getContent":{"id":"pharfileinfo.getcontent","purpose":"Get the complete file contents of the entry","prototype":"string PharFileInfo::getContent()","return":"<p class=\"para\">   Returns the file contents.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"PharFileInfo::getMetadata":{"id":"pharfileinfo.getmetadata","purpose":"Returns file-specific meta-data saved with a file","prototype":"mixed PharFileInfo::getMetadata()","return":"<p class=\"para\">   any PHP variable that can be serialized and is stored as meta-data for the file,   or <strong><code>NULL<\/code><\/strong> if no meta-data is stored.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::getPharFlags":{"id":"pharfileinfo.getpharflags","purpose":"Returns the Phar file entry flags","prototype":"int PharFileInfo::getPharFlags()","return":"<p class=\"para\">   The Phar flags (always <em>0<\/em> in the current implementation)  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::hasMetadata":{"id":"pharfileinfo.hasmetadata","purpose":"Returns the metadata of the entry","prototype":"bool PharFileInfo::hasMetadata()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if no metadata is set or is <strong><code>NULL<\/code><\/strong>, <strong><code>TRUE<\/code><\/strong> if metadata is not <strong><code>NULL<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.2.0"},"PharFileInfo::isCRCChecked":{"id":"pharfileinfo.iscrcchecked","purpose":"Returns whether file entry has had its CRC verified","prototype":"bool PharFileInfo::isCRCChecked()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the file has had its CRC verified, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::isCompressed":{"id":"pharfileinfo.iscompressed","purpose":"Returns whether the entry is compressed","prototype":"bool PharFileInfo::isCompressed([int $compression_type = 9021976])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the file is compressed within the Phar archive, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::isCompressedBZIP2":{"id":"pharfileinfo.iscompressedbzip2","purpose":"Returns whether the entry is compressed using bzip2","prototype":"bool PharFileInfo::isCompressedBZIP2()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the file is compressed within the Phar archive using Bzip2, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::isCompressedGZ":{"id":"pharfileinfo.iscompressedgz","purpose":"Returns whether the entry is compressed using gz","prototype":"bool PharFileInfo::isCompressedGZ()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the file is compressed within the Phar archive using Gzip, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::setCompressedBZIP2":{"id":"pharfileinfo.setcompressedbzip2","purpose":"Compresses the current Phar entry within the phar using Bzip2 compression","prototype":"bool PharFileInfo::setCompressedBZIP2()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::setCompressedGZ":{"id":"pharfileinfo.setcompressedgz","purpose":"Compresses the current Phar entry within the phar using gz compression","prototype":"bool PharFileInfo::setCompressedGZ()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::setMetadata":{"id":"pharfileinfo.setmetadata","purpose":"Sets file-specific meta-data saved with a file","prototype":"void PharFileInfo::setMetadata(mixed $metadata)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharFileInfo::setUncompressed":{"id":"pharfileinfo.setuncompressed","purpose":"Uncompresses the current Phar entry within the phar, if it is compressed","prototype":"bool PharFileInfo::setUncompressed()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL phar >= 1.0.0"},"PharException":{"id":"pharexception.intro.unused","purpose":"The PharException class provides a phar-specific exception class    for try\/catch blocks","prototype":" PharException()","return":"","versions":"Unknown"},"rar_wrapper_cache_stats":{"id":"function.rar-wrapper-cache-stats","purpose":"Cache hits and misses for the URL wrapper","prototype":"string rar_wrapper_cache_stats()","return":"<p class=\"para\">     <\/p>","versions":"PECL rar >= 3.0.0"},"RarArchive::close":{"id":"rararchive.close","purpose":"Close RAR archive and free all resources","prototype":"bool RarArchive::close(RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"rar_close":{"id":"rararchive.close","purpose":"Close RAR archive and free all resources","prototype":"bool rar_close(RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarArchive::getComment":{"id":"rararchive.getcomment","purpose":"Get comment text from the RAR archive","prototype":"string RarArchive::getComment(RarArchive $rarfile)","return":"<p class=\"para\">   Returns the comment or <strong><code>NULL<\/code><\/strong> if there is none.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">      RAR has currently no support for unicode comments. The encoding of the      result of this function is not specified, but it will probably be      Windows-1252.    <\/p>  <\/p><\/blockquote>","versions":"PECL rar >= 2.0.0"},"rar_comment_get":{"id":"rararchive.getcomment","purpose":"Get comment text from the RAR archive","prototype":"string rar_comment_get(RarArchive $rarfile)","return":"<p class=\"para\">   Returns the comment or <strong><code>NULL<\/code><\/strong> if there is none.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">      RAR has currently no support for unicode comments. The encoding of the      result of this function is not specified, but it will probably be      Windows-1252.    <\/p>  <\/p><\/blockquote>","versions":"PECL rar >= 2.0.0"},"RarArchive::getEntries":{"id":"rararchive.getentries","purpose":"Get full list of entries from the RAR archive","prototype":"RarArchive RarArchive::getEntries(RarArchive $rarfile)","return":"<p class=\"para\">   <span class=\"function\">rar_list<\/span> returns array of <span class=\"type\">RarEntry<\/span> objects    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"rar_list":{"id":"rararchive.getentries","purpose":"Get full list of entries from the RAR archive","prototype":"RarArchive rar_list(RarArchive $rarfile)","return":"<p class=\"para\">   <span class=\"function\">rar_list<\/span> returns array of <span class=\"type\">RarEntry<\/span> objects    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarArchive::getEntry":{"id":"rararchive.getentry","purpose":"Get entry object from the RAR archive","prototype":"RarEntry RarArchive::getEntry(string $entryname, RarArchive $rarfile)","return":"<p class=\"para\">   Returns the matching <span class=\"type\">RarEntry<\/span> object  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"rar_entry_get":{"id":"rararchive.getentry","purpose":"Get entry object from the RAR archive","prototype":"RarEntry rar_entry_get(string $entryname, RarArchive $rarfile)","return":"<p class=\"para\">   Returns the matching <span class=\"type\">RarEntry<\/span> object  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarArchive::isBroken":{"id":"rararchive.isbroken","purpose":"Test whether an archive is broken (incomplete)","prototype":"bool RarArchive::isBroken(RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the archive is broken, <strong><code>FALSE<\/code><\/strong> otherwise. This function may also   return <strong><code>FALSE<\/code><\/strong> if the passed file has already been closed. The only way   to tell the two cases apart is to enable   exceptions with  <span class=\"methodname\">RarException::setUsingExceptions<\/span>; however,   this should be unnecessary as a program should not operate on closed files.  <\/p>","versions":"PECL rar >= 3.0.0"},"rar_broken_is":{"id":"rararchive.isbroken","purpose":"Test whether an archive is broken (incomplete)","prototype":"bool rar_broken_is(RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the archive is broken, <strong><code>FALSE<\/code><\/strong> otherwise. This function may also   return <strong><code>FALSE<\/code><\/strong> if the passed file has already been closed. The only way   to tell the two cases apart is to enable   exceptions with  <span class=\"methodname\">RarException::setUsingExceptions<\/span>; however,   this should be unnecessary as a program should not operate on closed files.  <\/p>","versions":"PECL rar >= 3.0.0"},"RarArchive::isSolid":{"id":"rararchive.issolid","purpose":"Check whether the RAR archive is solid","prototype":"bool RarArchive::isSolid(RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the archive is solid, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rar >= 2.0.0"},"rar_solid_is":{"id":"rararchive.issolid","purpose":"Check whether the RAR archive is solid","prototype":"bool rar_solid_is(RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the archive is solid, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarArchive::open":{"id":"rararchive.open","purpose":"Open RAR archive","prototype":"RarArchive RarArchive::open(string $filename [, string $password = null [, callable $volume_callback = null]])","return":"<p class=\"para\">   Returns the requested <span class=\"type\">RarArchive<\/span> instance  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"rar_open":{"id":"rararchive.open","purpose":"Open RAR archive","prototype":"RarArchive rar_open(string $filename [, string $password = null [, callable $volume_callback = null]])","return":"<p class=\"para\">   Returns the requested <span class=\"type\">RarArchive<\/span> instance  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarArchive::setAllowBroken":{"id":"rararchive.setallowbroken","purpose":"Whether opening broken archives is allowed","prototype":"bool RarArchive::setAllowBroken(bool $allow_broken, RarArchive $rarfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>  or <strong><code>FALSE<\/code><\/strong> on failure. It will only fail if the file has   already been closed.  <\/p>","versions":"PECL rar >= 3.0.0"},"RarArchive::__toString":{"id":"rararchive.tostring","purpose":"Get text representation","prototype":"RarArchive RarArchive::__toString()","return":"<p class=\"para\">   A textual representation of this <span class=\"type\">RarArchive<\/span> object.   The content of this representation is unspecified.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarEntry::extract":{"id":"rarentry.extract","purpose":"Extract entry from the archive","prototype":"bool RarEntry::extract(string $dir [, string $filepath = \"\" [, string $password = null [, bool $extended_data = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getAttr":{"id":"rarentry.getattr","purpose":"Get attributes of the entry","prototype":"int RarEntry::getAttr()","return":"<p class=\"para\">   Returns the attributes or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getCrc":{"id":"rarentry.getcrc","purpose":"Get CRC of the entry","prototype":"string RarEntry::getCrc()","return":"<p class=\"para\">   Returns the CRC of the archive entry or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getFileTime":{"id":"rarentry.getfiletime","purpose":"Get entry last modification time","prototype":"string RarEntry::getFileTime()","return":"<p class=\"para\">   Returns entry last modification time as string in format    <em>YYYY-MM-DD HH:II:SS<\/em>, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getHostOs":{"id":"rarentry.gethostos","purpose":"Get entry host OS","prototype":"int RarEntry::getHostOs()","return":"<p class=\"para\">   Returns the code of the host OS, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getMethod":{"id":"rarentry.getmethod","purpose":"Get pack method of the entry","prototype":"int RarEntry::getMethod()","return":"<p class=\"para\">   Returns the method number or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getName":{"id":"rarentry.getname","purpose":"Get name of the entry","prototype":"string RarEntry::getName()","return":"<p class=\"para\">   Returns the entry name as a string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getPackedSize":{"id":"rarentry.getpackedsize","purpose":"Get packed size of the entry","prototype":"int RarEntry::getPackedSize()","return":"<p class=\"para\">   Returns the packed size, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getStream":{"id":"rarentry.getstream","purpose":"Get file handler for entry","prototype":"resource RarEntry::getStream([string $password = ''])","return":"<p class=\"para\">   The file handler  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarEntry::getUnpackedSize":{"id":"rarentry.getunpackedsize","purpose":"Get unpacked size of the entry","prototype":"int RarEntry::getUnpackedSize()","return":"<p class=\"para\">   Returns the unpacked size, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::getVersion":{"id":"rarentry.getversion","purpose":"Get minimum version of RAR program required to unpack the entry","prototype":"int RarEntry::getVersion()","return":"<p class=\"para\">   Returns the version or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL rar >= 0.1"},"RarEntry::isDirectory":{"id":"rarentry.isdirectory","purpose":"Test whether an entry represents a directory","prototype":"bool RarEntry::isDirectory()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this entry is a directory and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarEntry::isEncrypted":{"id":"rarentry.isencrypted","purpose":"Test whether an entry is encrypted","prototype":"bool RarEntry::isEncrypted()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current entry is encrypted and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarEntry::__toString":{"id":"rarentry.tostring","purpose":"Get text representation of entry","prototype":"string RarEntry::__toString()","return":"<p class=\"para\">   A textual representation for the entry.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarException::isUsingExceptions":{"id":"rarexception.isusingexceptions","purpose":"Check whether error handling with exceptions is in use","prototype":"bool RarException::isUsingExceptions()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if exceptions are being used, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rar >= 2.0.0"},"RarException::setUsingExceptions":{"id":"rarexception.setusingexceptions","purpose":"Activate and deactivate error handling with exceptions","prototype":"RarEntry RarException::setUsingExceptions(bool $using_exceptions)","return":"","versions":"PECL rar >= 2.0.0"},"ZipArchive::addEmptyDir":{"id":"ziparchive.addemptydir","purpose":"Add a new directory","prototype":"bool ZipArchive::addEmptyDir(string $dirname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.8.0"},"ZipArchive::addFile":{"id":"ziparchive.addfile","purpose":"Adds a file to a ZIP archive from the given path","prototype":"bool ZipArchive::addFile(string $filename [, string $localname = '' [, int $start = '' [, int $length = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::addFromString":{"id":"ziparchive.addfromstring","purpose":"Add a file to a ZIP archive using its contents","prototype":"bool ZipArchive::addFromString(string $localname, string $contents)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::addGlob":{"id":"ziparchive.addglob","purpose":"Add files from a directory by glob pattern","prototype":"bool ZipArchive::addGlob(string $pattern [, int $flags = '' [, array $options = array()]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL zip >= 1.9.0"},"ZipArchive::addPattern":{"id":"ziparchive.addpattern","purpose":"Add files from a directory by PCRE pattern","prototype":"bool ZipArchive::addPattern(string $pattern [, string $path = \".\" [, array $options = array()]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL zip >= 1.9.0"},"ZipArchive::close":{"id":"ziparchive.close","purpose":"Close the active archive (opened or newly created)","prototype":"bool ZipArchive::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::count":{"id":"ziparchive.count","purpose":"Counts the number of files in the achive","prototype":"int ZipArchive::count()","return":"<p class=\"para\">   Returns the number of files in the achive.  <\/p>","versions":""},"ZipArchive::deleteIndex":{"id":"ziparchive.deleteindex","purpose":"Delete an entry in the archive using its index","prototype":"bool ZipArchive::deleteIndex(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::deleteName":{"id":"ziparchive.deletename","purpose":"Delete an entry in the archive using its name","prototype":"bool ZipArchive::deleteName(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::extractTo":{"id":"ziparchive.extractto","purpose":"Extract the archive contents","prototype":"bool ZipArchive::extractTo(string $destination [, mixed $entries = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::getArchiveComment":{"id":"ziparchive.getarchivecomment","purpose":"Returns the Zip archive comment","prototype":"string ZipArchive::getArchiveComment([int $flags = ''])","return":"<p class=\"para\">   Returns the Zip archive comment or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::getCommentIndex":{"id":"ziparchive.getcommentindex","purpose":"Returns the comment of an entry using the entry index","prototype":"string ZipArchive::getCommentIndex(int $index [, int $flags = ''])","return":"<p class=\"para\">   Returns the comment on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.4.0"},"ZipArchive::getCommentName":{"id":"ziparchive.getcommentname","purpose":"Returns the comment of an entry using the entry name","prototype":"string ZipArchive::getCommentName(string $name [, int $flags = ''])","return":"<p class=\"para\">   Returns the comment on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.4.0"},"ZipArchive::getExternalAttributesIndex":{"id":"ziparchive.getexternalattributesindex","purpose":"Retrieve the external attributes of an entry defined by its index","prototype":"bool ZipArchive::getExternalAttributesIndex(int $index, int $opsys, int $attr [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7, PECL zip >= 1.12.4"},"ZipArchive::getExternalAttributesName":{"id":"ziparchive.getexternalattributesname","purpose":"Retrieve the external attributes of an entry defined by its name","prototype":"bool ZipArchive::getExternalAttributesName(string $name, int $opsys, int $attr [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7, PECL zip >= 1.12.4"},"ZipArchive::getFromIndex":{"id":"ziparchive.getfromindex","purpose":"Returns the entry contents using its index","prototype":"string ZipArchive::getFromIndex(int $index [, int $length = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns the contents of the entry on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"ZipArchive::getFromName":{"id":"ziparchive.getfromname","purpose":"Returns the entry contents using its name","prototype":"string ZipArchive::getFromName(string $name [, int $length = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns the contents of the entry on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::getNameIndex":{"id":"ziparchive.getnameindex","purpose":"Returns the name of an entry using its index","prototype":"string ZipArchive::getNameIndex(int $index [, int $flags = ''])","return":"<p class=\"para\">   Returns the name on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::getStatusString":{"id":"ziparchive.getstatusstring","purpose":"Returns the status error message, system and\/or zip messages","prototype":"string ZipArchive::getStatusString()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> with the status message on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.7, PHP 7"},"ZipArchive::getStream":{"id":"ziparchive.getstream","purpose":"Get a file handler to the entry defined by its name (read only)","prototype":"resource ZipArchive::getStream(string $name)","return":"<p class=\"para\">   Returns a file pointer (resource) on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::locateName":{"id":"ziparchive.locatename","purpose":"Returns the index of the entry in the archive","prototype":"int ZipArchive::locateName(string $name [, int $flags = ''])","return":"<p class=\"para\">   Returns the index of the entry on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::open":{"id":"ziparchive.open","purpose":"Open a ZIP file archive","prototype":"mixed ZipArchive::open(string $filename [, int $flags = ''])","return":"<p class=\"para\">   <dl>         <dt><code class=\"parameter\">Error codes<\/code><\/dt>      <dd>      <p class=\"para\">       Returns <strong><code>TRUE<\/code><\/strong> on success or the error code.       <ul class=\"itemizedlist\">        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_EXISTS<\/code><\/strong>         <\/p>         <p class=\"para\">          File already exists.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_INCONS<\/code><\/strong>         <\/p>         <p class=\"para\">          Zip archive inconsistent.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_INVAL<\/code><\/strong>         <\/p>         <p class=\"para\">          Invalid argument.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_MEMORY<\/code><\/strong>         <\/p>         <p class=\"para\">          Malloc failure.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_NOENT<\/code><\/strong>         <\/p>         <p class=\"para\">          No such file.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_NOZIP<\/code><\/strong>         <\/p>         <p class=\"para\">          Not a zip archive.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_OPEN<\/code><\/strong>         <\/p>         <p class=\"para\">          Can&#039;t open file.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_READ<\/code><\/strong>         <\/p>         <p class=\"para\">          Read error.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          <strong><code>ZipArchive::ER_SEEK<\/code><\/strong>         <\/p>         <p class=\"para\">          Seek error.         <\/p>        <\/li>       <\/ul>      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::renameIndex":{"id":"ziparchive.renameindex","purpose":"Renames an entry defined by its index","prototype":"bool ZipArchive::renameIndex(int $index, string $newname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::renameName":{"id":"ziparchive.renamename","purpose":"Renames an entry defined by its name","prototype":"bool ZipArchive::renameName(string $name, string $newname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::setArchiveComment":{"id":"ziparchive.setarchivecomment","purpose":"Set the comment of a ZIP archive","prototype":"bool ZipArchive::setArchiveComment(string $comment)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.4.0"},"ZipArchive::setCommentIndex":{"id":"ziparchive.setcommentindex","purpose":"Set the comment of an entry defined by its index","prototype":"bool ZipArchive::setCommentIndex(int $index, string $comment)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.4.0"},"ZipArchive::setCommentName":{"id":"ziparchive.setcommentname","purpose":"Set the comment of an entry defined by its name","prototype":"bool ZipArchive::setCommentName(string $name, string $comment)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.4.0"},"ZipArchive::setCompressionIndex":{"id":"ziparchive.setcompressionindex","purpose":"Set the compression method of an entry defined by its index","prototype":"bool ZipArchive::setCompressionIndex(int $index, int $comp_method [, int $comp_flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7, PECL zip >= 1.13.0"},"ZipArchive::setCompressionName":{"id":"ziparchive.setcompressionname","purpose":"Set the compression method of an entry defined by its name","prototype":"bool ZipArchive::setCompressionName(string $name, int $comp_method [, int $comp_flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7, PECL zip >= 1.13.0"},"ZipArchive::setEncryptionIndex":{"id":"ziparchive.setencryptionindex","purpose":"Set the encryption method of an entry defined by its index","prototype":"bool ZipArchive::setEncryptionIndex(int $index, string $method [, string $password = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP >= 7.2.0, PECL zip >= 1.14.0"},"ZipArchive::setEncryptionName":{"id":"ziparchive.setencryptionname","purpose":"Set the encryption method of an entry defined by its name","prototype":"bool ZipArchive::setEncryptionName(string $name, int $method [, string $password = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP >= 7.2.0, PECL zip >= 1.14.0"},"ZipArchive::setExternalAttributesIndex":{"id":"ziparchive.setexternalattributesindex","purpose":"Set the external attributes of an entry defined by its index","prototype":"bool ZipArchive::setExternalAttributesIndex(int $index, int $opsys, int $attr [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7, PECL zip >= 1.12.4"},"ZipArchive::setExternalAttributesName":{"id":"ziparchive.setexternalattributesname","purpose":"Set the external attributes of an entry defined by its name","prototype":"bool ZipArchive::setExternalAttributesName(string $name, int $opsys, int $attr [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7, PECL zip >= 1.12.4"},"ZipArchive::setPassword":{"id":"ziparchive.setpassword","purpose":"Set the password for the active archive","prototype":"bool ZipArchive::setPassword(string $password)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7, PECL zip >= 1.12.4"},"ZipArchive::statIndex":{"id":"ziparchive.statindex","purpose":"Get the details of an entry defined by its index","prototype":"array ZipArchive::statIndex(int $index [, int $flags = ''])","return":"<p class=\"para\">   Returns an array containing the entry details or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::statName":{"id":"ziparchive.statname","purpose":"Get the details of an entry defined by its name","prototype":"array ZipArchive::statName(string $name [, int $flags = ''])","return":"<p class=\"para\">   Returns an array containing the entry details  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"ZipArchive::unchangeAll":{"id":"ziparchive.unchangeall","purpose":"Undo all changes done in the archive","prototype":"bool ZipArchive::unchangeAll()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::unchangeArchive":{"id":"ziparchive.unchangearchive","purpose":"Revert all global changes done in the archive","prototype":"bool ZipArchive::unchangeArchive()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::unchangeIndex":{"id":"ziparchive.unchangeindex","purpose":"Revert all changes done to an entry at the given index","prototype":"bool ZipArchive::unchangeIndex(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.1.0"},"ZipArchive::unchangeName":{"id":"ziparchive.unchangename","purpose":"Revert all changes done to an entry with the given name","prototype":"bool ZipArchive::unchangeName(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.5.0"},"zip_close":{"id":"function.zip-close","purpose":"Close a ZIP file archive","prototype":"void zip_close(resource $zip)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_close":{"id":"function.zip-entry-close","purpose":"Close a directory entry","prototype":"bool zip_entry_close(resource $zip_entry)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_compressedsize":{"id":"function.zip-entry-compressedsize","purpose":"Retrieve the compressed size of a directory entry","prototype":"int zip_entry_compressedsize(resource $zip_entry)","return":"<p class=\"para\">   The compressed size.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_compressionmethod":{"id":"function.zip-entry-compressionmethod","purpose":"Retrieve the compression method of a directory entry","prototype":"string zip_entry_compressionmethod(resource $zip_entry)","return":"<p class=\"para\">   The compression method.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_filesize":{"id":"function.zip-entry-filesize","purpose":"Retrieve the actual file size of a directory entry","prototype":"int zip_entry_filesize(resource $zip_entry)","return":"<p class=\"para\">   The size of the directory entry.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_name":{"id":"function.zip-entry-name","purpose":"Retrieve the name of a directory entry","prototype":"string zip_entry_name(resource $zip_entry)","return":"<p class=\"para\">   The name of the directory entry.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_open":{"id":"function.zip-entry-open","purpose":"Open a directory entry for reading","prototype":"bool zip_entry_open(resource $zip, resource $zip_entry [, string $mode = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Unlike <span class=\"function\">fopen<\/span> and other similar functions,    the return value of <span class=\"function\">zip_entry_open<\/span> only    indicates the result of the operation and is not needed for    reading or closing the directory entry.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_entry_read":{"id":"function.zip-entry-read","purpose":"Read from an open directory entry","prototype":"string zip_entry_read(resource $zip_entry [, int $length = 1024])","return":"<p class=\"para\">   Returns the data read, empty string on end of a file, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_open":{"id":"function.zip-open","purpose":"Open a ZIP file archive","prototype":"resource zip_open(string $filename)","return":"<p class=\"para\">   Returns a resource handle for later use with   <span class=\"function\">zip_read<\/span> and <span class=\"function\">zip_close<\/span>   or returns the number of error if <code class=\"parameter\">filename<\/code> does not   exist or in case of other error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"zip_read":{"id":"function.zip-read","purpose":"Read next entry in a ZIP file archive","prototype":"resource zip_read(resource $zip)","return":"<p class=\"para\">   Returns a directory entry resource for later use with the   <em>zip_entry_...<\/em> functions, or <strong><code>FALSE<\/code><\/strong> if   there are no more entries to read, or an error code if an error   occurred.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PHP 7, PECL zip >= 1.0.0"},"deflate_add":{"id":"function.deflate-add","purpose":"Incrementally deflate data","prototype":"string deflate_add(resource $context, string $data [, int $flush_mode = ZLIB_SYNC_FLUSH])","return":"<p class=\"para\">   Returns a chunk of compressed data,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"deflate_init":{"id":"function.deflate-init","purpose":"Initialize an incremental deflate context","prototype":"resource deflate_init(int $encoding [, array $options = array()])","return":"<p class=\"para\">   Returns a deflate context resource (<em>zlib.deflate<\/em>) on   success,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"gzclose":{"id":"function.gzclose","purpose":"Close an open gz-file pointer","prototype":"bool gzclose(resource $zp)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzcompress":{"id":"function.gzcompress","purpose":"Compress a string","prototype":"string gzcompress(string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE]])","return":"<p class=\"para\">   The compressed string or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"gzdecode":{"id":"function.gzdecode","purpose":"Decodes a gzip compressed string","prototype":"string gzdecode(string $data [, int $length = ''])","return":"<p class=\"para\">   The decoded string, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"gzdeflate":{"id":"function.gzdeflate","purpose":"Deflate a string","prototype":"string gzdeflate(string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW]])","return":"<p class=\"para\">   The deflated string or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gzencode":{"id":"function.gzencode","purpose":"Create a gzip compressed string","prototype":"string gzencode(string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP]])","return":"<p class=\"para\">   The encoded string, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gzeof":{"id":"function.gzeof","purpose":"Test for EOF on a gz-file pointer","prototype":"int gzeof(resource $zp)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the gz-file pointer is at <acronym class=\"acronym\">EOF<\/acronym> or an error occurs;   otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzfile":{"id":"function.gzfile","purpose":"Read entire gz-file into an array","prototype":"array gzfile(string $filename [, int $use_include_path = ''])","return":"<p class=\"para\">   An array containing the file, one line per cell, empty lines included, and with newlines still attached.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzgetc":{"id":"function.gzgetc","purpose":"Get character from gz-file pointer","prototype":"string gzgetc(resource $zp)","return":"<p class=\"para\">   The uncompressed character or <strong><code>FALSE<\/code><\/strong> on <acronym class=\"acronym\">EOF<\/acronym> (unlike <span class=\"function\">gzeof<\/span>).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzgets":{"id":"function.gzgets","purpose":"Get line from file pointer","prototype":"string gzgets(resource $zp [, int $length = ''])","return":"<p class=\"para\">   The uncompressed string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzgetss":{"id":"function.gzgetss","purpose":"Get line from gz-file pointer and strip HTML tags","prototype":"string gzgetss(resource $zp, int $length [, string $allowable_tags = ''])","return":"<p class=\"para\">   The uncompressed and stripped string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzinflate":{"id":"function.gzinflate","purpose":"Inflate a deflated string","prototype":"string gzinflate(string $data [, int $length = ''])","return":"<p class=\"para\">   The original uncompressed data or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   The function will return an error if the uncompressed data is more than   32768 times the length of the compressed input <code class=\"parameter\">data<\/code>    or more than the optional parameter <code class=\"parameter\">length<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gzopen":{"id":"function.gzopen","purpose":"Open gz-file","prototype":"resource gzopen(string $filename, string $mode [, int $use_include_path = ''])","return":"<p class=\"para\">   Returns a file pointer to the file opened, after that, everything you read   from this file descriptor will be transparently decompressed and what you    write gets compressed.  <\/p>  <p class=\"para\">   If the open fails, the function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzpassthru":{"id":"function.gzpassthru","purpose":"Output all remaining data on a gz-file pointer","prototype":"int gzpassthru(resource $zp)","return":"<p class=\"para\">   The number of uncompressed characters read from <code class=\"parameter\">gz<\/code>   and passed through to the input, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzputs":{"id":"function.gzputs","purpose":"Alias of gzwrite","prototype":" gzputs()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"gzread":{"id":"function.gzread","purpose":"Binary-safe gz-file read","prototype":"string gzread(resource $zp, int $length)","return":"<p class=\"para\">   The data that have been read.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzrewind":{"id":"function.gzrewind","purpose":"Rewind the position of a gz-file pointer","prototype":"bool gzrewind(resource $zp)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzseek":{"id":"function.gzseek","purpose":"Seek on a gz-file pointer","prototype":"int gzseek(resource $zp, int $offset [, int $whence = SEEK_SET])","return":"<p class=\"para\">   Upon success, returns 0; otherwise, returns -1. Note that seeking   past EOF is not considered an error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gztell":{"id":"function.gztell","purpose":"Tell gz-file pointer read\/write position","prototype":"int gztell(resource $zp)","return":"<p class=\"para\">   The position of the file pointer or <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gzuncompress":{"id":"function.gzuncompress","purpose":"Uncompress a compressed string","prototype":"string gzuncompress(string $data [, int $length = ''])","return":"<p class=\"para\">   The original uncompressed data or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   The function will return an error if the uncompressed data is more than   32768 times the length of the compressed input <code class=\"parameter\">data<\/code>    or more than the optional parameter <code class=\"parameter\">length<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"gzwrite":{"id":"function.gzwrite","purpose":"Binary-safe gz-file write","prototype":"int gzwrite(resource $zp, string $string [, int $length = ''])","return":"<p class=\"para\">    Returns the number of (uncompressed) bytes written to the given gz-file    stream.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"inflate_add":{"id":"function.inflate-add","purpose":"Incrementally inflate encoded data","prototype":"string inflate_add(resource $context, string $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH])","return":"<p class=\"para\">   Returns a chunk of uncompressed data,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"inflate_get_read_len":{"id":"function.inflate-get-read-len","purpose":"Get number of bytes read so far","prototype":"int inflate_get_read_len(resource $resource)","return":"<p class=\"para\">   Returns number of bytes read so far or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"inflate_get_status":{"id":"function.inflate-get-status","purpose":"Get decompression status","prototype":"int inflate_get_status(resource $resource)","return":"<p class=\"para\">   Returns decompression status or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"inflate_init":{"id":"function.inflate-init","purpose":"Initialize an incremental inflate context","prototype":"resource inflate_init(int $encoding [, array $options = array()])","return":"<p class=\"para\">   Returns an inflate context resource (<em>zlib.inflate<\/em>) on   success,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"readgzfile":{"id":"function.readgzfile","purpose":"Output a gz-file","prototype":"int readgzfile(string $filename [, int $use_include_path = ''])","return":"<p class=\"para\">    Returns the number of (uncompressed) bytes read from the file. If   an error occurs, <strong><code>FALSE<\/code><\/strong> is returned and unless the function was   called as <em>@readgzfile<\/em>, an error message is   printed.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"zlib_decode":{"id":"function.zlib-decode","purpose":"Uncompress any raw\/gzip\/zlib encoded data","prototype":"string zlib_decode(string $data [, string $max_decoded_len = ''])","return":"<p class=\"para\">   Returns the uncompressed data,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"zlib_encode":{"id":"function.zlib-encode","purpose":"Compress data with the specified encoding","prototype":"string zlib_encode(string $data, int $encoding [, int $level = -1])","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"zlib_get_coding_type":{"id":"function.zlib-get-coding-type","purpose":"Returns the coding type used for output compression","prototype":"string zlib_get_coding_type()","return":"<p class=\"para\">   Possible return values are <em>gzip<\/em>, <em>deflate<\/em>,   or <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"m_checkstatus":{"id":"function.m-checkstatus","purpose":"Check to see if a transaction has completed","prototype":"int m_checkstatus(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_completeauthorizations":{"id":"function.m-completeauthorizations","purpose":"Number of complete authorizations in queue, returning an array of their identifiers","prototype":"int m_completeauthorizations(resource $conn, int $array)","return":"<p class=\"para\">   What the function returns, first on success, then on failure. See   also the &amp;return.success; entity  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_connect":{"id":"function.m-connect","purpose":"Establish the connection to MCVE","prototype":"int m_connect(resource $conn)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_connectionerror":{"id":"function.m-connectionerror","purpose":"Get a textual representation of why a connection failed","prototype":"string m_connectionerror(resource $conn)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_deletetrans":{"id":"function.m-deletetrans","purpose":"Delete specified transaction from MCVE_CONN structure","prototype":"bool m_deletetrans(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_destroyconn":{"id":"function.m-destroyconn","purpose":"Destroy the connection and MCVE_CONN structure","prototype":"bool m_destroyconn(resource $conn)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_destroyengine":{"id":"function.m-destroyengine","purpose":"Free memory associated with IP\/SSL connectivity","prototype":"void m_destroyengine()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_getcell":{"id":"function.m-getcell","purpose":"Get a specific cell from a comma delimited response by column name","prototype":"string m_getcell(resource $conn, int $identifier, string $column, int $row)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_getcellbynum":{"id":"function.m-getcellbynum","purpose":"Get a specific cell from a comma delimited response by column number","prototype":"string m_getcellbynum(resource $conn, int $identifier, int $column, int $row)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_getcommadelimited":{"id":"function.m-getcommadelimited","purpose":"Get the RAW comma delimited data returned from MCVE","prototype":"string m_getcommadelimited(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_getheader":{"id":"function.m-getheader","purpose":"Get the name of the column in a comma-delimited response","prototype":"string m_getheader(resource $conn, int $identifier, int $column_num)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_initconn":{"id":"function.m-initconn","purpose":"Create and initialize an MCVE_CONN structure","prototype":"resource m_initconn()","return":"<p class=\"para\">   Returns an MCVE_CONN resource.  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_initengine":{"id":"function.m-initengine","purpose":"Ready the client for IP\/SSL Communication","prototype":"int m_initengine(string $location)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_iscommadelimited":{"id":"function.m-iscommadelimited","purpose":"Checks to see if response is comma delimited","prototype":"int m_iscommadelimited(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_maxconntimeout":{"id":"function.m-maxconntimeout","purpose":"The maximum amount of time the API will attempt a connection to MCVE","prototype":"bool m_maxconntimeout(resource $conn, int $secs)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_monitor":{"id":"function.m-monitor","purpose":"Perform communication with MCVE (send\/receive data) Non-blocking","prototype":"int m_monitor(resource $conn)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_numcolumns":{"id":"function.m-numcolumns","purpose":"Number of columns returned in a comma delimited response","prototype":"int m_numcolumns(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_numrows":{"id":"function.m-numrows","purpose":"Number of rows returned in a comma delimited response","prototype":"int m_numrows(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_parsecommadelimited":{"id":"function.m-parsecommadelimited","purpose":"Parse the comma delimited response so m_getcell, etc will work","prototype":"int m_parsecommadelimited(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_responsekeys":{"id":"function.m-responsekeys","purpose":"Returns array of strings which represents the keys that can be used for response parameters on this transaction","prototype":"array m_responsekeys(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.0.5 < 5.1.0, PECL mcve >= 1.0.0"},"m_responseparam":{"id":"function.m-responseparam","purpose":"Get a custom response parameter","prototype":"string m_responseparam(resource $conn, int $identifier, string $key)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_returnstatus":{"id":"function.m-returnstatus","purpose":"Check to see if the transaction was successful","prototype":"int m_returnstatus(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_setblocking":{"id":"function.m-setblocking","purpose":"Set blocking\/non-blocking mode for connection","prototype":"int m_setblocking(resource $conn, int $tf)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_setdropfile":{"id":"function.m-setdropfile","purpose":"Set the connection method to Drop-File","prototype":"int m_setdropfile(resource $conn, string $directory)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_setip":{"id":"function.m-setip","purpose":"Set the connection method to IP","prototype":"int m_setip(resource $conn, string $host, int $port)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_setssl_cafile":{"id":"function.m-setssl-cafile","purpose":"Set SSL CA (Certificate Authority) file for verification of server certificate","prototype":"int m_setssl_cafile(resource $conn, string $cafile)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.0.5 < 5.1.0, PECL mcve >= 1.0.0"},"m_setssl_files":{"id":"function.m-setssl-files","purpose":"Set certificate key files and certificates if server requires client certificate verification","prototype":"int m_setssl_files(resource $conn, string $sslkeyfile, string $sslcertfile)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_setssl":{"id":"function.m-setssl","purpose":"Set the connection method to SSL","prototype":"int m_setssl(resource $conn, string $host, int $port)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_settimeout":{"id":"function.m-settimeout","purpose":"Set maximum transaction time (per trans)","prototype":"int m_settimeout(resource $conn, int $seconds)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_sslcert_gen_hash":{"id":"function.m-sslcert-gen-hash","purpose":"Generate hash for SSL client certificate verification","prototype":"string m_sslcert_gen_hash(string $filename)","return":"<p class=\"para\">  <\/p>","versions":"PECL mcve >= 5.2.0"},"m_transactionssent":{"id":"function.m-transactionssent","purpose":"Check to see if outgoing buffer is clear","prototype":"int m_transactionssent(resource $conn)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_transinqueue":{"id":"function.m-transinqueue","purpose":"Number of transactions in client-queue","prototype":"int m_transinqueue(resource $conn)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_transkeyval":{"id":"function.m-transkeyval","purpose":"Add key\/value pair to a transaction. Replaces deprecated transparam()","prototype":"int m_transkeyval(resource $conn, int $identifier, string $key, string $value)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.0.5 < 5.1.0, PECL mcve >= 1.0.0"},"m_transnew":{"id":"function.m-transnew","purpose":"Start a new transaction","prototype":"int m_transnew(resource $conn)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_transsend":{"id":"function.m-transsend","purpose":"Finalize and send the transaction","prototype":"int m_transsend(resource $conn, int $identifier)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_uwait":{"id":"function.m-uwait","purpose":"Wait x microsecs","prototype":"int m_uwait(int $microsecs)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_validateidentifier":{"id":"function.m-validateidentifier","purpose":"Whether or not to validate the passed identifier on any transaction it is passed to","prototype":"int m_validateidentifier(resource $conn, int $tf)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.0.5 < 5.1.0, PECL mcve >= 1.0.0"},"m_verifyconnection":{"id":"function.m-verifyconnection","purpose":"Set whether or not to PING upon connect to verify connection","prototype":"bool m_verifyconnection(resource $conn, int $tf)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"m_verifysslcert":{"id":"function.m-verifysslcert","purpose":"Set whether or not to verify the server ssl certificate","prototype":"bool m_verifysslcert(resource $conn, int $tf)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.3.9, PHP 5 < 5.1.0, PECL mcve >= 1.0.0"},"crack_check":{"id":"function.crack-check","purpose":"Performs an obscure check with the given password","prototype":"bool crack_check(resource $dictionary, string $password, string $username, string $gecos)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">password<\/code> is strong, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL crack >= 0.1"},"crack_closedict":{"id":"function.crack-closedict","purpose":"Closes an open CrackLib dictionary","prototype":"bool crack_closedict([resource $dictionary = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL crack >= 0.1"},"crack_getlastmessage":{"id":"function.crack-getlastmessage","purpose":"Returns the message from the last obscure check","prototype":"string crack_getlastmessage()","return":"<p class=\"para\">   The message from the last obscure check or <strong><code>FALSE<\/code><\/strong> if there was no obscure   checks made so far.  <\/p>  <p class=\"para\">   The returned message is one of:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>it&#039;s WAY too short<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it is too short<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it does not contain enough DIFFERENT characters<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it is all whitespace<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it is too simplistic\/systematic<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it looks like a National Insurance number.<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it is based on a dictionary word<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>it is based on a (reversed) dictionary word<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>strong password<\/em>     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL crack >= 0.1"},"crack_opendict":{"id":"function.crack-opendict","purpose":"Opens a new CrackLib dictionary","prototype":"resource crack_opendict(string $dictionary)","return":"<p class=\"para\">   Returns a dictionary resource identifier on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL crack >= 0.1"},"random_bytes":{"id":"function.random-bytes","purpose":"Generates cryptographically secure pseudo-random bytes","prototype":"string random_bytes(int $length)","return":"<p class=\"para\">   Returns a string containing the requested number of cryptographically   secure random bytes.  <\/p>","versions":"PHP 7"},"random_int":{"id":"function.random-int","purpose":"Generates cryptographically secure pseudo-random integers","prototype":"int random_int(int $min, int $max)","return":"<p class=\"para\">   Returns a cryptographically secure random integer in the range   <code class=\"parameter\">min<\/code> to <code class=\"parameter\">max<\/code>, inclusive.  <\/p>","versions":"PHP 7"},"HashContext::__construct":{"id":"hashcontext.construct","purpose":"Private constructor to disallow direct instantiation","prototype":" HashContext::__construct()","return":"","versions":"PHP 7 >= 7.2.0"},"hash_algos":{"id":"function.hash-algos","purpose":"Return a list of registered hashing algorithms","prototype":"array hash_algos()","return":"<p class=\"para\">   Returns a numerically indexed array containing the list of supported   hashing algorithms.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_copy":{"id":"function.hash-copy","purpose":"Copy hashing context","prototype":"HashContext hash_copy(HashContext $context)","return":"<p class=\"para\">   Returns a copy of Hashing Context.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"hash_equals":{"id":"function.hash-equals","purpose":"Timing attack safe string comparison","prototype":"bool hash_equals(string $known_string, string $user_string)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> when the two strings are equal, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"hash_file":{"id":"function.hash-file","purpose":"Generate a hash value using the contents of a given file","prototype":"string hash_file(string $algo, string $filename [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string containing the calculated message digest as lowercase hexits   unless <code class=\"parameter\">raw_output<\/code> is set to true in which case the raw   binary representation of the message digest is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_final":{"id":"function.hash-final","purpose":"Finalize an incremental hash and return resulting digest","prototype":"string hash_final(HashContext $context [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string containing the calculated message digest as lowercase hexits   unless <code class=\"parameter\">raw_output<\/code> is set to true in which case the raw   binary representation of the message digest is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_hkdf":{"id":"function.hash-hkdf","purpose":"Generate a HKDF key derivation of a supplied key input","prototype":"string hash_hkdf(string $algo, string $ikm [, int $length = '' [, string $info = '' [, string $salt = '']]])","return":"<p class=\"para\">   Returns a string containing a raw binary representation of the derived key   (also known as output keying material - OKM); or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.2"},"hash_hmac_algos":{"id":"function.hash-hmac-algos","purpose":"Return a list of registered hashing algorithms suitable for hash_hmac","prototype":"array hash_hmac_algos()","return":"<p class=\"para\">   Returns a numerically indexed array containing the list of supported hashing   algorithms suitable for <span class=\"function\">hash_hmac<\/span>.  <\/p>","versions":"PHP 7 >= 7.2.0"},"hash_hmac_file":{"id":"function.hash-hmac-file","purpose":"Generate a keyed hash value using the HMAC method and the contents of a given file","prototype":"string hash_hmac_file(string $algo, string $filename, string $key [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string containing the calculated message digest as lowercase hexits   unless <code class=\"parameter\">raw_output<\/code> is set to true in which case the raw   binary representation of the message digest is returned.   Returns <strong><code>FALSE<\/code><\/strong> when <code class=\"parameter\">algo<\/code> is unknown or is a   non-cryptographic hash function, or if the file   <code class=\"parameter\">filename<\/code> cannot be read.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_hmac":{"id":"function.hash-hmac","purpose":"Generate a keyed hash value using the HMAC method","prototype":"string hash_hmac(string $algo, string $data, string $key [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string containing the calculated message digest as lowercase hexits   unless <code class=\"parameter\">raw_output<\/code> is set to true in which case the raw   binary representation of the message digest is returned.   Returns <strong><code>FALSE<\/code><\/strong> when <code class=\"parameter\">algo<\/code> is unknown or is a   non-cryptographic hash function.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_init":{"id":"function.hash-init","purpose":"Initialize an incremental hashing context","prototype":"HashContext hash_init(string $algo [, int $options = '' [, string $key = '']])","return":"<p class=\"para\">   Returns a Hashing Context for use with <span class=\"function\">hash_update<\/span>,   <span class=\"function\">hash_update_stream<\/span>, <span class=\"function\">hash_update_file<\/span>,   and <span class=\"function\">hash_final<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_pbkdf2":{"id":"function.hash-pbkdf2","purpose":"Generate a PBKDF2 key derivation of a supplied password","prototype":"string hash_pbkdf2(string $algo, string $password, string $salt, int $iterations [, int $length = '' [, bool $raw_output = '']])","return":"<p class=\"para\">   Returns a string containing the derived key as lowercase hexits unless   <code class=\"parameter\">raw_output<\/code> is set to <strong><code>TRUE<\/code><\/strong> in which case the raw   binary representation of the derived key is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"hash_update_file":{"id":"function.hash-update-file","purpose":"Pump data into an active hashing context from a file","prototype":"bool hash_update_file(HashContext $hcontext, string $filename [, resource $scontext = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_update_stream":{"id":"function.hash-update-stream","purpose":"Pump data into an active hashing context from an open stream","prototype":"int hash_update_stream(HashContext $context, resource $handle [, int $length = -1])","return":"<p class=\"para\">   Actual number of bytes added to the hashing context from <code class=\"parameter\">handle<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash_update":{"id":"function.hash-update","purpose":"Pump data into an active hashing context","prototype":"bool hash_update(HashContext $context, string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"hash":{"id":"function.hash","purpose":"Generate a hash value (message digest)","prototype":"string hash(string $algo, string $data [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string containing the calculated message digest as lowercase hexits   unless <code class=\"parameter\">raw_output<\/code> is set to true in which case the raw   binary representation of the message digest is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL hash >= 1.1"},"mcrypt_cbc":{"id":"function.mcrypt-cbc","purpose":"Encrypts\/decrypts data in CBC mode","prototype":"string mcrypt_cbc(string $cipher, string $key, string $data, int $mode [, string $iv = ''])","return":"","versions":"PHP 4, PHP 5"},"mcrypt_cfb":{"id":"function.mcrypt-cfb","purpose":"Encrypts\/decrypts data in CFB mode","prototype":"string mcrypt_cfb(string $cipher, string $key, string $data, int $mode [, string $iv = ''])","return":"","versions":"PHP 4, PHP 5"},"mcrypt_create_iv":{"id":"function.mcrypt-create-iv","purpose":"Creates an initialization vector (IV) from a random source","prototype":"string mcrypt_create_iv(int $size [, int $source = MCRYPT_DEV_URANDOM])","return":"<p class=\"para\">   Returns the initialization vector, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_decrypt":{"id":"function.mcrypt-decrypt","purpose":"Decrypts crypttext with given parameters","prototype":"string mcrypt_decrypt(string $cipher, string $key, string $data, string $mode [, string $iv = ''])","return":"<p class=\"para\">   Returns the decrypted data as a string  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_ecb":{"id":"function.mcrypt-ecb","purpose":"Deprecated: Encrypts\/decrypts data in ECB mode","prototype":"string mcrypt_ecb(string $cipher, string $key, string $data, int $mode [, string $iv = ''])","return":"","versions":"PHP 4, PHP 5"},"mcrypt_enc_get_algorithms_name":{"id":"function.mcrypt-enc-get-algorithms-name","purpose":"Returns the name of the opened algorithm","prototype":"string mcrypt_enc_get_algorithms_name(resource $td)","return":"<p class=\"para\">   Returns the name of the opened algorithm as a string.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_get_block_size":{"id":"function.mcrypt-enc-get-block-size","purpose":"Returns the blocksize of the opened algorithm","prototype":"int mcrypt_enc_get_block_size(resource $td)","return":"<p class=\"para\">   Returns the block size of the specified algorithm in bytes.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_get_iv_size":{"id":"function.mcrypt-enc-get-iv-size","purpose":"Returns the size of the IV of the opened algorithm","prototype":"int mcrypt_enc_get_iv_size(resource $td)","return":"<p class=\"para\">   Returns the size of the IV, or 0 if the IV is ignored by the algorithm.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_get_key_size":{"id":"function.mcrypt-enc-get-key-size","purpose":"Returns the maximum supported keysize of the opened mode","prototype":"int mcrypt_enc_get_key_size(resource $td)","return":"<p class=\"para\">   Returns the maximum supported key size of the algorithm in bytes.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_get_modes_name":{"id":"function.mcrypt-enc-get-modes-name","purpose":"Returns the name of the opened mode","prototype":"string mcrypt_enc_get_modes_name(resource $td)","return":"<p class=\"para\">   Returns the name as a string.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_get_supported_key_sizes":{"id":"function.mcrypt-enc-get-supported-key-sizes","purpose":"Returns an array with the supported keysizes of the opened algorithm","prototype":"array mcrypt_enc_get_supported_key_sizes(resource $td)","return":"<p class=\"para\">   Returns an array with the key sizes supported by the algorithm   specified by the encryption descriptor. If it returns an empty   array then all key sizes between 1 and   <span class=\"function\">mcrypt_enc_get_key_size<\/span> are supported by the   algorithm.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_is_block_algorithm_mode":{"id":"function.mcrypt-enc-is-block-algorithm-mode","purpose":"Checks whether the encryption of the opened mode works on blocks","prototype":"bool mcrypt_enc_is_block_algorithm_mode(resource $td)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the mode is for use with block algorithms, otherwise it   returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_is_block_algorithm":{"id":"function.mcrypt-enc-is-block-algorithm","purpose":"Checks whether the algorithm of the opened mode is a block algorithm","prototype":"bool mcrypt_enc_is_block_algorithm(resource $td)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the algorithm is a block algorithm or <strong><code>FALSE<\/code><\/strong> if it is   a stream one.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_is_block_mode":{"id":"function.mcrypt-enc-is-block-mode","purpose":"Checks whether the opened mode outputs blocks","prototype":"bool mcrypt_enc_is_block_mode(resource $td)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the mode outputs blocks of bytes,   or <strong><code>FALSE<\/code><\/strong> if it outputs just bytes.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_enc_self_test":{"id":"function.mcrypt-enc-self-test","purpose":"Runs a self test on the opened module","prototype":"int mcrypt_enc_self_test(resource $td)","return":"<p class=\"para\">   If the self test succeeds it returns <strong><code>FALSE<\/code><\/strong>. In case of an error, it   returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_encrypt":{"id":"function.mcrypt-encrypt","purpose":"Encrypts plaintext with given parameters","prototype":"string mcrypt_encrypt(string $cipher, string $key, string $data, string $mode [, string $iv = ''])","return":"<p class=\"para\">   Returns the encrypted data as a string  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_generic_deinit":{"id":"function.mcrypt-generic-deinit","purpose":"This function deinitializes an encryption module","prototype":"bool mcrypt_generic_deinit(resource $td)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_generic_end":{"id":"function.mcrypt-generic-end","purpose":"This function terminates encryption","prototype":"bool mcrypt_generic_end(resource $td)","return":"","versions":"PHP 4 >= 4.0.2, PHP 5"},"mcrypt_generic_init":{"id":"function.mcrypt-generic-init","purpose":"This function initializes all buffers needed for encryption","prototype":"int mcrypt_generic_init(resource $td, string $key, string $iv)","return":"<p class=\"para\">   The function returns a negative value on error: -3 when the key length   was incorrect, -4 when there was a memory allocation problem and any   other return value is an unknown error. If an error occurs a warning will   be displayed accordingly. <strong><code>FALSE<\/code><\/strong> is returned if incorrect parameters   were passed.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_generic":{"id":"function.mcrypt-generic","purpose":"This function encrypts data","prototype":"string mcrypt_generic(resource $td, string $data)","return":"<p class=\"para\">   Returns the encrypted data.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_get_block_size":{"id":"function.mcrypt-get-block-size","purpose":"Gets the block size of the specified cipher","prototype":"int mcrypt_get_block_size(string $cipher, string $mode)","return":"<p class=\"para\">   Returns the algorithm block size in bytes  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_get_cipher_name":{"id":"function.mcrypt-get-cipher-name","purpose":"Gets the name of the specified cipher","prototype":"string mcrypt_get_cipher_name(string $cipher)","return":"<p class=\"para\">   This function returns the name of the cipher or <strong><code>FALSE<\/code><\/strong> if the cipher does   not exist.  <\/p>","versions":"PHP 4, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_get_iv_size":{"id":"function.mcrypt-get-iv-size","purpose":"Returns the size of the IV belonging to a specific cipher\/mode combination","prototype":"int mcrypt_get_iv_size(string $cipher, string $mode)","return":"<p class=\"para\">   Returns the size of the Initialization Vector (IV) in bytes. On error the   function returns <strong><code>FALSE<\/code><\/strong>. If the IV is ignored in the specified cipher\/mode   combination zero is returned.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_get_key_size":{"id":"function.mcrypt-get-key-size","purpose":"Gets the key size of the specified cipher","prototype":"int mcrypt_get_key_size(string $cipher, string $mode)","return":"<p class=\"para\">   Returns the maximum supported key size of the algorithm in bytes    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_list_algorithms":{"id":"function.mcrypt-list-algorithms","purpose":"Gets an array of all supported ciphers","prototype":"array mcrypt_list_algorithms([string $lib_dir = ini_get(\"mcrypt.algorithms_dir\")])","return":"<p class=\"para\">   Returns an array with all the supported algorithms.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_list_modes":{"id":"function.mcrypt-list-modes","purpose":"Gets an array of all supported modes","prototype":"array mcrypt_list_modes([string $lib_dir = ini_get(\"mcrypt.modes_dir\")])","return":"<p class=\"para\">   Returns an array with all the supported modes.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_close":{"id":"function.mcrypt-module-close","purpose":"Closes the mcrypt module","prototype":"bool mcrypt_module_close(resource $td)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_get_algo_block_size":{"id":"function.mcrypt-module-get-algo-block-size","purpose":"Returns the blocksize of the specified algorithm","prototype":"int mcrypt_module_get_algo_block_size(string $algorithm [, string $lib_dir = ''])","return":"<p class=\"para\">   Returns the block size of the algorithm specified in bytes.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_get_algo_key_size":{"id":"function.mcrypt-module-get-algo-key-size","purpose":"Returns the maximum supported keysize of the opened mode","prototype":"int mcrypt_module_get_algo_key_size(string $algorithm [, string $lib_dir = ''])","return":"<p class=\"para\">   This function returns the maximum supported key size of the   algorithm specified in bytes.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_get_supported_key_sizes":{"id":"function.mcrypt-module-get-supported-key-sizes","purpose":"Returns an array with the supported keysizes of the opened algorithm","prototype":"array mcrypt_module_get_supported_key_sizes(string $algorithm [, string $lib_dir = ''])","return":"<p class=\"para\">   Returns an array with the key sizes supported by the specified algorithm.   If it returns an empty array then all key sizes between 1 and   <span class=\"function\">mcrypt_module_get_algo_key_size<\/span> are supported by the   algorithm.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_is_block_algorithm_mode":{"id":"function.mcrypt-module-is-block-algorithm-mode","purpose":"Returns if the specified module is a block algorithm or not","prototype":"bool mcrypt_module_is_block_algorithm_mode(string $mode [, string $lib_dir = ''])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the mode is for use with block   algorithms, otherwise it returns <strong><code>FALSE<\/code><\/strong>. (e.g. <strong><code>FALSE<\/code><\/strong> for stream, and   <strong><code>TRUE<\/code><\/strong> for cbc, cfb, ofb).  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_is_block_algorithm":{"id":"function.mcrypt-module-is-block-algorithm","purpose":"This function checks whether the specified algorithm is a block algorithm","prototype":"bool mcrypt_module_is_block_algorithm(string $algorithm [, string $lib_dir = ''])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the specified algorithm is a block   algorithm, or <strong><code>FALSE<\/code><\/strong> if it is a stream one.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_is_block_mode":{"id":"function.mcrypt-module-is-block-mode","purpose":"Returns if the specified mode outputs blocks or not","prototype":"bool mcrypt_module_is_block_mode(string $mode [, string $lib_dir = ''])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the mode outputs blocks of bytes or   <strong><code>FALSE<\/code><\/strong> if it outputs just bytes. (e.g. <strong><code>TRUE<\/code><\/strong> for cbc and ecb, and   <strong><code>FALSE<\/code><\/strong> for cfb and stream).  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_open":{"id":"function.mcrypt-module-open","purpose":"Opens the module of the algorithm and the mode to be used","prototype":"resource mcrypt_module_open(string $algorithm, string $algorithm_directory, string $mode, string $mode_directory)","return":"<p class=\"para\">   Normally it returns an encryption descriptor, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_module_self_test":{"id":"function.mcrypt-module-self-test","purpose":"This function runs a self test on the specified module","prototype":"bool mcrypt_module_self_test(string $algorithm [, string $lib_dir = ''])","return":"<p class=\"para\">   The function returns <strong><code>TRUE<\/code><\/strong> if the self test succeeds, or <strong><code>FALSE<\/code><\/strong> when it   fails.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mcrypt_ofb":{"id":"function.mcrypt-ofb","purpose":"Encrypts\/decrypts data in OFB mode","prototype":"string mcrypt_ofb(string $cipher, string $key, string $data, int $mode [, string $iv = ''])","return":"","versions":"PHP 4, PHP 5"},"mdecrypt_generic":{"id":"function.mdecrypt-generic","purpose":"Decrypts data","prototype":"string mdecrypt_generic(resource $td, string $data)","return":"","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7 < 7.2.0, PECL mcrypt >= 1.0.0"},"mhash_count":{"id":"function.mhash-count","purpose":"Gets the highest available hash ID","prototype":"int mhash_count()","return":"<p class=\"para\">   Returns the highest available hash ID. Hashes are numbered from 0 to this   hash ID.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mhash_get_block_size":{"id":"function.mhash-get-block-size","purpose":"Gets the block size of the specified hash","prototype":"int mhash_get_block_size(int $hash)","return":"<p class=\"para\">   Returns the size in bytes or <strong><code>FALSE<\/code><\/strong>, if the <code class=\"parameter\">hash<\/code>   does not exist.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mhash_get_hash_name":{"id":"function.mhash-get-hash-name","purpose":"Gets the name of the specified hash","prototype":"string mhash_get_hash_name(int $hash)","return":"<p class=\"para\">   Returns the name of the hash or <strong><code>FALSE<\/code><\/strong>, if the hash does not exist.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mhash_keygen_s2k":{"id":"function.mhash-keygen-s2k","purpose":"Generates a key","prototype":"string mhash_keygen_s2k(int $hash, string $password, string $salt, int $bytes)","return":"<p class=\"para\">   Returns the generated key as a string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"mhash":{"id":"function.mhash","purpose":"Computes hash","prototype":"string mhash(int $hash, string $data [, string $key = ''])","return":"<p class=\"para\">   Returns the resulting hash (also called digest) or HMAC as a string, or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"openssl_cipher_iv_length":{"id":"function.openssl-cipher-iv-length","purpose":"Gets the cipher iv length","prototype":"int openssl_cipher_iv_length(string $method)","return":"<p class=\"para\">   Returns the cipher length on success, or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"openssl_csr_export_to_file":{"id":"function.openssl-csr-export-to-file","purpose":"Exports a CSR to a file","prototype":"bool openssl_csr_export_to_file(mixed $csr, string $outfilename [, bool $notext = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_csr_export":{"id":"function.openssl-csr-export","purpose":"Exports a CSR as a string","prototype":"bool openssl_csr_export(mixed $csr, string $out [, bool $notext = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_csr_get_public_key":{"id":"function.openssl-csr-get-public-key","purpose":"Returns the public key of a CSR","prototype":"resource openssl_csr_get_public_key(mixed $csr [, bool $use_shortnames = ''])","return":"<p class=\"para\">   Returns a positive key resource identifier on success, or FALSE on error.   <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"openssl_csr_get_subject":{"id":"function.openssl-csr-get-subject","purpose":"Returns the subject of a CSR","prototype":"array openssl_csr_get_subject(mixed $csr [, bool $use_shortnames = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"openssl_csr_new":{"id":"function.openssl-csr-new","purpose":"Generates a CSR","prototype":"mixed openssl_csr_new(array $dn, resource $privkey [, array $configargs = '' [, array $extraattribs = '']])","return":"<p class=\"para\">   Returns the CSR or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_csr_sign":{"id":"function.openssl-csr-sign","purpose":"Sign a CSR with another certificate (or itself) and generate a certificate","prototype":"resource openssl_csr_sign(mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs = '' [, int $serial = '']])","return":"<p class=\"para\">   Returns an x509 certificate resource on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_decrypt":{"id":"function.openssl-decrypt","purpose":"Decrypts data","prototype":"string openssl_decrypt(string $data, string $method, string $key [, int $options = '' [, string $iv = \"\" [, string $tag = \"\" [, string $aad = \"\"]]]])","return":"<p class=\"para\">   The decrypted string on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_dh_compute_key":{"id":"function.openssl-dh-compute-key","purpose":"Computes shared secret for public value of remote DH public key and local DH key","prototype":"string openssl_dh_compute_key(string $pub_key, resource $dh_key)","return":"<p class=\"para\">   Returns shared secret on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_digest":{"id":"function.openssl-digest","purpose":"Computes a digest","prototype":"string openssl_digest(string $data, string $method [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns the digested hash value on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_encrypt":{"id":"function.openssl-encrypt","purpose":"Encrypts data","prototype":"string openssl_encrypt(string $data, string $method, string $key [, int $options = '' [, string $iv = \"\" [, string $tag = null [, string $aad = \"\" [, int $tag_length = 16]]]]])","return":"<p class=\"para\">   Returns the encrypted string on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_error_string":{"id":"function.openssl-error-string","purpose":"Return openSSL error message","prototype":"string openssl_error_string()","return":"<p class=\"para\">   Returns an error message string, or <strong><code>FALSE<\/code><\/strong> if there are no more error   messages to return.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_free_key":{"id":"function.openssl-free-key","purpose":"Free key resource","prototype":"void openssl_free_key(resource $key_identifier)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_get_cert_locations":{"id":"function.openssl-get-cert-locations","purpose":"Retrieve the available certificate locations","prototype":"array openssl_get_cert_locations()","return":"<p class=\"para\">   Returns an array with the available certificate locations.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"openssl_get_cipher_methods":{"id":"function.openssl-get-cipher-methods","purpose":"Gets available cipher methods","prototype":"array openssl_get_cipher_methods([bool $aliases = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of available cipher methods.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_get_curve_names":{"id":"function.openssl-get-curve-names","purpose":"Gets list of available curve names for ECC","prototype":"array openssl_get_curve_names()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of available curve names.  <\/p>","versions":"PHP 7 >= 7.1.0"},"openssl_get_md_methods":{"id":"function.openssl-get-md-methods","purpose":"Gets available digest methods","prototype":"array openssl_get_md_methods([bool $aliases = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of available digest methods.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_get_privatekey":{"id":"function.openssl-get-privatekey","purpose":"Alias of openssl_pkey_get_private","prototype":" openssl_get_privatekey()","return":"","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_get_publickey":{"id":"function.openssl-get-publickey","purpose":"Alias of openssl_pkey_get_public","prototype":" openssl_get_publickey()","return":"","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_open":{"id":"function.openssl-open","purpose":"Open sealed data","prototype":"bool openssl_open(string $sealed_data, string $open_data, string $env_key, mixed $priv_key_id [, string $method = \"RC4\" [, string $iv = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_pbkdf2":{"id":"function.openssl-pbkdf2","purpose":"Generates a PKCS5 v2 PBKDF2 string","prototype":"string openssl_pbkdf2(string $password, string $salt, int $key_length, int $iterations [, string $digest_algorithm = \"sha1\"])","return":"<p class=\"para\">   Returns raw binary string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"openssl_pkcs12_export_to_file":{"id":"function.openssl-pkcs12-export-to-file","purpose":"Exports a PKCS#12 Compatible Certificate Store File","prototype":"bool openssl_pkcs12_export_to_file(mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"openssl_pkcs12_export":{"id":"function.openssl-pkcs12-export","purpose":"Exports a PKCS#12 Compatible Certificate Store File to variable","prototype":"bool openssl_pkcs12_export(mixed $x509, string $out, mixed $priv_key, string $pass [, array $args = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"openssl_pkcs12_read":{"id":"function.openssl-pkcs12-read","purpose":"Parse a PKCS#12 Certificate Store into an array","prototype":"bool openssl_pkcs12_read(string $pkcs12, array $certs, string $pass)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"openssl_pkcs7_decrypt":{"id":"function.openssl-pkcs7-decrypt","purpose":"Decrypts an S\/MIME encrypted message","prototype":"bool openssl_pkcs7_decrypt(string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_pkcs7_encrypt":{"id":"function.openssl-pkcs7-encrypt","purpose":"Encrypt an S\/MIME message","prototype":"bool openssl_pkcs7_encrypt(string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = '' [, int $cipherid = OPENSSL_CIPHER_RC2_40]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_pkcs7_read":{"id":"function.openssl-pkcs7-read","purpose":"Export the PKCS7 file to an array of PEM certificates","prototype":"bool openssl_pkcs7_read(string $infilename, array $certs)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"openssl_pkcs7_sign":{"id":"function.openssl-pkcs7-sign","purpose":"Sign an S\/MIME message","prototype":"bool openssl_pkcs7_sign(string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_pkcs7_verify":{"id":"function.openssl-pkcs7-verify","purpose":"Verifies the signature of an S\/MIME signed message","prototype":"mixed openssl_pkcs7_verify(string $filename, int $flags [, string $outfilename = '' [, array $cainfo = '' [, string $extracerts = '' [, string $content = '' [, string $p7bfilename = '']]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the signature is verified, <strong><code>FALSE<\/code><\/strong> if it is not correct   (the message has been tampered with, or the signing certificate is invalid),   or -1 on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_pkey_export_to_file":{"id":"function.openssl-pkey-export-to-file","purpose":"Gets an exportable representation of a key into a file","prototype":"bool openssl_pkey_export_to_file(mixed $key, string $outfilename [, string $passphrase = '' [, array $configargs = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_pkey_export":{"id":"function.openssl-pkey-export","purpose":"Gets an exportable representation of a key into a string","prototype":"bool openssl_pkey_export(mixed $key, string $out [, string $passphrase = '' [, array $configargs = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_pkey_free":{"id":"function.openssl-pkey-free","purpose":"Frees a private key","prototype":"void openssl_pkey_free(resource $key)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_pkey_get_details":{"id":"function.openssl-pkey-get-details","purpose":"Returns an array with the key details","prototype":"array openssl_pkey_get_details(resource $key)","return":"<p class=\"para\">   Returns an array with the key details in success or <strong><code>FALSE<\/code><\/strong> in failure.   Returned array has indexes <em>bits<\/em> (number of bits),   <em>key<\/em> (string representation of the public key) and   <em>type<\/em> (type of the key which is one of   <strong><code>OPENSSL_KEYTYPE_RSA<\/code><\/strong>,   <strong><code>OPENSSL_KEYTYPE_DSA<\/code><\/strong>,   <strong><code>OPENSSL_KEYTYPE_DH<\/code><\/strong>,   <strong><code>OPENSSL_KEYTYPE_EC<\/code><\/strong> or -1 meaning unknown).  <\/p>  <p class=\"para\">   Depending on the key type used, additional details may be returned. Note that    some elements may not always be available.  <\/p>  <ul class=\"itemizedlist\">   <li class=\"listitem\">    <span class=\"simpara\">     <strong><code>OPENSSL_KEYTYPE_RSA<\/code><\/strong>, an additional array key named <em>&quot;rsa&quot;<\/em>,      containing the key data is returned.    <\/span>     <table class=\"doctable informaltable\">             <thead>        <tr>         <th>Key<\/th>         <th>Description<\/th>        <\/tr>       <\/thead>       <tbody class=\"tbody\">        <tr>         <td><em>&quot;n&quot;<\/em><\/td>         <td>modulus<\/td>        <\/tr>        <tr>         <td><em>&quot;e&quot;<\/em><\/td>         <td>public exponent<\/td>        <\/tr>        <tr>         <td><em>&quot;d&quot;<\/em><\/td>         <td>private exponent<\/td>        <\/tr>        <tr>         <td><em>&quot;p&quot;<\/em><\/td>         <td>prime 1<\/td>        <\/tr>        <tr>         <td><em>&quot;q&quot;<\/em><\/td>         <td>prime 2<\/td>        <\/tr>        <tr>         <td><em>&quot;dmp1&quot;<\/em><\/td>         <td>exponent1, d mod (p-1)<\/td>        <\/tr>        <tr>         <td><em>&quot;dmq1&quot;<\/em><\/td>         <td>exponent2, d mod (q-1)<\/td>        <\/tr>        <tr>         <td><em>&quot;iqmp&quot;<\/em><\/td>         <td>coefficient, (inverse of q) mod p<\/td>        <\/tr>       <\/tbody>           <\/table>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     <strong><code>OPENSSL_KEYTYPE_DSA<\/code><\/strong>, an additional array key named <em>&quot;dsa&quot;<\/em>,      containing the key data is returned.    <\/span>     <table class=\"doctable informaltable\">             <thead>        <tr>         <th>Key<\/th>         <th>Description<\/th>        <\/tr>       <\/thead>       <tbody class=\"tbody\">        <tr>         <td><em>&quot;p&quot;<\/em><\/td>         <td>prime number (public)<\/td>        <\/tr>        <tr>         <td><em>&quot;q&quot;<\/em><\/td>         <td>160-bit subprime, q | p-1 (public)<\/td>        <\/tr>        <tr>         <td><em>&quot;g&quot;<\/em><\/td>         <td>generator of subgroup (public)<\/td>        <\/tr>        <tr>         <td><em>&quot;priv_key&quot;<\/em><\/td>         <td>private key x<\/td>        <\/tr>        <tr>         <td><em>&quot;pub_key&quot;<\/em><\/td>         <td>public key y = g^x<\/td>        <\/tr>       <\/tbody>           <\/table>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     <strong><code>OPENSSL_KEYTYPE_DH<\/code><\/strong>, an additional array key named <em>&quot;dh&quot;<\/em>,      containing the key data is returned.    <\/span>     <table class=\"doctable informaltable\">             <thead>        <tr>         <th>Key<\/th>         <th>Description<\/th>        <\/tr>       <\/thead>       <tbody class=\"tbody\">        <tr>         <td><em>&quot;p&quot;<\/em><\/td>         <td>prime number (shared)<\/td>        <\/tr>        <tr>         <td><em>&quot;g&quot;<\/em><\/td>         <td>generator of Z_p (shared)<\/td>        <\/tr>        <tr>         <td><em>&quot;priv_key&quot;<\/em><\/td>         <td>private DH value x<\/td>        <\/tr>        <tr>         <td><em>&quot;pub_key&quot;<\/em><\/td>         <td>public DH value g^x<\/td>        <\/tr>       <\/tbody>           <\/table>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     <strong><code>OPENSSL_KEYTYPE_EC<\/code><\/strong>, an additional array key named <em>&quot;ec&quot;<\/em>,      containing the key data is returned.    <\/span>     <table class=\"doctable informaltable\">             <thead>        <tr>         <th>Key<\/th>         <th>Description<\/th>        <\/tr>       <\/thead>       <tbody class=\"tbody\">        <tr>         <td><em>&quot;curve_name&quot;<\/em><\/td>         <td>name of curve, see <span class=\"function\">openssl_get_curve_names<\/span><\/td>        <\/tr>        <tr>         <td><em>&quot;curve_oid&quot;<\/em><\/td>         <td>ASN1 Object identifier (OID) for EC curve.<\/td>        <\/tr>        <tr>         <td><em>&quot;x&quot;<\/em><\/td>         <td>x coordinate (public)<\/td>        <\/tr>        <tr>         <td><em>&quot;y&quot;<\/em><\/td>         <td>y coordinate (public)<\/td>        <\/tr>        <tr>         <td><em>&quot;d&quot;<\/em><\/td>         <td>private key<\/td>        <\/tr>       <\/tbody>           <\/table>   <\/li>  <\/ul>","versions":"PHP 5 >= 5.2.0, PHP 7"},"openssl_pkey_get_private":{"id":"function.openssl-pkey-get-private","purpose":"Get a private key","prototype":"resource openssl_pkey_get_private(mixed $key [, string $passphrase = \"\"])","return":"<p class=\"para\">   Returns a positive key resource identifier on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_pkey_get_public":{"id":"function.openssl-pkey-get-public","purpose":"Extract public key from certificate and prepare it for use","prototype":"resource openssl_pkey_get_public(mixed $certificate)","return":"<p class=\"para\">   Returns a positive key resource identifier on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_pkey_new":{"id":"function.openssl-pkey-new","purpose":"Generates a new private key","prototype":"resource openssl_pkey_new([array $configargs = ''])","return":"<p class=\"para\">   Returns a resource identifier for the pkey on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_private_decrypt":{"id":"function.openssl-private-decrypt","purpose":"Decrypts data with private key","prototype":"bool openssl_private_decrypt(string $data, string $decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_private_encrypt":{"id":"function.openssl-private-encrypt","purpose":"Encrypts data with private key","prototype":"bool openssl_private_encrypt(string $data, string $crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_public_decrypt":{"id":"function.openssl-public-decrypt","purpose":"Decrypts data with public key","prototype":"bool openssl_public_decrypt(string $data, string $decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_public_encrypt":{"id":"function.openssl-public-encrypt","purpose":"Encrypts data with public key","prototype":"bool openssl_public_encrypt(string $data, string $crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_random_pseudo_bytes":{"id":"function.openssl-random-pseudo-bytes","purpose":"Generate a pseudo-random string of bytes","prototype":"string openssl_random_pseudo_bytes(int $length [, bool $crypto_strong = ''])","return":"<p class=\"para\">   Returns the generated <span class=\"type\">string<\/span> of bytes on success,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"openssl_seal":{"id":"function.openssl-seal","purpose":"Seal (encrypt) data","prototype":"int openssl_seal(string $data, string $sealed_data, array $env_keys, array $pub_key_ids [, string $method = \"RC4\" [, string $iv = '']])","return":"<p class=\"para\">   Returns the length of the sealed data on success, or <strong><code>FALSE<\/code><\/strong> on error.   If successful the sealed data is returned in   <code class=\"parameter\">sealed_data<\/code>, and the envelope keys in   <code class=\"parameter\">env_keys<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_sign":{"id":"function.openssl-sign","purpose":"Generate signature","prototype":"bool openssl_sign(string $data, string $signature, mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_spki_export_challenge":{"id":"function.openssl-spki-export-challenge","purpose":"Exports the challenge assoicated with a signed public key and challenge","prototype":"string openssl_spki_export_challenge(string $spkac)","return":"<p class=\"para\">   Returns the associated challenge string or NULL on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"openssl_spki_export":{"id":"function.openssl-spki-export","purpose":"Exports a valid PEM formatted public key signed public key and challenge","prototype":"string openssl_spki_export(string $spkac)","return":"<p class=\"para\">   Returns the associated PEM formatted public key or NULL on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"openssl_spki_new":{"id":"function.openssl-spki-new","purpose":"Generate a new signed public key and challenge","prototype":"string openssl_spki_new(resource $privkey, string $challenge [, int $algorithm = ''])","return":"<p class=\"para\">   Returns a signed public key and challenge string or NULL on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"openssl_spki_verify":{"id":"function.openssl-spki-verify","purpose":"Verifies a signed public key and challenge","prototype":"string openssl_spki_verify(string $spkac)","return":"<p class=\"para\">   Returns a boolean on success or failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"openssl_verify":{"id":"function.openssl-verify","purpose":"Verify signature","prototype":"int openssl_verify(string $data, string $signature, mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1])","return":"<p class=\"para\">   Returns 1 if the signature is correct, 0 if it is incorrect, and   -1 on error.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"openssl_x509_check_private_key":{"id":"function.openssl-x509-check-private-key","purpose":"Checks if a private key corresponds to a certificate","prototype":"bool openssl_x509_check_private_key(mixed $cert, mixed $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">key<\/code> is the private key that   corresponds to <code class=\"parameter\">cert<\/code>, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_x509_checkpurpose":{"id":"function.openssl-x509-checkpurpose","purpose":"Verifies if a certificate can be used for a particular purpose","prototype":"int openssl_x509_checkpurpose(mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the certificate can be used for the intended purpose,   <strong><code>FALSE<\/code><\/strong> if it cannot, or -1 on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_x509_export_to_file":{"id":"function.openssl-x509-export-to-file","purpose":"Exports a certificate to file","prototype":"bool openssl_x509_export_to_file(mixed $x509, string $outfilename [, bool $notext = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_x509_export":{"id":"function.openssl-x509-export","purpose":"Exports a certificate as a string","prototype":"bool openssl_x509_export(mixed $x509, string $output [, bool $notext = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"openssl_x509_fingerprint":{"id":"function.openssl-x509-fingerprint","purpose":"Calculates the fingerprint, or digest, of a given X.509 certificate","prototype":"string openssl_x509_fingerprint(mixed $x509 [, string $hash_algorithm = \"sha1\" [, bool $raw_output = '']])","return":"<p class=\"para\">    Returns a string containing the calculated certificate fingerprint as lowercase hexits unless <code class=\"parameter\">raw_output<\/code> is set to <strong><code>TRUE<\/code><\/strong> in which case the raw binary representation of the message digest is returned.  <\/p>  <p class=\"para\">    Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"openssl_x509_free":{"id":"function.openssl-x509-free","purpose":"Free certificate resource","prototype":"void openssl_x509_free(resource $x509cert)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_x509_parse":{"id":"function.openssl-x509-parse","purpose":"Parse an X509 certificate and return the information as an array","prototype":"array openssl_x509_parse(mixed $x509cert [, bool $shortnames = ''])","return":"<p class=\"para\">   <em class=\"emphasis\">The structure of the returned data is (deliberately) not   yet documented, as it is still subject to change.<\/em>  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"openssl_x509_read":{"id":"function.openssl-x509-read","purpose":"Parse an X.509 certificate and return a resource identifier for  it","prototype":"resource openssl_x509_read(mixed $x509certdata)","return":"<p class=\"para\">   Returns a resource identifier on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"password_get_info":{"id":"function.password-get-info","purpose":"Returns information about the given hash","prototype":"array password_get_info(string $hash)","return":"<p class=\"para\">   Returns an associative array with three elements:    <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">       <em>algo<\/em>, which will match a       <a href=\"password.constants.html\" class=\"link\">password algorithm constant<\/a>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>algoName<\/em>, which has the human readable name of the      algorithm     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>options<\/em>, which includes the options      provided when calling <span class=\"function\">password_hash<\/span>     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"password_hash":{"id":"function.password-hash","purpose":"Creates a password hash","prototype":"integer password_hash(string $password, int $algo [, array $options = ''])","return":"<p class=\"para\">   Returns the hashed password,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The used algorithm, cost and salt are returned as part of the hash. Therefore,   all information that&#039;s needed to verify the hash is included in it. This allows   the <span class=\"function\">password_verify<\/span> function to verify the hash without   needing separate storage for the salt or algorithm information.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"password_needs_rehash":{"id":"function.password-needs-rehash","purpose":"Checks if the given hash matches the given options","prototype":"bool password_needs_rehash(string $hash, int $algo [, array $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the hash should be rehashed to match the given   <code class=\"parameter\">algo<\/code> and <code class=\"parameter\">options<\/code>, or <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"password_verify":{"id":"function.password-verify","purpose":"Verifies that a password matches a hash","prototype":"bool password_verify(string $password, string $hash)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the password and hash match, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"sodium_add":{"id":"function.sodium-add","purpose":"Add large numbers","prototype":"void sodium_add(string $val, string $addv)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_base642bin":{"id":"function.sodium-base642bin","purpose":"Description","prototype":"string sodium_base642bin(string $b64, int $id [, string $ignore = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_bin2base64":{"id":"function.sodium-bin2base64","purpose":"Description","prototype":"string sodium_bin2base64(string $bin, int $id)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_bin2hex":{"id":"function.sodium-bin2hex","purpose":"Encode to hexadecimal","prototype":"string sodium_bin2hex(string $bin)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_compare":{"id":"function.sodium-compare","purpose":"Compare large numbers","prototype":"int sodium_compare(string $buf1, string $buf2)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_aes256gcm_decrypt":{"id":"function.sodium-crypto-aead-aes256gcm-decrypt","purpose":"Decrypt in combined mode with precalculation","prototype":"string sodium_crypto_aead_aes256gcm_decrypt(string $ciphertext, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_aes256gcm_encrypt":{"id":"function.sodium-crypto-aead-aes256gcm-encrypt","purpose":"Encrypt in combined mode with precalculation","prototype":"string sodium_crypto_aead_aes256gcm_encrypt(string $msg, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_aes256gcm_is_available":{"id":"function.sodium-crypto-aead-aes256gcm-is-available","purpose":"Check if hardware supports AES256-GCM","prototype":"bool sodium_crypto_aead_aes256gcm_is_available()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_aes256gcm_keygen":{"id":"function.sodium-crypto-aead-aes256gcm-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_aead_aes256gcm_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_chacha20poly1305_decrypt":{"id":"function.sodium-crypto-aead-chacha20poly1305-decrypt","purpose":"Verify that the ciphertext includes a valid tag","prototype":"string sodium_crypto_aead_chacha20poly1305_decrypt(string $ciphertext, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_chacha20poly1305_encrypt":{"id":"function.sodium-crypto-aead-chacha20poly1305-encrypt","purpose":"Encrypt a message","prototype":"string sodium_crypto_aead_chacha20poly1305_encrypt(string $msg, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_chacha20poly1305_ietf_decrypt":{"id":"function.sodium-crypto-aead-chacha20poly1305-ietf-decrypt","purpose":"Verify that the ciphertext includes a valid tag","prototype":"string sodium_crypto_aead_chacha20poly1305_ietf_decrypt(string $ciphertext, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_chacha20poly1305_ietf_encrypt":{"id":"function.sodium-crypto-aead-chacha20poly1305-ietf-encrypt","purpose":"Encrypt a message","prototype":"string sodium_crypto_aead_chacha20poly1305_ietf_encrypt(string $msg, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_chacha20poly1305_ietf_keygen":{"id":"function.sodium-crypto-aead-chacha20poly1305-ietf-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_aead_chacha20poly1305_ietf_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_chacha20poly1305_keygen":{"id":"function.sodium-crypto-aead-chacha20poly1305-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_aead_chacha20poly1305_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_xchacha20poly1305_ietf_decrypt":{"id":"function.sodium-crypto-aead-xchacha20poly1305-ietf-decrypt","purpose":"Description","prototype":"string sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(string $ciphertext, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_xchacha20poly1305_ietf_encrypt":{"id":"function.sodium-crypto-aead-xchacha20poly1305-ietf-encrypt","purpose":"Description","prototype":"string sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(string $msg, string $ad, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_aead_xchacha20poly1305_ietf_keygen":{"id":"function.sodium-crypto-aead-xchacha20poly1305-ietf-keygen","purpose":"Description","prototype":"string sodium_crypto_aead_xchacha20poly1305_ietf_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_auth_keygen":{"id":"function.sodium-crypto-auth-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_auth_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_auth_verify":{"id":"function.sodium-crypto-auth-verify","purpose":"Verifies that the tag is valid for the message","prototype":"bool sodium_crypto_auth_verify(string $signature, string $msg, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_auth":{"id":"function.sodium-crypto-auth","purpose":"Compute a tag for the message","prototype":"string sodium_crypto_auth(string $msg, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_keypair_from_secretkey_and_publickey":{"id":"function.sodium-crypto-box-keypair-from-secretkey-and-publickey","purpose":"Description","prototype":"string sodium_crypto_box_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_keypair":{"id":"function.sodium-crypto-box-keypair","purpose":"Randomly generate a secret key and a corresponding public key","prototype":"string sodium_crypto_box_keypair()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_open":{"id":"function.sodium-crypto-box-open","purpose":"Verify and decrypt a ciphertext","prototype":"string sodium_crypto_box_open(string $ciphertext, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_publickey_from_secretkey":{"id":"function.sodium-crypto-box-publickey-from-secretkey","purpose":"Description","prototype":"string sodium_crypto_box_publickey_from_secretkey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_publickey":{"id":"function.sodium-crypto-box-publickey","purpose":"Description","prototype":"string sodium_crypto_box_publickey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_seal_open":{"id":"function.sodium-crypto-box-seal-open","purpose":"Decrypt the ciphertext","prototype":"string sodium_crypto_box_seal_open(string $ciphertext, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_seal":{"id":"function.sodium-crypto-box-seal","purpose":"Encrypt a message","prototype":"string sodium_crypto_box_seal(string $msg, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_secretkey":{"id":"function.sodium-crypto-box-secretkey","purpose":"Description","prototype":"string sodium_crypto_box_secretkey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box_seed_keypair":{"id":"function.sodium-crypto-box-seed-keypair","purpose":"Deterministically derive the key pair from a single key","prototype":"string sodium_crypto_box_seed_keypair(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_box":{"id":"function.sodium-crypto-box","purpose":"Encrypt a message","prototype":"string sodium_crypto_box(string $msg, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_generichash_final":{"id":"function.sodium-crypto-generichash-final","purpose":"Complete the hash","prototype":"string sodium_crypto_generichash_final(string $state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_generichash_init":{"id":"function.sodium-crypto-generichash-init","purpose":"Initialize a hash","prototype":"string sodium_crypto_generichash_init([string $key = '' [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_generichash_keygen":{"id":"function.sodium-crypto-generichash-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_generichash_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_generichash_update":{"id":"function.sodium-crypto-generichash-update","purpose":"Add message to a hash","prototype":"bool sodium_crypto_generichash_update(string $state, string $msg)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_generichash":{"id":"function.sodium-crypto-generichash","purpose":"Get a hash of the message","prototype":"string sodium_crypto_generichash(string $msg [, string $key = '' [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kdf_derive_from_key":{"id":"function.sodium-crypto-kdf-derive-from-key","purpose":"Derive a subkey","prototype":"string sodium_crypto_kdf_derive_from_key(int $subkey_len, int $subkey_id, string $context, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kdf_keygen":{"id":"function.sodium-crypto-kdf-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_kdf_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kx_client_session_keys":{"id":"function.sodium-crypto-kx-client-session-keys","purpose":"Description","prototype":"array sodium_crypto_kx_client_session_keys(string $client_keypair, string $server_key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kx_keypair":{"id":"function.sodium-crypto-kx-keypair","purpose":"Description","prototype":"string sodium_crypto_kx_keypair()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kx_publickey":{"id":"function.sodium-crypto-kx-publickey","purpose":"Description","prototype":"string sodium_crypto_kx_publickey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kx_secretkey":{"id":"function.sodium-crypto-kx-secretkey","purpose":"Description","prototype":"string sodium_crypto_kx_secretkey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kx_seed_keypair":{"id":"function.sodium-crypto-kx-seed-keypair","purpose":"Description","prototype":"string sodium_crypto_kx_seed_keypair(string $string)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_kx_server_session_keys":{"id":"function.sodium-crypto-kx-server-session-keys","purpose":"Description","prototype":"array sodium_crypto_kx_server_session_keys(string $server_keypair, string $client_key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash_scryptsalsa208sha256_str_verify":{"id":"function.sodium-crypto-pwhash-scryptsalsa208sha256-str-verify","purpose":"Verify that the password is a valid password verification string","prototype":"bool sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(string $hash, string $password)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash_scryptsalsa208sha256_str":{"id":"function.sodium-crypto-pwhash-scryptsalsa208sha256-str","purpose":"Get an ASCII encoded hash","prototype":"string sodium_crypto_pwhash_scryptsalsa208sha256_str(string $password, int $opslimit, int $memlimit)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash_scryptsalsa208sha256":{"id":"function.sodium-crypto-pwhash-scryptsalsa208sha256","purpose":"Derives a key from a password","prototype":"string sodium_crypto_pwhash_scryptsalsa208sha256(int $length, string $password, string $salt, int $opslimit, int $memlimit)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash_str_needs_rehash":{"id":"function.sodium-crypto-pwhash-str-needs-rehash","purpose":"Description","prototype":"bool sodium_crypto_pwhash_str_needs_rehash(string $password, int $opslimit, int $memlimit)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash_str_verify":{"id":"function.sodium-crypto-pwhash-str-verify","purpose":"Verify that hash is a valid password verification string","prototype":"bool sodium_crypto_pwhash_str_verify(string $hash, string $password)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash_str":{"id":"function.sodium-crypto-pwhash-str","purpose":"Get an ASCII encoded hash","prototype":"string sodium_crypto_pwhash_str(string $password, int $opslimit, int $memlimit)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_pwhash":{"id":"function.sodium-crypto-pwhash","purpose":"Derive a key from a password","prototype":"string sodium_crypto_pwhash(int $length, string $password, string $salt, int $opslimit, int $memlimit [, int $alg = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_scalarmult_base":{"id":"function.sodium-crypto-scalarmult-base","purpose":"Alias of sodium_crypto_box_publickey_from_secretkey","prototype":" sodium_crypto_scalarmult_base()","return":"","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_scalarmult":{"id":"function.sodium-crypto-scalarmult","purpose":"Compute a shared secret given a user's secret key and another user's public key","prototype":"string sodium_crypto_scalarmult(string $n, string $p)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretbox_keygen":{"id":"function.sodium-crypto-secretbox-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_secretbox_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretbox_open":{"id":"function.sodium-crypto-secretbox-open","purpose":"Verify and decrypt a ciphertext","prototype":"string sodium_crypto_secretbox_open(string $ciphertext, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretbox":{"id":"function.sodium-crypto-secretbox","purpose":"Encrypt a message","prototype":"string sodium_crypto_secretbox(string $string, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretstream_xchacha20poly1305_init_pull":{"id":"function.sodium-crypto-secretstream-xchacha20poly1305-init-pull","purpose":"Description","prototype":"string sodium_crypto_secretstream_xchacha20poly1305_init_pull(string $header, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretstream_xchacha20poly1305_init_push":{"id":"function.sodium-crypto-secretstream-xchacha20poly1305-init-push","purpose":"Description","prototype":"array sodium_crypto_secretstream_xchacha20poly1305_init_push(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretstream_xchacha20poly1305_keygen":{"id":"function.sodium-crypto-secretstream-xchacha20poly1305-keygen","purpose":"Description","prototype":"string sodium_crypto_secretstream_xchacha20poly1305_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretstream_xchacha20poly1305_pull":{"id":"function.sodium-crypto-secretstream-xchacha20poly1305-pull","purpose":"Description","prototype":"array sodium_crypto_secretstream_xchacha20poly1305_pull(string $state, string $c [, string $ad = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretstream_xchacha20poly1305_push":{"id":"function.sodium-crypto-secretstream-xchacha20poly1305-push","purpose":"Description","prototype":"string sodium_crypto_secretstream_xchacha20poly1305_push(string $state, string $msg [, string $ad = '' [, int $tag = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_secretstream_xchacha20poly1305_rekey":{"id":"function.sodium-crypto-secretstream-xchacha20poly1305-rekey","purpose":"Description","prototype":"void sodium_crypto_secretstream_xchacha20poly1305_rekey(string $state)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_shorthash_keygen":{"id":"function.sodium-crypto-shorthash-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_shorthash_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_shorthash":{"id":"function.sodium-crypto-shorthash","purpose":"Compute a fixed-size fingerprint for the message","prototype":"string sodium_crypto_shorthash(string $msg, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_detached":{"id":"function.sodium-crypto-sign-detached","purpose":"Sign the message","prototype":"string sodium_crypto_sign_detached(string $msg, string $keypair)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_ed25519_pk_to_curve25519":{"id":"function.sodium-crypto-sign-ed25519-pk-to-curve25519","purpose":"Convert an Ed25519 public key to a Curve25519 public key","prototype":"string sodium_crypto_sign_ed25519_pk_to_curve25519(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_ed25519_sk_to_curve25519":{"id":"function.sodium-crypto-sign-ed25519-sk-to-curve25519","purpose":"Convert an Ed25519 secret key to a Curve25519 secret key","prototype":"string sodium_crypto_sign_ed25519_sk_to_curve25519(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_keypair_from_secretkey_and_publickey":{"id":"function.sodium-crypto-sign-keypair-from-secretkey-and-publickey","purpose":"Description","prototype":"string sodium_crypto_sign_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_keypair":{"id":"function.sodium-crypto-sign-keypair","purpose":"Randomly generate a secret key and a corresponding public key","prototype":"string sodium_crypto_sign_keypair()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_open":{"id":"function.sodium-crypto-sign-open","purpose":"Check that the signed message has a valid signature","prototype":"string sodium_crypto_sign_open(string $string, string $keypair)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_publickey_from_secretkey":{"id":"function.sodium-crypto-sign-publickey-from-secretkey","purpose":"Extract the public key from the secret key","prototype":"string sodium_crypto_sign_publickey_from_secretkey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_publickey":{"id":"function.sodium-crypto-sign-publickey","purpose":"Description","prototype":"string sodium_crypto_sign_publickey(string $keypair)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_secretkey":{"id":"function.sodium-crypto-sign-secretkey","purpose":"Description","prototype":"string sodium_crypto_sign_secretkey(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_seed_keypair":{"id":"function.sodium-crypto-sign-seed-keypair","purpose":"Deterministically derive the key pair from a single key","prototype":"string sodium_crypto_sign_seed_keypair(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign_verify_detached":{"id":"function.sodium-crypto-sign-verify-detached","purpose":"Verify signature for the message","prototype":"bool sodium_crypto_sign_verify_detached(string $signature, string $msg, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_sign":{"id":"function.sodium-crypto-sign","purpose":"Sign a message","prototype":"string sodium_crypto_sign(string $msg, string $secret_key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_stream_keygen":{"id":"function.sodium-crypto-stream-keygen","purpose":"Get random bytes for key","prototype":"string sodium_crypto_stream_keygen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_stream_xor":{"id":"function.sodium-crypto-stream-xor","purpose":"Encrypt a message","prototype":"string sodium_crypto_stream_xor(string $msg, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_crypto_stream":{"id":"function.sodium-crypto-stream","purpose":"Generate a deterministic sequence of bytes from a seed","prototype":"string sodium_crypto_stream(int $length, string $nonce, string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_hex2bin":{"id":"function.sodium-hex2bin","purpose":"Decode from hexadecimal","prototype":"string sodium_hex2bin(string $hex [, string $ignore = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_increment":{"id":"function.sodium-increment","purpose":"Increment large number","prototype":"void sodium_increment(string $val)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_memcmp":{"id":"function.sodium-memcmp","purpose":"Test for equality in constant-time","prototype":"int sodium_memcmp(string $buf1, string $buf2)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_memzero":{"id":"function.sodium-memzero","purpose":"Overwrite buf with zeros","prototype":"void sodium_memzero(string $buf)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_pad":{"id":"function.sodium-pad","purpose":"Add padding data","prototype":"string sodium_pad(string $unpadded, int $length)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"sodium_unpad":{"id":"function.sodium-unpad","purpose":"Remove padding data","prototype":"string sodium_unpad(string $padded, int $length)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"dba_close":{"id":"function.dba-close","purpose":"Close a DBA database","prototype":"void dba_close(resource $handle)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_delete":{"id":"function.dba-delete","purpose":"Delete DBA entry specified by key","prototype":"bool dba_delete(string $key, resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_exists":{"id":"function.dba-exists","purpose":"Check whether key exists","prototype":"bool dba_exists(string $key, resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the key exists, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_fetch":{"id":"function.dba-fetch","purpose":"Fetch data specified by key","prototype":"string dba_fetch(string $key, resource $handle, int $skip)","return":"<p class=\"para\">   Returns the associated string if the key\/data pair is found, <strong><code>FALSE<\/code><\/strong>    otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_firstkey":{"id":"function.dba-firstkey","purpose":"Fetch first key","prototype":"string dba_firstkey(resource $handle)","return":"<p class=\"para\">   Returns the key on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_handlers":{"id":"function.dba-handlers","purpose":"List all the handlers available","prototype":"array dba_handlers([bool $full_info = ''])","return":"<p class=\"para\">   Returns an array of database handlers. If <code class=\"parameter\">full_info<\/code>   is set to <strong><code>TRUE<\/code><\/strong>, the array will be associative with the handlers names as   keys, and their version information as value. Otherwise, the result will be   an indexed array of handlers names.    <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    When the internal cdb library is used you will see     <em>cdb<\/em> and <em>cdb_make<\/em>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"dba_insert":{"id":"function.dba-insert","purpose":"Insert entry","prototype":"bool dba_insert(string $key, string $value, resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_key_split":{"id":"function.dba-key-split","purpose":"Splits a key in string representation into array representation","prototype":"mixed dba_key_split(mixed $key)","return":"<p class=\"para\">   Returns an array of the form <em>array(0 =&gt; group, 1 =&gt;    value_name)<\/em>. This function will return <strong><code>FALSE<\/code><\/strong> if    <code class=\"parameter\">key<\/code> is <strong><code>NULL<\/code><\/strong> or <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"dba_list":{"id":"function.dba-list","purpose":"List all open database files","prototype":"array dba_list()","return":"<p class=\"para\">   An associative array, in the form <em>resourceid =&gt; filename<\/em>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"dba_nextkey":{"id":"function.dba-nextkey","purpose":"Fetch next key","prototype":"string dba_nextkey(resource $handle)","return":"<p class=\"para\">   Returns the key on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_open":{"id":"function.dba-open","purpose":"Open database","prototype":"resource dba_open(string $path, string $mode [, string $handler = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns a positive handle on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_optimize":{"id":"function.dba-optimize","purpose":"Optimize database","prototype":"bool dba_optimize(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_popen":{"id":"function.dba-popen","purpose":"Open database persistently","prototype":"resource dba_popen(string $path, string $mode [, string $handler = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns a positive handle on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_replace":{"id":"function.dba-replace","purpose":"Replace or insert entry","prototype":"bool dba_replace(string $key, string $value, resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dba_sync":{"id":"function.dba-sync","purpose":"Synchronize database","prototype":"bool dba_sync(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dbx_close":{"id":"function.dbx-close","purpose":"Close an open connection\/database","prototype":"int dbx_close(object $link_identifier)","return":"<p class=\"para\">   Returns 1 on success and 0 on errors.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_compare":{"id":"function.dbx-compare","purpose":"Compare two rows for sorting purposes","prototype":"int dbx_compare(array $row_a, array $row_b, string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE])","return":"<p class=\"para\">   Returns <em>0<\/em> if the <em>row_a[$column_key]<\/em>   is equal to <em>row_b[$column_key]<\/em>, and <em>1<\/em>   or <em>-1<\/em> if the former is greater or is smaller than the    latter one, respectively, or vice versa if the <code class=\"parameter\">flag<\/code>    is set to <strong><code>DBX_CMP_DESC<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_connect":{"id":"function.dbx-connect","purpose":"Open a connection\/database","prototype":"object dbx_connect(mixed $module, string $host, string $database, string $username, string $password [, int $persistent = ''])","return":"<p class=\"para\">   Returns an object on success, <strong><code>FALSE<\/code><\/strong> on error. If a connection has been   made but the database could not be selected, the connection is closed and   <strong><code>FALSE<\/code><\/strong> is returned.   <\/p>  <p class=\"para\">   The returned <var class=\"varname\">object<\/var> has three properties:   <dl>         <dt>      <span class=\"property\">database<\/span>     <\/dt>     <dd>      <span class=\"simpara\">       It is the name of the currently selected database.       <\/span>     <\/dd>             <dt>      <span class=\"property\">handle<\/span>     <\/dt>     <dd>      <p class=\"para\">       It is a valid handle for the connected database, and as such it can be       used in module-specific functions (if required).       <div class=\"informalexample\">        <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$link&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_connect<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">DBX_MYSQL<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"localhost\"<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"db\"<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"username\"<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"password\"<\/span><span style=\"color: #007700\">);<br \/><\/span><span style=\"color: #0000BB\">mysql_close<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$link<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">handle<\/span><span style=\"color: #007700\">);&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;dbx_close($link)&nbsp;would&nbsp;be&nbsp;better&nbsp;here<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>        <\/div>       <\/div>      <\/p>     <\/dd>             <dt>      <span class=\"property\">module<\/span>     <\/dt>     <dd>      <span class=\"simpara\">       It is used internally by dbx only, and is actually the module number       mentioned above.      <\/span>     <\/dd>       <\/dl>  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_error":{"id":"function.dbx-error","purpose":"Report the error message of the latest function call in the module","prototype":"string dbx_error(object $link_identifier)","return":"<p class=\"para\">   Returns a string containing the error message from the last function call   of the abstracted module (e.g. mysql module). If there are multiple    connections in the same module, just the last error is given. If there are   connections on different modules, the latest error is returned for the    module specified by the <code class=\"parameter\">link_identifier<\/code> parameter.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_escape_string":{"id":"function.dbx-escape-string","purpose":"Escape a string so it can safely be used in an sql-statement","prototype":"string dbx_escape_string(object $link_identifier, string $text)","return":"<p class=\"para\">   Returns the text, escaped where necessary (such as quotes, backslashes   etc). On error, <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_fetch_row":{"id":"function.dbx-fetch-row","purpose":"Fetches rows from a query-result that had the   DBX_RESULT_UNBUFFERED flag set","prototype":"mixed dbx_fetch_row(object $result_identifier)","return":"<p class=\"para\">   Returns an object on success that contains the same information as any row   would have in the <span class=\"function\">dbx_query<\/span> result    <span class=\"property\">data<\/span> property, including columns accessible by index    or fieldname when the flags for <span class=\"function\">dbx_query<\/span> were set   that way.  <\/p>  <p class=\"para\">   Upon failure, returns <em>0<\/em> (e.g. when no more rows are   available).  <\/p>","versions":"PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_query":{"id":"function.dbx-query","purpose":"Send a query and fetch all results (if any)","prototype":"mixed dbx_query(object $link_identifier, string $sql_statement [, int $flags = ''])","return":"<p class=\"para\">   <span class=\"function\">dbx_query<\/span> returns an object or <em>1<\/em>    on success, and <em>0<\/em> on failure. The result object is    returned only if the query given in <code class=\"parameter\">sql_statement<\/code>   produces a result set (i.e. a SELECT query, even if the result set is   empty).   <\/p>  <p class=\"para\">   The returned object has four or five   properties depending on <code class=\"parameter\">flags<\/code>:   <dl>         <dt>      <span class=\"property\">handle<\/span>     <\/dt>     <dd>      <p class=\"para\">       It is a valid handle for the connected database, and as such it can be       used in module specific functions (if required).       <div class=\"informalexample\">        <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$result&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_query<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$link<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"SELECT&nbsp;id&nbsp;FROM&nbsp;table\"<\/span><span style=\"color: #007700\">);<br \/><\/span><span style=\"color: #0000BB\">mysql_field_len<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">handle<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #0000BB\">0<\/span><span style=\"color: #007700\">);<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>        <\/div>       <\/div>      <\/p>     <\/dd>             <dt>      <span class=\"property\">cols<\/span> and <span class=\"property\">rows<\/span>     <\/dt>     <dd>      <p class=\"para\">       These contain the number of columns (or fields) and rows (or records)       respectively.       <div class=\"informalexample\">        <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$result&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_query<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$link<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">'SELECT&nbsp;id&nbsp;FROM&nbsp;table'<\/span><span style=\"color: #007700\">);<br \/>echo&nbsp;<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">rows<\/span><span style=\"color: #007700\">;&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;number&nbsp;of&nbsp;records<br \/><\/span><span style=\"color: #007700\">echo&nbsp;<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">cols<\/span><span style=\"color: #007700\">;&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;number&nbsp;of&nbsp;fields&nbsp;<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>        <\/div>       <\/div>      <\/p>     <\/dd>             <dt>      <span class=\"property\">info<\/span> (optional)     <\/dt>     <dd>      <span class=\"simpara\">       It is returned only if either <strong><code>DBX_RESULT_INFO<\/code><\/strong> or       <strong><code>DBX_RESULT_ASSOC<\/code><\/strong> is specified in the       <code class=\"parameter\">flags<\/code> parameter. It is a 2 dimensional array,       that has two named rows (<em>name<\/em> and        <em>type<\/em>) to retrieve column information.      <\/span>      <div class=\"example\" id=\"example-1\">       <p><strong>Example # lists each field&#039;s name and type<\/strong><\/p>       <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$result&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_query<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$link<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">'SELECT&nbsp;id&nbsp;FROM&nbsp;table'<\/span><span style=\"color: #007700\">,<br \/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">DBX_RESULT_INDEX&nbsp;<\/span><span style=\"color: #007700\">|&nbsp;<\/span><span style=\"color: #0000BB\">DBX_RESULT_INFO<\/span><span style=\"color: #007700\">);<br \/><br \/>for&nbsp;(<\/span><span style=\"color: #0000BB\">$i&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">0<\/span><span style=\"color: #007700\">;&nbsp;<\/span><span style=\"color: #0000BB\">$i&nbsp;<\/span><span style=\"color: #007700\">&lt;&nbsp;<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">cols<\/span><span style=\"color: #007700\">;&nbsp;<\/span><span style=\"color: #0000BB\">$i<\/span><span style=\"color: #007700\">++&nbsp;)&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">info<\/span><span style=\"color: #007700\">[<\/span><span style=\"color: #DD0000\">'name'<\/span><span style=\"color: #007700\">][<\/span><span style=\"color: #0000BB\">$i<\/span><span style=\"color: #007700\">]&nbsp;.&nbsp;<\/span><span style=\"color: #DD0000\">\"\\n\"<\/span><span style=\"color: #007700\">;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">info<\/span><span style=\"color: #007700\">[<\/span><span style=\"color: #DD0000\">'type'<\/span><span style=\"color: #007700\">][<\/span><span style=\"color: #0000BB\">$i<\/span><span style=\"color: #007700\">]&nbsp;.&nbsp;<\/span><span style=\"color: #DD0000\">\"\\n\"<\/span><span style=\"color: #007700\">;&nbsp;&nbsp;<br \/>}<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>       <\/div>      <\/div>     <\/dd>             <dt>      <span class=\"property\">data<\/span>     <\/dt>     <dd>      <span class=\"simpara\">       This property contains the actual resulting data, possibly associated        with column names as well depending on <code class=\"parameter\">flags<\/code>.       If <strong><code>DBX_RESULT_ASSOC<\/code><\/strong> is set, it is possible to use       <em>$result-&gt;data[2][&quot;field_name&quot;]<\/em>.      <\/span>      <div class=\"example\" id=\"example-2\">       <p><strong>Example # outputs the content of data property into HTML table<\/strong><\/p>       <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$result&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_query<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$link<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">'SELECT&nbsp;id,&nbsp;parentid,&nbsp;description&nbsp;FROM&nbsp;table'<\/span><span style=\"color: #007700\">);<br \/><br \/>echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;table&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/>foreach&nbsp;(<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">data&nbsp;<\/span><span style=\"color: #007700\">as&nbsp;<\/span><span style=\"color: #0000BB\">$row<\/span><span style=\"color: #007700\">)&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;tr&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(<\/span><span style=\"color: #0000BB\">$row&nbsp;<\/span><span style=\"color: #007700\">as&nbsp;<\/span><span style=\"color: #0000BB\">$field<\/span><span style=\"color: #007700\">)&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;td&gt;<\/span><span style=\"color: #0000BB\">$field<\/span><span style=\"color: #DD0000\">&lt;\/td&gt;\"<\/span><span style=\"color: #007700\">;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;\/tr&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/>}<br \/>echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;\/table&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>       <\/div>      <\/div>      <div class=\"example\" id=\"example-3\">       <p><strong>Example # How to handle UNBUFFERED queries<\/strong><\/p>       <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/><br \/>$result&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_query&nbsp;<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$link<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">'SELECT&nbsp;id,&nbsp;parentid,&nbsp;description&nbsp;FROM&nbsp;table'<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #0000BB\">DBX_RESULT_UNBUFFERED<\/span><span style=\"color: #007700\">);<br \/><br \/>echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;table&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/>while&nbsp;(<\/span><span style=\"color: #0000BB\">$row&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">dbx_fetch_row<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$result<\/span><span style=\"color: #007700\">))&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;tr&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(<\/span><span style=\"color: #0000BB\">$row&nbsp;<\/span><span style=\"color: #007700\">as&nbsp;<\/span><span style=\"color: #0000BB\">$field<\/span><span style=\"color: #007700\">)&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;td&gt;<\/span><span style=\"color: #0000BB\">$field<\/span><span style=\"color: #DD0000\">&lt;\/td&gt;\"<\/span><span style=\"color: #007700\">;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;\/tr&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/>}<br \/>echo&nbsp;<\/span><span style=\"color: #DD0000\">\"&lt;\/table&gt;\\n\"<\/span><span style=\"color: #007700\">;<br \/><br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>       <\/div>      <\/div>     <\/dd>       <\/dl>  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"dbx_sort":{"id":"function.dbx-sort","purpose":"Sort a result from a dbx_query by a custom sort function","prototype":"bool dbx_sort(object $result, string $user_compare_function)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL dbx >= 1.1.0"},"odbc_autocommit":{"id":"function.odbc-autocommit","purpose":"Toggle autocommit behaviour","prototype":"mixed odbc_autocommit(resource $connection_id [, bool $OnOff = ''])","return":"<p class=\"para\">   Without the <code class=\"parameter\">OnOff<\/code> parameter, this function returns   auto-commit status for <code class=\"parameter\">connection_id<\/code>. Non-zero is   returned if auto-commit is on, 0 if it is off, or <strong><code>FALSE<\/code><\/strong> if an error   occurs.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">OnOff<\/code> is set, this function returns <strong><code>TRUE<\/code><\/strong> on   success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_binmode":{"id":"function.odbc-binmode","purpose":"Handling of binary column data","prototype":"bool odbc_binmode(resource $result_id, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_close_all":{"id":"function.odbc-close-all","purpose":"Close all ODBC connections","prototype":"void odbc_close_all()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_close":{"id":"function.odbc-close","purpose":"Close an ODBC connection","prototype":"void odbc_close(resource $connection_id)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_columnprivileges":{"id":"function.odbc-columnprivileges","purpose":"Lists columns and associated privileges for the given table","prototype":"resource odbc_columnprivileges(resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name)","return":"<p class=\"para\">   Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.   This result identifier can be used to fetch a list of columns and   associated privileges.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">GRANTOR<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">GRANTEE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PRIVILEGE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">IS_GRANTABLE<\/span><\/li>   <\/ul>  <\/p>  <p class=\"para\">   The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and   TABLE_NAME.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_columns":{"id":"function.odbc-columns","purpose":"Lists the column names in specified tables","prototype":"resource odbc_columns(resource $connection_id [, string $qualifier = '' [, string $schema = '' [, string $table_name = '' [, string $column_name = '']]]])","return":"<p class=\"para\">   Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_SCHEM<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">DATA_TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TYPE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PRECISION<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">LENGTH<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">SCALE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">RADIX<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NULLABLE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">REMARKS<\/span><\/li>   <\/ul>  <\/p>  <p class=\"para\">   The result set is ordered by TABLE_QUALIFIER, TABLE_SCHEM and   TABLE_NAME.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_commit":{"id":"function.odbc-commit","purpose":"Commit an ODBC transaction","prototype":"bool odbc_commit(resource $connection_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_connect":{"id":"function.odbc-connect","purpose":"Connect to a datasource","prototype":"resource odbc_connect(string $dsn, string $user, string $password [, int $cursor_type = ''])","return":"<p class=\"para\">   Returns an ODBC connection or (<strong><code>FALSE<\/code><\/strong>) on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_cursor":{"id":"function.odbc-cursor","purpose":"Get cursorname","prototype":"string odbc_cursor(resource $result_id)","return":"<p class=\"para\">   Returns the cursor name, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_data_source":{"id":"function.odbc-data-source","purpose":"Returns information about a current connection","prototype":"array odbc_data_source(resource $connection_id, int $fetch_type)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on error, and an array upon success.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"odbc_do":{"id":"function.odbc-do","purpose":"Alias of odbc_exec","prototype":" odbc_do()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"odbc_error":{"id":"function.odbc-error","purpose":"Get the last error code","prototype":"string odbc_error([resource $connection_id = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">connection_id<\/code> is specified, the last state   of that connection is returned, else the last state of any connection   is returned.  <\/p>  <p class=\"para\">   This function returns meaningful value only if last odbc query failed   (i.e. <span class=\"function\">odbc_exec<\/span> returned <strong><code>FALSE<\/code><\/strong>).  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"odbc_errormsg":{"id":"function.odbc-errormsg","purpose":"Get the last error message","prototype":"string odbc_errormsg([resource $connection_id = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">connection_id<\/code> is specified, the last state   of that connection is returned, else the last state of any connection   is returned.  <\/p>  <p class=\"para\">   This function returns meaningful value only if last odbc query failed   (i.e. <span class=\"function\">odbc_exec<\/span> returned <strong><code>FALSE<\/code><\/strong>).  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"odbc_exec":{"id":"function.odbc-exec","purpose":"Prepare and execute an SQL statement","prototype":"resource odbc_exec(resource $connection_id, string $query_string [, int $flags = ''])","return":"<p class=\"para\">   Returns an ODBC result identifier if the SQL command was executed   successfully, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_execute":{"id":"function.odbc-execute","purpose":"Execute a prepared statement","prototype":"bool odbc_execute(resource $result_id [, array $parameters_array = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_fetch_array":{"id":"function.odbc-fetch-array","purpose":"Fetch a result row as an associative array","prototype":"array odbc_fetch_array(resource $result [, int $rownumber = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there    are no more rows.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"odbc_fetch_into":{"id":"function.odbc-fetch-into","purpose":"Fetch one result row into array","prototype":"array odbc_fetch_into(resource $result_id, array $result_array [, int $rownumber = ''])","return":"<p class=\"para\">   Returns the number of columns in the result;   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_fetch_object":{"id":"function.odbc-fetch-object","purpose":"Fetch a result row as an object","prototype":"object odbc_fetch_object(resource $result [, int $rownumber = ''])","return":"<p class=\"para\">   Returns an object that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there    are no more rows.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"odbc_fetch_row":{"id":"function.odbc-fetch-row","purpose":"Fetch a row","prototype":"bool odbc_fetch_row(resource $result_id [, int $row_number = 1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there was a row, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_field_len":{"id":"function.odbc-field-len","purpose":"Get the length (precision) of a field","prototype":"int odbc_field_len(resource $result_id, int $field_number)","return":"<p class=\"para\">   Returns the field length, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_field_name":{"id":"function.odbc-field-name","purpose":"Get the columnname","prototype":"string odbc_field_name(resource $result_id, int $field_number)","return":"<p class=\"para\">   Returns the field name as a string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_field_num":{"id":"function.odbc-field-num","purpose":"Return column number","prototype":"int odbc_field_num(resource $result_id, string $field_name)","return":"<p class=\"para\">   Returns the field number as a integer, or <strong><code>FALSE<\/code><\/strong> on error.   Field numbering starts at 1.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_field_precision":{"id":"function.odbc-field-precision","purpose":"Alias of odbc_field_len","prototype":" odbc_field_precision()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"odbc_field_scale":{"id":"function.odbc-field-scale","purpose":"Get the scale of a field","prototype":"int odbc_field_scale(resource $result_id, int $field_number)","return":"<p class=\"para\">   Returns the field scale as a integer, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_field_type":{"id":"function.odbc-field-type","purpose":"Datatype of a field","prototype":"string odbc_field_type(resource $result_id, int $field_number)","return":"<p class=\"para\">   Returns the field type as a string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_foreignkeys":{"id":"function.odbc-foreignkeys","purpose":"Retrieves a list of foreign keys","prototype":"resource odbc_foreignkeys(resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table)","return":"<p class=\"para\">   Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">PKTABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PKTABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PKTABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PKCOLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">FKTABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">FKTABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">FKTABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">FKCOLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">KEY_SEQ<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">UPDATE_RULE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">DELETE_RULE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">FK_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PK_NAME<\/span><\/li>   <\/ul>  <\/p>  <p class=\"simpara\">   If <code class=\"parameter\">pk_table<\/code> contains a table name,   <span class=\"function\">odbc_foreignkeys<\/span> returns a result set   containing the primary key of the specified table and all of the   foreign keys that refer to it.  <\/p>  <p class=\"simpara\">   If <code class=\"parameter\">fk_table<\/code> contains a table name,   <span class=\"function\">odbc_foreignkeys<\/span> returns a result set   containing all of the foreign keys in the specified table and the   primary keys (in other tables) to which they refer.  <\/p>  <p class=\"simpara\">   If both <code class=\"parameter\">pk_table<\/code> and   <code class=\"parameter\">fk_table<\/code> contain table names,   <span class=\"function\">odbc_foreignkeys<\/span> returns the foreign keys in   the table specified in <code class=\"parameter\">fk_table<\/code> that refer   to the primary key of the table specified in   <code class=\"parameter\">pk_table<\/code>. This should be one key at most.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_free_result":{"id":"function.odbc-free-result","purpose":"Free resources associated with a result","prototype":"bool odbc_free_result(resource $result_id)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_gettypeinfo":{"id":"function.odbc-gettypeinfo","purpose":"Retrieves information about data types supported by the data source","prototype":"resource odbc_gettypeinfo(resource $connection_id [, int $data_type = ''])","return":"<p class=\"para\">   Returns an ODBC result identifier or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TYPE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">DATA_TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PRECISION<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">LITERAL_PREFIX<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">LITERAL_SUFFIX<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">CREATE_PARAMS<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NULLABLE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">CASE_SENSITIVE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">SEARCHABLE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">UNSIGNED_ATTRIBUTE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">MONEY<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">AUTO_INCREMENT<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">LOCAL_TYPE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">MINIMUM_SCALE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">MAXIMUM_SCALE<\/span><\/li>   <\/ul>  <\/p>  <p class=\"para\">   The result set is ordered by DATA_TYPE and TYPE_NAME.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_longreadlen":{"id":"function.odbc-longreadlen","purpose":"Handling of LONG columns","prototype":"bool odbc_longreadlen(resource $result_id, int $length)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_next_result":{"id":"function.odbc-next-result","purpose":"Checks if multiple results are available","prototype":"bool odbc_next_result(resource $result_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more result sets, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"odbc_num_fields":{"id":"function.odbc-num-fields","purpose":"Number of columns in a result","prototype":"int odbc_num_fields(resource $result_id)","return":"<p class=\"para\">   Returns the number of fields, or -1 on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_num_rows":{"id":"function.odbc-num-rows","purpose":"Number of rows in a result","prototype":"int odbc_num_rows(resource $result_id)","return":"<p class=\"para\">   Returns the number of rows in an ODBC result.   This function will return -1 on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_pconnect":{"id":"function.odbc-pconnect","purpose":"Open a persistent database connection","prototype":"resource odbc_pconnect(string $dsn, string $user, string $password [, int $cursor_type = ''])","return":"<p class=\"para\">   Returns an ODBC connection id or 0 (<strong><code>FALSE<\/code><\/strong>) on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_prepare":{"id":"function.odbc-prepare","purpose":"Prepares a statement for execution","prototype":"resource odbc_prepare(resource $connection_id, string $query_string)","return":"<p class=\"para\">   Returns an ODBC result identifier if the SQL command was prepared   successfully. Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_primarykeys":{"id":"function.odbc-primarykeys","purpose":"Gets the primary keys for a table","prototype":"resource odbc_primarykeys(resource $connection_id, string $qualifier, string $owner, string $table)","return":"<p class=\"para\">   Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">KEY_SEQ<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PK_NAME<\/span><\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_procedurecolumns":{"id":"function.odbc-procedurecolumns","purpose":"Retrieve information about parameters to procedures","prototype":"resource odbc_procedurecolumns(resource $connection_id, string $qualifier, string $owner, string $proc, string $column)","return":"<p class=\"para\">   Returns the list of input and output parameters, as well as the   columns that make up the result set for the specified procedures.    Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLUMN_TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">DATA_TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TYPE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PRECISION<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">LENGTH<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">SCALE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">RADIX<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NULLABLE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">REMARKS<\/span><\/li>   <\/ul>  <\/p>  <p class=\"simpara\">   The result set is ordered by PROCEDURE_QUALIFIER, PROCEDURE_OWNER,   PROCEDURE_NAME and COLUMN_TYPE.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_procedures":{"id":"function.odbc-procedures","purpose":"Get the list of procedures stored in a specific data source","prototype":"resource odbc_procedures(resource $connection_id, string $qualifier, string $owner, string $name)","return":"<p class=\"para\">   Returns an ODBC   result identifier containing the information or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NUM_INPUT_PARAMS<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NUM_OUTPUT_PARAMS<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NUM_RESULT_SETS<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">REMARKS<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PROCEDURE_TYPE<\/span><\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_result_all":{"id":"function.odbc-result-all","purpose":"Print result as HTML table","prototype":"int odbc_result_all(resource $result_id [, string $format = ''])","return":"<p class=\"para\">   Returns the number of rows in the result or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_result":{"id":"function.odbc-result","purpose":"Get result data","prototype":"mixed odbc_result(resource $result_id, mixed $field)","return":"<p class=\"para\">   Returns the string contents of the field, <strong><code>FALSE<\/code><\/strong> on error, <strong><code>NULL<\/code><\/strong> for   NULL data, or <strong><code>TRUE<\/code><\/strong> for binary data.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_rollback":{"id":"function.odbc-rollback","purpose":"Rollback a transaction","prototype":"bool odbc_rollback(resource $connection_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_setoption":{"id":"function.odbc-setoption","purpose":"Adjust ODBC settings","prototype":"bool odbc_setoption(resource $id, int $function, int $option, int $param)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_specialcolumns":{"id":"function.odbc-specialcolumns","purpose":"Retrieves special columns","prototype":"resource odbc_specialcolumns(resource $connection_id, int $type, string $qualifier, string $table, int $scope, int $nullable)","return":"<p class=\"para\">   Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">SCOPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">DATA_TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TYPE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PRECISION<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">LENGTH<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">SCALE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PSEUDO_COLUMN<\/span><\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_statistics":{"id":"function.odbc-statistics","purpose":"Retrieve statistics about a table","prototype":"resource odbc_statistics(resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy)","return":"<p class=\"para\">   Returns an ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">NON_UNIQUE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">INDEX_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">INDEX_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">SEQ_IN_INDEX<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLUMN_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">COLLATION<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">CARDINALITY<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PAGES<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">FILTER_CONDITION<\/span><\/li>   <\/ul>  <\/p>  <p class=\"simpara\">   The result set is ordered by NON_UNIQUE, TYPE, INDEX_QUALIFIER,   INDEX_NAME and SEQ_IN_INDEX.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_tableprivileges":{"id":"function.odbc-tableprivileges","purpose":"Lists tables and the privileges associated with each table","prototype":"resource odbc_tableprivileges(resource $connection_id, string $qualifier, string $owner, string $name)","return":"<p class=\"para\">   An ODBC result identifier or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">GRANTOR<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">GRANTEE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">PRIVILEGE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">IS_GRANTABLE<\/span><\/li>   <\/ul>  <\/p>  <p class=\"simpara\">   The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and   TABLE_NAME.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"odbc_tables":{"id":"function.odbc-tables","purpose":"Get the list of table names stored in a specific data source","prototype":"resource odbc_tables(resource $connection_id [, string $qualifier = '' [, string $owner = '' [, string $name = '' [, string $types = '']]]])","return":"<p class=\"para\">   Returns an ODBC result identifier containing the information    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The result set has the following columns:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">TABLE_QUALIFIER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_OWNER<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_NAME<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">TABLE_TYPE<\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">REMARKS<\/span><\/li>   <\/ul>  <\/p>  <p class=\"simpara\">   The result set is ordered by TABLE_TYPE, TABLE_QUALIFIER,   TABLE_OWNER and TABLE_NAME.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"PDO::beginTransaction":{"id":"pdo.begintransaction","purpose":"Initiates a transaction","prototype":"bool PDO::beginTransaction()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::commit":{"id":"pdo.commit","purpose":"Commits a transaction","prototype":"bool PDO::commit()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::__construct":{"id":"pdo.construct","purpose":"Creates a PDO instance representing a connection to a database","prototype":" PDO::__construct(string $dsn [, string $username = '' [, string $passwd = '' [, array $options = '']]])","return":"<p class=\"para\">   Returns a PDO object on success.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::errorCode":{"id":"pdo.errorcode","purpose":"Fetch the SQLSTATE associated with the last operation on the database handle","prototype":"string PDO::errorCode()","return":"<p class=\"para\">   Returns an SQLSTATE, a five characters alphanumeric identifier defined in   the ANSI SQL-92 standard.  Briefly, an SQLSTATE consists of a   two characters class value followed by a three characters subclass value. A   class value of 01 indicates a warning and is accompanied by a return code   of SQL_SUCCESS_WITH_INFO. Class values other than &#039;01&#039;, except for the   class &#039;IM&#039;, indicate an error.  The class &#039;IM&#039; is specific to warnings   and errors that derive from the implementation of PDO (or perhaps ODBC,   if you&#039;re using the ODBC driver) itself.  The subclass value &#039;000&#039; in any   class indicates that there is no subclass for that SQLSTATE.  <\/p>  <p class=\"para\">   <span class=\"function\">PDO::errorCode<\/span> only retrieves error codes for operations   performed directly on the database handle. If you create a PDOStatement   object through <span class=\"function\">PDO::prepare<\/span> or   <span class=\"function\">PDO::query<\/span> and invoke an error on the statement   handle, <span class=\"function\">PDO::errorCode<\/span> will not reflect that error.   You must call <span class=\"function\">PDOStatement::errorCode<\/span> to return the error   code for an operation performed on a particular statement handle.  <\/p>  <p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if no operation has been run on the database handle.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::errorInfo":{"id":"pdo.errorinfo","purpose":"Fetch extended error information associated with the last operation on the database handle","prototype":"array PDO::errorInfo()","return":"<p class=\"para\">   <span class=\"function\">PDO::errorInfo<\/span> returns an array of error information   about the last operation performed by this database handle. The array   consists of the following fields:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Element<\/th>       <th>Information<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>SQLSTATE error code (a five characters alphanumeric identifier defined               in the ANSI SQL standard).<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>Driver-specific error code.<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>Driver-specific error message.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the SQLSTATE error code is not set or there is no driver-specific    error, the elements following element 0 will be set to <strong><code>NULL<\/code><\/strong>.    <\/p>  <\/p><\/blockquote>  <p class=\"para\">   <span class=\"function\">PDO::errorInfo<\/span> only retrieves error information for   operations performed directly on the database handle. If you create a   PDOStatement object through <span class=\"function\">PDO::prepare<\/span> or   <span class=\"function\">PDO::query<\/span> and invoke an error on the statement   handle, <span class=\"function\">PDO::errorInfo<\/span> will not reflect the error   from the statement handle. You must call   <span class=\"function\">PDOStatement::errorInfo<\/span> to return the error   information for an operation performed on a particular statement handle.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::exec":{"id":"pdo.exec","purpose":"Execute an SQL statement and return the number of affected rows","prototype":"int PDO::exec(string $statement)","return":"<p class=\"para\">   <span class=\"function\">PDO::exec<\/span> returns the number of rows that were modified   or deleted by the SQL statement you issued. If no rows were affected,    <span class=\"function\">PDO::exec<\/span> returns <em>0<\/em>.   <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>  <p class=\"para\">   The following example incorrectly relies on the return value of   <span class=\"function\">PDO::exec<\/span>, wherein a statement that affected 0 rows   results in a call to <span class=\"function\">die<\/span>:   <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$db<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">exec<\/span><span style=\"color: #007700\">()&nbsp;or&nbsp;die(<\/span><span style=\"color: #0000BB\">print_r<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$db<\/span><span style=\"color: #007700\">-&gt;<\/span><span style=\"color: #0000BB\">errorInfo<\/span><span style=\"color: #007700\">(),&nbsp;<\/span><span style=\"color: #0000BB\">true<\/span><span style=\"color: #007700\">));&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;incorrect<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>   <\/div>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::getAttribute":{"id":"pdo.getattribute","purpose":"Retrieve a database connection attribute","prototype":"mixed PDO::getAttribute(int $attribute)","return":"<p class=\"para\">   A successful call returns the value of the requested PDO attribute.   An unsuccessful call returns <em>null<\/em>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDO::getAvailableDrivers":{"id":"pdo.getavailabledrivers","purpose":"Return an array of available PDO drivers","prototype":"array PDO::getAvailableDrivers()","return":"<p class=\"para\">   <span class=\"function\">PDO::getAvailableDrivers<\/span> returns an array of PDO driver names. If   no drivers are available, it returns an empty array.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 1.0.3"},"pdo_drivers":{"id":"pdo.getavailabledrivers","purpose":"Return an array of available PDO drivers","prototype":"array pdo_drivers()","return":"<p class=\"para\">   <span class=\"function\">PDO::getAvailableDrivers<\/span> returns an array of PDO driver names. If   no drivers are available, it returns an empty array.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 1.0.3"},"PDO::inTransaction":{"id":"pdo.intransaction","purpose":"Checks if inside a transaction","prototype":"bool PDO::inTransaction()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a transaction is currently active, and <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.3, Bundled pdo_pgsql, PHP 7"},"PDO::lastInsertId":{"id":"pdo.lastinsertid","purpose":"Returns the ID of the last inserted row or sequence value","prototype":"string PDO::lastInsertId([string $name = ''])","return":"<p class=\"para\">   If a sequence name was not specified for the <code class=\"parameter\">name<\/code>   parameter, <span class=\"function\">PDO::lastInsertId<\/span> returns a   string representing the row ID of the last row that was inserted into   the database.  <\/p>  <p class=\"para\">   If a sequence name was specified for the <code class=\"parameter\">name<\/code>   parameter, <span class=\"function\">PDO::lastInsertId<\/span> returns a   string representing the last value retrieved from the specified sequence   object.  <\/p>  <p class=\"para\">   If the PDO driver does not support this capability,   <span class=\"function\">PDO::lastInsertId<\/span> triggers an   <em>IM001<\/em> SQLSTATE.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::prepare":{"id":"pdo.prepare","purpose":"Prepares a statement for execution and returns a statement object","prototype":"PDOStatement PDO::prepare(string $statement [, array $driver_options = array()])","return":"<p class=\"para\">   If the database server successfully prepares the statement,   <span class=\"function\">PDO::prepare<\/span> returns a   <span class=\"classname\">PDOStatement<\/span> object.   If the database server cannot successfully prepare the statement,   <span class=\"function\">PDO::prepare<\/span> returns <strong><code>FALSE<\/code><\/strong> or emits   <span class=\"classname\">PDOException<\/span> (depending on <a href=\"pdo.error-handling.html\" class=\"link\">error handling<\/a>).  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Emulated prepared statements does not communicate with the database server    so <span class=\"function\">PDO::prepare<\/span> does not check the statement.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::query":{"id":"pdo.query","purpose":"Executes an SQL statement, returning a result set as a PDOStatement object","prototype":"PDOStatement PDO::query(string $statement, int $PDO::FETCH_COLUMN, int $colno, int $PDO::FETCH_CLASS, string $classname, array $ctorargs, int $PDO::FETCH_INTO, object $object)","return":"<p class=\"para\">    <span class=\"function\">PDO::query<\/span> returns a PDOStatement object, or <strong><code>FALSE<\/code><\/strong>    on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDO::quote":{"id":"pdo.quote","purpose":"Quotes a string for use in a query","prototype":"string PDO::quote(string $string [, int $parameter_type = PDO::PARAM_STR])","return":"<p class=\"para\">   Returns a quoted string that is theoretically safe to pass into an   SQL statement.  Returns <strong><code>FALSE<\/code><\/strong> if the driver does not support quoting in   this way.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.1"},"PDO::rollBack":{"id":"pdo.rollback","purpose":"Rolls back a transaction","prototype":"bool PDO::rollBack()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDO::setAttribute":{"id":"pdo.setattribute","purpose":"Set an attribute","prototype":"bool PDO::setAttribute(int $attribute, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::bindColumn":{"id":"pdostatement.bindcolumn","purpose":"Bind a column to a PHP variable","prototype":"bool PDOStatement::bindColumn(mixed $column, mixed $param [, int $type = '' [, int $maxlen = '' [, mixed $driverdata = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::bindParam":{"id":"pdostatement.bindparam","purpose":"Binds a parameter to the specified variable name","prototype":"bool PDOStatement::bindParam(mixed $parameter, mixed $variable [, int $data_type = PDO::PARAM_STR [, int $length = '' [, mixed $driver_options = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::bindValue":{"id":"pdostatement.bindvalue","purpose":"Binds a value to a parameter","prototype":"bool PDOStatement::bindValue(mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 1.0.0"},"PDOStatement::closeCursor":{"id":"pdostatement.closecursor","purpose":"Closes the cursor, enabling the statement to be executed again","prototype":"bool PDOStatement::closeCursor()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.9.0"},"PDOStatement::columnCount":{"id":"pdostatement.columncount","purpose":"Returns the number of columns in the result set","prototype":"int PDOStatement::columnCount()","return":"<p class=\"para\">   Returns the number of columns in the result set represented by the   PDOStatement object, even if the result set is empty. If there is no result set,   <span class=\"function\">PDOStatement::columnCount<\/span> returns <em>0<\/em>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDOStatement::debugDumpParams":{"id":"pdostatement.debugdumpparams","purpose":"Dump an SQL prepared command","prototype":"string PDOStatement::debugDumpParams()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.9.0"},"PDOStatement::errorCode":{"id":"pdostatement.errorcode","purpose":"Fetch the SQLSTATE associated with the last operation on the statement handle","prototype":"string PDOStatement::errorCode()","return":"<p class=\"para\">   Identical to <span class=\"function\">PDO::errorCode<\/span>, except that    <span class=\"function\">PDOStatement::errorCode<\/span> only retrieves error codes   for operations performed with PDOStatement objects.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::errorInfo":{"id":"pdostatement.errorinfo","purpose":"Fetch extended error information associated with the last operation on the statement handle","prototype":"array PDOStatement::errorInfo()","return":"<p class=\"para\">   <span class=\"function\">PDOStatement::errorInfo<\/span> returns an array of   error information about the last operation performed by this   statement handle. The array consists of the following fields:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Element<\/th>       <th>Information<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>SQLSTATE error code (a five characters alphanumeric identifier defined               in the ANSI SQL standard).<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>Driver specific error code.<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>Driver specific error message.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::execute":{"id":"pdostatement.execute","purpose":"Executes a prepared statement","prototype":"bool PDOStatement::execute([array $input_parameters = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::fetch":{"id":"pdostatement.fetch","purpose":"Fetches the next row from a result set","prototype":"mixed PDOStatement::fetch([int $fetch_style = '' [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = '']]])","return":"<p class=\"para\">   The return value of this function on success depends on the fetch type. In   all cases, <strong><code>FALSE<\/code><\/strong> is returned on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::fetchAll":{"id":"pdostatement.fetchall","purpose":"Returns an array containing all of the result set rows","prototype":"array PDOStatement::fetchAll([int $fetch_style = '' [, mixed $fetch_argument = '' [, array $ctor_args = array()]]])","return":"<p class=\"para\">   <span class=\"function\">PDOStatement::fetchAll<\/span> returns an array containing   all of the remaining rows in the result set. The array represents each   row as either an array of column values or an object with properties   corresponding to each column name. An empty array is returned if there   are zero results to fetch, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Using this method to fetch large result sets will result in a heavy   demand on system and possibly network resources. Rather than retrieving   all of the data and manipulating it in PHP, consider using the database   server to manipulate the result sets. For example, use the WHERE and   ORDER BY clauses in SQL to restrict results before retrieving and   processing them with PHP.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::fetchColumn":{"id":"pdostatement.fetchcolumn","purpose":"Returns a single column from the next row of a result set","prototype":"mixed PDOStatement::fetchColumn([int $column_number = ''])","return":"<p class=\"para\">   <span class=\"function\">PDOStatement::fetchColumn<\/span> returns a single column   from the next row of a result set or <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    There is no way to return another column from the same row if you    use <span class=\"function\">PDOStatement::fetchColumn<\/span> to retrieve data.   <\/p>  <\/div>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.9.0"},"PDOStatement::fetchObject":{"id":"pdostatement.fetchobject","purpose":"Fetches the next row and returns it as an object","prototype":"mixed PDOStatement::fetchObject([string $class_name = \"stdClass\" [, array $ctor_args = '']])","return":"<p class=\"para\">   Returns an instance of the required class with property names that   correspond to the column names  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.4"},"PDOStatement::getAttribute":{"id":"pdostatement.getattribute","purpose":"Retrieve a statement attribute","prototype":"mixed PDOStatement::getAttribute(int $attribute)","return":"<p class=\"para\">   Returns the attribute value.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDOStatement::getColumnMeta":{"id":"pdostatement.getcolumnmeta","purpose":"Returns metadata for a column in a result set","prototype":"array PDOStatement::getColumnMeta(int $column)","return":"<p class=\"para\">   Returns an associative array containing the following values representing   the metadata for a single column:  <\/p>   <table class=\"doctable table\">    <caption><strong>Column metadata<\/strong><\/caption>         <col \/>      <col \/>      <thead>      <tr>       <th>Name<\/th>       <th>Value<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><em>native_type<\/em><\/td>       <td>The PHP native type used to represent the column value.<\/td>      <\/tr>      <tr>       <td><em>driver:decl_type<\/em><\/td>       <td>The SQL type used to represent the column value in the database.       If the column in the result set is the result of a function, this value       is not returned by <span class=\"function\">PDOStatement::getColumnMeta<\/span>.       <\/td>      <\/tr>      <tr>       <td><em>flags<\/em><\/td>       <td>Any flags set for this column.<\/td>      <\/tr>      <tr>       <td><em>name<\/em><\/td>       <td>The name of this column as returned by the database.<\/td>      <\/tr>      <tr>       <td><em>table<\/em><\/td>       <td>The name of this column&#039;s table as returned by the database.<\/td>      <\/tr>      <tr>       <td><em>len<\/em><\/td>       <td>The length of this column. Normally <em>-1<\/em> for       types other than floating point decimals.<\/td>      <\/tr>      <tr>       <td><em>precision<\/em><\/td>       <td>The numeric precision of this column. Normally       <em>0<\/em> for types other than floating point       decimals.<\/td>      <\/tr>      <tr>       <td><em>pdo_type<\/em><\/td>       <td>The type of this column as represented by the       <a href=\"pdo.constants.html\" class=\"link\"><em>PDO::PARAM_*<\/em>       constants<\/a>.<\/td>      <\/tr>     <\/tbody>       <\/table>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the requested column does not exist in the result set,   or if no result set exists.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDOStatement::nextRowset":{"id":"pdostatement.nextrowset","purpose":"Advances to the next rowset in a multi-rowset statement handle","prototype":"bool PDOStatement::nextRowset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDOStatement::rowCount":{"id":"pdostatement.rowcount","purpose":"Returns the number of rows affected by the last SQL statement","prototype":"int PDOStatement::rowCount()","return":"<p class=\"para\">   Returns the number of rows.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.1.0"},"PDOStatement::setAttribute":{"id":"pdostatement.setattribute","purpose":"Set a statement attribute","prototype":"bool PDOStatement::setAttribute(int $attribute, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDOStatement::setFetchMode":{"id":"pdostatement.setfetchmode","purpose":"Set the default fetch mode for this statement","prototype":"bool PDOStatement::setFetchMode(int $mode, int $PDO::FETCH_COLUMN, int $colno, int $PDO::FETCH_CLASS, string $classname, array $ctorargs, int $PDO::FETCH_INTO, object $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo >= 0.2.0"},"PDO::cubrid_schema":{"id":"pdo.cubrid-schema","purpose":"Get the requested schema information","prototype":"array PDO::cubrid_schema(int $schema_type [, string $table_name = '' [, string $col_name = '']])","return":"<p class=\"para\">    Array containing the schema information, when process is successful;   <\/p>  <p class=\"para\">    FALSE, when process is unsuccessful  <\/p>","versions":""},"PDO::pgsqlCopyFromArray":{"id":"pdo.pgsqlcopyfromarray","purpose":"Copy data from PHP array into table","prototype":"bool PDO::pgsqlCopyFromArray(string $table_name, array $rows [, string $delimiter = '\\t' [, string $null_as = \"\\\\\\\\N\" [, string $fields = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"PDO::pgsqlCopyFromFile":{"id":"pdo.pgsqlcopyfromfile","purpose":"Copy data from file into table","prototype":"bool PDO::pgsqlCopyFromFile(string $table_name, string $filename [, string $delimiter = '\\t' [, string $null_as = \"\\\\\\\\N\" [, string $fields = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"PDO::pgsqlCopyToArray":{"id":"pdo.pgsqlcopytoarray","purpose":"Copy data from database table into PHP array","prototype":"array PDO::pgsqlCopyToArray(string $table_name [, string $delimiter = '\\t' [, string $null_as = \"\\\\\\\\N\" [, string $fields = '']]])","return":"<p class=\"para\">   Returns an array of rows, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"PDO::pgsqlCopyToFile":{"id":"pdo.pgsqlcopytofile","purpose":"Copy data from table into file","prototype":"bool PDO::pgsqlCopyToFile(string $table_name, string $filename [, string $delimiter = '\\t' [, string $null_as = \"\\\\\\\\N\" [, string $fields = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"PDO::pgsqlGetNotify":{"id":"pdo.pgsqlgetnotify","purpose":"Get asynchronous notification","prototype":"array PDO::pgsqlGetNotify([int $result_type = '' [, int $ms_timeout = '']])","return":"<p class=\"para\">   If one or more notifications is pending, returns a single row, with fields   <em>message<\/em> and <em>pid<\/em>, otherwise returns   <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"PDO::pgsqlGetPid":{"id":"pdo.pgsqlgetpid","purpose":"Get the server PID","prototype":"int PDO::pgsqlGetPid()","return":"<p class=\"para\">   The server&#039;s PID.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"PDO::pgsqlLOBCreate":{"id":"pdo.pgsqllobcreate","purpose":"Creates a new large object","prototype":"string PDO::pgsqlLOBCreate()","return":"<p class=\"para\">   Returns the OID of the newly created large object on success, or <strong><code>FALSE<\/code><\/strong>   on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL pdo_pgsql >= 1.0.2"},"PDO::pgsqlLOBOpen":{"id":"pdo.pgsqllobopen","purpose":"Opens an existing large object stream","prototype":"resource PDO::pgsqlLOBOpen(string $oid [, string $mode = \"rb\"])","return":"<p class=\"para\">   Returns a stream resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL pdo_pgsql >= 1.0.2"},"PDO::pgsqlLOBUnlink":{"id":"pdo.pgsqllobunlink","purpose":"Deletes the large object","prototype":"bool PDO::pgsqlLOBUnlink(string $oid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL pdo_pgsql >= 1.0.2"},"PDO::sqliteCreateAggregate":{"id":"pdo.sqlitecreateaggregate","purpose":"Registers an aggregating User Defined Function for use in SQL statements","prototype":"bool PDO::sqliteCreateAggregate(string $function_name, callable $step_func, callable $finalize_func [, int $num_args = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo_sqlite >= 1.0.0"},"PDO::sqliteCreateCollation":{"id":"pdo.sqlitecreatecollation","purpose":"Registers a User Defined Function for use as a collating function in SQL statements","prototype":"bool PDO::sqliteCreateCollation(string $name, callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.11, PHP 7"},"PDO::sqliteCreateFunction":{"id":"pdo.sqlitecreatefunction","purpose":"Registers a User Defined Function for use in SQL statements","prototype":"bool PDO::sqliteCreateFunction(string $function_name, callable $callback [, int $num_args = -1 [, int $flags = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7, PECL pdo_sqlite >= 1.0.0"},"cubrid_bind":{"id":"function.cubrid-bind","purpose":"Bind variables to a prepared statement as parameters","prototype":"bool cubrid_bind(resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type = ''])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_close_prepare":{"id":"function.cubrid-close-prepare","purpose":"Close the request handle","prototype":"bool cubrid_close_prepare(resource $req_identifier)","return":"<p class=\"para\">    Return <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_close_request":{"id":"function.cubrid-close-request","purpose":"Close the request handle","prototype":"bool cubrid_close_request(resource $req_identifier)","return":"<p class=\"para\">    Return <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_col_get":{"id":"function.cubrid-col-get","purpose":"Get contents of collection type column using OID","prototype":"array cubrid_col_get(resource $conn_identifier, string $oid, string $attr_name)","return":"<p class=\"para\">    Array (0-based numerical array) containing the elements you requested,    when process is successful;  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> (to distinguish the error from the situation of attribute having    empty collection or NULL, in case of error, a warning message is shown; in    such case you can check the error by using    <span class=\"function\">cubrid_error_code<\/span>), when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_col_size":{"id":"function.cubrid-col-size","purpose":"Get the number of elements in collection type column using OID","prototype":"int cubrid_col_size(resource $conn_identifier, string $oid, string $attr_name)","return":"<p class=\"para\">    Number of elements, when process is successful.   <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_column_names":{"id":"function.cubrid-column-names","purpose":"Get the column names in result","prototype":"array cubrid_column_names(resource $req_identifier)","return":"<p class=\"para\">    Array of string values containing the column names, when process is successful.   <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_column_types":{"id":"function.cubrid-column-types","purpose":"Get column types in result","prototype":"array cubrid_column_types(resource $req_identifier)","return":"<p class=\"para\">    Array of string values containing the column types, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_commit":{"id":"function.cubrid-commit","purpose":"Commit a transaction","prototype":"bool cubrid_commit(resource $conn_identifier)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_connect_with_url":{"id":"function.cubrid-connect-with-url","purpose":"Establish the environment for connecting to CUBRID server","prototype":"resource cubrid_connect_with_url(string $conn_url [, string $userid = '' [, string $passwd = '' [, bool $new_link = '']]])","return":"<p class=\"para\">   Connection identifier, when process is successful.   <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_connect":{"id":"function.cubrid-connect","purpose":"Open a connection to a CUBRID Server","prototype":"resource cubrid_connect(string $host, int $port, string $dbname [, string $userid = '' [, string $passwd = '' [, bool $new_link = '']]])","return":"<p class=\"para\">    Connection identifier, when process is successful.   <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_current_oid":{"id":"function.cubrid-current-oid","purpose":"Get OID of the current cursor location","prototype":"string cubrid_current_oid(resource $req_identifier)","return":"<p class=\"para\">    Oid of current cursor location, when process is successful  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_disconnect":{"id":"function.cubrid-disconnect","purpose":"Close a database connection","prototype":"bool cubrid_disconnect([resource $conn_identifier = ''])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_drop":{"id":"function.cubrid-drop","purpose":"Delete an instance using OID","prototype":"bool cubrid_drop(resource $conn_identifier, string $oid)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_error_code_facility":{"id":"function.cubrid-error-code-facility","purpose":"Get the facility code of error","prototype":"int cubrid_error_code_facility()","return":"<p class=\"para\">    Facility code of the error code that occurred: CUBRID_FACILITY_DBMS, CUBRID_FACILITY_CAS, CUBRID_FACILITY_CCI, CUBRID_FACILITY_CLIENT    <\/p>  <p class=\"para\"\/>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_error_code":{"id":"function.cubrid-error-code","purpose":"Get error code for the most recent function call","prototype":"int cubrid_error_code()","return":"<p class=\"para\">   Error code of the error that occurred, or <em>0<\/em> (zero) if no   error occurred.   <\/p>  <p class=\"para\"\/>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_error_msg":{"id":"function.cubrid-error-msg","purpose":"Get last error message for the most recent function call","prototype":"string cubrid_error_msg()","return":"<p class=\"para\">    Error message that occurred.  <\/p>  <p class=\"para\"\/>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_execute":{"id":"function.cubrid-execute","purpose":"Execute a prepared SQL statement","prototype":"bool cubrid_execute(resource $conn_identifier, string $sql [, int $option = '', resource $request_identifier])","return":"<p class=\"para\">    Request identifier, when process is successful and first param is    conn_identifier; <strong><code>TRUE<\/code><\/strong>, when process is successful and first argument is    request_identifier.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_fetch":{"id":"function.cubrid-fetch","purpose":"Fetch the next row from a result set","prototype":"mixed cubrid_fetch(resource $result [, int $type = CUBRID_BOTH])","return":"<p class=\"para\">Result array or object, when process is successful.<\/p>  <p class=\"para\"><strong><code>FALSE<\/code><\/strong>, when there are no more rows; NULL, when process is unsuccessful.<\/p>  <p class=\"para\">The result can be received either as an array or as an object, and you can decide which data type to use by setting the <code class=\"parameter\">type<\/code> argument. The <code class=\"parameter\">type<\/code> variable can be set to one of the following values:<\/p>    <ul class=\"simplelist\">        <li class=\"member\">CUBRID_NUM : Numerical array (0-based)<\/li>        <li class=\"member\">CUBRID_ASSOC : Associative array<\/li>        <li class=\"member\">CUBRID_BOTH : Numerical &amp; Associative array (default)<\/li>        <li class=\"member\">CUBRID_OBJECT : object that has the attribute name as the column name of query result<\/li>    <\/ul>    <p class=\"para\">When <code class=\"parameter\">type<\/code> argument is omitted, the result will be received using CUBRID_BOTH option as default. When you want to receive query result in object data type, the column name of the result must obey the naming rules for identifiers in PHP.  For example, column name such as &quot;count(*)&quot; cannot be received in object type.<\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_free_result":{"id":"function.cubrid-free-result","purpose":"Free the memory occupied by the result data","prototype":"bool cubrid_free_result(resource $req_identifier)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_get_autocommit":{"id":"function.cubrid-get-autocommit","purpose":"Get auto-commit mode of the connection","prototype":"bool cubrid_get_autocommit(resource $conn_identifier)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when auto-commit is on.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong>, when auto-commit is off.  <\/p>  <p class=\"para\">   <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PECL CUBRID >= 8.4.0"},"cubrid_get_charset":{"id":"function.cubrid-get-charset","purpose":"Return the current CUBRID connection charset","prototype":"string cubrid_get_charset(resource $conn_identifier)","return":"<p class=\"para\">   A string that represents the CUBRID connection charset; on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_get_class_name":{"id":"function.cubrid-get-class-name","purpose":"Get the class name using OID","prototype":"string cubrid_get_class_name(resource $conn_identifier, string $oid)","return":"<p class=\"para\">    Class name when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_get_client_info":{"id":"function.cubrid-get-client-info","purpose":"Return the client library version","prototype":"string cubrid_get_client_info()","return":"<p class=\"para\">   A string that represents the client library version; on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_get_db_parameter":{"id":"function.cubrid-get-db-parameter","purpose":"Returns the CUBRID database parameters","prototype":"array cubrid_get_db_parameter(resource $conn_identifier)","return":"<p class=\"para\">   An associative array with CUBRID database parameters; on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_get_query_timeout":{"id":"function.cubrid-get-query-timeout","purpose":"Get the query timeout value of the request","prototype":"int cubrid_get_query_timeout(resource $req_identifier)","return":"<p class=\"para\">   Success: the query timeout value of the current request. Units of msec.  <\/p>  <p class=\"para\">   Failure: FALSE  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_get_server_info":{"id":"function.cubrid-get-server-info","purpose":"Return the CUBRID server version","prototype":"string cubrid_get_server_info(resource $conn_identifier)","return":"<p class=\"para\">   A string that represents the CUBRID server version; on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_get":{"id":"function.cubrid-get","purpose":"Get a column using OID","prototype":"mixed cubrid_get(resource $conn_identifier, string $oid [, mixed $attr = ''])","return":"<p class=\"para\">   Content of the requested attribute, when process is successful; When   <code class=\"parameter\">attr<\/code> is set with string data type, the result is   returned as a string; when <code class=\"parameter\">attr<\/code> is set with array   data type (0-based numerical array), then the result is returned in   associative array. When <code class=\"parameter\">attr<\/code> is omitted, then all   attributes are received in array form.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> when process is unsuccessful or result is NULL (If error occurs to   distinguish empty string from NULL, then it prints the warning message.   You can check the error by using <span class=\"function\">cubrid_error_code<\/span>)  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_insert_id":{"id":"function.cubrid-insert-id","purpose":"Return the ID generated for the last updated AUTO_INCREMENT column","prototype":"string cubrid_insert_id([resource $conn_identifier = ''])","return":"<p class=\"para\">   A string representing the ID generated for an AUTO_INCREMENT column by the   previous query, on success.  <\/p>  <p class=\"para\">   0, if the previous query does not generate new rows.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_is_instance":{"id":"function.cubrid-is-instance","purpose":"Check whether the instance pointed by OID exists","prototype":"int cubrid_is_instance(resource $conn_identifier, string $oid)","return":"<p class=\"para\">    1, if such instance exists;   <\/p>    <p class=\"para\">    0, if such instance does not exist;   <\/p>    <p class=\"para\">    -1, in case of error  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_lob_close":{"id":"function.cubrid-lob-close","purpose":"Close BLOB\/CLOB data","prototype":"bool cubrid_lob_close(array $lob_identifier_array)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_lob_export":{"id":"function.cubrid-lob-export","purpose":"Export BLOB\/CLOB data to file","prototype":"bool cubrid_lob_export(resource $conn_identifier, resource $lob_identifier, string $path_name)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_lob_get":{"id":"function.cubrid-lob-get","purpose":"Get BLOB\/CLOB data","prototype":"array cubrid_lob_get(resource $conn_identifier, string $sql)","return":"<p class=\"para\">    Return an array of LOB resources, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_lob_send":{"id":"function.cubrid-lob-send","purpose":"Read BLOB\/CLOB data and send straight to browser","prototype":"bool cubrid_lob_send(resource $conn_identifier, resource $lob_identifier)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_lob_size":{"id":"function.cubrid-lob-size","purpose":"Get BLOB\/CLOB data size","prototype":"string cubrid_lob_size(resource $lob_identifier)","return":"<p class=\"para\">    A string representing LOB data size, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_lob2_bind":{"id":"function.cubrid-lob2-bind","purpose":"Bind a lob object or a string as a lob object to a prepared statement as parameters","prototype":"bool cubrid_lob2_bind(resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type = ''])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_close":{"id":"function.cubrid-lob2-close","purpose":"Close LOB object","prototype":"bool cubrid_lob2_close(resource $lob_identifier)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, on success.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_export":{"id":"function.cubrid-lob2-export","purpose":"Export the lob object to a file","prototype":"bool cubrid_lob2_export(resource $lob_identifier, string $file_name)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if the process is successful and <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_import":{"id":"function.cubrid-lob2-import","purpose":"Import BLOB\/CLOB data from a file","prototype":"bool cubrid_lob2_import(resource $lob_identifier, string $file_name)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if the process is successful and <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_new":{"id":"function.cubrid-lob2-new","purpose":"Create a lob object","prototype":"resource cubrid_lob2_new([resource $conn_identifier = '' [, string $type = \"BLOB\"]])","return":"<p class=\"para\">   Lob identifier when it is successful.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong>  on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_read":{"id":"function.cubrid-lob2-read","purpose":"Read from BLOB\/CLOB data","prototype":"string cubrid_lob2_read(resource $lob_identifier, int $len)","return":"<p class=\"para\">    Returns the contents as a string.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> when there is no more data.  <\/p>  <p class=\"para\">    NULL on failure.  <\/p>  <p class=\"para\">  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_seek64":{"id":"function.cubrid-lob2-seek64","purpose":"Move the cursor of a lob object","prototype":"bool cubrid_lob2_seek64(resource $lob_identifier, string $offset [, int $origin = CUBRID_CURSOR_CURRENT])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if the process is successful and <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_seek":{"id":"function.cubrid-lob2-seek","purpose":"Move the cursor of a lob object","prototype":"bool cubrid_lob2_seek(resource $lob_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if the process is successful and <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_size64":{"id":"function.cubrid-lob2-size64","purpose":"Get a lob object's size","prototype":"string cubrid_lob2_size64(resource $lob_identifier)","return":"<p class=\"para\">   It will return the size of the LOB object as a string when it processes successfully.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_size":{"id":"function.cubrid-lob2-size","purpose":"Get a lob object's size","prototype":"int cubrid_lob2_size(resource $lob_identifier)","return":"<p class=\"para\">   It will return the size of the LOB object when it processes successfully.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_tell64":{"id":"function.cubrid-lob2-tell64","purpose":"Tell the cursor position of the LOB object","prototype":"string cubrid_lob2_tell64(resource $lob_identifier)","return":"<p class=\"para\">    It will return the cursor position on the LOB object as a string when it processes successfully.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_tell":{"id":"function.cubrid-lob2-tell","purpose":"Tell the cursor position of the LOB object","prototype":"int cubrid_lob2_tell(resource $lob_identifier)","return":"<p class=\"para\">    It will return the cursor position on the LOB object when it processes successfully.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lob2_write":{"id":"function.cubrid-lob2-write","purpose":"Write to a lob object","prototype":"bool cubrid_lob2_write(resource $lob_identifier, string $buf)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if the process is successful and <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_lock_read":{"id":"function.cubrid-lock-read","purpose":"Set a read lock on the given OID","prototype":"bool cubrid_lock_read(resource $conn_identifier, string $oid)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_lock_write":{"id":"function.cubrid-lock-write","purpose":"Set a write lock on the given OID","prototype":"bool cubrid_lock_write(resource $conn_identifier, string $oid)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_move_cursor":{"id":"function.cubrid-move-cursor","purpose":"Move the cursor in the result","prototype":"bool cubrid_move_cursor(resource $req_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong>, when process is unsucceful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_next_result":{"id":"function.cubrid-next-result","purpose":"Get result of next query when executing multiple SQL statements","prototype":"bool cubrid_next_result(resource $result)","return":"<p class=\"para\"><strong><code>TRUE<\/code><\/strong>, when process is successful.<\/p>  <p class=\"para\"><strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.<\/p>","versions":"PECL CUBRID >= 8.4.0"},"cubrid_num_cols":{"id":"function.cubrid-num-cols","purpose":"Return the number of columns in the result set","prototype":"int cubrid_num_cols(resource $result)","return":"<p class=\"para\">    Number of columns, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, if SQL statement is not SELECT.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_num_rows":{"id":"function.cubrid-num-rows","purpose":"Get the number of rows in the result set","prototype":"int cubrid_num_rows(resource $result)","return":"<p class=\"para\">    Number of rows, when process is successful.  <\/p>  <p class=\"para\">    0 when the query was done in async mode.   <\/p>  <p class=\"para\">    -1, if SQL statement is not SELECT.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_pconnect_with_url":{"id":"function.cubrid-pconnect-with-url","purpose":"Open a persistent connection to CUBRID server","prototype":"resource cubrid_pconnect_with_url(string $conn_url [, string $userid = '' [, string $passwd = '']])","return":"<p class=\"para\">   Connection identifier, when process is successful.   <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_pconnect":{"id":"function.cubrid-pconnect","purpose":"Open a persistent connection to a CUBRID server","prototype":"resource cubrid_pconnect(string $host, int $port, string $dbname [, string $userid = '' [, string $passwd = '']])","return":"<p class=\"para\">    Connection identifier, when process is successful.   <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_prepare":{"id":"function.cubrid-prepare","purpose":"Prepare a SQL statement for execution","prototype":"resource cubrid_prepare(resource $conn_identifier, string $prepare_stmt [, int $option = ''])","return":"<p class=\"para\">    Request identifier, if process is successful;   <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, if process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_put":{"id":"function.cubrid-put","purpose":"Update a column using OID","prototype":"bool cubrid_put(resource $conn_identifier, string $oid [, string $attr = '', mixed $value])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_rollback":{"id":"function.cubrid-rollback","purpose":"Roll back a transaction","prototype":"bool cubrid_rollback(resource $conn_identifier)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_schema":{"id":"function.cubrid-schema","purpose":"Get the requested schema information","prototype":"array cubrid_schema(resource $conn_identifier, int $schema_type [, string $class_name = '' [, string $attr_name = '']])","return":"<p class=\"para\">    Array containing the schema information, when process is successful;   <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_seq_drop":{"id":"function.cubrid-seq-drop","purpose":"Delete an element from sequence type column using OID","prototype":"bool cubrid_seq_drop(resource $conn_identifier, string $oid, string $attr_name, int $index)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_seq_insert":{"id":"function.cubrid-seq-insert","purpose":"Insert an element to a sequence type column using OID","prototype":"bool cubrid_seq_insert(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_seq_put":{"id":"function.cubrid-seq-put","purpose":"Update the element value of sequence type column using OID","prototype":"bool cubrid_seq_put(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_set_add":{"id":"function.cubrid-set-add","purpose":"Insert a single element to set type column using OID","prototype":"bool cubrid_set_add(resource $conn_identifier, string $oid, string $attr_name, string $set_element)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_set_autocommit":{"id":"function.cubrid-set-autocommit","purpose":"Set autocommit mode of the connection","prototype":"bool cubrid_set_autocommit(resource $conn_identifier, bool $mode)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.4.0"},"cubrid_set_db_parameter":{"id":"function.cubrid-set-db-parameter","purpose":"Sets the CUBRID database parameters","prototype":"bool cubrid_set_db_parameter(resource $conn_identifier, int $param_type, int $param_value)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> on success.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.4.0"},"cubrid_set_drop":{"id":"function.cubrid-set-drop","purpose":"Delete an element from set type column using OID","prototype":"bool cubrid_set_drop(resource $conn_identifier, string $oid, string $attr_name, string $set_element)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_set_query_timeout":{"id":"function.cubrid-set-query-timeout","purpose":"Set the timeout time of query execution","prototype":"bool cubrid_set_query_timeout(resource $req_identifier, int $timeout)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.4.1"},"cubrid_version":{"id":"function.cubrid-version","purpose":"Get the CUBRID PHP module's version","prototype":"string cubrid_version()","return":"<p class=\"para\">    Version information (eg. &quot;8.3.1.0001&quot;).  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_affected_rows":{"id":"function.cubrid-affected-rows","purpose":"Return the number of rows affected by the last SQL statement","prototype":"int cubrid_affected_rows([resource $conn_identifier = '' [, resource $req_identifier = '']])","return":"<p class=\"para\">    Number of rows affected by the SQL statement, when process is successful.  <\/p>   <p class=\"para\">    -1, when SQL statement is not INSERT, DELETE or UPDATE.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong>, when the request identifier is not specified, and there is no last   request.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_client_encoding":{"id":"function.cubrid-client-encoding","purpose":"Return the current CUBRID connection charset","prototype":"string cubrid_client_encoding([resource $conn_identifier = ''])","return":"<p class=\"para\">   A string that represents the CUBRID connection charset; on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_close":{"id":"function.cubrid-close","purpose":"Close CUBRID connection","prototype":"bool cubrid_close([resource $conn_identifier = ''])","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_data_seek":{"id":"function.cubrid-data-seek","purpose":"Move the internal row pointer of the CUBRID result","prototype":"bool cubrid_data_seek(resource $result, int $row_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_db_name":{"id":"function.cubrid-db-name","purpose":"Get db name from results of cubrid_list_dbs","prototype":"string cubrid_db_name(array $result, int $index)","return":"<p class=\"para\">   Returns the database name on success, and <strong><code>FALSE<\/code><\/strong> on failure. If <strong><code>FALSE<\/code><\/strong>   is returned, use <span class=\"function\">cubrid_error<\/span> to determine the nature   of the error.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_errno":{"id":"function.cubrid-errno","purpose":"Return the numerical value of the error message from previous CUBRID operation","prototype":"int cubrid_errno([resource $conn_identifier = ''])","return":"<p class=\"para\">   Returns the error number from the last CUBRID function, or <em>0<\/em> (zero) if no error occurred.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_error":{"id":"function.cubrid-error","purpose":"Get the error message","prototype":"string cubrid_error([resource $connection = ''])","return":"<p class=\"para\">    Error message that occurred.  <\/p>  <p class=\"para\"\/>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_fetch_array":{"id":"function.cubrid-fetch-array","purpose":"Fetch a result row as an associative array, a numeric array, or both","prototype":"array cubrid_fetch_array(resource $result [, int $type = CUBRID_BOTH])","return":"<p class=\"para\">Returns an array of strings that corresponds to the fetched row, when process is successful.<\/p>  <p class=\"para\"><strong><code>FALSE<\/code><\/strong>, when there are no more rows; NULL, when process is unsuccessful.<\/p>  <p class=\"para\">The type of returned array depends on how type is defined. By using CUBRID_BOTH (default), you&#039;ll get an array with both associative and number indices, and you can decide which data type to use by setting the <code class=\"parameter\">type<\/code> argument. The <code class=\"parameter\">type<\/code> variable can be set to one of the following values:<\/p>    <ul class=\"simplelist\">        <li class=\"member\">CUBRID_NUM : Numerical array (0-based)<\/li>        <li class=\"member\">CUBRID_ASSOC : Associative array<\/li>        <li class=\"member\">CUBRID_BOTH : Numerical &amp; Associative array (default)<\/li>    <\/ul>","versions":"PECL CUBRID >=8.3.0"},"cubrid_fetch_assoc":{"id":"function.cubrid-fetch-assoc","purpose":"Return the associative array that corresponds to the fetched row","prototype":"array cubrid_fetch_assoc(resource $result [, int $type = ''])","return":"<p class=\"para\">    Associative array, when process is successful.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when there are no more rows; NULL, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_fetch_field":{"id":"function.cubrid-fetch-field","purpose":"Get column information from a result and return as an object","prototype":"object cubrid_fetch_field(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">    Object with certain properties of the specific column, when process is successful.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_fetch_lengths":{"id":"function.cubrid-fetch-lengths","purpose":"Return an array with the lengths of the values of each field from the current row","prototype":"array cubrid_fetch_lengths(resource $result)","return":"<p class=\"para\">    An numeric array, when process is successful.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_fetch_object":{"id":"function.cubrid-fetch-object","purpose":"Fetch the next row and return it as an object","prototype":"object cubrid_fetch_object(resource $result [, string $class_name = '' [, array $params = '' [, int $type = '']]])","return":"<p class=\"para\">    An object, when process is successful.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when there are no more rows; NULL, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_fetch_row":{"id":"function.cubrid-fetch-row","purpose":"Return a numerical array with the values of the current row","prototype":"array cubrid_fetch_row(resource $result [, int $type = ''])","return":"<p class=\"para\">    A numerical array, when process is successful.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when there are no more rows; NULL, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_field_flags":{"id":"function.cubrid-field-flags","purpose":"Return a string with the flags of the given field offset","prototype":"string cubrid_field_flags(resource $result, int $field_offset)","return":"<p class=\"para\">    A string with flags, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> when invalid field_offset value.  <\/p>  <p class=\"para\">    -1 if SQL sentence is not SELECT.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_field_len":{"id":"function.cubrid-field-len","purpose":"Get the maximum length of the specified field","prototype":"int cubrid_field_len(resource $result, int $field_offset)","return":"<p class=\"para\">    Maximum length, when process is successful.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_field_name":{"id":"function.cubrid-field-name","purpose":"Return the name of the specified field index","prototype":"string cubrid_field_name(resource $result, int $field_offset)","return":"<p class=\"para\">    Name of specified field index, on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_field_seek":{"id":"function.cubrid-field-seek","purpose":"Move the result set cursor to the specified field offset","prototype":"bool cubrid_field_seek(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_field_table":{"id":"function.cubrid-field-table","purpose":"Return the name of the table of the specified field","prototype":"string cubrid_field_table(resource $result, int $field_offset)","return":"<p class=\"para\">   Name of the table of the specified field, on success.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> when invalid field_offset value.  <\/p>  <p class=\"para\">    -1 if SQL sentence is not SELECT.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_field_type":{"id":"function.cubrid-field-type","purpose":"Return the type of the column corresponding to the given field offset","prototype":"string cubrid_field_type(resource $result, int $field_offset)","return":"<p class=\"para\">   Type of the column, on success.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> when invalid field_offset value.  <\/p>  <p class=\"para\">    -1 if SQL sentence is not SELECT.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_list_dbs":{"id":"function.cubrid-list-dbs","purpose":"Return an array with the list of all existing CUBRID databases","prototype":"array cubrid_list_dbs([resource $conn_identifier = ''])","return":"<p class=\"para\">   An numeric array with all existing Cubrid databases; on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_num_fields":{"id":"function.cubrid-num-fields","purpose":"Return the number of columns in the result set","prototype":"int cubrid_num_fields(resource $result)","return":"<p class=\"para\">   Number of columns, on success.  <\/p>   <p class=\"para\">    -1 if SQL sentence is not SELECT.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_ping":{"id":"function.cubrid-ping","purpose":"Ping a server connection or reconnect if there is no connection","prototype":"bool cubrid_ping([resource $conn_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the connection to the server CUBRID server is working, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_query":{"id":"function.cubrid-query","purpose":"Send a CUBRID query","prototype":"resource cubrid_query(string $query [, resource $conn_identifier = ''])","return":"<p class=\"para\">   For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,   <span class=\"function\">cubrid_query<\/span> returns a <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   For other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc,   <span class=\"function\">cubrid_query<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   The returned result resource should be passed to <span class=\"function\">cubrid_fetch_array<\/span>, and other   functions for dealing with result tables, to access the returned data.  <\/p>  <p class=\"para\">   Use <span class=\"function\">cubrid_num_rows<\/span> to find out how many rows were returned for a SELECT statement or   <span class=\"function\">cubrid_affected_rows<\/span> to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement.  <\/p>  <p class=\"para\">   <span class=\"function\">cubrid_query<\/span> will also fail and return <strong><code>FALSE<\/code><\/strong>   if the user does not have permission to access the table(s) referenced by the query.  <\/p>","versions":"PECL CUBRID >= 8.3.1"},"cubrid_real_escape_string":{"id":"function.cubrid-real-escape-string","purpose":"Escape special characters in a string for use in an SQL statement","prototype":"string cubrid_real_escape_string(string $unescaped_string [, resource $conn_identifier = ''])","return":"<p class=\"para\">   Escaped string version of the given string, on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_result":{"id":"function.cubrid-result","purpose":"Return the value of a specific field in a specific row","prototype":"string cubrid_result(resource $result, int $row [, mixed $field = ''])","return":"<p class=\"para\">   Value of a specific field, on success (NULL if value if null).  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_unbuffered_query":{"id":"function.cubrid-unbuffered-query","purpose":"Perform a query without fetching the results into memory","prototype":"resource cubrid_unbuffered_query(string $query [, resource $conn_identifier = ''])","return":"<p class=\"para\">   For SELECT, SHOW, DESCRIBE or EXPLAIN statements returns a request identifier resource on success.  <\/p>  <p class=\"para\">    For other type of SQL statements, UPDATE, DELETE, DROP, etc, returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>   <p class=\"para\">    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_load_from_glo":{"id":"function.cubrid-load-from-glo","purpose":"Read data from a GLO instance and save it in a file","prototype":"int cubrid_load_from_glo(resource $conn_identifier, string $oid, string $file_name)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_new_glo":{"id":"function.cubrid-new-glo","purpose":"Create a glo instance","prototype":"string cubrid_new_glo(resource $conn_identifier, string $class_name, string $file_name)","return":"<p class=\"para\">    Oid of the instance created, when process is successful.  <\/p>    <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_save_to_glo":{"id":"function.cubrid-save-to-glo","purpose":"Save requested file in a GLO instance","prototype":"int cubrid_save_to_glo(resource $conn_identifier, string $oid, string $file_name)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"cubrid_send_glo":{"id":"function.cubrid-send-glo","purpose":"Read data from glo and send it to std output","prototype":"int cubrid_send_glo(resource $conn_identifier, string $oid)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong>, when process is successful.  <\/p>  <p class=\"para\">    <strong><code>FALSE<\/code><\/strong>, when process is unsuccessful.  <\/p>","versions":"PECL CUBRID >= 8.3.0"},"dbplus_add":{"id":"function.dbplus-add","purpose":"Add a tuple to a relation","prototype":"int dbplus_add(resource $relation, array $tuple)","return":"<p class=\"para\">   The function will return <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success   or a db++ error code on failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_aql":{"id":"function.dbplus-aql","purpose":"Perform AQL query","prototype":"resource dbplus_aql(string $query [, string $server = '' [, string $dbpath = '']])","return":"<p class=\"para\">   Returns a relation handle on success. The result data may be fetched from   this relation by calling <span class=\"function\">dbplus_next<\/span> and   <span class=\"function\">dbplus_curr<\/span>. Other relation access functions will   not work on a result relation.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_chdir":{"id":"function.dbplus-chdir","purpose":"Get\/Set database virtual current directory","prototype":"string dbplus_chdir([string $newdir = ''])","return":"<p class=\"para\">   Returns the absolute path of the current directory.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_close":{"id":"function.dbplus-close","purpose":"Close a relation","prototype":"mixed dbplus_close(resource $relation)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>DBPLUS_ERR_UNKNOWN<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_curr":{"id":"function.dbplus-curr","purpose":"Get current tuple from relation","prototype":"int dbplus_curr(resource $relation, array $tuple)","return":"<p class=\"para\">   The function will return zero (aka. <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong>) on success   or a db++ error code on failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_errcode":{"id":"function.dbplus-errcode","purpose":"Get error string for given errorcode or last error","prototype":"string dbplus_errcode([int $errno = ''])","return":"<p class=\"para\">   Returns the error message.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_errno":{"id":"function.dbplus-errno","purpose":"Get error code for last operation","prototype":"int dbplus_errno()","return":"<p class=\"para\">   Returns the error code, as an integer.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_find":{"id":"function.dbplus-find","purpose":"Set a constraint on a relation","prototype":"int dbplus_find(resource $relation, array $constraints, mixed $tuple)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_first":{"id":"function.dbplus-first","purpose":"Get first tuple from relation","prototype":"int dbplus_first(resource $relation, array $tuple)","return":"<p class=\"para\">   Returns <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success or a db++ error   code on failure.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_flush":{"id":"function.dbplus-flush","purpose":"Flush all changes made on a relation","prototype":"int dbplus_flush(resource $relation)","return":"<p class=\"para\">   Returns <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success or a db++ error   code on failure.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_freealllocks":{"id":"function.dbplus-freealllocks","purpose":"Free all locks held by this client","prototype":"int dbplus_freealllocks()","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_freelock":{"id":"function.dbplus-freelock","purpose":"Release write lock on tuple","prototype":"int dbplus_freelock(resource $relation, string $tuple)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_freerlocks":{"id":"function.dbplus-freerlocks","purpose":"Free all tuple locks on given relation","prototype":"int dbplus_freerlocks(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_getlock":{"id":"function.dbplus-getlock","purpose":"Get a write lock on a tuple","prototype":"int dbplus_getlock(resource $relation, string $tuple)","return":"<p class=\"para\">   Returns zero on success or a non-zero error code, especially    <strong><code>DBPLUS_ERR_WLOCKED<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_getunique":{"id":"function.dbplus-getunique","purpose":"Get an id number unique to a relation","prototype":"int dbplus_getunique(resource $relation, int $uniqueid)","return":"<p class=\"para\">   Returns <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success or a db++ error   code on failure.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_info":{"id":"function.dbplus-info","purpose":"Get information about a relation","prototype":"int dbplus_info(resource $relation, string $key, array $result)","return":"","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_last":{"id":"function.dbplus-last","purpose":"Get last tuple from relation","prototype":"int dbplus_last(resource $relation, array $tuple)","return":"<p class=\"para\">   Returns <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success or a db++ error   code on failure.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_lockrel":{"id":"function.dbplus-lockrel","purpose":"Request write lock on relation","prototype":"int dbplus_lockrel(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_next":{"id":"function.dbplus-next","purpose":"Get next tuple from relation","prototype":"int dbplus_next(resource $relation, array $tuple)","return":"<p class=\"para\">   Returns <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success or a db++ error   code on failure.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_open":{"id":"function.dbplus-open","purpose":"Open relation file","prototype":"resource dbplus_open(string $name)","return":"<p class=\"para\">   On success a relation file resource (cursor) is returned which must   be used in any subsequent commands referencing the relation.   Failure leads to a zero return value, the actual error code may   be asked for by calling <span class=\"function\">dbplus_errno<\/span>.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_prev":{"id":"function.dbplus-prev","purpose":"Get previous tuple from relation","prototype":"int dbplus_prev(resource $relation, array $tuple)","return":"<p class=\"para\">   Returns <strong><code>DBPLUS_ERR_NOERR<\/code><\/strong> on success or a db++ error   code on failure.   <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rchperm":{"id":"function.dbplus-rchperm","purpose":"Change relation permissions","prototype":"int dbplus_rchperm(resource $relation, int $mask, string $user, string $group)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rcreate":{"id":"function.dbplus-rcreate","purpose":"Creates a new DB++ relation","prototype":"resource dbplus_rcreate(string $name, mixed $domlist [, bool $overwrite = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rcrtexact":{"id":"function.dbplus-rcrtexact","purpose":"Creates an exact but empty copy of a relation including indices","prototype":"mixed dbplus_rcrtexact(string $name, resource $relation [, bool $overwrite = ''])","return":"<p class=\"para\">   Returns resource on success or <strong><code>DBPLUS_ERR_UNKNOWN<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rcrtlike":{"id":"function.dbplus-rcrtlike","purpose":"Creates an empty copy of a relation with default indices","prototype":"mixed dbplus_rcrtlike(string $name, resource $relation [, int $overwrite = ''])","return":"<p class=\"para\">   Returns resource on success or <strong><code>DBPLUS_ERR_UNKNOWN<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_resolve":{"id":"function.dbplus-resolve","purpose":"Resolve host information for relation","prototype":"array dbplus_resolve(string $relation_name)","return":"<p class=\"para\">   Returns an array containing these values under the keys   <em>sid<\/em>, <em>host<\/em> and   <em>host_path<\/em> or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_restorepos":{"id":"function.dbplus-restorepos","purpose":"Restore position","prototype":"int dbplus_restorepos(resource $relation, array $tuple)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rkeys":{"id":"function.dbplus-rkeys","purpose":"Specify new primary key for a relation","prototype":"mixed dbplus_rkeys(resource $relation, mixed $domlist)","return":"<p class=\"para\">   Returns resource on success or <strong><code>DBPLUS_ERR_UNKNOWN<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_ropen":{"id":"function.dbplus-ropen","purpose":"Open relation file local","prototype":"resource dbplus_ropen(string $name)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rquery":{"id":"function.dbplus-rquery","purpose":"Perform local (raw) AQL query","prototype":"resource dbplus_rquery(string $query [, string $dbpath = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rrename":{"id":"function.dbplus-rrename","purpose":"Rename a relation","prototype":"int dbplus_rrename(resource $relation, string $name)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rsecindex":{"id":"function.dbplus-rsecindex","purpose":"Create a new secondary index for a relation","prototype":"mixed dbplus_rsecindex(resource $relation, mixed $domlist, int $type)","return":"<p class=\"para\">   Returns resource on success or <strong><code>DBPLUS_ERR_UNKNOWN<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_runlink":{"id":"function.dbplus-runlink","purpose":"Remove relation from filesystem","prototype":"int dbplus_runlink(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_rzap":{"id":"function.dbplus-rzap","purpose":"Remove all tuples from relation","prototype":"int dbplus_rzap(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_savepos":{"id":"function.dbplus-savepos","purpose":"Save position","prototype":"int dbplus_savepos(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_setindex":{"id":"function.dbplus-setindex","purpose":"Set index","prototype":"int dbplus_setindex(resource $relation, string $idx_name)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_setindexbynumber":{"id":"function.dbplus-setindexbynumber","purpose":"Set index by number","prototype":"int dbplus_setindexbynumber(resource $relation, int $idx_number)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_sql":{"id":"function.dbplus-sql","purpose":"Perform SQL query","prototype":"resource dbplus_sql(string $query [, string $server = '' [, string $dbpath = '']])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_tcl":{"id":"function.dbplus-tcl","purpose":"Execute TCL code on server side","prototype":"string dbplus_tcl(int $sid, string $script)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_tremove":{"id":"function.dbplus-tremove","purpose":"Remove tuple and return new current tuple","prototype":"int dbplus_tremove(resource $relation, array $tuple [, array $current = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_undo":{"id":"function.dbplus-undo","purpose":"Undo","prototype":"int dbplus_undo(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_undoprepare":{"id":"function.dbplus-undoprepare","purpose":"Prepare undo","prototype":"int dbplus_undoprepare(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_unlockrel":{"id":"function.dbplus-unlockrel","purpose":"Give up write lock on relation","prototype":"int dbplus_unlockrel(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_unselect":{"id":"function.dbplus-unselect","purpose":"Remove a constraint from relation","prototype":"int dbplus_unselect(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_update":{"id":"function.dbplus-update","purpose":"Update specified tuple in relation","prototype":"int dbplus_update(resource $relation, array $old, array $new)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_xlockrel":{"id":"function.dbplus-xlockrel","purpose":"Request exclusive lock on relation","prototype":"int dbplus_xlockrel(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbplus_xunlockrel":{"id":"function.dbplus-xunlockrel","purpose":"Free exclusive lock on relation","prototype":"int dbplus_xunlockrel(resource $relation)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 <= 4.1.0, PECL dbplus >= 0.9"},"dbase_add_record":{"id":"function.dbase-add-record","purpose":"Adds a record to a database","prototype":"bool dbase_add_record(resource $dbase_identifier, array $record)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_close":{"id":"function.dbase-close","purpose":"Closes a database","prototype":"bool dbase_close(resource $dbase_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_create":{"id":"function.dbase-create","purpose":"Creates a database","prototype":"resource dbase_create(string $filename, array $fields [, int $type = DBASE_TYPE_DBASE])","return":"<p class=\"para\">   Returns a database link identifier if the database is successfully created,   or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_delete_record":{"id":"function.dbase-delete-record","purpose":"Deletes a record from a database","prototype":"bool dbase_delete_record(resource $dbase_identifier, int $record_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_get_header_info":{"id":"function.dbase-get-header-info","purpose":"Gets the header info of a database","prototype":"array dbase_get_header_info(resource $dbase_identifier)","return":"<p class=\"para\">   An indexed array with an entry for each column in the database. The array index   starts at 0.  <\/p>  <p class=\"para\">   Each array element contains an associative array of column information, as   described here:   <dl>         <dt>name<\/dt>     <dd>      <span class=\"simpara\">       The name of the column      <\/span>     <\/dd>             <dt>type<\/dt>     <dd>      <span class=\"simpara\">       The human-readable name for the dbase type of the column (i.e. date,       boolean, etc.)       The supported field types are listed in the <a href=\"intro.dbase.html\" class=\"link\">introduction section<\/a>.      <\/span>     <\/dd>             <dt>length<\/dt>     <dd>      <span class=\"simpara\">       The number of bytes this column can hold      <\/span>     <\/dd>             <dt>precision<\/dt>     <dd>      <span class=\"simpara\">       The number of digits of decimal precision for the column      <\/span>     <\/dd>             <dt>format<\/dt>     <dd>      <span class=\"simpara\">       A suggested <span class=\"function\">printf<\/span> format specifier for the column      <\/span>     <\/dd>             <dt>offset<\/dt>     <dd>      <span class=\"simpara\">       The byte offset of the column from the start of the row      <\/span>     <\/dd>       <\/dl>  <\/p>  <p class=\"para\">   If the database header information cannot be read, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_get_record_with_names":{"id":"function.dbase-get-record-with-names","purpose":"Gets a record from a database as an associative array","prototype":"array dbase_get_record_with_names(resource $dbase_identifier, int $record_number)","return":"<p class=\"para\">   An associative array with the record. This will also include a key named    <em>deleted<\/em> which is set to 1 if the record has been marked   for deletion (see <span class=\"function\">dbase_delete_record<\/span>).   Therefore it is not possible to retrieve the value of a field named   <em>deleted<\/em> with this function.  <\/p>  <p class=\"para\">   Each field is converted to the appropriate PHP type, except:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      Dates are left as strings.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      DateTime values are converted to strings.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Integers outside the range      <strong><code>PHP_INT_MIN<\/code><\/strong>..<strong><code>PHP_INT_MAX<\/code><\/strong> are      returned as strings.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Before dbase 7.0.0, booleans (<em>L<\/em>) were converted to <em>1<\/em> or      <em>0<\/em>.     <\/span>    <\/li>   <\/ul>  <\/p>  <p class=\"para\">   On error, <span class=\"function\">dbase_get_record_with_names<\/span> will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_get_record":{"id":"function.dbase-get-record","purpose":"Gets a record from a database as an indexed array","prototype":"array dbase_get_record(resource $dbase_identifier, int $record_number)","return":"<p class=\"para\">   An indexed array with the record. This array will also include an associative   key named <em>deleted<\/em> which is set to 1 if the record has been    marked for deletion (see <span class=\"function\">dbase_delete_record<\/span>).  <\/p>  <p class=\"para\">   Each field is converted to the appropriate PHP type, except:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      Dates are left as strings.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      DateTime values are converted to strings.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Integers outside the range      <strong><code>PHP_INT_MIN<\/code><\/strong>..<strong><code>PHP_INT_MAX<\/code><\/strong> are      returned as strings.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Before dbase 7.0.0, booleans (<em>L<\/em>) were converted to <em>1<\/em> or      <em>0<\/em>.     <\/span>    <\/li>   <\/ul>  <\/p>  <p class=\"para\">   On error, <span class=\"function\">dbase_get_record<\/span> will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_numfields":{"id":"function.dbase-numfields","purpose":"Gets the number of fields of a database","prototype":"int dbase_numfields(resource $dbase_identifier)","return":"<p class=\"para\">   The number of fields in the database, or <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_numrecords":{"id":"function.dbase-numrecords","purpose":"Gets the number of records in a database","prototype":"int dbase_numrecords(resource $dbase_identifier)","return":"<p class=\"para\">   The number of records in the database, or <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_open":{"id":"function.dbase-open","purpose":"Opens a database","prototype":"resource dbase_open(string $filename, int $mode)","return":"<p class=\"para\">   Returns a database link identifier if the database is successfully opened,   or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_pack":{"id":"function.dbase-pack","purpose":"Packs a database","prototype":"bool dbase_pack(resource $dbase_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"dbase_replace_record":{"id":"function.dbase-replace-record","purpose":"Replaces a record in a database","prototype":"bool dbase_replace_record(resource $dbase_identifier, array $record, int $record_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.3.0, dbase 5, dbase 7"},"filepro_fieldcount":{"id":"function.filepro-fieldcount","purpose":"Find out how many fields are in a filePro database","prototype":"int filepro_fieldcount()","return":"<p class=\"para\">   Returns the number of fields in the opened filePro database, or <strong><code>FALSE<\/code><\/strong> on   errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"filepro_fieldname":{"id":"function.filepro-fieldname","purpose":"Gets the name of a field","prototype":"string filepro_fieldname(int $field_number)","return":"<p class=\"para\">   Returns the name of the field as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"filepro_fieldtype":{"id":"function.filepro-fieldtype","purpose":"Gets the type of a field","prototype":"string filepro_fieldtype(int $field_number)","return":"<p class=\"para\">   Returns the edit type of the field as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"filepro_fieldwidth":{"id":"function.filepro-fieldwidth","purpose":"Gets the width of a field","prototype":"int filepro_fieldwidth(int $field_number)","return":"<p class=\"para\">   Returns the width of the field as a integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"filepro_retrieve":{"id":"function.filepro-retrieve","purpose":"Retrieves data from a filePro database","prototype":"string filepro_retrieve(int $row_number, int $field_number)","return":"<p class=\"para\">   Returns the specified data, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"filepro_rowcount":{"id":"function.filepro-rowcount","purpose":"Find out how many rows are in a filePro database","prototype":"int filepro_rowcount()","return":"<p class=\"para\">   Returns the number of rows in the opened filePro database, or <strong><code>FALSE<\/code><\/strong> on   errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"filepro":{"id":"function.filepro","purpose":"Read and verify the map file","prototype":"bool filepro(string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PHP 7"},"ibase_add_user":{"id":"function.ibase-add-user","purpose":"Add a user to a security database","prototype":"bool ibase_add_user(resource $service_handle, string $user_name, string $password [, string $first_name = '' [, string $middle_name = '' [, string $last_name = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_affected_rows":{"id":"function.ibase-affected-rows","purpose":"Return the number of rows that were affected by the previous query","prototype":"int ibase_affected_rows([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the number of rows as an integer.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_backup":{"id":"function.ibase-backup","purpose":"Initiates a backup task in the service manager and returns immediately","prototype":"mixed ibase_backup(resource $service_handle, string $source_db, string $dest_file [, int $options = '' [, bool $verbose = '']])","return":"","versions":"PHP 5, PHP 7"},"ibase_blob_add":{"id":"function.ibase-blob-add","purpose":"Add data into a newly created blob","prototype":"void ibase_blob_add(resource $blob_handle, string $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_cancel":{"id":"function.ibase-blob-cancel","purpose":"Cancel creating blob","prototype":"bool ibase_blob_cancel(resource $blob_handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_close":{"id":"function.ibase-blob-close","purpose":"Close blob","prototype":"mixed ibase_blob_close(resource $blob_handle)","return":"<p class=\"para\">   If the BLOB was being read, this function returns <strong><code>TRUE<\/code><\/strong> on success, if   the BLOB was being written to, this function returns a string containing   the BLOB id that has been assigned to it by the database. On failure, this   function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_create":{"id":"function.ibase-blob-create","purpose":"Create a new blob for adding data","prototype":"resource ibase_blob_create([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a BLOB handle for later use with   <span class=\"function\">ibase_blob_add<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_echo":{"id":"function.ibase-blob-echo","purpose":"Output blob contents to browser","prototype":"bool ibase_blob_echo(string $blob_id, resource $link_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_get":{"id":"function.ibase-blob-get","purpose":"Get len bytes data from open blob","prototype":"string ibase_blob_get(resource $blob_handle, int $len)","return":"<p class=\"para\">   Returns at most <code class=\"parameter\">len<\/code> bytes from the BLOB, or <strong><code>FALSE<\/code><\/strong>   on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_import":{"id":"function.ibase-blob-import","purpose":"Create blob, copy file in it, and close it","prototype":"string ibase_blob_import(resource $link_identifier, resource $file_handle)","return":"<p class=\"para\">   Returns the BLOB id on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_info":{"id":"function.ibase-blob-info","purpose":"Return blob length and other useful info","prototype":"array ibase_blob_info(resource $link_identifier, string $blob_id)","return":"<p class=\"para\">   Returns an array containing information about a BLOB. The information returned   consists of the length of the BLOB, the number of segments it contains, the size   of the largest segment, and whether it is a stream BLOB or a segmented BLOB.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_blob_open":{"id":"function.ibase-blob-open","purpose":"Open blob for retrieving data parts","prototype":"resource ibase_blob_open(resource $link_identifier, string $blob_id)","return":"<p class=\"para\">   Returns a BLOB handle for later use with    <span class=\"function\">ibase_blob_get<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_close":{"id":"function.ibase-close","purpose":"Close a connection to an InterBase database","prototype":"bool ibase_close([resource $connection_id = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_commit_ret":{"id":"function.ibase-commit-ret","purpose":"Commit a transaction without closing it","prototype":"bool ibase_commit_ret([resource $link_or_trans_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_commit":{"id":"function.ibase-commit","purpose":"Commit a transaction","prototype":"bool ibase_commit([resource $link_or_trans_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_connect":{"id":"function.ibase-connect","purpose":"Open a connection to a database","prototype":"resource ibase_connect([string $database = '' [, string $username = '' [, string $password = '' [, string $charset = '' [, int $buffers = '' [, int $dialect = '' [, string $role = '' [, int $sync = '']]]]]]]])","return":"<p class=\"para\">   Returns an Firebird\/InterBase link identifier on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_db_info":{"id":"function.ibase-db-info","purpose":"Request statistics about a database","prototype":"string ibase_db_info(resource $service_handle, string $db, int $action [, int $argument = ''])","return":"","versions":"PHP 5, PHP 7"},"ibase_delete_user":{"id":"function.ibase-delete-user","purpose":"Delete a user from a security database","prototype":"bool ibase_delete_user(resource $service_handle, string $user_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_drop_db":{"id":"function.ibase-drop-db","purpose":"Drops a database","prototype":"bool ibase_drop_db([resource $connection = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_errcode":{"id":"function.ibase-errcode","purpose":"Return an error code","prototype":"int ibase_errcode()","return":"<p class=\"para\">   Returns the error code as an integer, or <strong><code>FALSE<\/code><\/strong> if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_errmsg":{"id":"function.ibase-errmsg","purpose":"Return error messages","prototype":"string ibase_errmsg()","return":"<p class=\"para\">   Returns the error message as a string, or <strong><code>FALSE<\/code><\/strong> if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_execute":{"id":"function.ibase-execute","purpose":"Execute a previously prepared query","prototype":"resource ibase_execute(resource $query [, mixed $bind_arg = '' [, mixed $... = '']])","return":"<p class=\"para\">   If the query raises an error, returns <strong><code>FALSE<\/code><\/strong>. If it is successful and   there is a (possibly empty) result set (such as with a SELECT query),   returns a result identifier. If the query was successful and there were   no results, returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This function returns the number of rows affected by    the query (if &gt; 0 and applicable to the statement type). A query that    succeeded, but did not affect any rows (e.g. an UPDATE of a non-existent    record) will return <strong><code>TRUE<\/code><\/strong>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"ibase_fetch_assoc":{"id":"function.ibase-fetch-assoc","purpose":"Fetch a result row from a query as an associative array","prototype":"array ibase_fetch_assoc(resource $result [, int $fetch_flag = ''])","return":"<p class=\"para\">   Returns an associative array that corresponds to the fetched row.   Subsequent calls will return the next row in the result set, or <strong><code>FALSE<\/code><\/strong> if   there are no more rows.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_fetch_object":{"id":"function.ibase-fetch-object","purpose":"Get an object from a InterBase database","prototype":"object ibase_fetch_object(resource $result_id [, int $fetch_flag = ''])","return":"<p class=\"para\">   Returns an object with the next row information, or <strong><code>FALSE<\/code><\/strong> if there are   no more rows.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_fetch_row":{"id":"function.ibase-fetch-row","purpose":"Fetch a row from an InterBase database","prototype":"array ibase_fetch_row(resource $result_identifier [, int $fetch_flag = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows. Each result column is stored in an array offset,   starting at offset 0.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_field_info":{"id":"function.ibase-field-info","purpose":"Get information about a field","prototype":"array ibase_field_info(resource $result, int $field_number)","return":"<p class=\"para\">   Returns an array with the following keys: <em>name<\/em>,   <em>alias<\/em>, <em>relation<\/em>,   <em>length<\/em> and <em>type<\/em>.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_free_event_handler":{"id":"function.ibase-free-event-handler","purpose":"Cancels a registered event handler","prototype":"bool ibase_free_event_handler(resource $event)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_free_query":{"id":"function.ibase-free-query","purpose":"Free memory allocated by a prepared query","prototype":"bool ibase_free_query(resource $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_free_result":{"id":"function.ibase-free-result","purpose":"Free a result set","prototype":"bool ibase_free_result(resource $result_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_gen_id":{"id":"function.ibase-gen-id","purpose":"Increments the named generator and returns its new value","prototype":"mixed ibase_gen_id(string $generator [, int $increment = 1 [, resource $link_identifier = '']])","return":"<p class=\"para\">   Returns new generator value as integer, or as string if the value is too big.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_maintain_db":{"id":"function.ibase-maintain-db","purpose":"Execute a maintenance command on the database server","prototype":"bool ibase_maintain_db(resource $service_handle, string $db, int $action [, int $argument = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_modify_user":{"id":"function.ibase-modify-user","purpose":"Modify a user to a security database","prototype":"bool ibase_modify_user(resource $service_handle, string $user_name, string $password [, string $first_name = '' [, string $middle_name = '' [, string $last_name = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_name_result":{"id":"function.ibase-name-result","purpose":"Assigns a name to a result set","prototype":"bool ibase_name_result(resource $result, string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_num_fields":{"id":"function.ibase-num-fields","purpose":"Get the number of fields in a result set","prototype":"int ibase_num_fields(resource $result_id)","return":"<p class=\"para\">   Returns the number of fields as an integer.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_num_params":{"id":"function.ibase-num-params","purpose":"Return the number of parameters in a prepared query","prototype":"int ibase_num_params(resource $query)","return":"<p class=\"para\">   Returns the number of parameters as an integer.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_param_info":{"id":"function.ibase-param-info","purpose":"Return information about a parameter in a prepared query","prototype":"array ibase_param_info(resource $query, int $param_number)","return":"<p class=\"para\">   Returns an array with the following keys: <em>name<\/em>,   <em>alias<\/em>, <em>relation<\/em>,   <em>length<\/em> and <em>type<\/em>.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_pconnect":{"id":"function.ibase-pconnect","purpose":"Open a persistent connection to an InterBase database","prototype":"resource ibase_pconnect([string $database = '' [, string $username = '' [, string $password = '' [, string $charset = '' [, int $buffers = '' [, int $dialect = '' [, string $role = '' [, int $sync = '']]]]]]]])","return":"<p class=\"para\">   Returns an InterBase link identifier on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_prepare":{"id":"function.ibase-prepare","purpose":"Prepare a query for later binding of parameter placeholders and execution","prototype":"resource ibase_prepare(string $query, resource $link_identifier, string $trans)","return":"<p class=\"para\">   Returns a prepared query handle, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_query":{"id":"function.ibase-query","purpose":"Execute a query on an InterBase database","prototype":"resource ibase_query([resource $link_identifier = '', string $query [, int $bind_args = '']])","return":"<p class=\"para\">   If the query raises an error, returns <strong><code>FALSE<\/code><\/strong>. If it is successful and   there is a (possibly empty) result set (such as with a SELECT query),   returns a result identifier. If the query was successful and there were   no results, returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    In PHP 5.0.0 and up, this function will return the number of rows    affected by the query for INSERT, UPDATE and DELETE statements. In order    to retain backward compatibility, it will return <strong><code>TRUE<\/code><\/strong> for these    statements if the query succeeded without affecting any rows.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"ibase_restore":{"id":"function.ibase-restore","purpose":"Initiates a restore task in the service manager and returns immediately","prototype":"mixed ibase_restore(resource $service_handle, string $source_file, string $dest_db [, int $options = '' [, bool $verbose = '']])","return":"","versions":"PHP 5, PHP 7"},"ibase_rollback_ret":{"id":"function.ibase-rollback-ret","purpose":"Roll back a transaction without closing it","prototype":"bool ibase_rollback_ret([resource $link_or_trans_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_rollback":{"id":"function.ibase-rollback","purpose":"Roll back a transaction","prototype":"bool ibase_rollback([resource $link_or_trans_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_server_info":{"id":"function.ibase-server-info","purpose":"Request information about a database server","prototype":"string ibase_server_info(resource $service_handle, int $action)","return":"","versions":"PHP 5, PHP 7"},"ibase_service_attach":{"id":"function.ibase-service-attach","purpose":"Connect to the service manager","prototype":"resource ibase_service_attach(string $host, string $dba_username, string $dba_password)","return":"","versions":"PHP 5, PHP 7"},"ibase_service_detach":{"id":"function.ibase-service-detach","purpose":"Disconnect from the service manager","prototype":"bool ibase_service_detach(resource $service_handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_set_event_handler":{"id":"function.ibase-set-event-handler","purpose":"Register a callback function to be called when events are posted","prototype":"resource ibase_set_event_handler(callable $event_handler, string $event_name1 [, string $event_name2 = '' [, string $... = '', resource $connection]])","return":"<p class=\"para\">   The return value is an event resource. This resource can be used to free   the event handler using <span class=\"function\">ibase_free_event_handler<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_trans":{"id":"function.ibase-trans","purpose":"Begin a transaction","prototype":"resource ibase_trans([int $trans_args = '' [, resource $link_identifier = '']])","return":"<p class=\"para\">   Returns a transaction handle, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"ibase_wait_event":{"id":"function.ibase-wait-event","purpose":"Wait for an event to be posted by the database","prototype":"string ibase_wait_event(string $event_name1 [, string $event_name2 = '' [, string $... = '', resource $connection]])","return":"<p class=\"para\">   Returns the name of the event that was posted.  <\/p>","versions":"PHP 5, PHP 7"},"fbsql_affected_rows":{"id":"function.fbsql-affected-rows","purpose":"Get number of affected rows in previous FrontBase operation","prototype":"int fbsql_affected_rows([resource $link_identifier = ''])","return":"<p class=\"para\">   If the last query failed, this function will return -1.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_autocommit":{"id":"function.fbsql-autocommit","purpose":"Enable or disable autocommit","prototype":"bool fbsql_autocommit(resource $link_identifier [, bool $OnOff = ''])","return":"<p class=\"para\">   Returns the current autocommit status, as a boolean.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_blob_size":{"id":"function.fbsql-blob-size","purpose":"Get the size of a BLOB","prototype":"int fbsql_blob_size(string $blob_handle [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the BLOB size as an integer, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_change_user":{"id":"function.fbsql-change-user","purpose":"Change logged in user of the active connection","prototype":"bool fbsql_change_user(string $user, string $password [, string $database = '' [, resource $link_identifier = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_clob_size":{"id":"function.fbsql-clob-size","purpose":"Get the size of a CLOB","prototype":"int fbsql_clob_size(string $clob_handle [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the CLOB size as an integer, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_close":{"id":"function.fbsql-close","purpose":"Close FrontBase connection","prototype":"bool fbsql_close([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_commit":{"id":"function.fbsql-commit","purpose":"Commits a transaction to the database","prototype":"bool fbsql_commit([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_connect":{"id":"function.fbsql-connect","purpose":"Open a connection to a FrontBase Server","prototype":"resource fbsql_connect([string $hostname = ini_get(\"fbsql.default_host\") [, string $username = ini_get(\"fbsql.default_user\") [, string $password = ini_get(\"fbsql.default_password\")]]])","return":"<p class=\"para\">   Returns a positive FrontBase link identifier on success, or <strong><code>FALSE<\/code><\/strong> on   errors.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_create_blob":{"id":"function.fbsql-create-blob","purpose":"Create a BLOB","prototype":"string fbsql_create_blob(string $blob_data [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a resource handle to the newly created BLOB, which can be used   with insert and update commands to store the BLOB in the database.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_create_clob":{"id":"function.fbsql-create-clob","purpose":"Create a CLOB","prototype":"string fbsql_create_clob(string $clob_data [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a resource handle to the newly created CLOB, which can be used   with insert and update commands to store the CLOB in the database.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_create_db":{"id":"function.fbsql-create-db","purpose":"Create a FrontBase database","prototype":"bool fbsql_create_db(string $database_name [, resource $link_identifier = '' [, string $database_options = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_data_seek":{"id":"function.fbsql-data-seek","purpose":"Move internal result pointer","prototype":"bool fbsql_data_seek(resource $result, int $row_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_database_password":{"id":"function.fbsql-database-password","purpose":"Sets or retrieves the password for a FrontBase database","prototype":"string fbsql_database_password(resource $link_identifier [, string $database_password = ''])","return":"<p class=\"para\">   Returns the database password associated with the link identifier.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_database":{"id":"function.fbsql-database","purpose":"Get or set the database name used with a connection","prototype":"string fbsql_database(resource $link_identifier [, string $database = ''])","return":"<p class=\"para\">   Returns the name of the database used with this connection.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_db_query":{"id":"function.fbsql-db-query","purpose":"Send a FrontBase query","prototype":"resource fbsql_db_query(string $database, string $query [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a positive FrontBase result identifier to the query result, or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_db_status":{"id":"function.fbsql-db-status","purpose":"Get the status for a given database","prototype":"int fbsql_db_status(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns an integer value with the current status. This can be one of the   following constants:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FALSE<\/code><\/strong> - The exec handler for the host was invalid. This error will      occur when the <code class=\"parameter\">link_identifier<\/code> connects directly      to a database by using a port number. FBExec can be available on the      server but no connection has been made for it.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FBSQL_UNKNOWN<\/code><\/strong> - The Status is unknown.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FBSQL_STOPPED<\/code><\/strong> - The database is not running. Use      <span class=\"function\">fbsql_start_db<\/span> to start the database.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FBSQL_STARTING<\/code><\/strong> - The database is starting.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FBSQL_RUNNING<\/code><\/strong> - The database is running and can be      used to perform SQL operations.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FBSQL_STOPPING<\/code><\/strong> - The database is stopping.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>FBSQL_NOEXEC<\/code><\/strong> - FBExec is not running on the server      and it is not possible to get the status of the database.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"fbsql_drop_db":{"id":"function.fbsql-drop-db","purpose":"Drop (delete) a FrontBase database","prototype":"bool fbsql_drop_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_errno":{"id":"function.fbsql-errno","purpose":"Returns the error number from previous operation","prototype":"int fbsql_errno([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the error number from the last fbsql function, or   <em>0<\/em> (zero) if no error occurred.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_error":{"id":"function.fbsql-error","purpose":"Returns the error message from previous operation","prototype":"string fbsql_error([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the error text from the last fbsql function, or   <em>&#039;&#039;<\/em> (the empty string) if no error occurred.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_fetch_array":{"id":"function.fbsql-fetch-array","purpose":"Fetch a result row as an associative array, a numeric array, or both","prototype":"array fbsql_fetch_array(resource $result [, int $result_type = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong>   if there are no more rows.  <\/p>  <p class=\"para\">   If two or more columns of the result have the same field names,   the last column will take precedence. To access the other column(s)   of the same name, you must the numeric index of the column or   make an alias for the column.   <div class=\"informalexample\">    <div class=\"example-contents\"><div class=\"sqlcode\"><pre class=\"sqlcode\">select t1.f1 as foo t2.f1 as bar from t1, t2<\/pre><\/div>    <\/div>   <\/div>  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_fetch_assoc":{"id":"function.fbsql-fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array fbsql_fetch_assoc(resource $result)","return":"<p class=\"para\">   Returns an associative array that corresponds to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>  <p class=\"para\">   If two or more columns of the result have the same field names, the last   column will take precedence. To access the other column(s) of the same   name, you must use <span class=\"function\">fbsql_fetch_array<\/span> and have it   return the numeric indices as well.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_fetch_field":{"id":"function.fbsql-fetch-field","purpose":"Get column information from a result and return as an object","prototype":"object fbsql_fetch_field(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns an object containing field information, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>  <p class=\"para\">   The properties of the object are:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      name - column name     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      table - name of the table the column belongs to     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      max_length - maximum length of the column     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      not_null - 1 if the column cannot be <strong><code>NULL<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      type - the type of the column     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_fetch_lengths":{"id":"function.fbsql-fetch-lengths","purpose":"Get the length of each output in a result","prototype":"array fbsql_fetch_lengths(resource $result)","return":"<p class=\"para\">   Returns an array, starting at offset 0, that corresponds to the lengths of   each field in the last row fetched by <span class=\"function\">fbsql_fetch_row<\/span>,   or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_fetch_object":{"id":"function.fbsql-fetch-object","purpose":"Fetch a result row as an object","prototype":"object fbsql_fetch_object(resource $result)","return":"<p class=\"para\">   Returns an object with properties that correspond to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_fetch_row":{"id":"function.fbsql-fetch-row","purpose":"Get a result row as an enumerated array","prototype":"array fbsql_fetch_row(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row where each result   column is stored in an offset, starting at offset 0, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows.   <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_field_flags":{"id":"function.fbsql-field-flags","purpose":"Get the flags associated with the specified field in a result","prototype":"string fbsql_field_flags(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns the field flags of the specified field as a single word per flag   separated by a single space, so that you can split the returned value   using <span class=\"function\">explode<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_field_len":{"id":"function.fbsql-field-len","purpose":"Returns the length of the specified field","prototype":"int fbsql_field_len(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns the length of the specified field.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_field_name":{"id":"function.fbsql-field-name","purpose":"Get the name of the specified field in a result","prototype":"string fbsql_field_name(resource $result [, int $field_index = ''])","return":"<p class=\"para\">   Returns the name as a string, or <strong><code>FALSE<\/code><\/strong> if the field doesn&#039;t exist.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_field_seek":{"id":"function.fbsql-field-seek","purpose":"Set result pointer to a specified field offset","prototype":"bool fbsql_field_seek(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_field_table":{"id":"function.fbsql-field-table","purpose":"Get name of the table the specified field is in","prototype":"string fbsql_field_table(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns the name of the table, as a string.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_field_type":{"id":"function.fbsql-field-type","purpose":"Get the type of the specified field in a result","prototype":"string fbsql_field_type(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns the field type, as a string.  <\/p>  <p class=\"para\">   This can be one of <em>int<\/em>, <em>real<\/em>,   <em>string<\/em>, <em>blob<\/em>, and others as detailed   in the <a href=\"http:\/\/www.frontbase.com\/cgi-bin\/WebObjects\/FBWebSite.woa\" class=\"link external\">&raquo;&nbsp;FrontBase documentation<\/a>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_free_result":{"id":"function.fbsql-free-result","purpose":"Free result memory","prototype":"bool fbsql_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_get_autostart_info":{"id":"function.fbsql-get-autostart-info","purpose":"","prototype":"array fbsql_get_autostart_info([resource $link_identifier = ''])","return":"","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"fbsql_hostname":{"id":"function.fbsql-hostname","purpose":"Get or set the host name used with a connection","prototype":"string fbsql_hostname(resource $link_identifier [, string $host_name = ''])","return":"<p class=\"para\">   Returns the current host name used for the connection.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_insert_id":{"id":"function.fbsql-insert-id","purpose":"Get the id generated from the previous INSERT operation","prototype":"int fbsql_insert_id([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the ID generated from the previous INSERT query, or 0 if the   previous query does not generate an DEFAULT UNIQUE value.  <\/p>  <p class=\"para\">   If you need to save the value for later, be sure to call this function   immediately after the query that generates the value.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_list_dbs":{"id":"function.fbsql-list-dbs","purpose":"List databases available on a FrontBase server","prototype":"resource fbsql_list_dbs([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a result pointer or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_list_fields":{"id":"function.fbsql-list-fields","purpose":"List FrontBase result fields","prototype":"resource fbsql_list_fields(string $database_name, string $table_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a result pointer which can be used with the   <em>fbsql_field_xxx<\/em> functions, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_list_tables":{"id":"function.fbsql-list-tables","purpose":"List tables in a FrontBase database","prototype":"resource fbsql_list_tables(string $database [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a result pointer which can be used with the   <span class=\"function\">fbsql_tablename<\/span> function to read the actual table   names, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_next_result":{"id":"function.fbsql-next-result","purpose":"Move the internal result pointer to the next result","prototype":"bool fbsql_next_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if an additional result set was available or <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_num_fields":{"id":"function.fbsql-num-fields","purpose":"Get number of fields in result","prototype":"int fbsql_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields, as an integer.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_num_rows":{"id":"function.fbsql-num-rows","purpose":"Get number of rows in result","prototype":"int fbsql_num_rows(resource $result)","return":"<p class=\"para\">   Returns the number of rows returned by the last SELECT statement.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_password":{"id":"function.fbsql-password","purpose":"Get or set the user password used with a connection","prototype":"string fbsql_password(resource $link_identifier [, string $password = ''])","return":"<p class=\"para\">   Returns the current password used for the connection.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_pconnect":{"id":"function.fbsql-pconnect","purpose":"Open a persistent connection to a FrontBase Server","prototype":"resource fbsql_pconnect([string $hostname = ini_get(\"fbsql.default_host\") [, string $username = ini_get(\"fbsql.default_user\") [, string $password = ini_get(\"fbsql.default_password\")]]])","return":"<p class=\"para\">   Returns a positive FrontBase persistent link identifier on success, or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_query":{"id":"function.fbsql-query","purpose":"Send a FrontBase query","prototype":"resource fbsql_query(string $query [, resource $link_identifier = '' [, int $batch_size = '']])","return":"<p class=\"para\">   <span class=\"function\">fbsql_query<\/span> returns <strong><code>TRUE<\/code><\/strong> (non-zero) or <strong><code>FALSE<\/code><\/strong>   to indicate whether or not the query succeeded.  A return value   of <strong><code>TRUE<\/code><\/strong> means that the query was legal and could be executed by   the server.  It does not indicate anything about the number of   rows affected or returned. It is perfectly possible for a query   to succeed but affect no rows or return no rows.  <\/p>  <p class=\"para\">   For SELECT statements, <span class=\"function\">fbsql_query<\/span> returns a new   result identifier that you can pass to <span class=\"function\">fbsql_result<\/span>.  <\/p>  <p class=\"para\">   <span class=\"function\">fbsql_query<\/span> will also fail and return <strong><code>FALSE<\/code><\/strong> if you   don&#039;t have permission to access the table(s) referenced by the query.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_read_blob":{"id":"function.fbsql-read-blob","purpose":"Read a BLOB from the database","prototype":"string fbsql_read_blob(string $blob_handle [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a string containing the specified BLOB data.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_read_clob":{"id":"function.fbsql-read-clob","purpose":"Read a CLOB from the database","prototype":"string fbsql_read_clob(string $clob_handle [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a string containing the specified CLOB data.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_result":{"id":"function.fbsql-result","purpose":"Get result data","prototype":"mixed fbsql_result(resource $result [, int $row = '' [, mixed $field = '']])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_rollback":{"id":"function.fbsql-rollback","purpose":"Rollback a transaction to the database","prototype":"bool fbsql_rollback([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_rows_fetched":{"id":"function.fbsql-rows-fetched","purpose":"Get the number of rows affected by the last statement","prototype":"int fbsql_rows_fetched(resource $result)","return":"<p class=\"para\">   Returns the number of rows, as an integer.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"fbsql_select_db":{"id":"function.fbsql-select-db","purpose":"Select a FrontBase database","prototype":"bool fbsql_select_db([string $database_name = '' [, resource $link_identifier = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_set_characterset":{"id":"function.fbsql-set-characterset","purpose":"Change input\/output character set","prototype":"void fbsql_set_characterset(resource $link_identifier, int $characterset [, int $in_out_both = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"fbsql_set_lob_mode":{"id":"function.fbsql-set-lob-mode","purpose":"Set the LOB retrieve mode for a FrontBase result set","prototype":"bool fbsql_set_lob_mode(resource $result, int $lob_mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_set_password":{"id":"function.fbsql-set-password","purpose":"Change the password for a given user","prototype":"bool fbsql_set_password(resource $link_identifier, string $user, string $password, string $old_password)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"fbsql_set_transaction":{"id":"function.fbsql-set-transaction","purpose":"Set the transaction locking and isolation","prototype":"void fbsql_set_transaction(resource $link_identifier, int $locking, int $isolation)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_start_db":{"id":"function.fbsql-start-db","purpose":"Start a database on local or remote server","prototype":"bool fbsql_start_db(string $database_name [, resource $link_identifier = '' [, string $database_options = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_stop_db":{"id":"function.fbsql-stop-db","purpose":"Stop a database on local or remote server","prototype":"bool fbsql_stop_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_table_name":{"id":"function.fbsql-table-name","purpose":"Get table name of field","prototype":"string fbsql_table_name(resource $result, int $index)","return":"<p class=\"para\">   Returns the name of the table, as a string.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_tablename":{"id":"function.fbsql-tablename","purpose":"Alias of fbsql_table_name","prototype":" fbsql_tablename()","return":"","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"fbsql_username":{"id":"function.fbsql-username","purpose":"Get or set the username for the connection","prototype":"string fbsql_username(resource $link_identifier [, string $username = ''])","return":"<p class=\"para\">   Returns the current username used with the connection, as a string.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"fbsql_warnings":{"id":"function.fbsql-warnings","purpose":"Enable or disable FrontBase warnings","prototype":"bool fbsql_warnings([bool $OnOff = ''])","return":"<p class=\"para\">   Returns  <strong><code>TRUE<\/code><\/strong> if warnings is turned on, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"db2_autocommit":{"id":"function.db2-autocommit","purpose":"Returns or sets the AUTOCOMMIT state for a database connection","prototype":"mixed db2_autocommit(resource $connection [, bool $value = ''])","return":"<p class=\"para\">   When <span class=\"function\">db2_autocommit<\/span> receives only the   <code class=\"parameter\">connection<\/code> parameter, it returns the current state   of AUTOCOMMIT for the requested connection as an integer value. A value of   0 indicates that AUTOCOMMIT is off, while a value of 1 indicates that   AUTOCOMMIT is on.  <\/p>  <p class=\"para\">   When <span class=\"function\">db2_autocommit<\/span> receives both the   <code class=\"parameter\">connection<\/code> parameter and   <code class=\"parameter\">autocommit<\/code> parameter, it attempts to set the   AUTOCOMMIT state of the requested connection to the corresponding state.   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_bind_param":{"id":"function.db2-bind-param","purpose":"Binds a PHP variable to an SQL statement parameter","prototype":"bool db2_bind_param(resource $stmt, int $parameter-number, string $variable-name [, int $parameter-type = '' [, int $data-type = '' [, int $precision = -1 [, int $scale = '']]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_client_info":{"id":"function.db2-client-info","purpose":"Returns an object with properties that describe the DB2 database client","prototype":"object db2_client_info(resource $connection)","return":"<p class=\"para\">   Returns an object on a successful call. Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.1.1"},"db2_close":{"id":"function.db2-close","purpose":"Closes a database connection","prototype":"bool db2_close(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_column_privileges":{"id":"function.db2-column-privileges","purpose":"Returns a result set listing the columns and associated privileges for a table","prototype":"resource db2_column_privileges(resource $connection [, string $qualifier = '' [, string $schema = '' [, string $table-name = '' [, string $column-name = '']]]])","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the column privileges for columns matching the specified parameters. The   rows are composed of the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>        <td>TABLE_CAT<\/td>        <td>Name of the catalog. The value is NULL if this table does not         have catalogs.<\/td>       <\/tr>       <tr>        <td>TABLE_SCHEM<\/td>        <td>Name of the schema.<\/td>       <\/tr>       <tr>        <td>TABLE_NAME<\/td>        <td>Name of the table or view.<\/td>       <\/tr>       <tr>        <td>COLUMN_NAME<\/td>        <td>Name of the column.<\/td>       <\/tr>       <tr>        <td>GRANTOR<\/td>        <td>Authorization ID of the user who granted the privilege.<\/td>       <\/tr>       <tr>        <td>GRANTEE<\/td>        <td>Authorization ID of the user to whom the privilege was         granted.<\/td>       <\/tr>       <tr>        <td>PRIVILEGE<\/td>        <td>The privilege for the column.<\/td>       <\/tr>       <tr>        <td>IS_GRANTABLE<\/td>        <td>Whether the GRANTEE is permitted to grant this privilege to        other users.<\/td>       <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_columns":{"id":"function.db2-columns","purpose":"Returns a result set listing the columns and associated metadata for a table","prototype":"resource db2_columns(resource $connection [, string $qualifier = '' [, string $schema = '' [, string $table-name = '' [, string $column-name = '']]]])","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the columns matching the specified parameters. The rows are composed of   the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>        <td>TABLE_CAT<\/td>        <td>Name of the catalog. The value is NULL if this table does not         have catalogs.<\/td>       <\/tr>       <tr>        <td>TABLE_SCHEM<\/td>        <td>Name of the schema.<\/td>       <\/tr>       <tr>        <td>TABLE_NAME<\/td>        <td>Name of the table or view.<\/td>       <\/tr>       <tr>        <td>COLUMN_NAME<\/td>        <td>Name of the column.<\/td>       <\/tr>       <tr>        <td>DATA_TYPE<\/td>        <td>The SQL data type for the column represented as an integer value.<\/td>       <\/tr>       <tr>        <td>TYPE_NAME<\/td>        <td>A string representing the data type for the column.<\/td>       <\/tr>       <tr>        <td>COLUMN_SIZE<\/td>        <td>An integer value representing the size of the column.<\/td>       <\/tr>       <tr>        <td>BUFFER_LENGTH<\/td>        <td>         Maximum number of bytes necessary to store data from this column.        <\/td>       <\/tr>       <tr>        <td>DECIMAL_DIGITS<\/td>        <td>         The scale of the column, or <strong><code>NULL<\/code><\/strong> where scale is not applicable.        <\/td>       <\/tr>       <tr>        <td>NUM_PREC_RADIX<\/td>        <td>         An integer value of either <em>10<\/em> (representing         an exact numeric data type), <em>2<\/em> (representing an         approximate numeric data type), or <strong><code>NULL<\/code><\/strong> (representing a data type for         which radix is not applicable).        <\/td>       <\/tr>       <tr>        <td>NULLABLE<\/td>        <td>An integer value representing whether the column is nullable or        not.<\/td>       <\/tr>       <tr>        <td>REMARKS<\/td>        <td>Description of the column.<\/td>       <\/tr>       <tr>        <td>COLUMN_DEF<\/td>        <td>Default value for the column.<\/td>       <\/tr>       <tr>        <td>SQL_DATA_TYPE<\/td>        <td>An integer value representing the size of the column.<\/td>       <\/tr>       <tr>        <td>SQL_DATETIME_SUB<\/td>        <td>         Returns an integer value representing a datetime subtype code,         or <strong><code>NULL<\/code><\/strong> for SQL data types to which this does not apply.        <\/td>       <\/tr>       <tr>        <td>CHAR_OCTET_LENGTH<\/td>        <td>         Maximum length in octets for a character data type column, which         matches COLUMN_SIZE for single-byte character set data, or <strong><code>NULL<\/code><\/strong> for         non-character data types.        <\/td>       <\/tr>       <tr>        <td>ORDINAL_POSITION<\/td>        <td>The 1-indexed position of the column in the table.<\/td>       <\/tr>       <tr>        <td>IS_NULLABLE<\/td>        <td>         A string value where &#039;YES&#039; means that the column is nullable and         &#039;NO&#039; means that the column is not nullable.       <\/td>       <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_commit":{"id":"function.db2-commit","purpose":"Commits a transaction","prototype":"bool db2_commit(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_conn_error":{"id":"function.db2-conn-error","purpose":"Returns a string containing the SQLSTATE returned by the last connection attempt","prototype":"string db2_conn_error([resource $connection = ''])","return":"<p class=\"para\">   Returns the SQLSTATE value resulting from a failed connection attempt.   Returns an empty string if there is no error associated with the last   connection attempt.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_conn_errormsg":{"id":"function.db2-conn-errormsg","purpose":"Returns the last connection error message and SQLCODE value","prototype":"string db2_conn_errormsg([resource $connection = ''])","return":"<p class=\"para\">   Returns a string containing the error message and SQLCODE value resulting   from a failed connection attempt. If there is no error associated with the last   connection attempt, <span class=\"function\">db2_conn_errormsg<\/span> returns an empty   string.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_connect":{"id":"function.db2-connect","purpose":"Returns a connection to a database","prototype":"resource db2_connect(string $database, string $username, string $password [, array $options = ''])","return":"<p class=\"para\">   Returns a connection handle resource if the connection attempt is   successful. If the connection attempt fails, <span class=\"function\">db2_connect<\/span>   returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_cursor_type":{"id":"function.db2-cursor-type","purpose":"Returns the cursor type used by a statement resource","prototype":"int db2_cursor_type(resource $stmt)","return":"<p class=\"para\">   Returns either <em>DB2_FORWARD_ONLY<\/em> if the statement   resource uses a forward-only cursor or <em>DB2_SCROLLABLE<\/em> if   the statement resource uses a scrollable cursor.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_escape_string":{"id":"function.db2-escape-string","purpose":"Used to escape certain characters","prototype":"string db2_escape_string(string $string_literal)","return":"<p class=\"para\">   Returns <code class=\"parameter\">string_literal<\/code> with the special characters    noted above prepended with backslashes.  <\/p>","versions":"PECL ibm_db2 >= 1.6.0"},"db2_exec":{"id":"function.db2-exec","purpose":"Executes an SQL statement directly","prototype":"resource db2_exec(resource $connection, string $statement [, array $options = ''])","return":"<p class=\"para\">   Returns a statement resource if the SQL statement was issued successfully,   or <strong><code>FALSE<\/code><\/strong> if the database failed to execute the SQL statement.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_execute":{"id":"function.db2-execute","purpose":"Executes a prepared SQL statement","prototype":"bool db2_execute(resource $stmt [, array $parameters = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_fetch_array":{"id":"function.db2-fetch-array","purpose":"Returns an array, indexed by column position, representing a row in a result set","prototype":"array db2_fetch_array(resource $stmt [, int $row_number = -1])","return":"<p class=\"para\">   Returns a 0-indexed array with column values indexed by the column position   representing the next or requested row in the result set. Returns <strong><code>FALSE<\/code><\/strong> if   there are no rows left in the result set, or if the row requested by   <code class=\"parameter\">row_number<\/code> does not exist in the result set.  <\/p>","versions":"PECL ibm_db2 >= 1.0.1"},"db2_fetch_assoc":{"id":"function.db2-fetch-assoc","purpose":"Returns an array, indexed by column name, representing a row in a result set","prototype":"array db2_fetch_assoc(resource $stmt [, int $row_number = -1])","return":"<p class=\"para\">   Returns an associative array with column values indexed by the column name   representing the next or requested row in the result set. Returns <strong><code>FALSE<\/code><\/strong> if   there are no rows left in the result set, or if the row requested by   <code class=\"parameter\">row_number<\/code> does not exist in the result set.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_fetch_both":{"id":"function.db2-fetch-both","purpose":"Returns an array, indexed by both column name and position, representing a row in a result set","prototype":"array db2_fetch_both(resource $stmt [, int $row_number = -1])","return":"<p class=\"para\">   Returns an associative array with column values indexed by both the column   name and 0-indexed column number. The array represents the next or   requested row in the result set. Returns <strong><code>FALSE<\/code><\/strong> if there are no rows left   in the result set, or if the row requested by   <code class=\"parameter\">row_number<\/code> does not exist in the result set.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_fetch_object":{"id":"function.db2-fetch-object","purpose":"Returns an object with properties representing columns in the fetched row","prototype":"object db2_fetch_object(resource $stmt [, int $row_number = -1])","return":"<p class=\"para\">   Returns an object representing a single row in the result set. The   properties of the object map to the names of the columns in the result set.  <\/p>  <p class=\"para\">   The IBM DB2, Cloudscape, and Apache Derby database servers typically fold   column names to upper-case, so the object properties will reflect that case.   <\/p>  <p class=\"para\">   If your SELECT statement calls a scalar function to modify the value   of a column, the database servers return the column number as the name of   the column in the result set. If you prefer a more descriptive column name   and object property, you can use the AS clause to assign a name to the   column in the result set.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if no row was retrieved.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_fetch_row":{"id":"function.db2-fetch-row","purpose":"Sets the result set pointer to the next row or requested row","prototype":"bool db2_fetch_row(resource $stmt [, int $row_number = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the requested row exists in the result set. Returns   <strong><code>FALSE<\/code><\/strong> if the requested row does not exist in the result set.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_display_size":{"id":"function.db2-field-display-size","purpose":"Returns the maximum number of bytes required to display a column","prototype":"int db2_field_display_size(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns an integer value with the maximum number of bytes required to   display the specified column. If the column does not exist in the result   set, <span class=\"function\">db2_field_display_size<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_name":{"id":"function.db2-field-name","purpose":"Returns the name of the column in the result set","prototype":"string db2_field_name(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns a string containing the name of the specified column. If the   specified column does not exist in the result   set, <span class=\"function\">db2_field_name<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_num":{"id":"function.db2-field-num","purpose":"Returns the position of the named column in a result set","prototype":"int db2_field_num(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns an integer containing the 0-indexed position of the named column in   the result set. If the specified column does not exist in the result set,   <span class=\"function\">db2_field_num<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_precision":{"id":"function.db2-field-precision","purpose":"Returns the precision of the indicated column in a result set","prototype":"int db2_field_precision(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns an integer containing the precision of the specified column. If the   specified column does not exist in the result set,   <span class=\"function\">db2_field_precision<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_scale":{"id":"function.db2-field-scale","purpose":"Returns the scale of the indicated column in a result set","prototype":"int db2_field_scale(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns an integer containing the scale of the specified column. If the   specified column does not exist in the result set,   <span class=\"function\">db2_field_scale<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_type":{"id":"function.db2-field-type","purpose":"Returns the data type of the indicated column in a result set","prototype":"string db2_field_type(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns a string containing the defined data type of the specified column.   If the specified column does not exist in the result set,   <span class=\"function\">db2_field_type<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_field_width":{"id":"function.db2-field-width","purpose":"Returns the width of the current value of the indicated column in a result set","prototype":"int db2_field_width(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns an integer containing the width of the specified character or   binary data type column in a result set. If the specified column does not   exist in the result set, <span class=\"function\">db2_field_width<\/span> returns   <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_foreign_keys":{"id":"function.db2-foreign-keys","purpose":"Returns a result set listing the foreign keys for a table","prototype":"resource db2_foreign_keys(resource $connection, string $qualifier, string $schema, string $table-name)","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the foreign keys for the specified table. The result set is composed of the   following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>        <td>PKTABLE_CAT<\/td>        <td>         Name of the catalog for the table containing the primary key. The         value is NULL if this table does not have catalogs.        <\/td>       <\/tr>       <tr>        <td>PKTABLE_SCHEM<\/td>        <td>         Name of the schema for the table containing the primary key.        <\/td>       <\/tr>       <tr>        <td>PKTABLE_NAME<\/td>        <td>Name of the table containing the primary key.<\/td>       <\/tr>       <tr>        <td>PKCOLUMN_NAME<\/td>        <td>Name of the column containing the primary key.<\/td>       <\/tr>       <tr>        <td>FKTABLE_CAT<\/td>        <td>         Name of the catalog for the table containing the foreign key. The         value is NULL if this table does not have catalogs.        <\/td>       <\/tr>       <tr>        <td>FKTABLE_SCHEM<\/td>        <td>         Name of the schema for the table containing the foreign key.        <\/td>       <\/tr>       <tr>        <td>FKTABLE_NAME<\/td>        <td>Name of the table containing the foreign key.<\/td>       <\/tr>       <tr>        <td>FKCOLUMN_NAME<\/td>        <td>Name of the column containing the foreign key.<\/td>       <\/tr>       <tr>        <td>KEY_SEQ<\/td>        <td>1-indexed position of the column in the key.<\/td>       <\/tr>       <tr>        <td>UPDATE_RULE<\/td>        <td>         Integer value representing the action applied to the foreign key         when the SQL operation is UPDATE.        <\/td>       <\/tr>       <tr>        <td>DELETE_RULE<\/td>        <td>         Integer value representing the action applied to the foreign key         when the SQL operation is DELETE.        <\/td>       <\/tr>       <tr>        <td>FK_NAME<\/td>        <td>The name of the foreign key.<\/td>       <\/tr>       <tr>        <td>PK_NAME<\/td>        <td>The name of the primary key.<\/td>       <\/tr>       <tr>        <td>DEFERRABILITY<\/td>        <td>         An integer value representing whether the foreign key deferrability is         SQL_INITIALLY_DEFERRED, SQL_INITIALLY_IMMEDIATE, or         SQL_NOT_DEFERRABLE.        <\/td>       <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_free_result":{"id":"function.db2-free-result","purpose":"Frees resources associated with a result set","prototype":"bool db2_free_result(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_free_stmt":{"id":"function.db2-free-stmt","purpose":"Frees resources associated with the indicated statement resource","prototype":"bool db2_free_stmt(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_get_option":{"id":"function.db2-get-option","purpose":"Retrieves an option value for a statement resource or a connection resource","prototype":"string db2_get_option(resource $resource, string $option)","return":"<p class=\"para\">   Returns the current setting of the connection attribute provided on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.6.0"},"db2_last_insert_id":{"id":"function.db2-last-insert-id","purpose":"Returns the auto generated ID of the last insert query that successfully   executed on this connection","prototype":"string db2_last_insert_id(resource $resource)","return":"<p class=\"para\">   Returns the auto generated ID of last insert query that successfully   executed on this connection.  <\/p>","versions":"PECL ibm_db2 >= 1.7.1"},"db2_lob_read":{"id":"function.db2-lob-read","purpose":"Gets a user defined size of LOB files with each invocation","prototype":"string db2_lob_read(resource $stmt, int $colnum, int $length)","return":"<p class=\"para\">   Returns the amount of data the user specifies. Returns   <strong><code>FALSE<\/code><\/strong> if the data cannot be retrieved.  <\/p>","versions":"PECL ibm_db2 >= 1.6.0"},"db2_next_result":{"id":"function.db2-next-result","purpose":"Requests the next result set from a stored procedure","prototype":"resource db2_next_result(resource $stmt)","return":"<p class=\"para\">   Returns a new statement resource containing the next result set if the   stored procedure returned another result set. Returns <strong><code>FALSE<\/code><\/strong> if the stored   procedure did not return another result set.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_num_fields":{"id":"function.db2-num-fields","purpose":"Returns the number of fields contained in a result set","prototype":"int db2_num_fields(resource $stmt)","return":"<p class=\"para\">   Returns an integer value representing the number of fields in the result   set associated with the specified statement resource. Returns <strong><code>FALSE<\/code><\/strong> if   the statement resource is not a valid input value.   <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_num_rows":{"id":"function.db2-num-rows","purpose":"Returns the number of rows affected by an SQL statement","prototype":"boolean db2_num_rows(resource $stmt)","return":"<p class=\"para\">   Returns the number of rows affected by the last SQL statement issued by   the specified statement handle.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_pclose":{"id":"function.db2-pclose","purpose":"Closes a persistent database connection","prototype":"bool db2_pclose(resource $resource)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.8.0"},"db2_pconnect":{"id":"function.db2-pconnect","purpose":"Returns a persistent connection to a database","prototype":"resource db2_pconnect(string $database, string $username, string $password [, array $options = ''])","return":"<p class=\"para\">   Returns a connection handle resource if the connection attempt is   successful. <span class=\"function\">db2_pconnect<\/span> tries to reuse an existing   connection resource that exactly matches the   <code class=\"parameter\">database<\/code>, <code class=\"parameter\">username<\/code>, and   <code class=\"parameter\">password<\/code> parameters. If the connection attempt fails,   <span class=\"function\">db2_pconnect<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_prepare":{"id":"function.db2-prepare","purpose":"Prepares an SQL statement to be executed","prototype":"resource db2_prepare(resource $connection, string $statement [, array $options = ''])","return":"<p class=\"para\">   Returns a statement resource if the SQL statement was successfully parsed and   prepared by the database server. Returns <strong><code>FALSE<\/code><\/strong> if the database server   returned an error. You can determine which error was returned by calling   <span class=\"function\">db2_stmt_error<\/span> or <span class=\"function\">db2_stmt_errormsg<\/span>.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_primary_keys":{"id":"function.db2-primary-keys","purpose":"Returns a result set listing primary keys for a table","prototype":"resource db2_primary_keys(resource $connection, string $qualifier, string $schema, string $table-name)","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the primary keys for the specified table. The result set is composed of the   following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>        <td>TABLE_CAT<\/td>        <td>         Name of the catalog for the table containing the primary key. The         value is NULL if this table does not have catalogs.        <\/td>       <\/tr>       <tr>        <td>TABLE_SCHEM<\/td>        <td>         Name of the schema for the table containing the primary key.        <\/td>       <\/tr>       <tr>        <td>TABLE_NAME<\/td>        <td>Name of the table containing the primary key.<\/td>       <\/tr>       <tr>        <td>COLUMN_NAME<\/td>        <td>Name of the column containing the primary key.<\/td>       <\/tr>       <tr>        <td>KEY_SEQ<\/td>        <td>1-indexed position of the column in the key.<\/td>       <\/tr>       <tr>        <td>PK_NAME<\/td>        <td>The name of the primary key.<\/td>       <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_procedure_columns":{"id":"function.db2-procedure-columns","purpose":"Returns a result set listing stored procedure parameters","prototype":"resource db2_procedure_columns(resource $connection, string $qualifier, string $schema, string $procedure, string $parameter)","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the parameters for the stored procedures matching the specified parameters.   The rows are composed of the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>        <td>PROCEDURE_CAT<\/td>        <td>The catalog that contains the procedure. The value is <strong><code>NULL<\/code><\/strong> if        this table does not have catalogs.<\/td>       <\/tr>       <tr>        <td>PROCEDURE_SCHEM<\/td>        <td>Name of the schema that contains the stored procedure.<\/td>       <\/tr>       <tr>        <td>PROCEDURE_NAME<\/td>        <td>Name of the procedure.<\/td>       <\/tr>       <tr>        <td>COLUMN_NAME<\/td>        <td>Name of the parameter.<\/td>       <\/tr>       <tr>        <td>COLUMN_TYPE<\/td>        <td>         <p class=\"para\">          An integer value representing the type of the parameter:          <table class=\"doctable informaltable\">                       <thead>             <tr>              <th>Return value<\/th>              <th>Parameter type<\/th>             <\/tr>            <\/thead>            <tbody class=\"tbody\">             <tr>              <td>1 (SQL_PARAM_INPUT)<\/td>              <td>Input (IN) parameter.<\/td>             <\/tr>             <tr>              <td>2 (SQL_PARAM_INPUT_OUTPUT)<\/td>              <td>Input\/output (INOUT) parameter.<\/td>             <\/tr>             <tr>              <td>3 (SQL_PARAM_OUTPUT)<\/td>              <td>Output (OUT) parameter.<\/td>             <\/tr>            <\/tbody>                     <\/table>         <\/p>        <\/td>       <\/tr>       <tr>        <td>DATA_TYPE<\/td>        <td>The SQL data type for the parameter represented as an integer         value.<\/td>       <\/tr>       <tr>        <td>TYPE_NAME<\/td>        <td>A string representing the data type for the parameter.<\/td>       <\/tr>       <tr>        <td>COLUMN_SIZE<\/td>        <td>An integer value representing the size of the parameter.<\/td>       <\/tr>       <tr>        <td>BUFFER_LENGTH<\/td>        <td>         Maximum number of bytes necessary to store data for this parameter.        <\/td>       <\/tr>       <tr>        <td>DECIMAL_DIGITS<\/td>        <td>         The scale of the parameter, or <strong><code>NULL<\/code><\/strong> where scale is not applicable.        <\/td>       <\/tr>       <tr>        <td>NUM_PREC_RADIX<\/td>        <td>         An integer value of either <em>10<\/em> (representing         an exact numeric data type), <em>2<\/em> (representing an         approximate numeric data type), or <strong><code>NULL<\/code><\/strong> (representing a data type for         which radix is not applicable).        <\/td>       <\/tr>       <tr>        <td>NULLABLE<\/td>        <td>An integer value representing whether the parameter is nullable         or not.<\/td>       <\/tr>       <tr>        <td>REMARKS<\/td>        <td>Description of the parameter.<\/td>       <\/tr>       <tr>        <td>COLUMN_DEF<\/td>        <td>Default value for the parameter.<\/td>       <\/tr>       <tr>        <td>SQL_DATA_TYPE<\/td>        <td>An integer value representing the size of the parameter.<\/td>       <\/tr>       <tr>        <td>SQL_DATETIME_SUB<\/td>        <td>         Returns an integer value representing a datetime subtype code,         or <strong><code>NULL<\/code><\/strong> for SQL data types to which this does not apply.        <\/td>       <\/tr>       <tr>        <td>CHAR_OCTET_LENGTH<\/td>        <td>         Maximum length in octets for a character data type parameter, which         matches COLUMN_SIZE for single-byte character set data, or <strong><code>NULL<\/code><\/strong> for         non-character data types.        <\/td>       <\/tr>       <tr>        <td>ORDINAL_POSITION<\/td>        <td>The 1-indexed position of the parameter in the CALL         statement.<\/td>       <\/tr>       <tr>        <td>IS_NULLABLE<\/td>        <td>         A string value where &#039;YES&#039; means that the parameter accepts or         returns <strong><code>NULL<\/code><\/strong> values and &#039;NO&#039; means that the parameter does not         accept or return <strong><code>NULL<\/code><\/strong> values.       <\/td>       <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_procedures":{"id":"function.db2-procedures","purpose":"Returns a result set listing the stored procedures registered in a database","prototype":"resource db2_procedures(resource $connection, string $qualifier, string $schema, string $procedure)","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the stored procedures matching the specified parameters. The rows are   composed of the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>        <td>PROCEDURE_CAT<\/td>        <td>The catalog that contains the procedure. The value is <strong><code>NULL<\/code><\/strong> if        this table does not have catalogs.<\/td>       <\/tr>       <tr>        <td>PROCEDURE_SCHEM<\/td>        <td>Name of the schema that contains the stored procedure.<\/td>       <\/tr>       <tr>        <td>PROCEDURE_NAME<\/td>        <td>Name of the procedure.<\/td>       <\/tr>       <tr>        <td>NUM_INPUT_PARAMS<\/td>        <td>Number of input (IN) parameters for the stored procedure.<\/td>       <\/tr>       <tr>        <td>NUM_OUTPUT_PARAMS<\/td>        <td>Number of output (OUT) parameters for the stored procedure.<\/td>       <\/tr>       <tr>        <td>NUM_RESULT_SETS<\/td>        <td>Number of result sets returned by the stored procedure.<\/td>       <\/tr>       <tr>        <td>REMARKS<\/td>        <td>Any comments about the stored procedure.<\/td>       <\/tr>       <tr>        <td>PROCEDURE_TYPE<\/td>        <td>Always returns <em>1<\/em>, indicating that the stored        procedure does not return a return value.<\/td>       <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_result":{"id":"function.db2-result","purpose":"Returns a single column from a row in the result set","prototype":"mixed db2_result(resource $stmt, mixed $column)","return":"<p class=\"para\">   Returns the value of the requested field if the field exists in the result   set. Returns NULL if the field does not exist, and issues a warning.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_rollback":{"id":"function.db2-rollback","purpose":"Rolls back a transaction","prototype":"bool db2_rollback(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_server_info":{"id":"function.db2-server-info","purpose":"Returns an object with properties that describe the DB2 database server","prototype":"object db2_server_info(resource $connection)","return":"<p class=\"para\">   Returns an object on a successful call. Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ibm_db2 >= 1.1.1"},"db2_set_option":{"id":"function.db2-set-option","purpose":"Set options for connection or statement resources","prototype":"bool db2_set_option(resource $resource, array $options, int $type)","return":"<p class=\"para\">     Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.    <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_special_columns":{"id":"function.db2-special-columns","purpose":"Returns a result set listing the unique row identifier columns for a table","prototype":"resource db2_special_columns(resource $connection, string $qualifier, string $schema, string $table_name, int $scope)","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows with unique   row identifier information for a table. The rows are composed of the   following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>SCOPE<\/td>       <td>        <p class=\"para\">         <table class=\"doctable informaltable\">                     <thead>            <tr>             <th>Integer value<\/th>             <th>SQL constant<\/th>             <th>Description<\/th>            <\/tr>           <\/thead>           <tbody class=\"tbody\">            <tr>             <td>0<\/td>             <td>SQL_SCOPE_CURROW<\/td>             <td>Row identifier is valid only while the cursor is positioned             on the row.<\/td>            <\/tr>            <tr>             <td>1<\/td>             <td>SQL_SCOPE_TRANSACTION<\/td>             <td>Row identifier is valid for the duration of the              transaction.<\/td>            <\/tr>            <tr>             <td>2<\/td>             <td>SQL_SCOPE_SESSION<\/td>             <td>Row identifier is valid for the duration of the              connection.<\/td>            <\/tr>           <\/tbody>                   <\/table>        <\/p>       <\/td>      <\/tr>      <tr>       <td>COLUMN_NAME<\/td>       <td>Name of the unique column.<\/td>      <\/tr>      <tr>       <td>DATA_TYPE<\/td>       <td>SQL data type for the column.<\/td>      <\/tr>      <tr>       <td>TYPE_NAME<\/td>       <td>Character string representation of the SQL data type for the       column.<\/td>      <\/tr>      <tr>       <td>COLUMN_SIZE<\/td>       <td>An integer value representing the size of the column.<\/td>      <\/tr>      <tr>       <td>BUFFER_LENGTH<\/td>       <td>        Maximum number of bytes necessary to store data from this column.       <\/td>      <\/tr>      <tr>       <td>DECIMAL_DIGITS<\/td>       <td>        The scale of the column, or <strong><code>NULL<\/code><\/strong> where scale is not applicable.       <\/td>      <\/tr>      <tr>       <td>NUM_PREC_RADIX<\/td>       <td>        An integer value of either <em>10<\/em> (representing        an exact numeric data type), <em>2<\/em> (representing an        approximate numeric data type), or <strong><code>NULL<\/code><\/strong> (representing a data type for        which radix is not applicable).       <\/td>      <\/tr>      <tr>       <td>PSEUDO_COLUMN<\/td>       <td>Always returns 1.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_statistics":{"id":"function.db2-statistics","purpose":"Returns a result set listing the index and statistics for a table","prototype":"resource db2_statistics(resource $connection, string $qualifier, string $schema, string $table-name, bool $unique)","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the statistics and indexes for the base tables matching the specified   parameters. The rows are composed of the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>TABLE_CAT<\/td>       <td>The catalog that contains the table. The value is <strong><code>NULL<\/code><\/strong> if       this table does not have catalogs.<\/td>      <\/tr>      <tr>       <td>TABLE_SCHEM<\/td>       <td>Name of the schema that contains the table.<\/td>      <\/tr>      <tr>       <td>TABLE_NAME<\/td>       <td>Name of the table.<\/td>      <\/tr>      <tr>       <td>NON_UNIQUE<\/td>       <td>        <p class=\"para\">         An integer value representing whether the index prohibits unique         values, or whether the row represents statistics on the table itself:         <table class=\"doctable informaltable\">                     <thead>            <tr>             <th>Return value<\/th>             <th>Parameter type<\/th>            <\/tr>           <\/thead>           <tbody class=\"tbody\">            <tr>             <td>0 (SQL_FALSE)<\/td>             <td>The index allows duplicate values.<\/td>            <\/tr>            <tr>             <td>1 (SQL_TRUE)<\/td>             <td>The index values must be unique.<\/td>            <\/tr>            <tr>             <td><strong><code>NULL<\/code><\/strong><\/td>             <td>This row is statistics information for the table itself.<\/td>            <\/tr>           <\/tbody>                   <\/table>        <\/p>       <\/td>      <\/tr>      <tr>       <td>INDEX_QUALIFIER<\/td>       <td>A string value representing the qualifier that would have to be       prepended to INDEX_NAME to fully qualify the index.<\/td>      <\/tr>      <tr>       <td>INDEX_NAME<\/td>       <td>A string representing the name of the index.<\/td>      <\/tr>      <tr>       <td>TYPE<\/td>       <td>        <p class=\"para\">         An integer value representing the type of information contained in         this row of the result set:         <table class=\"doctable informaltable\">                     <thead>            <tr>             <th>Return value<\/th>             <th>Parameter type<\/th>            <\/tr>           <\/thead>           <tbody class=\"tbody\">            <tr>             <td>0 (SQL_TABLE_STAT)<\/td>             <td>The row contains statistics about the table itself.<\/td>            <\/tr>            <tr>             <td>1 (SQL_INDEX_CLUSTERED)<\/td>             <td>The row contains information about a clustered index.<\/td>            <\/tr>            <tr>             <td>2 (SQL_INDEX_HASH)<\/td>             <td>The row contains information about a hashed index.<\/td>            <\/tr>            <tr>             <td>3 (SQL_INDEX_OTHER)<\/td>             <td>The row contains information about a type of index that             is neither clustered nor hashed.<\/td>            <\/tr>           <\/tbody>                   <\/table>        <\/p>       <\/td>      <\/tr>      <tr>       <td>ORDINAL_POSITION<\/td>       <td>The 1-indexed position of the column in the index. <strong><code>NULL<\/code><\/strong> if        the row contains statistics information about the table itself.<\/td>      <\/tr>      <tr>       <td>COLUMN_NAME<\/td>       <td>The name of the column in the index. <strong><code>NULL<\/code><\/strong> if the row        contains statistics information about the table itself.<\/td>      <\/tr>      <tr>       <td>ASC_OR_DESC<\/td>       <td>        <em>A<\/em> if the column is sorted in ascending order,        <em>D<\/em> if the column is sorted in descending order,        <strong><code>NULL<\/code><\/strong> if the row contains statistics information about the table        itself.       <\/td>      <\/tr>      <tr>       <td>CARDINALITY<\/td>       <td>        <p class=\"para\">         If the row contains information about an index, this column contains         an integer value representing the number of unique values in the         index.        <\/p>        <p class=\"para\">         If the row contains information about the table itself, this column         contains an integer value representing the number of rows in the         table.        <\/p>       <\/td>      <\/tr>      <tr>       <td>PAGES<\/td>       <td>        <p class=\"para\">         If the row contains information about an index, this column contains         an integer value representing the number of pages used to store the         index.        <\/p>        <p class=\"para\">         If the row contains information about the table itself, this column         contains an integer value representing the number of pages used to         store the table.        <\/p>       <\/td>      <\/tr>      <tr>       <td>FILTER_CONDITION<\/td>       <td>Always returns <strong><code>NULL<\/code><\/strong>.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_stmt_error":{"id":"function.db2-stmt-error","purpose":"Returns a string containing the SQLSTATE returned by an SQL statement","prototype":"string db2_stmt_error([resource $stmt = ''])","return":"<p class=\"para\">   Returns a string containing an SQLSTATE value.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_stmt_errormsg":{"id":"function.db2-stmt-errormsg","purpose":"Returns a string containing the last SQL statement error message","prototype":"string db2_stmt_errormsg([resource $stmt = ''])","return":"<p class=\"para\">   Returns a string containing the error message and SQLCODE value for the   last error that occurred issuing an SQL statement.  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_table_privileges":{"id":"function.db2-table-privileges","purpose":"Returns a result set listing the tables and associated privileges in a database","prototype":"resource db2_table_privileges(resource $connection [, string $qualifier = '' [, string $schema = '' [, string $table_name = '']]])","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the privileges for the tables that match the specified parameters. The rows   are composed of the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>TABLE_CAT<\/td>       <td>The catalog that contains the table. The value is <strong><code>NULL<\/code><\/strong> if       this table does not have catalogs.<\/td>      <\/tr>      <tr>       <td>TABLE_SCHEM<\/td>       <td>Name of the schema that contains the table.<\/td>      <\/tr>      <tr>       <td>TABLE_NAME<\/td>       <td>Name of the table.<\/td>      <\/tr>      <tr>       <td>GRANTOR<\/td>       <td>Authorization ID of the user who granted the privilege.<\/td>      <\/tr>      <tr>       <td>GRANTEE<\/td>       <td>Authorization ID of the user to whom the privilege was        granted.<\/td>      <\/tr>      <tr>       <td>PRIVILEGE<\/td>       <td>        The privilege that has been granted. This can be one of ALTER,        CONTROL, DELETE, INDEX, INSERT, REFERENCES, SELECT, or UPDATE.       <\/td>      <\/tr>      <tr>       <td>IS_GRANTABLE<\/td>       <td>        A string value of &quot;YES&quot; or &quot;NO&quot; indicating whether the grantee        can grant the privilege to other users.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"db2_tables":{"id":"function.db2-tables","purpose":"Returns a result set listing the tables and associated metadata in a database","prototype":"resource db2_tables(resource $connection [, string $qualifier = '' [, string $schema = '' [, string $table-name = '' [, string $table-type = '']]]])","return":"<p class=\"para\">   Returns a statement resource with a result set containing rows describing   the tables that match the specified parameters. The rows are composed of   the following columns:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Column name<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>TABLE_CAT<\/td>       <td>The catalog that contains the table. The value is <strong><code>NULL<\/code><\/strong> if       this table does not have catalogs.<\/td>      <\/tr>      <tr>       <td>TABLE_SCHEM<\/td>       <td>Name of the schema that contains the table.<\/td>      <\/tr>      <tr>       <td>TABLE_NAME<\/td>       <td>Name of the table.<\/td>      <\/tr>      <tr>       <td>TABLE_TYPE<\/td>       <td>Table type identifier for the table.<\/td>      <\/tr>      <tr>       <td>REMARKS<\/td>       <td>Description of the table.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ibm_db2 >= 1.0.0"},"ifx_affected_rows":{"id":"function.ifx-affected-rows","purpose":"Get number of rows affected by a query","prototype":"int ifx_affected_rows(resource $result_id)","return":"<p class=\"para\">   Returns the number of rows as an integer.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_blobinfile_mode":{"id":"function.ifx-blobinfile-mode","purpose":"Set the default blob mode for all select queries","prototype":"bool ifx_blobinfile_mode(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_byteasvarchar":{"id":"function.ifx-byteasvarchar","purpose":"Set the default byte mode","prototype":"bool ifx_byteasvarchar(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_close":{"id":"function.ifx-close","purpose":"Close Informix connection","prototype":"bool ifx_close([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_connect":{"id":"function.ifx-connect","purpose":"Open Informix server connection","prototype":"resource ifx_connect([string $database = '' [, string $userid = '' [, string $password = '']]])","return":"<p class=\"para\">   Returns a connection identifier on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_copy_blob":{"id":"function.ifx-copy-blob","purpose":"Duplicates the given blob object","prototype":"int ifx_copy_blob(int $bid)","return":"<p class=\"para\">   Returns the new blob object-id, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_create_blob":{"id":"function.ifx-create-blob","purpose":"Creates an blob object","prototype":"int ifx_create_blob(int $type, int $mode, string $param)","return":"<p class=\"para\">   Returns the new BLOB object-id, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_create_char":{"id":"function.ifx-create-char","purpose":"Creates an char object","prototype":"int ifx_create_char(string $param)","return":"<p class=\"para\">   Returns the new char object id, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_do":{"id":"function.ifx-do","purpose":"Execute a previously prepared SQL-statement","prototype":"bool ifx_do(resource $result_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_error":{"id":"function.ifx-error","purpose":"Returns error code of last Informix call","prototype":"string ifx_error([resource $link_identifier = ''])","return":"<p class=\"para\">   The Informix error codes (SQLSTATE &amp; SQLCODE) formatted as   <em>x [SQLSTATE = aa bbb SQLCODE=cccc]<\/em>.  <\/p>  <p class=\"para\">   where x = space : no error  <\/p>  <p class=\"para\">   E : error  <\/p>  <p class=\"para\">   N : no more data  <\/p>  <p class=\"para\">   W : warning  <\/p>  <p class=\"para\">   ? : undefined  <\/p>  <p class=\"para\">   If the &quot;x&quot; character is anything other than space, SQLSTATE and   SQLCODE describe the error in more detail.  <\/p>  <p class=\"para\">   See the Informix manual for the description of SQLSTATE and   SQLCODE  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_errormsg":{"id":"function.ifx-errormsg","purpose":"Returns error message of last Informix call","prototype":"string ifx_errormsg([int $errorcode = ''])","return":"<p class=\"para\">   Return the error message, as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_fetch_row":{"id":"function.ifx-fetch-row","purpose":"Get row as an associative array","prototype":"array ifx_fetch_row(resource $result_id [, mixed $position = ''])","return":"<p class=\"para\">   Returns an associative array that corresponds to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>  <p class=\"para\">   Blob columns are returned as integer blob id values for use in   <span class=\"function\">ifx_get_blob<\/span> unless you have used   ifx_textasvarchar(1) or ifx_byteasvarchar(1), in which case blobs   are returned as string values.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_fieldproperties":{"id":"function.ifx-fieldproperties","purpose":"List of SQL fieldproperties","prototype":"array ifx_fieldproperties(resource $result_id)","return":"<p class=\"para\">   Returns an associative array with fieldnames as key and the SQL    fieldproperties as data for a query with <code class=\"parameter\">result_id<\/code>.   Returns <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_fieldtypes":{"id":"function.ifx-fieldtypes","purpose":"List of Informix SQL fields","prototype":"array ifx_fieldtypes(resource $result_id)","return":"<p class=\"para\">   Returns an associative array with fieldnames as key and the SQL   fieldtypes as data for query with   <code class=\"parameter\">result_id<\/code>.  Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_free_blob":{"id":"function.ifx-free-blob","purpose":"Deletes the blob object","prototype":"bool ifx_free_blob(int $bid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_free_char":{"id":"function.ifx-free-char","purpose":"Deletes the char object","prototype":"bool ifx_free_char(int $bid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_free_result":{"id":"function.ifx-free-result","purpose":"Releases resources for the query","prototype":"bool ifx_free_result(resource $result_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_get_blob":{"id":"function.ifx-get-blob","purpose":"Return the content of a blob object","prototype":"string ifx_get_blob(int $bid)","return":"<p class=\"para\">   The contents of the BLOB as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_get_char":{"id":"function.ifx-get-char","purpose":"Return the content of the char object","prototype":"string ifx_get_char(int $bid)","return":"<p class=\"para\">   Returns the contents as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_getsqlca":{"id":"function.ifx-getsqlca","purpose":"Get the contents of sqlca.sqlerrd[0..5] after a query","prototype":"array ifx_getsqlca(resource $result_id)","return":"<p class=\"para\">   Returns an associative array with the following entries:   <em>sqlerrd0<\/em>, <em>sqlerrd1<\/em>,   <em>sqlerrd2<\/em>, <em>sqlerrd3<\/em>,   <em>sqlerrd4<\/em> and <em>sqlerrd5<\/em>.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_htmltbl_result":{"id":"function.ifx-htmltbl-result","purpose":"Formats all rows of a query into a HTML table","prototype":"int ifx_htmltbl_result(resource $result_id [, string $html_table_options = ''])","return":"<p class=\"para\">   Returns the number of fetched rows, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_nullformat":{"id":"function.ifx-nullformat","purpose":"Sets the default return value on a fetch row","prototype":"bool ifx_nullformat(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_num_fields":{"id":"function.ifx-num-fields","purpose":"Returns the number of columns in the query","prototype":"int ifx_num_fields(resource $result_id)","return":"<p class=\"para\">   Returns the number of columns in query for   <code class=\"parameter\">result_id<\/code>, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_num_rows":{"id":"function.ifx-num-rows","purpose":"Count the rows already fetched from a query","prototype":"int ifx_num_rows(resource $result_id)","return":"<p class=\"para\">   Returns the number of fetched rows or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_pconnect":{"id":"function.ifx-pconnect","purpose":"Open persistent Informix connection","prototype":"resource ifx_pconnect([string $database = '' [, string $userid = '' [, string $password = '']]])","return":"<p class=\"para\">   Returns: valid Informix persistent link identifier on success, or <strong><code>FALSE<\/code><\/strong>   on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_prepare":{"id":"function.ifx-prepare","purpose":"Prepare an SQL-statement for execution","prototype":"resource ifx_prepare(string $query, resource $link_identifier [, int $cursor_def = '', mixed $blobidarray])","return":"<p class=\"para\">   Returns a valid result identifier for use by <span class=\"function\">ifx_do<\/span>,   or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_query":{"id":"function.ifx-query","purpose":"Send Informix query","prototype":"resource ifx_query(string $query, resource $link_identifier [, int $cursor_type = '' [, mixed $blobidarray = '']])","return":"<p class=\"para\">   Returns valid Informix result identifier on success, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_textasvarchar":{"id":"function.ifx-textasvarchar","purpose":"Set the default text mode","prototype":"bool ifx_textasvarchar(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_update_blob":{"id":"function.ifx-update-blob","purpose":"Updates the content of the blob object","prototype":"bool ifx_update_blob(int $bid, string $content)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifx_update_char":{"id":"function.ifx-update-char","purpose":"Updates the content of the char object","prototype":"bool ifx_update_char(int $bid, string $content)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_close_slob":{"id":"function.ifxus-close-slob","purpose":"Deletes the slob object","prototype":"bool ifxus_close_slob(int $bid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_create_slob":{"id":"function.ifxus-create-slob","purpose":"Creates an slob object and opens it","prototype":"int ifxus_create_slob(int $mode)","return":"<p class=\"para\">   Return the new slob object-id, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_free_slob":{"id":"function.ifxus-free-slob","purpose":"Deletes the slob object","prototype":"bool ifxus_free_slob(int $bid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_open_slob":{"id":"function.ifxus-open-slob","purpose":"Opens an slob object","prototype":"int ifxus_open_slob(int $bid, int $mode)","return":"<p class=\"para\">   Returns the new slob object-id, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_read_slob":{"id":"function.ifxus-read-slob","purpose":"Reads nbytes of the slob object","prototype":"string ifxus_read_slob(int $bid, int $nbytes)","return":"<p class=\"para\">   Returns the slob contents as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_seek_slob":{"id":"function.ifxus-seek-slob","purpose":"Sets the current file or seek position","prototype":"int ifxus_seek_slob(int $bid, int $mode, int $offset)","return":"<p class=\"para\">   Returns the seek position as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_tell_slob":{"id":"function.ifxus-tell-slob","purpose":"Returns the current file or seek position","prototype":"int ifxus_tell_slob(int $bid)","return":"<p class=\"para\">   Returns the seek position as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ifxus_write_slob":{"id":"function.ifxus-write-slob","purpose":"Writes a string into the slob object","prototype":"int ifxus_write_slob(int $bid, string $content)","return":"<p class=\"para\">   Returns the bytes written as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.1"},"ingres_autocommit_state":{"id":"function.ingres-autocommit-state","purpose":"Test if the connection is using autocommit","prototype":"bool ingres_autocommit_state(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if autocommit is enabled or <strong><code>FALSE<\/code><\/strong> when autocommit is   disabled  <\/p>","versions":"PECL ingres >= 2.0.0"},"ingres_autocommit":{"id":"function.ingres-autocommit","purpose":"Switch autocommit on or off","prototype":"bool ingres_autocommit(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_charset":{"id":"function.ingres-charset","purpose":"Returns the installation character set","prototype":"string ingres_charset(resource $link)","return":"<p class=\"para\">   Returns a string with the value for II_CHARSETxx or returns NULL if the value   could not be determined.  <\/p>","versions":"PECL ingres >= 2.1.0"},"ingres_close":{"id":"function.ingres-close","purpose":"Close an Ingres database connection","prototype":"bool ingres_close(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_commit":{"id":"function.ingres-commit","purpose":"Commit a transaction","prototype":"bool ingres_commit(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_connect":{"id":"function.ingres-connect","purpose":"Open a connection to an Ingres database","prototype":"resource ingres_connect([string $database = '' [, string $username = '' [, string $password = '' [, array $options = '']]]])","return":"<p class=\"para\">   Returns a Ingres link resource on success or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_cursor":{"id":"function.ingres-cursor","purpose":"Get a cursor name for a given result resource","prototype":"string ingres_cursor(resource $result)","return":"<p class=\"para\">   Returns a string containing the active cursor name. If no cursor is   active then NULL is returned.  <\/p>","versions":"PECL ingres >= 1.1.0"},"ingres_errno":{"id":"function.ingres-errno","purpose":"Get the last Ingres error number generated","prototype":"int ingres_errno([resource $link = ''])","return":"<p class=\"para\">   Returns an integer containing the last error number. If no error was   reported, 0 is returned.  <\/p>","versions":"PECL ingres >= 1.1.0"},"ingres_error":{"id":"function.ingres-error","purpose":"Get a meaningful error message for the last error generated","prototype":"string ingres_error([resource $link = ''])","return":"<p class=\"para\">   Returns a string containing the last error, or NULL if no error has   occurred.  <\/p>","versions":"PECL ingres >= 1.1.0"},"ingres_errsqlstate":{"id":"function.ingres-errsqlstate","purpose":"Get the last SQLSTATE error code generated","prototype":"string ingres_errsqlstate([resource $link = ''])","return":"<p class=\"para\">   Returns a string containing the last SQLSTATE, or NULL if no error has   occurred.  <\/p>","versions":"PECL ingres >= 1.1.0"},"ingres_escape_string":{"id":"function.ingres-escape-string","purpose":"Escape special characters for use in a query","prototype":"string ingres_escape_string(resource $link, string $source_string)","return":"<p class=\"para\">   Returns a string containing the escaped data.  <\/p>","versions":"PECL ingres >= 2.1.0"},"ingres_execute":{"id":"function.ingres-execute","purpose":"Execute a prepared query","prototype":"bool ingres_execute(resource $result [, array $params = '' [, string $types = '']])","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ingres >= 1.1.0"},"ingres_fetch_array":{"id":"function.ingres-fetch-array","purpose":"Fetch a row of result into an array","prototype":"array ingres_fetch_array(resource $result [, int $result_type = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row,   or <strong><code>FALSE<\/code><\/strong> if there are no more rows  <\/p>","versions":"PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_fetch_assoc":{"id":"function.ingres-fetch-assoc","purpose":"Fetch a row of result into an associative array","prototype":"array ingres_fetch_assoc(resource $result)","return":"<p class=\"para\">   Returns an associative array that corresponds to the fetched row,   or <strong><code>FALSE<\/code><\/strong> if there are no more rows  <\/p>","versions":"PECL ingres >= 2.2.2"},"ingres_fetch_object":{"id":"function.ingres-fetch-object","purpose":"Fetch a row of result into an object","prototype":"object ingres_fetch_object(resource $result [, int $result_type = ''])","return":"<p class=\"para\">   Returns an object that corresponds to the fetched row,   or <strong><code>FALSE<\/code><\/strong> if there are no more rows  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_fetch_proc_return":{"id":"function.ingres-fetch-proc-return","purpose":"Get the return value from a procedure call","prototype":"int ingres_fetch_proc_return(resource $result)","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span> if there is a return value otherwise it will   return <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL ingres >= 1.4.0"},"ingres_fetch_row":{"id":"function.ingres-fetch-row","purpose":"Fetch a row of result into an enumerated array","prototype":"array ingres_fetch_row(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row,   or <strong><code>FALSE<\/code><\/strong> if there are no more rows  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_field_length":{"id":"function.ingres-field-length","purpose":"Get the length of a field","prototype":"int ingres_field_length(resource $result, int $index)","return":"<p class=\"para\">   Returns the length of a field.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_field_name":{"id":"function.ingres-field-name","purpose":"Get the name of a field in a query result","prototype":"string ingres_field_name(resource $result, int $index)","return":"<p class=\"para\">   Returns the name of a field   in a query result or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_field_nullable":{"id":"function.ingres-field-nullable","purpose":"Test if a field is nullable","prototype":"bool ingres_field_nullable(resource $result, int $index)","return":"<p class=\"para\">   <span class=\"function\">ingres_field_nullable<\/span> returns <strong><code>TRUE<\/code><\/strong> if the   field can be set to the <strong><code>NULL<\/code><\/strong> value and <strong><code>FALSE<\/code><\/strong> if it cannot  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_field_precision":{"id":"function.ingres-field-precision","purpose":"Get the precision of a field","prototype":"int ingres_field_precision(resource $result, int $index)","return":"<p class=\"para\">   Returns the field precision as an integer  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_field_scale":{"id":"function.ingres-field-scale","purpose":"Get the scale of a field","prototype":"int ingres_field_scale(resource $result, int $index)","return":"<p class=\"para\">   Returns the scale of the field, as an integer  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_field_type":{"id":"function.ingres-field-type","purpose":"Get the type of a field in a query result","prototype":"string ingres_field_type(resource $result, int $index)","return":"<p class=\"para\">   <span class=\"function\">ingres_field_type<\/span> returns the type of a   field in a query result or <strong><code>FALSE<\/code><\/strong> on failure.  Examples of   types returned are <em>IIAPI_BYTE_TYPE<\/em>,   <em>IIAPI_CHA_TYPE<\/em>, <em>IIAPI_DTE_TYPE<\/em>,   <em>IIAPI_FLT_TYPE<\/em>, <em>IIAPI_INT_TYPE<\/em>,   <em>IIAPI_VCH_TYPE<\/em>. Some of these types can map to more   than one SQL type depending on the length of the field (see   <span class=\"function\">ingres_field_length<\/span>). For example   IIAPI_FLT_TYPE can be a float4 or a float8. For detailed   information, see the Ingres <em>OpenAPI User Guide<\/em>, Appendix    &quot;Data Types&quot; in the Ingres documentation.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_free_result":{"id":"function.ingres-free-result","purpose":"Free the resources associated with a result identifier","prototype":"bool ingres_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PECL ingres >= 2.0.0"},"ingres_next_error":{"id":"function.ingres-next-error","purpose":"Get the next Ingres error","prototype":"bool ingres_next_error([resource $link = ''])","return":"<p class=\"para\">   <span class=\"function\">ingres_next_error<\/span> returns <strong><code>TRUE<\/code><\/strong> if there is another   error to retrieve or <strong><code>FALSE<\/code><\/strong> when there are no more errors  <\/p>","versions":"PECL ingres >= 2.0.0"},"ingres_num_fields":{"id":"function.ingres-num-fields","purpose":"Get the number of fields returned by the last query","prototype":"int ingres_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_num_rows":{"id":"function.ingres-num-rows","purpose":"Get the number of rows affected or returned by a query","prototype":"int ingres_num_rows(resource $result)","return":"<p class=\"para\">   For delete, insert, or update queries,   <span class=\"function\">ingres_num_rows<\/span> returns the number of rows   affected by the query. For other queries,   <span class=\"function\">ingres_num_rows<\/span> returns the number of rows   in the query&#039;s result.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_pconnect":{"id":"function.ingres-pconnect","purpose":"Open a persistent connection to an Ingres database","prototype":"resource ingres_pconnect([string $database = '' [, string $username = '' [, string $password = '' [, array $options = '']]]])","return":"<p class=\"para\">   Returns an Ingres link resource on success or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_prepare":{"id":"function.ingres-prepare","purpose":"Prepare a query for later execution","prototype":"mixed ingres_prepare(resource $link, string $query)","return":"<p class=\"para\">   <span class=\"function\">ingres_prepare<\/span> returns a query result identifier that   is used with <span class=\"function\">ingres_execute<\/span> to execute the query. To see    if an error occurred, use <span class=\"function\">ingres_errno<\/span>,    <span class=\"function\">ingres_error<\/span>, or    <span class=\"function\">ingres_errsqlstate<\/span>.  <\/p>","versions":"PECL ingres >= 1.1.0"},"ingres_query":{"id":"function.ingres-query","purpose":"Send an SQL query to Ingres","prototype":"mixed ingres_query(resource $link, string $query [, array $params = '' [, string $types = '']])","return":"<p class=\"para\">   <span class=\"function\">ingres_query<\/span> returns a query result identifier on   success else it returns <strong><code>FALSE<\/code><\/strong>. To see if an error   occurred use <span class=\"function\">ingres_errno<\/span>,    <span class=\"function\">ingres_error<\/span> or    <span class=\"function\">ingres_errsqlstate<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_result_seek":{"id":"function.ingres-result-seek","purpose":"Set the row position before fetching data","prototype":"bool ingres_result_seek(resource $result, int $position)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ingres >= 2.1.0"},"ingres_rollback":{"id":"function.ingres-rollback","purpose":"Roll back a transaction","prototype":"bool ingres_rollback(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5 < 5.1.0, PECL ingres >= 1.0.0"},"ingres_set_environment":{"id":"function.ingres-set-environment","purpose":"Set environment features controlling output options","prototype":"bool ingres_set_environment(resource $link, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ingres >= 1.2.0"},"ingres_unbuffered_query":{"id":"function.ingres-unbuffered-query","purpose":"Send an unbuffered  SQL query to Ingres","prototype":"mixed ingres_unbuffered_query(resource $link, string $query [, array $params = '' [, string $types = '']])","return":"<p class=\"para\">   <span class=\"function\">ingres_unbuffered_query<\/span> returns a query result identifier when   there are rows to fetch; else it returns <strong><code>FALSE<\/code><\/strong> when there are no rows, as   is the case of an INSERT, UPDATE, or DELETE statement. To see if an error   occurred, use <span class=\"function\">ingres_errno<\/span>,    <span class=\"function\">ingres_error<\/span>, or    <span class=\"function\">ingres_errsqlstate<\/span>.  <\/p>","versions":""},"maxdb_affected_rows":{"id":"function.maxdb-affected-rows","purpose":"Gets the number of affected rows in a previous MaxDB operation","prototype":"int maxdb_affected_rows(resource $link)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or retrieved.   Zero indicates that no records where updated for an UPDATE statement, no rows matched   the WHERE clause in the query or that no query has yet been executed.   -1 indicates that the number of rows affected can not be determined.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::affected_rows":{"id":"function.maxdb-affected-rows","purpose":"Gets the number of affected rows in a previous MaxDB operation","prototype":"int maxdb::affected_rows(resource $link)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or retrieved.   Zero indicates that no records where updated for an UPDATE statement, no rows matched   the WHERE clause in the query or that no query has yet been executed.   -1 indicates that the number of rows affected can not be determined.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_autocommit":{"id":"function.maxdb-autocommit","purpose":"Turns on or off auto-commiting database modifications","prototype":"bool maxdb_autocommit(resource $link, bool $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::auto_commit":{"id":"function.maxdb-autocommit","purpose":"Turns on or off auto-commiting database modifications","prototype":"bool maxdb::auto_commit(resource $link, bool $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_bind_param":{"id":"function.maxdb-bind-param","purpose":"Alias of maxdb_stmt_bind_param","prototype":" maxdb_bind_param()","return":"","versions":"PECL maxdb 1.0"},"maxdb_bind_result":{"id":"function.maxdb-bind-result","purpose":"Alias of maxdb_stmt_bind_result","prototype":" maxdb_bind_result()","return":"","versions":"PECL maxdb 1.0"},"maxdb_change_user":{"id":"function.maxdb-change-user","purpose":"Changes the user of the specified database connection","prototype":"bool maxdb_change_user(resource $link, string $user, string $password, string $database)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::change_user":{"id":"function.maxdb-change-user","purpose":"Changes the user of the specified database connection","prototype":"bool maxdb::change_user(resource $link, string $user, string $password, string $database)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_character_set_name":{"id":"function.maxdb-character-set-name","purpose":"Returns the default character set for the database connection","prototype":"string maxdb_character_set_name(resource $link)","return":"<p class=\"para\">The default character set for the current connection, either ascii or unicode.<\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::character_set_name":{"id":"function.maxdb-character-set-name","purpose":"Returns the default character set for the database connection","prototype":"string maxdb::character_set_name(resource $link)","return":"<p class=\"para\">The default character set for the current connection, either ascii or unicode.<\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_client_encoding":{"id":"function.maxdb-client-encoding","purpose":"Alias of maxdb_character_set_name","prototype":" maxdb_client_encoding()","return":"","versions":"PECL maxdb 1.0"},"maxdb_close_long_data":{"id":"function.maxdb-close-long-data","purpose":"Alias of maxdb_stmt_close_long_data","prototype":" maxdb_close_long_data()","return":"","versions":"PECL maxdb >= 1.0"},"maxdb::close_long_data":{"id":"function.maxdb-close-long-data","purpose":"Alias of maxdb_stmt_close_long_data","prototype":" maxdb::close_long_data()","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_close":{"id":"function.maxdb-close","purpose":"Closes a previously opened database connection","prototype":"bool maxdb_close(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::close":{"id":"function.maxdb-close","purpose":"Closes a previously opened database connection","prototype":"bool maxdb::close(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_commit":{"id":"function.maxdb-commit","purpose":"Commits the current transaction","prototype":"bool maxdb_commit(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::commit":{"id":"function.maxdb-commit","purpose":"Commits the current transaction","prototype":"bool maxdb::commit(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_connect_errno":{"id":"function.maxdb-connect-errno","purpose":"Returns the error code from last connect call","prototype":"int maxdb_connect_errno()","return":"<p class=\"para\">   An error code value for the last call to <span class=\"function\">maxdb_connect<\/span>, if it failed.   zero means no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_connect_error":{"id":"function.maxdb-connect-error","purpose":"Returns a string description of the last connect error","prototype":"string maxdb_connect_error()","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_connect":{"id":"function.maxdb-connect","purpose":"Open a new connection to the MaxDB server","prototype":"resource maxdb_connect([string $host = '' [, string $username = '' [, string $passwd = '' [, string $dbname = '' [, int $port = '' [, string $socket = '']]]]]])","return":"<p class=\"para\">   Returns a resource which represents the connection to a MaxDB Server or   <strong><code>FALSE<\/code><\/strong> if the connection failed.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::__construct":{"id":"function.maxdb-connect","purpose":"Open a new connection to the MaxDB server","prototype":"resource maxdb::__construct([string $host = '' [, string $username = '' [, string $passwd = '' [, string $dbname = '' [, int $port = '' [, string $socket = '']]]]]])","return":"<p class=\"para\">   Returns a resource which represents the connection to a MaxDB Server or   <strong><code>FALSE<\/code><\/strong> if the connection failed.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_data_seek":{"id":"function.maxdb-data-seek","purpose":"Adjusts the result pointer to an arbitary row in the result","prototype":"bool maxdb_data_seek(resource $result, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::data_seek":{"id":"function.maxdb-data-seek","purpose":"Adjusts the result pointer to an arbitary row in the result","prototype":"bool maxdb_result::data_seek(resource $result, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_debug":{"id":"function.maxdb-debug","purpose":"Performs debugging operations","prototype":"void maxdb_debug(string $debug)","return":"<p class=\"para\">   <span class=\"function\">maxdb_debug<\/span> doesn&#039;t return any value.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_disable_reads_from_master":{"id":"function.maxdb-disable-reads-from-master","purpose":"Disable reads from master","prototype":"void maxdb_disable_reads_from_master(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb::disable_reads_from_master":{"id":"function.maxdb-disable-reads-from-master","purpose":"Disable reads from master","prototype":"void maxdb::disable_reads_from_master(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_disable_rpl_parse":{"id":"function.maxdb-disable-rpl-parse","purpose":"Disable RPL parse","prototype":"bool maxdb_disable_rpl_parse(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_dump_debug_info":{"id":"function.maxdb-dump-debug-info","purpose":"Dump debugging information into the log","prototype":"bool maxdb_dump_debug_info(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_embedded_connect":{"id":"function.maxdb-embedded-connect","purpose":"Open a connection to an embedded MaxDB server","prototype":"resource maxdb_embedded_connect([string $dbname = ''])","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_enable_reads_from_master":{"id":"function.maxdb-enable-reads-from-master","purpose":"Enable reads from master","prototype":"bool maxdb_enable_reads_from_master(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_enable_rpl_parse":{"id":"function.maxdb-enable-rpl-parse","purpose":"Enable RPL parse","prototype":"bool maxdb_enable_rpl_parse(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_errno":{"id":"function.maxdb-errno","purpose":"Returns the error code for the most recent function call","prototype":"int maxdb_errno(resource $link)","return":"<p class=\"para\">   An error code value for the last call, if it failed. zero means no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::errno":{"id":"function.maxdb-errno","purpose":"Returns the error code for the most recent function call","prototype":"int maxdb::errno(resource $link)","return":"<p class=\"para\">   An error code value for the last call, if it failed. zero means no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_error":{"id":"function.maxdb-error","purpose":"Returns a string description of the last error","prototype":"string maxdb_error(resource $link)","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::error":{"id":"function.maxdb-error","purpose":"Returns a string description of the last error","prototype":"string maxdb::error(resource $link)","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_escape_string":{"id":"function.maxdb-escape-string","purpose":"Alias of maxdb_real_escape_string","prototype":" maxdb_escape_string()","return":"","versions":"PECL maxdb 1.0"},"maxdb_execute":{"id":"function.maxdb-execute","purpose":"Alias of maxdb_stmt_execute","prototype":" maxdb_execute()","return":"","versions":"PECL maxdb 1.0"},"maxdb_fetch_array":{"id":"function.maxdb-fetch-array","purpose":"Fetch a result row as an associative, a numeric array, or both","prototype":"mixed maxdb_fetch_array(resource $result [, int $resulttype = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_array":{"id":"function.maxdb-fetch-array","purpose":"Fetch a result row as an associative, a numeric array, or both","prototype":"mixed maxdb_result::fetch_array(resource $result [, int $resulttype = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_assoc":{"id":"function.maxdb-fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array maxdb_fetch_assoc(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_assoc":{"id":"function.maxdb-fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array maxdb_result::fetch_assoc(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_field_direct":{"id":"function.maxdb-fetch-field-direct","purpose":"Fetch meta-data for a single field","prototype":"mixed maxdb_fetch_field_direct(resource $result, int $fieldnr)","return":"<p class=\"para\">   Returns an resource which contains field definition information or <strong><code>FALSE<\/code><\/strong> if no field information   for specified <em>fieldnr<\/em> is available.  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Object attributes<\/strong><\/caption>         <thead>      <tr>       <th>Attribute<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>The name of the column<\/td>      <\/tr>      <tr>       <td>max_length<\/td>       <td>The maximum width of the field for the result set.<\/td>      <\/tr>      <tr>       <td>type<\/td>       <td>The data type used for this field<\/td>      <\/tr>      <tr>       <td>decimals<\/td>       <td>The number of decimals used (for integer fields)<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_field_direct":{"id":"function.maxdb-fetch-field-direct","purpose":"Fetch meta-data for a single field","prototype":"mixed maxdb_result::fetch_field_direct(resource $result, int $fieldnr)","return":"<p class=\"para\">   Returns an resource which contains field definition information or <strong><code>FALSE<\/code><\/strong> if no field information   for specified <em>fieldnr<\/em> is available.  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Object attributes<\/strong><\/caption>         <thead>      <tr>       <th>Attribute<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>The name of the column<\/td>      <\/tr>      <tr>       <td>max_length<\/td>       <td>The maximum width of the field for the result set.<\/td>      <\/tr>      <tr>       <td>type<\/td>       <td>The data type used for this field<\/td>      <\/tr>      <tr>       <td>decimals<\/td>       <td>The number of decimals used (for integer fields)<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_field":{"id":"function.maxdb-fetch-field","purpose":"Returns the next field in the result set","prototype":"mixed maxdb_fetch_field(resource $result)","return":"<p class=\"para\">   Returns an resource which contains field definition information or <strong><code>FALSE<\/code><\/strong> if no field information   is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_field":{"id":"function.maxdb-fetch-field","purpose":"Returns the next field in the result set","prototype":"mixed maxdb_result::fetch_field(resource $result)","return":"<p class=\"para\">   Returns an resource which contains field definition information or <strong><code>FALSE<\/code><\/strong> if no field information   is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_fields":{"id":"function.maxdb-fetch-fields","purpose":"Returns an array of resources representing the fields in a result set","prototype":"mixed maxdb_fetch_fields(resource $result)","return":"<p class=\"para\">   Returns an array of resources which contains field definition information or <strong><code>FALSE<\/code><\/strong> if no field information   is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_fields":{"id":"function.maxdb-fetch-fields","purpose":"Returns an array of resources representing the fields in a result set","prototype":"mixed maxdb_result::fetch_fields(resource $result)","return":"<p class=\"para\">   Returns an array of resources which contains field definition information or <strong><code>FALSE<\/code><\/strong> if no field information   is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_lengths":{"id":"function.maxdb-fetch-lengths","purpose":"Returns the lengths of the columns of the current row in the result set","prototype":"array maxdb_fetch_lengths(resource $result)","return":"<p class=\"para\">   An array of integers representing the size of each column (not including   any terminating null characters). <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>  <p class=\"para\">   <span class=\"function\">maxdb_fetch_lengths<\/span> is valid only for the current row of the result set.   It returns <strong><code>FALSE<\/code><\/strong> if you call it before calling maxdb_fetch_row\/array\/resource or after retrieving   all rows in the result.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::lengths":{"id":"function.maxdb-fetch-lengths","purpose":"Returns the lengths of the columns of the current row in the result set","prototype":"array maxdb_result::lengths(resource $result)","return":"<p class=\"para\">   An array of integers representing the size of each column (not including   any terminating null characters). <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>  <p class=\"para\">   <span class=\"function\">maxdb_fetch_lengths<\/span> is valid only for the current row of the result set.   It returns <strong><code>FALSE<\/code><\/strong> if you call it before calling maxdb_fetch_row\/array\/resource or after retrieving   all rows in the result.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_object":{"id":"function.maxdb-fetch-object","purpose":"Returns the current row of a result set as an object","prototype":"object maxdb_fetch_object(object $result)","return":"<p class=\"para\">   Returns an object that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">Field names returned by this functionare <em class=\"emphasis\">case-sensitive<\/em>.<\/span><\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_object":{"id":"function.maxdb-fetch-object","purpose":"Returns the current row of a result set as an object","prototype":"object maxdb_result::fetch_object(object $result)","return":"<p class=\"para\">   Returns an object that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">Field names returned by this functionare <em class=\"emphasis\">case-sensitive<\/em>.<\/span><\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch_row":{"id":"function.maxdb-fetch-row","purpose":"Get a result row as an enumerated array","prototype":"mixed maxdb_fetch_row(resource $result)","return":"<p class=\"para\">   <span class=\"function\">maxdb_fetch_row<\/span> returns an array that corresponds to the fetched row   or <strong><code>NULL<\/code><\/strong> if there are no more rows in result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb_result::fetch_row":{"id":"function.maxdb-fetch-row","purpose":"Get a result row as an enumerated array","prototype":"mixed maxdb_result::fetch_row(resource $result)","return":"<p class=\"para\">   <span class=\"function\">maxdb_fetch_row<\/span> returns an array that corresponds to the fetched row   or <strong><code>NULL<\/code><\/strong> if there are no more rows in result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb_fetch":{"id":"function.maxdb-fetch","purpose":"Alias of maxdb_stmt_fetch","prototype":" maxdb_fetch()","return":"","versions":"PECL maxdb 1.0"},"maxdb_field_count":{"id":"function.maxdb-field-count","purpose":"Returns the number of columns for the most recent query","prototype":"int maxdb_field_count(resource $link)","return":"<p class=\"para\">   An integer representing the number of fields in a result set.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::field_count":{"id":"function.maxdb-field-count","purpose":"Returns the number of columns for the most recent query","prototype":"int maxdb::field_count(resource $link)","return":"<p class=\"para\">   An integer representing the number of fields in a result set.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_field_seek":{"id":"function.maxdb-field-seek","purpose":"Set result pointer to a specified field offset","prototype":"bool maxdb_field_seek(resource $result, int $fieldnr)","return":"<p class=\"para\">   <span class=\"function\">maxdb_field_seek<\/span> returns previuos value of field cursor.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::field_seek":{"id":"function.maxdb-field-seek","purpose":"Set result pointer to a specified field offset","prototype":"bool maxdb_result::field_seek(resource $result, int $fieldnr)","return":"<p class=\"para\">   <span class=\"function\">maxdb_field_seek<\/span> returns previuos value of field cursor.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_field_tell":{"id":"function.maxdb-field-tell","purpose":"Get current field offset of a result pointer","prototype":"int maxdb_field_tell(resource $result)","return":"<p class=\"para\">   Returns current offset of field cursor.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::current_field":{"id":"function.maxdb-field-tell","purpose":"Get current field offset of a result pointer","prototype":"int maxdb_result::current_field(resource $result)","return":"<p class=\"para\">   Returns current offset of field cursor.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_free_result":{"id":"function.maxdb-free-result","purpose":"Frees the memory associated with a result","prototype":"void maxdb_free_result(resource $result)","return":"<p class=\"para\">   This function doesn&#039;t return any value.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::free":{"id":"function.maxdb-free-result","purpose":"Frees the memory associated with a result","prototype":"void maxdb_result::free(resource $result)","return":"<p class=\"para\">   This function doesn&#039;t return any value.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_get_client_info":{"id":"function.maxdb-get-client-info","purpose":"Returns the MaxDB client version as a string","prototype":"string maxdb_get_client_info()","return":"<p class=\"para\">   A string that represents the MaxDB client library version  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_get_client_version":{"id":"function.maxdb-get-client-version","purpose":"Get MaxDB client info","prototype":"int maxdb_get_client_version()","return":"<p class=\"para\">   A number that represents the MaxDB client library version in format:   <em>main_version*10000 + minor_version *100 + sub_version<\/em>.   For example, 7.5.0 is returned as 70500.  <\/p>  <p class=\"para\">   This is useful to quickly determine the version of the client library   to know if some capability exists.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_get_host_info":{"id":"function.maxdb-get-host-info","purpose":"Returns a string representing the type of connection used","prototype":"string maxdb_get_host_info(resource $link)","return":"<p class=\"para\">   A character string representing the server hostname and the connection type.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::get_host_info":{"id":"function.maxdb-get-host-info","purpose":"Returns a string representing the type of connection used","prototype":"string maxdb::get_host_info(resource $link)","return":"<p class=\"para\">   A character string representing the server hostname and the connection type.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_get_metadata":{"id":"function.maxdb-get-metadata","purpose":"Alias of maxdb_stmt_result_metadata","prototype":" maxdb_get_metadata()","return":"","versions":"PECL maxdb 1.0"},"maxdb_get_proto_info":{"id":"function.maxdb-get-proto-info","purpose":"Returns the version of the MaxDB protocol used","prototype":"string maxdb_get_proto_info(resource $link)","return":"<p class=\"para\">   Returns an integer representing the protocol version (constant 10).  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::protocol_version":{"id":"function.maxdb-get-proto-info","purpose":"Returns the version of the MaxDB protocol used","prototype":"string maxdb::protocol_version(resource $link)","return":"<p class=\"para\">   Returns an integer representing the protocol version (constant 10).  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_get_server_info":{"id":"function.maxdb-get-server-info","purpose":"Returns the version of the MaxDB server","prototype":"string maxdb_get_server_info(resource $link)","return":"<p class=\"para\">   A character string representing the server version.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::server_info":{"id":"function.maxdb-get-server-info","purpose":"Returns the version of the MaxDB server","prototype":"string maxdb::server_info(resource $link)","return":"<p class=\"para\">   A character string representing the server version.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_get_server_version":{"id":"function.maxdb-get-server-version","purpose":"Returns the version of the MaxDB server as an integer","prototype":"int maxdb_get_server_version(resource $link)","return":"<p class=\"para\">   An integer representing the server version.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::server_version":{"id":"function.maxdb-get-server-version","purpose":"Returns the version of the MaxDB server as an integer","prototype":"int maxdb::server_version(resource $link)","return":"<p class=\"para\">   An integer representing the server version.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_info":{"id":"function.maxdb-info","purpose":"Retrieves information about the most recently executed query","prototype":"string maxdb_info(resource $link)","return":"<p class=\"para\">   A character string representing additional information about the most recently executed query.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::info":{"id":"function.maxdb-info","purpose":"Retrieves information about the most recently executed query","prototype":"string maxdb::info(resource $link)","return":"<p class=\"para\">   A character string representing additional information about the most recently executed query.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_init":{"id":"function.maxdb-init","purpose":"Initializes MaxDB and returns an resource for use with maxdb_real_connect","prototype":"resource maxdb_init()","return":"<p class=\"para\">   Returns an resource.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_insert_id":{"id":"function.maxdb-insert-id","purpose":"Returns the auto generated id used in the last query","prototype":"mixed maxdb_insert_id(resource $link)","return":"<p class=\"para\">   The value of the <em>DEFAULT SERIAL<\/em> field that was updated   by the previous query. Returns zero if there was no previous query on the   connection or if the query did not update an <em>DEFAULT_SERIAL<\/em>   value.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number is greater than maximal int value, <span class=\"function\">maxdb_insert_id<\/span>    will return a string.   <\/p>  <\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb::insert_id":{"id":"function.maxdb-insert-id","purpose":"Returns the auto generated id used in the last query","prototype":"mixed maxdb::insert_id(resource $link)","return":"<p class=\"para\">   The value of the <em>DEFAULT SERIAL<\/em> field that was updated   by the previous query. Returns zero if there was no previous query on the   connection or if the query did not update an <em>DEFAULT_SERIAL<\/em>   value.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number is greater than maximal int value, <span class=\"function\">maxdb_insert_id<\/span>    will return a string.   <\/p>  <\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb_kill":{"id":"function.maxdb-kill","purpose":"Disconnects from a MaxDB server","prototype":"bool maxdb_kill(resource $link, int $processid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::kill":{"id":"function.maxdb-kill","purpose":"Disconnects from a MaxDB server","prototype":"bool maxdb::kill(resource $link, int $processid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_master_query":{"id":"function.maxdb-master-query","purpose":"Enforce execution of a query on the master in a master\/slave setup","prototype":"bool maxdb_master_query(resource $link, string $query)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_more_results":{"id":"function.maxdb-more-results","purpose":"Check if there any more query results from a multi query","prototype":"bool maxdb_more_results(resource $link)","return":"<p class=\"para\">   Always <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::more_results":{"id":"function.maxdb-more-results","purpose":"Check if there any more query results from a multi query","prototype":"bool maxdb::more_results(resource $link)","return":"<p class=\"para\">   Always <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_multi_query":{"id":"function.maxdb-multi-query","purpose":"Performs a query on the database","prototype":"bool maxdb_multi_query(resource $link, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::multi_query":{"id":"function.maxdb-multi-query","purpose":"Performs a query on the database","prototype":"bool maxdb::multi_query(resource $link, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_next_result":{"id":"function.maxdb-next-result","purpose":"Prepare next result from multi_query","prototype":"bool maxdb_next_result(resource $link)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::next_result":{"id":"function.maxdb-next-result","purpose":"Prepare next result from multi_query","prototype":"bool maxdb::next_result(resource $link)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_num_fields":{"id":"function.maxdb-num-fields","purpose":"Get the number of fields in a result","prototype":"int maxdb_num_fields(resource $result)","return":"<p class=\"para\">The number of fields from a result set<\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_result::field_count":{"id":"function.maxdb-num-fields","purpose":"Get the number of fields in a result","prototype":"int maxdb_result::field_count(resource $result)","return":"<p class=\"para\">The number of fields from a result set<\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_num_rows":{"id":"function.maxdb-num-rows","purpose":"Gets the number of rows in a result","prototype":"int maxdb_num_rows(resource $result)","return":"<p class=\"para\">   Returns number of rows in the result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of rows is greater than maximal int value, the number    will be returned as a string.   <\/p>  <\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb::num_rows":{"id":"function.maxdb-num-rows","purpose":"Gets the number of rows in a result","prototype":"int maxdb::num_rows(resource $result)","return":"<p class=\"para\">   Returns number of rows in the result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of rows is greater than maximal int value, the number    will be returned as a string.   <\/p>  <\/p><\/blockquote>","versions":"PECL maxdb >= 1.0"},"maxdb_options":{"id":"function.maxdb-options","purpose":"Set options","prototype":"bool maxdb_options(resource $link, int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::options":{"id":"function.maxdb-options","purpose":"Set options","prototype":"bool maxdb::options(resource $link, int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_param_count":{"id":"function.maxdb-param-count","purpose":"Alias of maxdb_stmt_param_count","prototype":" maxdb_param_count()","return":"","versions":"PECL maxdb 1.0"},"maxdb_ping":{"id":"function.maxdb-ping","purpose":"Pings a server connection, or tries to reconnect if the connection has gone down","prototype":"bool maxdb_ping(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::ping":{"id":"function.maxdb-ping","purpose":"Pings a server connection, or tries to reconnect if the connection has gone down","prototype":"bool maxdb::ping(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_prepare":{"id":"function.maxdb-prepare","purpose":"Prepare an SQL statement for execution","prototype":"maxdb_stmt maxdb_prepare(resource $link, string $query)","return":"<p class=\"para\">   <span class=\"function\">maxdb_prepare<\/span> returns a statement resource or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::prepare":{"id":"function.maxdb-prepare","purpose":"Prepare an SQL statement for execution","prototype":"maxdb_stmt maxdb::prepare(resource $link, string $query)","return":"<p class=\"para\">   <span class=\"function\">maxdb_prepare<\/span> returns a statement resource or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_query":{"id":"function.maxdb-query","purpose":"Performs a query on the database","prototype":"mixed maxdb_query(resource $link, string $query [, int $resultmode = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. For <em>SELECT, SHOW, DESCRIBE<\/em> or   <em>EXPLAIN<\/em> <span class=\"function\">maxdb_query<\/span> will return   a result resource.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::query":{"id":"function.maxdb-query","purpose":"Performs a query on the database","prototype":"mixed maxdb::query(resource $link, string $query [, int $resultmode = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. For <em>SELECT, SHOW, DESCRIBE<\/em> or   <em>EXPLAIN<\/em> <span class=\"function\">maxdb_query<\/span> will return   a result resource.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_real_connect":{"id":"function.maxdb-real-connect","purpose":"Opens a connection to a MaxDB server","prototype":"bool maxdb_real_connect(resource $link [, string $hostname = '' [, string $username = '' [, string $passwd = '' [, string $dbname = '' [, int $port = '' [, string $socket = '']]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::real_connect":{"id":"function.maxdb-real-connect","purpose":"Opens a connection to a MaxDB server","prototype":"bool maxdb::real_connect(resource $link [, string $hostname = '' [, string $username = '' [, string $passwd = '' [, string $dbname = '' [, int $port = '' [, string $socket = '']]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_real_escape_string":{"id":"function.maxdb-real-escape-string","purpose":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","prototype":"string maxdb_real_escape_string(resource $link, string $escapestr)","return":"<p class=\"para\">   Returns an escaped string.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::real_escape_string":{"id":"function.maxdb-real-escape-string","purpose":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","prototype":"string maxdb::real_escape_string(resource $link, string $escapestr)","return":"<p class=\"para\">   Returns an escaped string.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_real_query":{"id":"function.maxdb-real-query","purpose":"Execute an SQL query","prototype":"bool maxdb_real_query(resource $link, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::real_query":{"id":"function.maxdb-real-query","purpose":"Execute an SQL query","prototype":"bool maxdb::real_query(resource $link, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_report":{"id":"function.maxdb-report","purpose":"Enables or disables internal report functions","prototype":"bool maxdb_report(int $flags)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb 1.0"},"maxdb_rollback":{"id":"function.maxdb-rollback","purpose":"Rolls back current transaction","prototype":"bool maxdb_rollback(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::rollback":{"id":"function.maxdb-rollback","purpose":"Rolls back current transaction","prototype":"bool maxdb::rollback(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_rpl_parse_enabled":{"id":"function.maxdb-rpl-parse-enabled","purpose":"Check if RPL parse is enabled","prototype":"int maxdb_rpl_parse_enabled(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_rpl_probe":{"id":"function.maxdb-rpl-probe","purpose":"RPL probe","prototype":"bool maxdb_rpl_probe(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_rpl_query_type":{"id":"function.maxdb-rpl-query-type","purpose":"Returns RPL query type","prototype":"int maxdb_rpl_query_type(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb::rpl_query_type":{"id":"function.maxdb-rpl-query-type","purpose":"Returns RPL query type","prototype":"int maxdb::rpl_query_type(resource $link)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_select_db":{"id":"function.maxdb-select-db","purpose":"Selects the default database for database queries","prototype":"bool maxdb_select_db(resource $link, string $dbname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::select_db":{"id":"function.maxdb-select-db","purpose":"Selects the default database for database queries","prototype":"bool maxdb::select_db(resource $link, string $dbname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_send_long_data":{"id":"function.maxdb-send-long-data","purpose":"Alias of maxdb_stmt_send_long_data","prototype":" maxdb_send_long_data()","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_send_query":{"id":"function.maxdb-send-query","purpose":"Send the query and return","prototype":"bool maxdb_send_query(resource $link, string $query)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb::send_query":{"id":"function.maxdb-send-query","purpose":"Send the query and return","prototype":"bool maxdb::send_query(resource $link, string $query)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_server_end":{"id":"function.maxdb-server-end","purpose":"Shut down the embedded server","prototype":"void maxdb_server_end()","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_server_init":{"id":"function.maxdb-server-init","purpose":"Initialize embedded server","prototype":"bool maxdb_server_init([array $server = '' [, array $groups = '']])","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_set_opt":{"id":"function.maxdb-set-opt","purpose":"Alias of maxdb_options","prototype":" maxdb_set_opt()","return":"","versions":"PECL maxdb 1.0"},"maxdb_sqlstate":{"id":"function.maxdb-sqlstate","purpose":"Returns the SQLSTATE error from previous MaxDB operation","prototype":"string maxdb_sqlstate(resource $link)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::sqlstate":{"id":"function.maxdb-sqlstate","purpose":"Returns the SQLSTATE error from previous MaxDB operation","prototype":"string maxdb::sqlstate(resource $link)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_ssl_set":{"id":"function.maxdb-ssl-set","purpose":"Used for establishing secure connections using SSL","prototype":"bool maxdb_ssl_set(resource $link, string $key, string $cert, string $ca, string $capath, string $cipher)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb::ssl_set":{"id":"function.maxdb-ssl-set","purpose":"Used for establishing secure connections using SSL","prototype":"bool maxdb::ssl_set(resource $link, string $key, string $cert, string $ca, string $capath, string $cipher)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_stat":{"id":"function.maxdb-stat","purpose":"Gets the current system status","prototype":"string maxdb_stat(resource $link)","return":"<p class=\"para\">   A string describing the server status. <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::stat":{"id":"function.maxdb-stat","purpose":"Gets the current system status","prototype":"string maxdb::stat(resource $link)","return":"<p class=\"para\">   A string describing the server status. <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_affected_rows":{"id":"function.maxdb-stmt-affected-rows","purpose":"Returns the total number of rows changed, deleted, or  inserted by the last executed statement","prototype":"int maxdb_stmt_affected_rows(resource $stmt)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or retrieved.   Zero indicates that no records where updated for an UPDATE\/DELETE statement, no   rows matched the WHERE clause in the query or that no query has yet been executed.   -1 indicates that the query has returned an error or the number of rows can not determined.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::affected_rows":{"id":"function.maxdb-stmt-affected-rows","purpose":"Returns the total number of rows changed, deleted, or  inserted by the last executed statement","prototype":"int maxdb_stmt::affected_rows(resource $stmt)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or retrieved.   Zero indicates that no records where updated for an UPDATE\/DELETE statement, no   rows matched the WHERE clause in the query or that no query has yet been executed.   -1 indicates that the query has returned an error or the number of rows can not determined.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_bind_param":{"id":"function.maxdb-stmt-bind-param","purpose":"Binds variables to a prepared statement as parameters","prototype":"bool maxdb_stmt_bind_param(resource $stmt, string $types, mixed $var1 [, mixed $... = '', array $var])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::bind_param":{"id":"function.maxdb-stmt-bind-param","purpose":"Binds variables to a prepared statement as parameters","prototype":"bool maxdb_stmt::bind_param(resource $stmt, string $types, mixed $var1 [, mixed $... = '', array $var])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_bind_result":{"id":"function.maxdb-stmt-bind-result","purpose":"Binds variables to a prepared statement for result storage","prototype":"bool maxdb_stmt_bind_result(resource $stmt, mixed $var1 [, mixed $... = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::bind_result":{"id":"function.maxdb-stmt-bind-result","purpose":"Binds variables to a prepared statement for result storage","prototype":"bool maxdb_stmt::bind_result(resource $stmt, mixed $var1 [, mixed $... = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_close_long_data":{"id":"function.maxdb-stmt-close-long-data","purpose":"Ends a sequence of maxdb_stmt_send_long_data","prototype":"bool maxdb_stmt_close_long_data(resource $stmt, int $param_nr)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb 1.0"},"maxdb_stmt::close_long_data":{"id":"function.maxdb-stmt-close-long-data","purpose":"Ends a sequence of maxdb_stmt_send_long_data","prototype":"bool maxdb_stmt::close_long_data(resource $stmt, int $param_nr)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb 1.0"},"maxdb_stmt_close":{"id":"function.maxdb-stmt-close","purpose":"Closes a prepared statement","prototype":"bool maxdb_stmt_close(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::close":{"id":"function.maxdb-stmt-close","purpose":"Closes a prepared statement","prototype":"bool maxdb_stmt::close(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_data_seek":{"id":"function.maxdb-stmt-data-seek","purpose":"Seeks to an arbitray row in statement result set","prototype":"bool maxdb_stmt_data_seek(resource $statement, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::data_seek":{"id":"function.maxdb-stmt-data-seek","purpose":"Seeks to an arbitray row in statement result set","prototype":"bool maxdb_stmt::data_seek(resource $statement, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_errno":{"id":"function.maxdb-stmt-errno","purpose":"Returns the error code for the most recent statement call","prototype":"int maxdb_stmt_errno(resource $stmt)","return":"<p class=\"para\">   An error code value. Zero means no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::errno":{"id":"function.maxdb-stmt-errno","purpose":"Returns the error code for the most recent statement call","prototype":"int maxdb_stmt::errno(resource $stmt)","return":"<p class=\"para\">   An error code value. Zero means no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_error":{"id":"function.maxdb-stmt-error","purpose":"Returns a string description for last statement error","prototype":"string maxdb_stmt_error(resource $stmt)","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::error":{"id":"function.maxdb-stmt-error","purpose":"Returns a string description for last statement error","prototype":"string maxdb_stmt::error(resource $stmt)","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_execute":{"id":"function.maxdb-stmt-execute","purpose":"Executes a prepared Query","prototype":"bool maxdb_stmt_execute(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::execute":{"id":"function.maxdb-stmt-execute","purpose":"Executes a prepared Query","prototype":"bool maxdb_stmt::execute(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_fetch":{"id":"function.maxdb-stmt-fetch","purpose":"Fetch results from a prepared statement into the bound variables","prototype":"bool maxdb_stmt_fetch(resource $stmt)","return":"<table class=\"doctable table\">   <caption><strong>Return values<\/strong><\/caption>       <thead>     <tr>      <th>Value<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><strong><code>TRUE<\/code><\/strong><\/td>      <td>Success. Data has been fetched<\/td>     <\/tr>     <tr>      <td><strong><code>FALSE<\/code><\/strong><\/td>      <td>Error occurred<\/td>     <\/tr>     <tr>      <td><strong><code>NULL<\/code><\/strong><\/td>      <td>No more rows\/data exists<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::fetch":{"id":"function.maxdb-stmt-fetch","purpose":"Fetch results from a prepared statement into the bound variables","prototype":"bool maxdb_stmt::fetch(resource $stmt)","return":"<table class=\"doctable table\">   <caption><strong>Return values<\/strong><\/caption>       <thead>     <tr>      <th>Value<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><strong><code>TRUE<\/code><\/strong><\/td>      <td>Success. Data has been fetched<\/td>     <\/tr>     <tr>      <td><strong><code>FALSE<\/code><\/strong><\/td>      <td>Error occurred<\/td>     <\/tr>     <tr>      <td><strong><code>NULL<\/code><\/strong><\/td>      <td>No more rows\/data exists<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_free_result":{"id":"function.maxdb-stmt-free-result","purpose":"Frees stored result memory for the given statement handle","prototype":"void maxdb_stmt_free_result(resource $stmt)","return":"<p class=\"para\">   This function doesn&#039;t return any value.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::free_result":{"id":"function.maxdb-stmt-free-result","purpose":"Frees stored result memory for the given statement handle","prototype":"void maxdb_stmt::free_result(resource $stmt)","return":"<p class=\"para\">   This function doesn&#039;t return any value.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_init":{"id":"function.maxdb-stmt-init","purpose":"Initializes a statement and returns an resource for use with maxdb_stmt_prepare","prototype":"object maxdb_stmt_init(resource $link)","return":"<p class=\"para\">   Returns an resource.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::stmt_init":{"id":"function.maxdb-stmt-init","purpose":"Initializes a statement and returns an resource for use with maxdb_stmt_prepare","prototype":"object maxdb::stmt_init(resource $link)","return":"<p class=\"para\">   Returns an resource.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_num_rows":{"id":"function.maxdb-stmt-num-rows","purpose":"Return the number of rows in statements result set","prototype":"int maxdb_stmt_num_rows(resource $stmt)","return":"<p class=\"para\">   An integer representing the number of rows in result set.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::num_rows":{"id":"function.maxdb-stmt-num-rows","purpose":"Return the number of rows in statements result set","prototype":"int maxdb_stmt::num_rows(resource $stmt)","return":"<p class=\"para\">   An integer representing the number of rows in result set.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_param_count":{"id":"function.maxdb-stmt-param-count","purpose":"Returns the number of parameter for the given statement","prototype":"int maxdb_stmt_param_count(resource $stmt)","return":"<p class=\"para\">   returns an integer representing the number of parameters.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::param_count":{"id":"function.maxdb-stmt-param-count","purpose":"Returns the number of parameter for the given statement","prototype":"int maxdb_stmt::param_count(resource $stmt)","return":"<p class=\"para\">   returns an integer representing the number of parameters.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_prepare":{"id":"function.maxdb-stmt-prepare","purpose":"Prepare an SQL statement for execution","prototype":"mixed maxdb_stmt_prepare(resource $stmt, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::prepare":{"id":"function.maxdb-stmt-prepare","purpose":"Prepare an SQL statement for execution","prototype":"mixed maxdb_stmt::prepare(resource $stmt, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_reset":{"id":"function.maxdb-stmt-reset","purpose":"Resets a prepared statement","prototype":"bool maxdb_stmt_reset(resource $stmt)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::reset":{"id":"function.maxdb-stmt-reset","purpose":"Resets a prepared statement","prototype":"bool maxdb_stmt::reset(resource $stmt)","return":"","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_result_metadata":{"id":"function.maxdb-stmt-result-metadata","purpose":"Returns result set metadata from a prepared statement","prototype":"resource maxdb_stmt_result_metadata(resource $stmt)","return":"<p class=\"para\">   <span class=\"function\">maxdb_stmt_result_metadata<\/span> returns a result resource or <strong><code>FALSE<\/code><\/strong> if   an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::result_metadata":{"id":"function.maxdb-stmt-result-metadata","purpose":"Returns result set metadata from a prepared statement","prototype":"resource maxdb_stmt::result_metadata(resource $stmt)","return":"<p class=\"para\">   <span class=\"function\">maxdb_stmt_result_metadata<\/span> returns a result resource or <strong><code>FALSE<\/code><\/strong> if   an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_send_long_data":{"id":"function.maxdb-stmt-send-long-data","purpose":"Send data in blocks","prototype":"bool maxdb_stmt_send_long_data(resource $stmt, int $param_nr, string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb 1.0"},"maxdb_stmt::send_long_data":{"id":"function.maxdb-stmt-send-long-data","purpose":"Send data in blocks","prototype":"bool maxdb_stmt::send_long_data(resource $stmt, int $param_nr, string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb 1.0"},"maxdb_stmt_sqlstate":{"id":"function.maxdb-stmt-sqlstate","purpose":"Returns SQLSTATE error from previous statement operation","prototype":"string maxdb_stmt_sqlstate(resource $stmt)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt_store_result":{"id":"function.maxdb-stmt-store-result","purpose":"Transfers a result set from a prepared statement","prototype":"object maxdb_stmt_store_result(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_stmt::store_result":{"id":"function.maxdb-stmt-store-result","purpose":"Transfers a result set from a prepared statement","prototype":"object maxdb_stmt::store_result(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_store_result":{"id":"function.maxdb-store-result","purpose":"Transfers a result set from the last query","prototype":"object maxdb_store_result(resource $link)","return":"<p class=\"para\">   Returns a result resource or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::store_result":{"id":"function.maxdb-store-result","purpose":"Transfers a result set from the last query","prototype":"object maxdb::store_result(resource $link)","return":"<p class=\"para\">   Returns a result resource or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_thread_id":{"id":"function.maxdb-thread-id","purpose":"Returns the thread ID for the current connection","prototype":"int maxdb_thread_id(resource $link)","return":"<p class=\"para\">   <span class=\"function\">maxdb_thread_id<\/span> returns the Thread ID for the current connection.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::thread_id":{"id":"function.maxdb-thread-id","purpose":"Returns the thread ID for the current connection","prototype":"int maxdb::thread_id(resource $link)","return":"<p class=\"para\">   <span class=\"function\">maxdb_thread_id<\/span> returns the Thread ID for the current connection.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_thread_safe":{"id":"function.maxdb-thread-safe","purpose":"Returns whether thread safety is given or not","prototype":"bool maxdb_thread_safe()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the client library is thread-safe, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL maxdb >= 7.6.06.04"},"maxdb_use_result":{"id":"function.maxdb-use-result","purpose":"Initiate a result set retrieval","prototype":"resource maxdb_use_result(resource $link)","return":"<p class=\"para\">   Returns result  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::use_result":{"id":"function.maxdb-use-result","purpose":"Initiate a result set retrieval","prototype":"resource maxdb::use_result(resource $link)","return":"<p class=\"para\">   Returns result  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb_warning_count":{"id":"function.maxdb-warning-count","purpose":"Returns the number of warnings from the last query for the given link","prototype":"int maxdb_warning_count(resource $link)","return":"<p class=\"para\">   Number of warnings or zero if there are no warnings.  <\/p>","versions":"PECL maxdb >= 1.0"},"maxdb::warning_count":{"id":"function.maxdb-warning-count","purpose":"Returns the number of warnings from the last query for the given link","prototype":"int maxdb::warning_count(resource $link)","return":"<p class=\"para\">   Number of warnings or zero if there are no warnings.  <\/p>","versions":"PECL maxdb >= 1.0"},"log_cmd_delete":{"id":"function.log-cmd-delete","purpose":"Callback When Deleting Documents","prototype":"callable log_cmd_delete(array $server, array $writeOptions, array $deleteOptions, array $protocolOptions)","return":"","versions":"PECL mongo >= 1.5.0"},"log_cmd_insert":{"id":"function.log-cmd-insert","purpose":"Callback When Inserting Documents","prototype":"callable log_cmd_insert(array $server, array $document, array $writeOptions, array $protocolOptions)","return":"","versions":"PECL mongo >= 1.5.0"},"log_cmd_update":{"id":"function.log-cmd-update","purpose":"Callback When Updating Documents","prototype":"callable log_cmd_update(array $server, array $writeOptions, array $updateOptions, array $protocolOptions)","return":"","versions":"PECL mongo >= 1.5.0"},"log_getmore":{"id":"function.log-getmore","purpose":"Callback When Retrieving Next Cursor Batch","prototype":"callable log_getmore(array $server, array $info)","return":"","versions":"PECL mongo >= 1.5.0"},"log_killcursor":{"id":"function.log-killcursor","purpose":"Callback When Executing KILLCURSOR operations","prototype":"callable log_killcursor(array $server, array $info)","return":"","versions":"PECL mongo >= 1.5.0"},"log_reply":{"id":"function.log-reply","purpose":"Callback When Reading the MongoDB reply","prototype":"callable log_reply(array $server, array $messageHeaders, array $operationHeaders)","return":"","versions":"PECL mongo >= 1.5.0"},"log_write_batch":{"id":"function.log-write-batch","purpose":"Callback When Writing Batches","prototype":"callable log_write_batch(array $server, array $writeOptions, array $batch, array $protocolOptions)","return":"","versions":"PECL mongo >= 1.5.0"},"MongoClient::close":{"id":"mongoclient.close","purpose":"Closes this connection","prototype":"bool MongoClient::close([boolean|string $connection = ''])","return":"<p class=\"para\">   Returns if the connection was successfully closed.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::connect":{"id":"mongoclient.connect","purpose":"Connects to a database server","prototype":"bool MongoClient::connect()","return":"<p class=\"para\">   If the connection was successful.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::__construct":{"id":"mongoclient.construct","purpose":"Creates a new database connection object","prototype":" MongoClient::__construct([string $server = \"mongodb:\/\/localhost:27017\" [, array $options = ) [, array $driver_options = '']]])","return":"<p class=\"para\">   Returns a new database connection object.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::dropDB":{"id":"mongoclient.dropdb","purpose":"Drops a database [deprecated]","prototype":"array MongoClient::dropDB(mixed $db)","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::__get":{"id":"mongoclient.get","purpose":"Gets a database","prototype":"MongoDB MongoClient::__get(string $dbname)","return":"<p class=\"para\">   Returns a new db object.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::getConnections":{"id":"mongoclient.getconnections","purpose":"Return info about all open connections","prototype":"array MongoClient::getConnections()","return":"<p class=\"para\">  An <span class=\"type\">array<\/span> of open connections.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::getHosts":{"id":"mongoclient.gethosts","purpose":"Updates status for all associated hosts","prototype":"array MongoClient::getHosts()","return":"<p class=\"para\">   Returns an array of information about the hosts in the set. Includes each   host&#039;s hostname, its health (1 is healthy), its state (1 is primary, 2 is   secondary, 0 is anything else), the amount of time it took to ping the   server, and when the last ping occurred. For example, on a three-member   replica set, it might look something like:  <\/p>  <div class=\"example-contents screen\"><div class=\"cdata\"><pre>array(3) {  [&quot;A:27017&quot;]=&gt;  array(4) {    [&quot;host&quot;]=&gt;    &quot;A&quot;    [&quot;port&quot;]=&gt;    27017    [&quot;health&quot;]=&gt;    int(1)    [&quot;state&quot;]=&gt;    int(2)    [&quot;ping&quot;]=&gt;    int(369)    [&quot;lastPing&quot;]=&gt;    int(1309470644)  }  [&quot;B:27017&quot;]=&gt;  array(4) {    [&quot;host&quot;]=&gt;    &quot;B&quot;    [&quot;port&quot;]=&gt;    27017    [&quot;health&quot;]=&gt;    int(1)    [&quot;state&quot;]=&gt;    int(1)    [&quot;ping&quot;]=&gt;    int(139)    [&quot;lastPing&quot;]=&gt;    int(1309470644)  }  [&quot;C:27017&quot;]=&gt;  array(4) {    [&quot;host&quot;]=&gt;    &quot;C&quot;    [&quot;port&quot;]=&gt;    27017    [&quot;health&quot;]=&gt;    int(1)    [&quot;state&quot;]=&gt;    int(2)    [&quot;ping&quot;]=&gt;    int(1012)    [&quot;lastPing&quot;]=&gt;    int(1309470644)  }}<\/pre><\/div>  <\/div>","versions":"PECL mongo >=1.3.0"},"MongoClient::getReadPreference":{"id":"mongoclient.getreadpreference","purpose":"Get the read preference for this connection","prototype":"array MongoClient::getReadPreference()","return":"<p class=\"para\">This function returns an array describing the read preference. The array contains the values <em>type<\/em> for the string read preference mode (corresponding to the <span class=\"classname\">MongoClient<\/span> constants), and <em>tagsets<\/em> containing a list of all tag set criteria. If no tag sets were specified, <em>tagsets<\/em> will not be present in the array.<\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::getWriteConcern":{"id":"mongoclient.getwriteconcern","purpose":"Get the write concern for this connection","prototype":"array MongoClient::getWriteConcern()","return":"<p class=\"para\">This function returns an array describing the write concern. The array contains the values <em>w<\/em> for an integer acknowledgement level or string mode, and <em>wtimeout<\/em> denoting the maximum number of milliseconds to wait for the server to satisfy the write concern.<\/p>","versions":"PECL mongo >=1.5.0"},"MongoClient::killCursor":{"id":"mongoclient.killcursor","purpose":"Kills a specific cursor on the server","prototype":"bool MongoClient::killCursor(string $server_hash, int|MongoInt64 $id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the method attempted to kill a cursor, and <strong><code>FALSE<\/code><\/strong> if   there was something wrong with the arguments (such as a wrong   <code class=\"parameter\">server_hash<\/code>). The return status does <em class=\"emphasis\">not   reflect<\/em> where the cursor was actually killed as the server does   not provide that information.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoClient::listDBs":{"id":"mongoclient.listdbs","purpose":"Lists all of the databases available","prototype":"array MongoClient::listDBs()","return":"<p class=\"para\">   Returns an associative array containing three fields.  The first field is   <em>databases<\/em>, which in turn contains an array.  Each element   of the array is an associative array corresponding to a database, giving th   database&#039;s name, size, and if it&#039;s empty.  The other two fields are   <em>totalSize<\/em> (in bytes) and <em>ok<\/em>, which is 1   if this method ran successfully.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::selectCollection":{"id":"mongoclient.selectcollection","purpose":"Gets a database collection","prototype":"MongoCollection MongoClient::selectCollection(string $db, string $collection)","return":"<p class=\"para\">   Returns a new collection object.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::selectDB":{"id":"mongoclient.selectdb","purpose":"Gets a database","prototype":"MongoDB MongoClient::selectDB(string $name)","return":"<p class=\"para\">   Returns a new database object.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::setReadPreference":{"id":"mongoclient.setreadpreference","purpose":"Set the read preference for this connection","prototype":"bool MongoClient::setReadPreference(string $read_preference [, array $tags = ''])","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL mongo >=1.3.0"},"MongoClient::setWriteConcern":{"id":"mongoclient.setwriteconcern","purpose":"Set the write concern for this connection","prototype":"bool MongoClient::setWriteConcern(mixed $w [, int $wtimeout = ''])","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL mongo >=1.5.0"},"MongoClient::__toString":{"id":"mongoclient.tostring","purpose":"String representation of this connection","prototype":"string MongoClient::__toString()","return":"<p class=\"para\">   Returns hostname and port for this connection.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoDB::authenticate":{"id":"mongodb.authenticate","purpose":"Log in to this database","prototype":"array MongoDB::authenticate(string $username, string $password)","return":"<p class=\"para\">   Returns database response.  If the login was successful, it will return  <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/><\/span><span style=\"color: #007700\">array(<\/span><span style=\"color: #DD0000\">\"ok\"&nbsp;<\/span><span style=\"color: #007700\">=&gt;&nbsp;<\/span><span style=\"color: #0000BB\">1<\/span><span style=\"color: #007700\">);<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>  <\/div>  If something went wrong, it will return  <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/><\/span><span style=\"color: #007700\">array(<\/span><span style=\"color: #DD0000\">\"ok\"&nbsp;<\/span><span style=\"color: #007700\">=&gt;&nbsp;<\/span><span style=\"color: #0000BB\">0<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"errmsg\"&nbsp;<\/span><span style=\"color: #007700\">=&gt;&nbsp;<\/span><span style=\"color: #DD0000\">\"auth&nbsp;fails\"<\/span><span style=\"color: #007700\">);<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>  <\/div>  (&quot;auth fails&quot; could be another message, depending on database version and what  when wrong).  <\/p>","versions":"PECL mongo >=1.0.1"},"MongoDB::command":{"id":"mongodb.command","purpose":"Execute a database command","prototype":"array MongoDB::command(array $command [, array $options = array() [, string $hash = '']])","return":"<p class=\"para\">   Returns database response. Every database response is always maximum one   document, which means that the result of a database command can never   exceed 16MB. The resulting document&#039;s structure depends on the command, but   most results will have the <em>ok<\/em> field to indicate success   or failure and <em>results<\/em> containing an array of each of   the resulting documents.  <\/p>","versions":"PECL mongo >=0.9.2"},"MongoDB::__construct":{"id":"mongodb.construct","purpose":"Creates a new database","prototype":" MongoDB::__construct(MongoClient $conn, string $name)","return":"<p class=\"para\">   Returns the database.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::createCollection":{"id":"mongodb.createcollection","purpose":"Creates a collection","prototype":"MongoCollection MongoDB::createCollection(string $name [, array $options = ''])","return":"<p class=\"para\">   Returns a collection object representing the new collection.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::createDBRef":{"id":"mongodb.createdbref","purpose":"Creates a database reference","prototype":"array MongoDB::createDBRef(string $collection, mixed $document_or_id)","return":"<p class=\"para\">   Returns a database reference array.  <\/p>  <p class=\"para\">   If an array without an <em>_id<\/em> field was provided as the   <em>document_or_id<\/em> parameter, <strong><code>NULL<\/code><\/strong> will be returned.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::drop":{"id":"mongodb.drop","purpose":"Drops this database","prototype":"array MongoDB::drop()","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::dropCollection":{"id":"mongodb.dropcollection","purpose":"Drops a collection [deprecated]","prototype":"array MongoDB::dropCollection(mixed $coll)","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::execute":{"id":"mongodb.execute","purpose":"Runs JavaScript code on the database server [deprecated]","prototype":"array MongoDB::execute(mixed $code [, array $args = array()])","return":"<p class=\"para\">   Returns the result of the evaluation.  <\/p>","versions":"PECL mongo >=0.9.3"},"MongoDB::forceError":{"id":"mongodb.forceerror","purpose":"Creates a database error","prototype":"bool MongoDB::forceError()","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.5"},"MongoDB::__get":{"id":"mongodb.get","purpose":"Gets a collection","prototype":"MongoCollection MongoDB::__get(string $name)","return":"<p class=\"para\">   Returns the collection.  <\/p>","versions":"PECL mongo >=1.0.2"},"MongoDB::getCollectionInfo":{"id":"mongodb.getcollectioninfo","purpose":"Returns information about collections in this database","prototype":"array MongoDB::getCollectionInfo([array $options = array()])","return":"<p class=\"para\">   This function returns an array where each element is an array describing a   collection. Elements will contain a <em>name<\/em> key denoting the   name of the collection, and optionally contain an <em>options<\/em>   key denoting an array of objects used to create the collection. For example,   capped collections will include <em>capped<\/em> and   <em>size<\/em> options.  <\/p>","versions":"PECL mongo >=1.6.0"},"MongoDB::getCollectionNames":{"id":"mongodb.getcollectionnames","purpose":"Gets an array of names for all collections in this database","prototype":"array MongoDB::getCollectionNames([array $options = array()])","return":"<p class=\"para\">   Returns the collection names as an array of strings.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoDB::getDBRef":{"id":"mongodb.getdbref","purpose":"Fetches the document pointed to by a database reference","prototype":"array MongoDB::getDBRef(array $ref)","return":"<p class=\"para\">   Returns the document pointed to by the reference.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::getGridFS":{"id":"mongodb.getgridfs","purpose":"Fetches toolkit for dealing with files stored in this database","prototype":"MongoGridFS MongoDB::getGridFS([string $prefix = \"fs\"])","return":"<p class=\"para\">   Returns a new gridfs object for this database.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::getProfilingLevel":{"id":"mongodb.getprofilinglevel","purpose":"Gets this database's profiling level","prototype":"int MongoDB::getProfilingLevel()","return":"<p class=\"para\">   Returns the profiling level.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::getReadPreference":{"id":"mongodb.getreadpreference","purpose":"Get the read preference for this database","prototype":"array MongoDB::getReadPreference()","return":"<p class=\"para\">This function returns an array describing the read preference. The array contains the values <em>type<\/em> for the string read preference mode (corresponding to the <span class=\"classname\">MongoClient<\/span> constants), and <em>tagsets<\/em> containing a list of all tag set criteria. If no tag sets were specified, <em>tagsets<\/em> will not be present in the array.<\/p>","versions":"PECL mongo >=1.3.0"},"MongoDB::getSlaveOkay":{"id":"mongodb.getslaveokay","purpose":"Get slaveOkay setting for this database","prototype":"bool MongoDB::getSlaveOkay()","return":"<p class=\"para\">   Returns the value of slaveOkay for this instance.  <\/p>","versions":"PECL mongo >=1.1.0"},"MongoDB::getWriteConcern":{"id":"mongodb.getwriteconcern","purpose":"Get the write concern for this database","prototype":"array MongoDB::getWriteConcern()","return":"<p class=\"para\">This function returns an array describing the write concern. The array contains the values <em>w<\/em> for an integer acknowledgement level or string mode, and <em>wtimeout<\/em> denoting the maximum number of milliseconds to wait for the server to satisfy the write concern.<\/p>","versions":"PECL mongo >=1.5.0"},"MongoDB::lastError":{"id":"mongodb.lasterror","purpose":"Check if there was an error on the most recent db operation performed","prototype":"array MongoDB::lastError()","return":"<p class=\"para\">   Returns the error, if there was one.  <\/p>","versions":"PECL mongo >=0.9.5"},"MongoDB::listCollections":{"id":"mongodb.listcollections","purpose":"Gets an array of MongoCollection objects for all collections in this database","prototype":"array MongoDB::listCollections([array $options = array()])","return":"<p class=\"para\">   Returns an array of MongoCollection objects.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::prevError":{"id":"mongodb.preverror","purpose":"Checks for the last error thrown during a database operation","prototype":"array MongoDB::prevError()","return":"<p class=\"para\">   Returns the error and the number of operations ago it occurred.  <\/p>","versions":"PECL mongo >=0.9.5"},"MongoDB::repair":{"id":"mongodb.repair","purpose":"Repairs and compacts this database","prototype":"array MongoDB::repair([bool $preserve_cloned_files = '' [, bool $backup_original_files = '']])","return":"<p class=\"para\">   Returns db response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::resetError":{"id":"mongodb.reseterror","purpose":"Clears any flagged errors on the database","prototype":"array MongoDB::resetError()","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.5"},"MongoDB::selectCollection":{"id":"mongodb.selectcollection","purpose":"Gets a collection","prototype":"MongoCollection MongoDB::selectCollection(string $name)","return":"<p class=\"para\">   Returns a new collection object.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::setProfilingLevel":{"id":"mongodb.setprofilinglevel","purpose":"Sets this database's profiling level","prototype":"int MongoDB::setProfilingLevel(int $level)","return":"<p class=\"para\">   Returns the previous profiling level.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoDB::setReadPreference":{"id":"mongodb.setreadpreference","purpose":"Set the read preference for this database","prototype":"bool MongoDB::setReadPreference(string $read_preference [, array $tags = ''])","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL mongo >=1.3.0"},"MongoDB::setSlaveOkay":{"id":"mongodb.setslaveokay","purpose":"Change slaveOkay setting for this database","prototype":"bool MongoDB::setSlaveOkay([bool $ok = ''])","return":"<p class=\"para\">   Returns the former value of slaveOkay for this instance.  <\/p>","versions":"PECL mongo >=1.1.0"},"MongoDB::setWriteConcern":{"id":"mongodb.setwriteconcern","purpose":"Set the write concern for this database","prototype":"bool MongoDB::setWriteConcern(mixed $w [, int $wtimeout = ''])","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL mongo >=1.5.0"},"MongoDB::__toString":{"id":"mongodb.--tostring","purpose":"The name of this database","prototype":"string MongoDB::__toString()","return":"<p class=\"para\">   Returns this database&#039;s name.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::aggregate":{"id":"mongocollection.aggregate","purpose":"Perform an aggregation using the aggregation framework","prototype":"array MongoCollection::aggregate(array $pipeline [, array $options = '' [, array $op = '' [, array $... = '']]])","return":"<p class=\"para\">   The result of the aggregation as an array. The <var class=\"varname\">ok<\/var> will   be set to <em>1<\/em> on success, <em>0<\/em> on failure.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoCollection::aggregateCursor":{"id":"mongocollection.aggregatecursor","purpose":"Execute an aggregation pipeline command and retrieve results through a cursor","prototype":"MongoCommandCursor MongoCollection::aggregateCursor(array $command [, array $options = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">MongoCommandCursor<\/span> object. Because this   implements the <span class=\"classname\">Iterator<\/span> interface you can    iterate over each of the results as returned by the command query. The   <span class=\"classname\">MongoCommandCursor<\/span> also implements the   <span class=\"classname\">MongoCursorInterface<\/span> interface which adds the    <span class=\"methodname\">MongoCommandCursor::batchSize<\/span>,    <span class=\"methodname\">MongoCommandCursor::dead<\/span>,    <span class=\"methodname\">MongoCommandCursor::info<\/span> methods.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCollection::batchInsert":{"id":"mongocollection.batchinsert","purpose":"Inserts multiple documents into this collection","prototype":"mixed MongoCollection::batchInsert(array $a [, array $options = array()])","return":"<p class=\"para\">   If the <em>w<\/em> parameter is set to acknowledge the write,   returns an associative array with the status of the inserts (&quot;ok&quot;) and any   error that may have occurred (&quot;err&quot;).  Otherwise, returns <strong><code>TRUE<\/code><\/strong> if the   batch insert was successfully sent, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::__construct":{"id":"mongocollection.construct","purpose":"Creates a new collection","prototype":" MongoCollection::__construct(MongoDB $db, string $name)","return":"<p class=\"para\">   Returns a new collection object.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::count":{"id":"mongocollection.count","purpose":"Counts the number of documents in this collection","prototype":"int MongoCollection::count([array $query = array() [, array $options = array()]])","return":"<p class=\"para\">   Returns the number of documents matching the query.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::createDBRef":{"id":"mongocollection.createdbref","purpose":"Creates a database reference","prototype":"array MongoCollection::createDBRef(mixed $document_or_id)","return":"<p class=\"para\">   Returns a database reference array.  <\/p>  <p class=\"para\">   If an array without an <em>_id<\/em> field was provided as the   <em>document_or_id<\/em> parameter, <strong><code>NULL<\/code><\/strong> will be returned.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::createIndex":{"id":"mongocollection.createindex","purpose":"Creates an index on the specified field(s) if it does not already exist","prototype":"bool MongoCollection::createIndex(array $keys [, array $options = array()])","return":"<p class=\"para\">   Returns an array containing the status of the index creation. The array   contains whether the operation succeeded (<em>&quot;ok&quot;<\/em>), the   number of indexes before and after the operation   (<em>&quot;numIndexesBefore&quot;<\/em> and   <em>&quot;numIndexesAfter&quot;<\/em>), and whether the collection that the   index belongs to has been created   (<em>&quot;createdCollectionAutomatically&quot;<\/em>). If the index already   existed and did not need to be created, a <em>&quot;note&quot;<\/em> field may   be present in lieu of <em>&quot;numIndexesAfter&quot;<\/em>.  <\/p>  <p class=\"para\">   With MongoDB 2.4 and earlier, a status document is only returned if the   <a href=\"mongo.writeconcerns.html\" class=\"link\">write concern<\/a> is at least   <em>1<\/em>. Otherwise, <strong><code>TRUE<\/code><\/strong> is returned. The fields in the status   document are different, except for the <em>&quot;ok&quot;<\/em> field, which   signals whether the index creation was successful. Additional fields are   described in the documentation for   <span class=\"function\">MongoCollection::insert<\/span>.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCollection::deleteIndex":{"id":"mongocollection.deleteindex","purpose":"Deletes an index from this collection","prototype":"array MongoCollection::deleteIndex(string|array $keys)","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::deleteIndexes":{"id":"mongocollection.deleteindexes","purpose":"Delete all indices for this collection","prototype":"array MongoCollection::deleteIndexes()","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::distinct":{"id":"mongocollection.distinct","purpose":"Retrieve a list of distinct values for the given key across a collection","prototype":"array MongoCollection::distinct(string $key [, array $query = ''])","return":"<p class=\"para\">   Returns an array of distinct values,  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PECL mongo >=1.2.11"},"MongoCollection::drop":{"id":"mongocollection.drop","purpose":"Drops this collection","prototype":"array MongoCollection::drop()","return":"<p class=\"para\">   Returns the database response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::ensureIndex":{"id":"mongocollection.ensureindex","purpose":"Creates an index on the specified field(s) if it does not already exist","prototype":"bool MongoCollection::ensureIndex(string|array $key|keys [, array $options = array()])","return":"<p class=\"para\">   Returns an array containing the status of the index creation. The array   contains whether the operation succeeded (<em>&quot;ok&quot;<\/em>), the   number of indexes before and after the operation   (<em>&quot;numIndexesBefore&quot;<\/em> and   <em>&quot;numIndexesAfter&quot;<\/em>), and whether the collection that the   index belongs to has been created   (<em>&quot;createdCollectionAutomatically&quot;<\/em>). If the index already   existed and did not need to be created, a <em>&quot;note&quot;<\/em> field may   be present in lieu of <em>&quot;numIndexesAfter&quot;<\/em>.  <\/p>  <p class=\"para\">   With MongoDB 2.4 and earlier, a status document is only returned if the   <a href=\"mongo.writeconcerns.html\" class=\"link\">write concern<\/a> is at least   <em>1<\/em>. Otherwise, <strong><code>TRUE<\/code><\/strong> is returned. The fields in the status   document are different, except for the <em>&quot;ok&quot;<\/em> field, which   signals whether the index creation was successful. Additional fields are   described in the documentation for   <span class=\"function\">MongoCollection::insert<\/span>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::find":{"id":"mongocollection.find","purpose":"Queries this collection, returning a MongoCursor  for the result set","prototype":"MongoCursor MongoCollection::find([array $query = array() [, array $fields = array()]])","return":"<p class=\"para\">   Returns a cursor for the search results.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::findAndModify":{"id":"mongocollection.findandmodify","purpose":"Update a document and return it","prototype":"array MongoCollection::findAndModify(array $query [, array $update = '' [, array $fields = '' [, array $options = '']]])","return":"<p class=\"para\">   Returns the original document, or the modified document when   <var class=\"varname\">new<\/var> is set.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoCollection::findOne":{"id":"mongocollection.findone","purpose":"Queries this collection, returning a single element","prototype":"array MongoCollection::findOne([array $query = array() [, array $fields = array() [, array $options = array()]]])","return":"<p class=\"para\">   Returns record matching the search or <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::__get":{"id":"mongocollection.get","purpose":"Gets a collection","prototype":"MongoCollection MongoCollection::__get(string $name)","return":"<p class=\"para\">   Returns the collection.  <\/p>","versions":"PECL mongo >=1.0.2"},"MongoCollection::getDBRef":{"id":"mongocollection.getdbref","purpose":"Fetches the document pointed to by a database reference","prototype":"array MongoCollection::getDBRef(array $ref)","return":"<p class=\"para\">   Returns the database document pointed to by the reference.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::getIndexInfo":{"id":"mongocollection.getindexinfo","purpose":"Returns information about indexes on this collection","prototype":"array MongoCollection::getIndexInfo()","return":"<p class=\"para\">   This function returns an array in which each element describes an index.   Elements will contain the values <em>name<\/em> for the name of   the index, <em>ns<\/em> for the namespace (a combination of the   database and collection name), and <em>key<\/em> for a list of all   fields in the index and their ordering. Additional values may be present for   special indexes, such as <em>unique<\/em> or   <em>sparse<\/em>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::getName":{"id":"mongocollection.getname","purpose":"Returns this collection's name","prototype":"string MongoCollection::getName()","return":"<p class=\"para\">   Returns the name of this collection.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::getReadPreference":{"id":"mongocollection.getreadpreference","purpose":"Get the read preference for this collection","prototype":"array MongoCollection::getReadPreference()","return":"<p class=\"para\">This function returns an array describing the read preference. The array contains the values <em>type<\/em> for the string read preference mode (corresponding to the <span class=\"classname\">MongoClient<\/span> constants), and <em>tagsets<\/em> containing a list of all tag set criteria. If no tag sets were specified, <em>tagsets<\/em> will not be present in the array.<\/p>","versions":"PECL mongo >=1.3.0"},"MongoCollection::getSlaveOkay":{"id":"mongocollection.getslaveokay","purpose":"Get slaveOkay setting for this collection","prototype":"bool MongoCollection::getSlaveOkay()","return":"<p class=\"para\">   Returns the value of slaveOkay for this instance.  <\/p>","versions":"PECL mongo >=1.1.0"},"MongoCollection::getWriteConcern":{"id":"mongocollection.getwriteconcern","purpose":"Get the write concern for this collection","prototype":"array MongoCollection::getWriteConcern()","return":"<p class=\"para\">This function returns an array describing the write concern. The array contains the values <em>w<\/em> for an integer acknowledgement level or string mode, and <em>wtimeout<\/em> denoting the maximum number of milliseconds to wait for the server to satisfy the write concern.<\/p>","versions":"PECL mongo >=1.5.0"},"MongoCollection::group":{"id":"mongocollection.group","purpose":"Performs an operation similar to SQL's GROUP BY command","prototype":"array MongoCollection::group(mixed $keys, array $initial, MongoCode $reduce [, array $options = array()])","return":"<p class=\"para\">   Returns an array containing the result.  <\/p>","versions":"PECL mongo >=0.9.2"},"MongoCollection::insert":{"id":"mongocollection.insert","purpose":"Inserts a document into the collection","prototype":"bool|array MongoCollection::insert(array|object $document [, array $options = array()])","return":"<p class=\"para\">   Returns an array containing the status of the insertion if the   <em>&quot;w&quot;<\/em> option is set. Otherwise, returns <strong><code>TRUE<\/code><\/strong> if the   inserted array is not empty (a <span class=\"classname\">MongoException<\/span> will be   thrown if the inserted array is empty).  <\/p>  <p class=\"para\">   If an array is returned, the following keys may be present:   <dl>         <dt>      <code class=\"parameter\">ok<\/code>     <\/dt>     <dd>      <p class=\"para\">       This should almost always be 1 (unless last_error itself failed).      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">err<\/code>     <\/dt>     <dd>      <p class=\"para\">       If this field is non-null, an error occurred on the previous operation.       If this field is set, it will be a string describing the error that       occurred.       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">code<\/code>     <\/dt>     <dd>      <p class=\"para\">       If a database error occurred, the relevant error code will be passed       back to the client.       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">errmsg<\/code>     <\/dt>     <dd>      <p class=\"para\">       This field is set if something goes wrong with a database command. It       is coupled with <em>ok<\/em> being 0. For example, if       <em>w<\/em> is set and times out, errmsg will be set to &quot;timed       out waiting for slaves&quot; and <em>ok<\/em> will be 0.  If this       field is set, it will be a string describing the error that occurred.       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">n<\/code>     <\/dt>     <dd>      <p class=\"para\">       If the last operation was an update, upsert, or a remove, the number       of documents affected will be returned. For insert operations, this value       is always <em>0<\/em>.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">wtimeout<\/code>     <\/dt>     <dd>      <p class=\"para\">       If the previous option timed out waiting for replication.       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">waited<\/code>     <\/dt>     <dd>      <p class=\"para\">       How long the operation waited before timing out.       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">wtime<\/code>     <\/dt>     <dd>      <p class=\"para\">       If <em>w<\/em> was set and the operation succeeded, how long it took to       replicate to <em>w<\/em> servers.       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">upserted<\/code>     <\/dt>     <dd>      <p class=\"para\">       If an upsert occurred, this field will contain the new record&#039;s       <em>_id<\/em> field. For upserts, either this field or       <em>updatedExisting<\/em> will be present (unless an error       occurred).       <\/p>     <\/dd>             <dt>      <code class=\"parameter\">updatedExisting<\/code>     <\/dt>     <dd>      <p class=\"para\">       If an upsert updated an existing element, this field will be true. For       upserts, either this field or upserted will be present (unless an error       occurred).       <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::parallelCollectionScan":{"id":"mongocollection.parallelcollectionscan","purpose":"Returns an array of cursors to iterator over a full collection in parallel","prototype":"array[MongoCommandCursor] MongoCollection::parallelCollectionScan(int $num_cursors)","return":"<p class=\"para\">   Returns an array of <span class=\"classname\">MongoCommandCursor<\/span> objects.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCollection::remove":{"id":"mongocollection.remove","purpose":"Remove records from this collection","prototype":"bool|array MongoCollection::remove([array $criteria = array() [, array $options = array()]])","return":"<p class=\"para\">   Returns an array containing the status of the removal if the   <em>&quot;w&quot;<\/em> option is set. Otherwise, returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <p class=\"para\">   Fields in the status array are described in the documentation for   <span class=\"function\">MongoCollection::insert<\/span>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::save":{"id":"mongocollection.save","purpose":"Saves a document to this collection","prototype":"mixed MongoCollection::save(array|object $document [, array $options = array()])","return":"<p class=\"para\">   If <code class=\"parameter\">w<\/code> was set, returns an array containing the status of the save.   Otherwise, returns a boolean representing if the array was not empty (an empty array will not    be inserted).  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::setReadPreference":{"id":"mongocollection.setreadpreference","purpose":"Set the read preference for this collection","prototype":"bool MongoCollection::setReadPreference(string $read_preference [, array $tags = ''])","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL mongo >=1.3.0"},"MongoCollection::setSlaveOkay":{"id":"mongocollection.setslaveokay","purpose":"Change slaveOkay setting for this collection","prototype":"bool MongoCollection::setSlaveOkay([bool $ok = ''])","return":"<p class=\"para\">   Returns the former value of slaveOkay for this instance.  <\/p>","versions":"PECL mongo >=1.1.0"},"MongoCollection::setWriteConcern":{"id":"mongocollection.setwriteconcern","purpose":"Set the write concern for this database","prototype":"bool MongoCollection::setWriteConcern(mixed $w [, int $wtimeout = ''])","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL mongo >=1.5.0"},"MongoCollection::toIndexString":{"id":"mongocollection.toindexstring","purpose":"Converts keys specifying an index to its identifying string","prototype":"string MongoCollection::toIndexString(mixed $keys)","return":"<p class=\"para\">   Returns a string that describes the index.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::__toString":{"id":"mongocollection.--tostring","purpose":"String representation of this collection","prototype":"string MongoCollection::__toString()","return":"<p class=\"para\">   Returns the full name of this collection.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::update":{"id":"mongocollection.update","purpose":"Update records based on a given criteria","prototype":"bool|array MongoCollection::update(array $criteria, array $new_object [, array $options = array()])","return":"<p class=\"para\">   Returns an array containing the status of the update if the   <em>&quot;w&quot;<\/em> option is set. Otherwise, returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <p class=\"para\">   Fields in the status array are described in the documentation for   <span class=\"function\">MongoCollection::insert<\/span>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCollection::validate":{"id":"mongocollection.validate","purpose":"Validates this collection","prototype":"array MongoCollection::validate([bool $scan_data = ''])","return":"<p class=\"para\">   Returns the database&#039;s evaluation of this object.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::addOption":{"id":"mongocursor.addoption","purpose":"Adds a top-level key\/value pair to a query","prototype":"MongoCursor MongoCursor::addOption(string $key, mixed $value)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.0.4"},"MongoCursor::awaitData":{"id":"mongocursor.awaitdata","purpose":"Sets whether this cursor will wait for a while for a tailable cursor to return more data","prototype":"MongoCursor MongoCursor::awaitData([bool $wait = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.2.11"},"MongoCursor::batchSize":{"id":"mongocursor.batchsize","purpose":"Limits the number of elements returned in one batch","prototype":"MongoCursor MongoCursor::batchSize(int $batchSize)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.0.11"},"MongoCursor::__construct":{"id":"mongocursor.construct","purpose":"Create a new cursor","prototype":" MongoCursor::__construct(MongoClient $connection, string $ns [, array $query = array() [, array $fields = array()]])","return":"<p class=\"para\">   Returns the new cursor.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::count":{"id":"mongocursor.count","purpose":"Counts the number of results for this query","prototype":"int MongoCursor::count([bool $foundOnly = ''])","return":"<p class=\"para\">   The number of documents returned by this cursor&#039;s query.  <\/p>","versions":"PECL mongo >=0.9.2"},"MongoCursor::current":{"id":"mongocursor.current","purpose":"Returns the current element","prototype":"array MongoCursor::current()","return":"<p class=\"para\">   The current result document as an associative array. <strong><code>NULL<\/code><\/strong> will be returned   if there is no result.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::dead":{"id":"mongocursor.dead","purpose":"Checks if there are results that have not yet been sent from the database","prototype":"bool MongoCursor::dead()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more results that have not yet been sent to the   client, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL mongo >=0.9.6"},"MongoCursor::doQuery":{"id":"mongocursor.doquery","purpose":"Execute the query","prototype":"void MongoCursor::doQuery()","return":"<p class=\"para\">   <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=0.9.0 <1.6.0"},"MongoCursor::explain":{"id":"mongocursor.explain","purpose":"Return an explanation of the query, often useful for optimization and debugging","prototype":"array MongoCursor::explain()","return":"<p class=\"para\">   Returns an explanation of the query.  <\/p>","versions":"PECL mongo >=0.9.2"},"MongoCursor::fields":{"id":"mongocursor.fields","purpose":"Sets the fields for a query","prototype":"MongoCursor MongoCursor::fields(array $f)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.0.6"},"MongoCursor::getNext":{"id":"mongocursor.getnext","purpose":"Advances the cursor to the next result, and returns that result","prototype":"array MongoCursor::getNext()","return":"","versions":"PECL mongo >=0.9.0"},"MongoCursor::getReadPreference":{"id":"mongocursor.getreadpreference","purpose":"Get the read preference for this query","prototype":"array MongoCursor::getReadPreference()","return":"<p class=\"para\">This function returns an array describing the read preference. The array contains the values <em>type<\/em> for the string read preference mode (corresponding to the <span class=\"classname\">MongoClient<\/span> constants), and <em>tagsets<\/em> containing a list of all tag set criteria. If no tag sets were specified, <em>tagsets<\/em> will not be present in the array.<\/p>","versions":"PECL mongo >=1.3.3"},"MongoCursor::hasNext":{"id":"mongocursor.hasnext","purpose":"Checks if there are any more elements in this cursor","prototype":"bool MongoCursor::hasNext()","return":"<p class=\"para\">   Returns if there is another element.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::hint":{"id":"mongocursor.hint","purpose":"Gives the database a hint about the query","prototype":"MongoCursor MongoCursor::hint(mixed $index)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::immortal":{"id":"mongocursor.immortal","purpose":"Sets whether this cursor will timeout","prototype":"MongoCursor MongoCursor::immortal([bool $liveForever = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.0.1"},"MongoCursor::info":{"id":"mongocursor.info","purpose":"Gets information about the cursor's creation and iteration","prototype":"array MongoCursor::info()","return":"<p class=\"para\">   Returns the namespace, batch size, limit, skip, flags, query, and projected   fields for this cursor. If the cursor has started iterating, additional   information about iteration and the connection will be included.  <\/p>","versions":"PECL mongo >=1.0.5"},"MongoCursor::key":{"id":"mongocursor.key","purpose":"Returns the current result's _id, or its index within the result set","prototype":"string|int MongoCursor::key()","return":"<p class=\"para\">   The current result&#039;s <em>_id<\/em> as a string. If the result   has no <em>_id<\/em>, its numeric index within the result set will   be returned as an integer.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::limit":{"id":"mongocursor.limit","purpose":"Limits the number of results returned","prototype":"MongoCursor MongoCursor::limit(int $num)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::maxTimeMS":{"id":"mongocursor.maxtimems","purpose":"Sets a server-side timeout for this query","prototype":"MongoCursor MongoCursor::maxTimeMS(int $ms)","return":"<p class=\"para\">   This cursor.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCursor::next":{"id":"mongocursor.next","purpose":"Advances the cursor to the next result, and returns that result","prototype":"array MongoCursor::next()","return":"<p class=\"para\">   Returns the next document.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::partial":{"id":"mongocursor.partial","purpose":"If this query should fetch partial results from mongos if a shard is down","prototype":"MongoCursor MongoCursor::partial([bool $okay = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.2.0"},"MongoCursor::reset":{"id":"mongocursor.reset","purpose":"Clears the cursor","prototype":"void MongoCursor::reset()","return":"<p class=\"para\">   <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::rewind":{"id":"mongocursor.rewind","purpose":"Returns the cursor to the beginning of the result set","prototype":"void MongoCursor::rewind()","return":"<p class=\"para\">   <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::setFlag":{"id":"mongocursor.setflag","purpose":"Sets arbitrary flags in case there is no method available the specific flag","prototype":"MongoCursor MongoCursor::setFlag(int $flag [, bool $set = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.2.11"},"MongoCursor::setReadPreference":{"id":"mongocursor.setreadpreference","purpose":"Set the read preference for this query","prototype":"MongoCursor MongoCursor::setReadPreference(string $read_preference [, array $tags = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.3.3"},"MongoCursor::skip":{"id":"mongocursor.skip","purpose":"Skips a number of results","prototype":"MongoCursor MongoCursor::skip(int $num)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::slaveOkay":{"id":"mongocursor.slaveokay","purpose":"Sets whether this query can be done on a secondary [deprecated]","prototype":"MongoCursor MongoCursor::slaveOkay([bool $okay = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=0.9.4"},"MongoCursor::snapshot":{"id":"mongocursor.snapshot","purpose":"Use snapshot mode for the query","prototype":"MongoCursor MongoCursor::snapshot()","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=0.9.4"},"MongoCursor::sort":{"id":"mongocursor.sort","purpose":"Sorts the results by given fields","prototype":"MongoCursor MongoCursor::sort(array $fields)","return":"<p class=\"para\">   Returns the same cursor that this method was called on.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursor::tailable":{"id":"mongocursor.tailable","purpose":"Sets whether this cursor will be left open after fetching the last results","prototype":"MongoCursor MongoCursor::tailable([bool $tail = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=0.9.4"},"MongoCursor::timeout":{"id":"mongocursor.timeout","purpose":"Sets a client-side timeout for this query","prototype":"MongoCursor MongoCursor::timeout(int $ms)","return":"<p class=\"para\">   This cursor.  <\/p>","versions":"PECL mongo >=1.0.3"},"MongoCursor::valid":{"id":"mongocursor.valid","purpose":"Checks if the cursor is reading a valid result","prototype":"bool MongoCursor::valid()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current result is not null, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoCursorInterface::batchSize":{"id":"mongocursorinterface.batchsize","purpose":"Limits the number of elements returned in one batch","prototype":"MongoCursorInterface MongoCursorInterface::batchSize(int $batchSize)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCursorInterface::dead":{"id":"mongocursorinterface.dead","purpose":"Checks if there are results that have not yet been sent from the database","prototype":"bool MongoCursorInterface::dead()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more results that have not yet been sent to the   client, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCursorInterface::getReadPreference":{"id":"mongocursorinterface.getreadpreference","purpose":"Get the read preference for this query","prototype":"array MongoCursorInterface::getReadPreference()","return":"<p class=\"para\">This function returns an array describing the read preference. The array contains the values <em>type<\/em> for the string read preference mode (corresponding to the <span class=\"classname\">MongoClient<\/span> constants), and <em>tagsets<\/em> containing a list of all tag set criteria. If no tag sets were specified, <em>tagsets<\/em> will not be present in the array.<\/p>","versions":"PECL mongo >=1.6.0"},"MongoCursorInterface::info":{"id":"mongocursorinterface.info","purpose":"Gets information about the cursor's creation and iteration","prototype":"array MongoCursorInterface::info()","return":"<p class=\"para\">   Returns the namespace, batch size, limit, skip, flags, query, and projected   fields for this cursor. If the cursor has started iterating, additional   information about iteration and the connection will be included.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCursorInterface::setReadPreference":{"id":"mongocursorinterface.setreadpreference","purpose":"Set the read preference for this query","prototype":"MongoCursorInterface MongoCursorInterface::setReadPreference(string $read_preference [, array $tags = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.6.0"},"MongoCursorInterface::timeout":{"id":"mongocursorinterface.timeout","purpose":"Sets a client-side timeout for this query","prototype":"MongoCursorInterface MongoCursorInterface::timeout(int $ms)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::batchSize":{"id":"mongocommandcursor.batchsize","purpose":"Limits the number of elements returned in one batch","prototype":"MongoCommandCursor MongoCommandCursor::batchSize(int $batchSize)","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::__construct":{"id":"mongocommandcursor.construct","purpose":"Create a new command cursor","prototype":" MongoCommandCursor::__construct(MongoClient $connection, string $ns, array $command)","return":"<p class=\"para\">   Returns the new cursor.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::createFromDocument":{"id":"mongocommandcursor.createfromdocument","purpose":"Create a new command cursor from an existing command response document","prototype":"MongoCommandCursor MongoCommandCursor::createFromDocument(MongoClient $connection, string $hash, array $document)","return":"<p class=\"para\">   Returns the new cursor.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::current":{"id":"mongocommandcursor.current","purpose":"Returns the current element","prototype":"array MongoCommandCursor::current()","return":"<p class=\"para\">   The current result document as an associative array. <strong><code>NULL<\/code><\/strong> will be returned   if there is no result.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::dead":{"id":"mongocommandcursor.dead","purpose":"Checks if there are results that have not yet been sent from the database","prototype":"bool MongoCommandCursor::dead()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more results that have not yet been sent to the   client, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::getReadPreference":{"id":"mongocommandcursor.getreadpreference","purpose":"Get the read preference for this command","prototype":"array MongoCommandCursor::getReadPreference()","return":"<p class=\"para\">This function returns an array describing the read preference. The array contains the values <em>type<\/em> for the string read preference mode (corresponding to the <span class=\"classname\">MongoClient<\/span> constants), and <em>tagsets<\/em> containing a list of all tag set criteria. If no tag sets were specified, <em>tagsets<\/em> will not be present in the array.<\/p>","versions":"PECL mongo >=1.6.0"},"MongoCommandCursor::info":{"id":"mongocommandcursor.info","purpose":"Gets information about the cursor's creation and iteration","prototype":"array MongoCommandCursor::info()","return":"<p class=\"para\">   Returns the namespace, batch size, limit, skip, flags, query, and projected   fields for this cursor. If the cursor has started iterating, additional   information about iteration and the connection will be included.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::key":{"id":"mongocommandcursor.key","purpose":"Returns the current result's index within the result set","prototype":"int MongoCommandCursor::key()","return":"<p class=\"para\">   The current result&#039;s index within the result set.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::next":{"id":"mongocommandcursor.next","purpose":"Advances the cursor to the next result","prototype":"void MongoCommandCursor::next()","return":"<p class=\"para\">   <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::rewind":{"id":"mongocommandcursor.rewind","purpose":"Executes the command and resets the cursor to the start of the result set","prototype":"array MongoCommandCursor::rewind()","return":"<p class=\"para\">   The raw server result document.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoCommandCursor::setReadPreference":{"id":"mongocommandcursor.setreadpreference","purpose":"Set the read preference for this command","prototype":"MongoCommandCursor MongoCommandCursor::setReadPreference(string $read_preference [, array $tags = ''])","return":"<p class=\"para\">   Returns this cursor.  <\/p>","versions":"PECL mongo >=1.6.0"},"MongoCommandCursor::timeout":{"id":"mongocommandcursor.timeout","purpose":"Sets a client-side timeout for this command","prototype":"MongoCommandCursor MongoCommandCursor::timeout(int $ms)","return":"<p class=\"para\">   This cursor.  <\/p>","versions":"PECL mongo >=1.6.0"},"MongoCommandCursor::valid":{"id":"mongocommandcursor.valid","purpose":"Checks if the cursor is reading a valid result","prototype":"bool MongoCommandCursor::valid()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current result is not null, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL mongo >=1.5.0"},"MongoId::__construct":{"id":"mongoid.construct","purpose":"Creates a new id","prototype":" MongoId::__construct([string|MongoId $id = ''])","return":"<p class=\"para\">   Returns a new id.  <\/p>","versions":"PECL mongo >= 0.8.0"},"MongoId::getHostname":{"id":"mongoid.gethostname","purpose":"Gets the hostname being used for this machine's ids","prototype":"string MongoId::getHostname()","return":"<p class=\"para\">   Returns the hostname.  <\/p>","versions":"PECL mongo >= 1.0.8"},"MongoId::getInc":{"id":"mongoid.getinc","purpose":"Gets the incremented value to create this id","prototype":"int MongoId::getInc()","return":"<p class=\"para\">   Returns the incremented value used to create this <span class=\"classname\">MongoId<\/span>.  <\/p>","versions":"PECL mongo >= 1.0.11"},"MongoId::getPID":{"id":"mongoid.getpid","purpose":"Gets the process ID","prototype":"int MongoId::getPID()","return":"<p class=\"para\">   Returns the PID of the <span class=\"classname\">MongoId<\/span>.  <\/p>","versions":"PECL mongo >= 1.0.11"},"MongoId::getTimestamp":{"id":"mongoid.gettimestamp","purpose":"Gets the number of seconds since the epoch that this id was created","prototype":"int MongoId::getTimestamp()","return":"<p class=\"para\">   Returns the number of seconds since the epoch that this id was created.  There are only    four bytes of timestamp stored, so <span class=\"classname\">MongoDate<\/span> is a better choice    for storing exact or wide-ranging times.  <\/p>","versions":"PECL mongo >= 1.0.1"},"MongoId::isValid":{"id":"mongoid.isvalid","purpose":"Check if a value is a valid ObjectId","prototype":"bool MongoId::isValid(mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">value<\/code> is a   <span class=\"classname\">MongoId<\/span> instance or a string consisting of exactly 24   hexadecimal characters; otherwise, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoId::__set_state":{"id":"mongoid.set-state","purpose":"Create a dummy MongoId","prototype":"MongoId MongoId::__set_state(array $props)","return":"<p class=\"para\">   A new id with the value &quot;000000000000000000000000&quot;.  <\/p>","versions":"PECL mongo >= 1.0.8"},"MongoId::__toString":{"id":"mongoid.tostring","purpose":"Returns a hexidecimal representation of this id","prototype":"string MongoId::__toString()","return":"<p class=\"para\">   This id.  <\/p>","versions":"PECL mongo >= 0.8.0"},"MongoCode::__construct":{"id":"mongocode.construct","purpose":"Creates a new code object","prototype":" MongoCode::__construct(string $code [, array $scope = array()])","return":"<p class=\"para\">   Returns a new code object.  <\/p>","versions":"PECL mongo >= 0.8.3"},"MongoCode::__toString":{"id":"mongocode.tostring","purpose":"Returns this code as a string","prototype":"string MongoCode::__toString()","return":"<p class=\"para\">   This code, the scope is not returned.  <\/p>","versions":"PECL mongo >= 0.8.3"},"MongoDate::__construct":{"id":"mongodate.construct","purpose":"Creates a new date","prototype":" MongoDate::__construct([int $sec = time() [, int $usec = '']])","return":"<p class=\"para\">    Returns this new date.  <\/p>","versions":"PECL mongo >= 0.8.1"},"MongoDate::toDateTime":{"id":"mongodate.todatetime","purpose":"Returns a DateTime object representing this date","prototype":"DateTime MongoDate::toDateTime()","return":"<p class=\"para\">   This date as a <span class=\"classname\">DateTime<\/span> object.  <\/p>","versions":"PECL mongo >= 1.6.0"},"MongoDate::__toString":{"id":"mongodate.tostring","purpose":"Returns a string representation of this date","prototype":"string MongoDate::__toString()","return":"<p class=\"para\">   This date.  <\/p>","versions":"PECL mongo >= 0.8.1"},"MongoRegex::__construct":{"id":"mongoregex.construct","purpose":"Creates a new regular expression","prototype":" MongoRegex::__construct(string $regex)","return":"<p class=\"para\">   Returns a new regular expression.  <\/p>","versions":"PECL mongo >= 0.8.1"},"MongoRegex::__toString":{"id":"mongoregex.tostring","purpose":"A string representation of this regular expression","prototype":"string MongoRegex::__toString()","return":"<p class=\"para\">   This regular expression in the form &quot;\/expr\/flags&quot;.  <\/p>","versions":"PECL mongo >= 0.8.1"},"MongoBinData::__construct":{"id":"mongobindata.construct","purpose":"Creates a new binary data object","prototype":" MongoBinData::__construct(string $data [, int $type = ''])","return":"<p class=\"para\">   Returns a new binary data object.  <\/p>","versions":"PECL mongo >= 0.8.1"},"MongoBinData::__toString":{"id":"mongobindata.tostring","purpose":"The string representation of this binary data object","prototype":"string MongoBinData::__toString()","return":"<p class=\"para\">   Returns the string &quot;&lt;Mongo Binary Data&gt;&quot;.  To access the contents of a    <span class=\"classname\">MongoBinData<\/span>, use the <em>bin<\/em> field.  <\/p>","versions":"PECL mongo >= 0.8.1"},"MongoInt32::__construct":{"id":"mongoint32.construct","purpose":"Creates a new 32-bit integer","prototype":" MongoInt32::__construct(string $value)","return":"<p class=\"para\">   Returns a new integer.  <\/p>","versions":"PECL mongo >= 1.0.9"},"MongoInt32::__toString":{"id":"mongoint32.tostring","purpose":"Returns the string representation of this 32-bit integer","prototype":"string MongoInt32::__toString()","return":"<p class=\"para\">   Returns the string representation of this integer.  <\/p>","versions":"PECL mongo >= 1.0.9"},"MongoInt64::__construct":{"id":"mongoint64.construct","purpose":"Creates a new 64-bit integer","prototype":" MongoInt64::__construct(string $value)","return":"<p class=\"para\">   Returns a new integer.  <\/p>","versions":"PECL mongo >= 1.0.9"},"MongoInt64::__toString":{"id":"mongoint64.tostring","purpose":"Returns the string representation of this 64-bit integer","prototype":"string MongoInt64::__toString()","return":"<p class=\"para\">   Returns the string representation of this integer.  <\/p>","versions":"PECL mongo >= 1.0.9"},"MongoDBRef::create":{"id":"mongodbref.create","purpose":"Creates a new database reference","prototype":"array MongoDBRef::create(string $collection, mixed $id [, string $database = ''])","return":"<p class=\"para\">   Returns the reference.  <\/p>","versions":"PECL mongo >= 0.9.0"},"MongoDBRef::get":{"id":"mongodbref.get","purpose":"Fetches the object pointed to by a reference","prototype":"array MongoDBRef::get(MongoDB $db, array $ref)","return":"<p class=\"para\">   Returns the document to which the reference refers or <strong><code>NULL<\/code><\/strong> if the document   does not exist (the reference is broken).  <\/p>","versions":"PECL mongo >= 0.9.0"},"MongoDBRef::isRef":{"id":"mongodbref.isref","purpose":"Checks if an array is a database reference","prototype":"bool MongoDBRef::isRef(mixed $ref)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL mongo >= 0.9.0"},"MongoTimestamp::__construct":{"id":"mongotimestamp.construct","purpose":"Creates a new timestamp","prototype":" MongoTimestamp::__construct([int $sec = time() [, int $inc = '']])","return":"<p class=\"para\">    Returns this new timestamp.  <\/p>","versions":"PECL mongo >= 1.0.1"},"MongoTimestamp::__toString":{"id":"mongotimestamp.tostring","purpose":"Returns a string representation of this timestamp","prototype":"string MongoTimestamp::__toString()","return":"<p class=\"para\">   The seconds since epoch represented by this timestamp.  <\/p>","versions":"PECL mongo >= 1.0.1"},"MongoGridFS::__construct":{"id":"mongogridfs.construct","purpose":"Creates new file collections","prototype":" MongoGridFS::__construct(MongoDB $db [, string $prefix = \"fs\" [, mixed $chunks = \"fs\"]])","return":"","versions":"PECL mongo >=0.9.0"},"MongoGridFS::delete":{"id":"mongogridfs.delete","purpose":"Remove a file and its chunks from the database","prototype":"bool|array MongoGridFS::delete(mixed $id)","return":"<p class=\"para\">   Returns an array containing the status of the removal (with respect to the   <em>files<\/em> collection) if a   <a href=\"mongo.writeconcerns.html\" class=\"link\">write concern<\/a> is applied.   Otherwise, returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <p class=\"para\">   Fields in the status array are described in the documentation for   <span class=\"function\">MongoCollection::insert<\/span>.  <\/p>","versions":"PECL mongo >=1.0.8"},"MongoGridFS::drop":{"id":"mongogridfs.drop","purpose":"Drops the files and chunks collections","prototype":"array MongoGridFS::drop()","return":"<p class=\"para\">   The database response.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFS::find":{"id":"mongogridfs.find","purpose":"Queries for files","prototype":"MongoGridFSCursor MongoGridFS::find([array $query = array() [, array $fields = array()]])","return":"<p class=\"para\">   A <span class=\"classname\">MongoGridFSCursor<\/span>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFS::findOne":{"id":"mongogridfs.findone","purpose":"Returns a single file matching the criteria","prototype":"MongoGridFSFile MongoGridFS::findOne([mixed $query = array() [, mixed $fields = array()]])","return":"<p class=\"para\">   Returns a <span class=\"classname\">MongoGridFSFile<\/span> or <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFS::get":{"id":"mongogridfs.get","purpose":"Retrieve a file from the database","prototype":"MongoGridFSFile MongoGridFS::get(mixed $id)","return":"<p class=\"para\">   Returns the file, if found, or <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL mongo >=1.0.8"},"MongoGridFS::put":{"id":"mongogridfs.put","purpose":"Stores a file in the database","prototype":"mixed MongoGridFS::put(string $filename [, array $metadata = array() [, array $options = array()]])","return":"<p class=\"para\">Returns the <em>_id<\/em> of the saved file document. This will be a generated <span class=\"classname\">MongoId<\/span> unless an <em>_id<\/em> was explicitly specified in the <code class=\"parameter\">metadata<\/code> parameter.<\/p>","versions":"PECL mongo >=1.0.8"},"MongoGridFS::remove":{"id":"mongogridfs.remove","purpose":"Remove files and their chunks from the database","prototype":"bool|array MongoGridFS::remove([array $criteria = array() [, array $options = array()]])","return":"<p class=\"para\">   Returns an array containing the status of the removal (with respect to the   <em>files<\/em> collection) if the <em>&quot;w&quot;<\/em> option is   set. Otherwise, returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <p class=\"para\">   Fields in the status array are described in the documentation for   <span class=\"function\">MongoCollection::insert<\/span>.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFS::storeBytes":{"id":"mongogridfs.storebytes","purpose":"Stores a string of bytes in the database","prototype":"mixed MongoGridFS::storeBytes(string $bytes [, array $metadata = array() [, array $options = array()]])","return":"<p class=\"para\">Returns the <em>_id<\/em> of the saved file document. This will be a generated <span class=\"classname\">MongoId<\/span> unless an <em>_id<\/em> was explicitly specified in the <code class=\"parameter\">metadata<\/code> parameter.<\/p>","versions":"PECL mongo >=0.9.2"},"MongoGridFS::storeFile":{"id":"mongogridfs.storefile","purpose":"Stores a file in the database","prototype":"mixed MongoGridFS::storeFile(string|resource $filename [, array $metadata = array() [, array $options = array()]])","return":"<p class=\"para\">Returns the <em>_id<\/em> of the saved file document. This will be a generated <span class=\"classname\">MongoId<\/span> unless an <em>_id<\/em> was explicitly specified in the <code class=\"parameter\">metadata<\/code> parameter.<\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFS::storeUpload":{"id":"mongogridfs.storeupload","purpose":"Stores an uploaded file in the database","prototype":"mixed MongoGridFS::storeUpload(string $name [, array $metadata = ''])","return":"<p class=\"para\">Returns the <em>_id<\/em> of the saved file document. This will be a generated <span class=\"classname\">MongoId<\/span> unless an <em>_id<\/em> was explicitly specified in the <code class=\"parameter\">metadata<\/code> parameter.<\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If <a href=\"features.file-upload.multiple.html\" class=\"link\">multiple files are uploaded    using the same field name<\/a>, this method will not return anything;    however, the files themselves will still be processed.   <\/p>  <\/p><\/blockquote>","versions":"PECL mongo >=0.9.0"},"MongoGridfsFile::__construct":{"id":"mongogridfsfile.construct","purpose":"Create a new GridFS file","prototype":" MongoGridfsFile::__construct(MongoGridFS $gridfs, array $file)","return":"<p class=\"para\">   Returns a new MongoGridFSFile.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSFile::getBytes":{"id":"mongogridfsfile.getbytes","purpose":"Returns this file's contents as a string of bytes","prototype":"string MongoGridFSFile::getBytes()","return":"<p class=\"para\">   Returns a string of the bytes in the file.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSFile::getFilename":{"id":"mongogridfsfile.getfilename","purpose":"Returns this file's filename","prototype":"string MongoGridFSFile::getFilename()","return":"<p class=\"para\">   Returns the filename.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSFile::getResource":{"id":"mongogridfsfile.getresource","purpose":"Returns a resource that can be used to read the stored file","prototype":"resource MongoGridFSFile::getResource()","return":"<p class=\"para\">   Returns a resource that can be used to read the file with  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoGridFSFile::getSize":{"id":"mongogridfsfile.getsize","purpose":"Returns this file's size","prototype":"int MongoGridFSFile::getSize()","return":"<p class=\"para\">   Returns this file&#039;s size  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSFile::write":{"id":"mongogridfsfile.write","purpose":"Writes this file to the filesystem","prototype":"int MongoGridFSFile::write([string $filename = ''])","return":"<p class=\"para\">   Returns the number of bytes written.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSCursor::__construct":{"id":"mongogridfscursor.construct","purpose":"Create a new cursor","prototype":" MongoGridFSCursor::__construct(MongoGridFS $gridfs, resource $connection, string $ns, array $query, array $fields)","return":"<p class=\"para\">   Returns the new cursor.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSCursor::current":{"id":"mongogridfscursor.current","purpose":"Returns the current file","prototype":"MongoGridFSFile MongoGridFSCursor::current()","return":"<p class=\"para\">   The current file.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSCursor::getNext":{"id":"mongogridfscursor.getnext","purpose":"Return the next file to which this cursor points, and advance the cursor","prototype":"MongoGridFSFile MongoGridFSCursor::getNext()","return":"<p class=\"para\">   Returns the next file.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoGridFSCursor::key":{"id":"mongogridfscursor.key","purpose":"Returns the current result's filename","prototype":"string MongoGridFSCursor::key()","return":"<p class=\"para\">   The current result&#039;s _id as a string.  <\/p>","versions":"PECL mongo >=0.9.0"},"MongoWriteBatch::add":{"id":"mongowritebatch.add","purpose":"Adds a write operation to a batch","prototype":"bool MongoWriteBatch::add(array $item)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and throws an exception on failure.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoWriteBatch::__construct":{"id":"mongowritebatch.construct","purpose":"Creates a new batch of write operations","prototype":" MongoWriteBatch::__construct(MongoCollection $collection [, string $batch_type = '' [, array $write_options = '']])","return":"<p class=\"para\">   A new MongoWriteBatch of type <code class=\"parameter\">batch_type<\/code>.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoWriteBatch::execute":{"id":"mongowritebatch.execute","purpose":"Executes a batch of write operations","prototype":"array MongoWriteBatch::execute(array $write_options)","return":"<p class=\"para\">   Returns an array containing statistical information for the full batch.   If the batch had to be split into multiple batches, the return value will aggregate   the values from individual batches and return only the totals.  <\/p>  <p class=\"para\">   If the batch was empty, an array containing only the &#039;ok&#039; field is returned (as <strong><code>TRUE<\/code><\/strong>) although   nothing will be shipped over the wire (<acronym class=\"acronym\">NOOP<\/acronym>).  <\/p>  <p class=\"para\">   <table class=\"doctable informaltable\">    <thead>     <tr>      <th>Array key<\/th>      <th>Value meaning<\/th>      <th>Returned for batch type<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>nInserted<\/td>      <td>Number of inserted documents<\/td>      <td>MongoWriteBatch::COMMAND_INSERT batch<\/td>     <\/tr>     <tr>      <td>nMatched<\/td>      <td>Number of documents matching the query criteria<\/td>      <td>MongoWriteBatch::COMMAND_UPDATE batch<\/td>     <\/tr>     <tr>      <td>nModified<\/td>      <td>Number of documents actually needed to be modied<\/td>      <td>MongoWriteBatch::COMMAND_UPDATE batch<\/td>     <\/tr>     <tr>      <td>nUpserted<\/td>      <td>Number of upserted documents<\/td>      <td>MongoWriteBatch::COMMAND_UPDATE batch<\/td>     <\/tr>     <tr>      <td>nRemoved<\/td>      <td>Number of documents removed<\/td>      <td>MongoWriteBatch::COMMAND_DELETE batch<\/td>     <\/tr>     <tr>      <td>ok<\/td>      <td>Command success indicator<\/td>      <td>All<\/td>     <\/tr>    <\/tbody>   <\/table>  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoInsertBatch::__construct":{"id":"mongoinsertbatch.construct","purpose":"Description","prototype":" MongoInsertBatch::__construct(MongoCollection $collection [, array $write_options = ''])","return":"<p class=\"para\">   A new MongoInsertBatch.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoUpdateBatch::__construct":{"id":"mongoupdatebatch.construct","purpose":"Description","prototype":" MongoUpdateBatch::__construct(MongoCollection $collection [, array $write_options = ''])","return":"<p class=\"para\">   A new MongoUpdateBatch.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoDeleteBatch::__construct":{"id":"mongodeletebatch.construct","purpose":"Description","prototype":" MongoDeleteBatch::__construct(MongoCollection $collection [, array $write_options = ''])","return":"<p class=\"para\">   A new MongoDeleteBatch.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoLog::getCallback":{"id":"mongolog.getcallback","purpose":"Gets the previously set callback function","prototype":"callable MongoLog::getCallback()","return":"<p class=\"para\">   Returns the callback function, or <strong><code>FALSE<\/code><\/strong> if not set yet.  <\/p>","versions":"PECL mongo >= 1.3.0"},"MongoLog::getLevel":{"id":"mongolog.getlevel","purpose":"Gets the level(s) currently being logged","prototype":"int MongoLog::getLevel()","return":"<p class=\"para\">   Returns the level(s) currently being logged.  <\/p>","versions":"PECL mongo >= 1.2.3"},"MongoLog::getModule":{"id":"mongolog.getmodule","purpose":"Gets the module(s) currently being logged","prototype":"int MongoLog::getModule()","return":"<p class=\"para\">   Returns the module(s) currently being logged.  <\/p>","versions":"PECL mongo >= 1.2.3"},"MongoLog::setCallback":{"id":"mongolog.setcallback","purpose":"Sets a callback function to be invoked for events","prototype":"void MongoLog::setCallback(callable $log_function)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL mongo >= 1.3.0"},"MongoLog::setLevel":{"id":"mongolog.setlevel","purpose":"Sets the level(s) to be logged","prototype":"void MongoLog::setLevel(int $level)","return":"","versions":"PECL mongo >= 1.2.3"},"MongoLog::setModule":{"id":"mongolog.setmodule","purpose":"Sets the module(s) to be logged","prototype":"void MongoLog::setModule(int $module)","return":"","versions":"PECL mongo >= 1.2.3"},"MongoPool::getSize":{"id":"mongopool.getsize","purpose":"Get pool size for connection pools","prototype":"int MongoPool::getSize()","return":"<p class=\"para\">   Returns the current pool size.  <\/p>","versions":"PECL mongo >= 1.2.3"},"MongoPool::info":{"id":"mongopool.info","purpose":"Returns information about all connection pools","prototype":"array MongoPool::info()","return":"<p class=\"para\">   Each connection pool has an identifier, which starts with the host. For each   pool, this function shows the following fields:   <dl>         <dt>      <code class=\"parameter\">in use<\/code>     <\/dt>     <dd>      <p class=\"para\">       The number of connections currently being used by       <span class=\"classname\">Mongo<\/span> instances.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">in pool<\/code>     <\/dt>     <dd>      <p class=\"para\">       The number of connections currently in the pool (not being used).      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">remaining<\/code>     <\/dt>     <dd>      <p class=\"para\">       The number of connections that could be created by this pool. For       example, suppose a pool had 5 connections remaining and 3 connections in       the pool.  We could create 8 new instances of       <span class=\"classname\">MongoClient<\/span> before we exhausted this pool       (assuming no instances of <span class=\"classname\">MongoClient<\/span> went out of       scope, returning their connections to the pool).      <\/p>      <p class=\"para\">       A negative number means that this pool will spawn unlimited connections.      <\/p>      <p class=\"para\">       Before a pool is created, you can change the max number of connections by       calling <span class=\"function\">Mongo::setPoolSize<\/span>. Once a pool is showing       up in the output of this function, its size cannot be changed.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">total<\/code>     <\/dt>     <dd>      <p class=\"para\">       The total number of connections allowed for this pool.  This should be       greater than or equal to &quot;in use&quot; + &quot;in pool&quot; (or -1).      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">timeout<\/code>     <\/dt>     <dd>      <p class=\"para\">       The socket timeout for connections in this pool. This is how long       connections in this pool will attempt to connect to a server before       giving up.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">waiting<\/code>     <\/dt>     <dd>      <p class=\"para\">       If you have capped the pool size, workers requesting connections from       the pool may block until other workers return their connections. This       field shows how many milliseconds workers have blocked for connections to       be released.  If this number keeps increasing, you may want to use       <span class=\"function\">MongoPool::setSize<\/span> to add more connections to your       pool.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL mongo >= 1.2.3"},"MongoPool::setSize":{"id":"mongopool.setsize","purpose":"Set the size for future connection pools","prototype":"bool MongoPool::setSize(int $size)","return":"<p class=\"para\">   Returns the former value of pool size.  <\/p>","versions":"PECL mongo >= 1.2.3"},"Mongo::connectUtil":{"id":"mongo.connectutil","purpose":"Connects with a database server","prototype":"bool Mongo::connectUtil()","return":"<p class=\"para\">   If the connection was successful.  <\/p>","versions":"PECL mongo >=0.9.0"},"Mongo::__construct":{"id":"mongo.construct","purpose":"The __construct purpose","prototype":" Mongo::__construct([string $server = '' [, array $options = '']])","return":"","versions":"PECL mongo >=0.9.0"},"Mongo::getPoolSize":{"id":"mongo.getpoolsize","purpose":"Get pool size for connection pools","prototype":"int Mongo::getPoolSize()","return":"<p class=\"para\">   Returns the current pool size.  <\/p>","versions":"PECL mongo >=1.2.0"},"Mongo::getSlave":{"id":"mongo.getslave","purpose":"Returns the address being used by this for slaveOkay reads","prototype":"string Mongo::getSlave()","return":"<p class=\"para\">   The address of the secondary this connection is using for reads.  <\/p>  <p class=\"para\">   This returns <strong><code>NULL<\/code><\/strong> if this is not connected to a replica set or not yet   initialized.  <\/p>","versions":"PECL mongo >=1.1.0"},"Mongo::getSlaveOkay":{"id":"mongo.getslaveokay","purpose":"Get slaveOkay setting for this connection","prototype":"bool Mongo::getSlaveOkay()","return":"<p class=\"para\">   Returns the value of slaveOkay for this instance.  <\/p>","versions":"PECL mongo >=1.1.0"},"Mongo::poolDebug":{"id":"mongo.pooldebug","purpose":"Returns information about all connection pools","prototype":"array Mongo::poolDebug()","return":"<p class=\"para\">   Each connection pool has an identifier, which starts with the host. For each   pool, this function shows the following fields:   <dl>         <dt>      <code class=\"parameter\">in use<\/code>     <\/dt>     <dd>      <p class=\"para\">       The number of connections currently being used by       <span class=\"classname\">MongoClient<\/span> instances.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">in pool<\/code>     <\/dt>     <dd>      <p class=\"para\">       The number of connections currently in the pool (not being used).      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">remaining<\/code>     <\/dt>     <dd>      <p class=\"para\">       The number of connections that could be created by this pool. For       example, suppose a pool had 5 connections remaining and 3 connections in       the pool.  We could create 8 new instances of       <span class=\"classname\">MongoClient<\/span> before we exhausted this pool       (assuming no instances of <span class=\"classname\">MongoClient<\/span> went out of       scope, returning their connections to the pool).      <\/p>      <p class=\"para\">       A negative number means that this pool will spawn unlimited connections.      <\/p>      <p class=\"para\">       Before a pool is created, you can change the max number of connections by       calling <span class=\"function\">Mongo::setPoolSize<\/span>. Once a pool is showing       up in the output of this function, its size cannot be changed.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">timeout<\/code>     <\/dt>     <dd>      <p class=\"para\">       The socket timeout for connections in this pool. This is how long       connections in this pool will attempt to connect to a server before       giving up.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL mongo >=1.2.0"},"Mongo::setPoolSize":{"id":"mongo.setpoolsize","purpose":"Set the size for future connection pools","prototype":"bool Mongo::setPoolSize(int $size)","return":"<p class=\"para\">   Returns the former value of pool size.  <\/p>","versions":"PECL mongo >=1.2.0"},"Mongo::setSlaveOkay":{"id":"mongo.setslaveokay","purpose":"Change slaveOkay setting for this connection","prototype":"bool Mongo::setSlaveOkay([bool $ok = ''])","return":"<p class=\"para\">   Returns the former value of slaveOkay for this instance.  <\/p>","versions":"PECL mongo >=1.1.0"},"Mongo::switchSlave":{"id":"mongo.switchslave","purpose":"Choose a new secondary for slaveOkay reads","prototype":"string Mongo::switchSlave()","return":"<p class=\"para\">   The address of the secondary this connection is using for reads. This may be   the same as the previous address as addresses are randomly chosen. It may   return only one address if only one secondary (or only the primary) is   available.  <\/p>  <p class=\"para\">   For example, if we had a three member replica set with a primary, secondary,   and arbiter this method would always return the address of the secondary.   If the secondary became unavailable, this method would always return the   address of the primary.  If the primary also became unavailable, this method   would throw an exception, as an arbiter cannot handle reads.  <\/p>","versions":"PECL mongo >=1.1.0"},"bson_decode":{"id":"function.bson-decode","purpose":"Deserializes a BSON object into a PHP array","prototype":"array bson_decode(string $bson)","return":"<p class=\"para\">   Returns the deserialized BSON object.  <\/p>","versions":"PECL mongo >=1.0.1"},"bson_encode":{"id":"function.bson-encode","purpose":"Serializes a PHP variable into a BSON string","prototype":"string bson_encode(mixed $anything)","return":"<p class=\"para\">   Returns the serialized string.  <\/p>","versions":"PECL mongo >=1.0.1"},"MongoResultException::getDocument":{"id":"mongoresultexception.getdocument","purpose":"Retrieve the full result document","prototype":"array MongoResultException::getDocument()","return":"<p class=\"para\">   The full result document as an array, including partial data if available and   additional keys.  <\/p>","versions":"PECL mongo >=1.3.0"},"MongoCursorException::getHost":{"id":"mongocursorexception.gethost","purpose":"The hostname of the server that encountered the error","prototype":"string MongoCursorException::getHost()","return":"<p class=\"para\">   Returns the hostname, or <span class=\"type\">NULL<\/span> if the hostname is unknown.  <\/p>","versions":"PECL mongo >= 1.0.0"},"MongoWriteConcernException::getDocument":{"id":"mongowriteconcernexception.getdocument","purpose":"Get the error document","prototype":"array MongoWriteConcernException::getDocument()","return":"<p class=\"para\">   A MongoDB document, if available, as an array.  <\/p>","versions":"PECL mongo >= 1.5.0"},"MongoDB\\Driver\\Manager::__construct":{"id":"mongodb-driver-manager.construct","purpose":"Create new MongoDB Manager","prototype":" MongoDB\\Driver\\Manager::__construct([string $uri = \"mongodb:\/\/127.0.0.1\/ [, array $uriOptions = array() [, array $driverOptions = array()]]])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::executeBulkWrite":{"id":"mongodb-driver-manager.executebulkwrite","purpose":"Execute one or more write operations","prototype":"MongoDB\\Driver\\WriteResult MongoDB\\Driver\\Manager::executeBulkWrite(string $namespace, MongoDB\\Driver\\BulkWrite $bulk [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\WriteResult<\/span> on success.<\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::executeCommand":{"id":"mongodb-driver-manager.executecommand","purpose":"Execute a database command","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Manager::executeCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::executeQuery":{"id":"mongodb-driver-manager.executequery","purpose":"Execute a database query","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Manager::executeQuery(string $namespace, MongoDB\\Driver\\Query $query [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::executeReadCommand":{"id":"mongodb-driver-manager.executereadcommand","purpose":"Execute a database command that reads","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Manager::executeReadCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Manager::executeReadWriteCommand":{"id":"mongodb-driver-manager.executereadwritecommand","purpose":"Execute a database command that reads and writes","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Manager::executeReadWriteCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Manager::executeWriteCommand":{"id":"mongodb-driver-manager.executewritecommand","purpose":"Execute a database command that writes","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Manager::executeWriteCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Manager::getReadConcern":{"id":"mongodb-driver-manager.getreadconcern","purpose":"Return the ReadConcern for the Manager","prototype":"MongoDB\\Driver\\ReadConcern MongoDB\\Driver\\Manager::getReadConcern()","return":"<p class=\"para\">   The <span class=\"classname\">MongoDB\\Driver\\ReadConcern<\/span> for the Manager.  <\/p>","versions":"mongodb >=1.1.0"},"MongoDB\\Driver\\Manager::getReadPreference":{"id":"mongodb-driver-manager.getreadpreference","purpose":"Return the ReadPreference for the Manager","prototype":"MongoDB\\Driver\\ReadPreference MongoDB\\Driver\\Manager::getReadPreference()","return":"<p class=\"para\">   The <span class=\"classname\">MongoDB\\Driver\\ReadPreference<\/span> for the Manager.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::getServers":{"id":"mongodb-driver-manager.getservers","purpose":"Return the servers to which this manager is connected","prototype":"array MongoDB\\Driver\\Manager::getServers()","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> of <span class=\"classname\">MongoDB\\Driver\\Server<\/span>   instances to which this manager is connected.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::getWriteConcern":{"id":"mongodb-driver-manager.getwriteconcern","purpose":"Return the WriteConcern for the Manager","prototype":"MongoDB\\Driver\\WriteConcern MongoDB\\Driver\\Manager::getWriteConcern()","return":"<p class=\"para\">   The <span class=\"classname\">MongoDB\\Driver\\WriteConcern<\/span> for the Manager.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::selectServer":{"id":"mongodb-driver-manager.selectserver","purpose":"Select a server matching a read preference","prototype":"MongoDB\\Driver\\Server MongoDB\\Driver\\Manager::selectServer(MongoDB\\Driver\\ReadPreference $readPreference)","return":"<p class=\"para\">   Returns a <span class=\"classname\">MongoDB\\Driver\\Server<\/span> matching the read   preference.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Manager::startSession":{"id":"mongodb-driver-manager.startsession","purpose":"Start a new client session for use with this client","prototype":"MongoDB\\Driver\\Session MongoDB\\Driver\\Manager::startSession([array $options = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">MongoDB\\Driver\\Session<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Command::__construct":{"id":"mongodb-driver-command.construct","purpose":"Create a new Command","prototype":" MongoDB\\Driver\\Command::__construct(array|object $document [, array $commandOptions = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Query::__construct":{"id":"mongodb-driver-query.construct","purpose":"Create a new Query","prototype":" MongoDB\\Driver\\Query::__construct(array|object $filter [, array $queryOptions = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\BulkWrite::__construct":{"id":"mongodb-driver-bulkwrite.construct","purpose":"Create a new BulkWrite","prototype":" MongoDB\\Driver\\BulkWrite::__construct([array $options = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\BulkWrite::count":{"id":"mongodb-driver-bulkwrite.count","purpose":"Count number of write operations in the bulk","prototype":"int MongoDB\\Driver\\BulkWrite::count()","return":"<p class=\"para\">   Returns number of write operations added to the   <span class=\"classname\">MongoDB\\Driver\\BulkWrite<\/span> object.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\BulkWrite::delete":{"id":"mongodb-driver-bulkwrite.delete","purpose":"Add a delete operation to the bulk","prototype":"void MongoDB\\Driver\\BulkWrite::delete(array|object $filter [, array $deleteOptions = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\BulkWrite::insert":{"id":"mongodb-driver-bulkwrite.insert","purpose":"Add an insert operation to the bulk","prototype":"mixed MongoDB\\Driver\\BulkWrite::insert(array|object $document)","return":"<p class=\"para\">   Returns the <em>_id<\/em> of the inserted document. If the   <code class=\"parameter\">document<\/code> did not have an <em>_id<\/em>, the   <span class=\"classname\">MongoDB\\BSON\\ObjectId<\/span> generated for the insert will   be returned.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\BulkWrite::update":{"id":"mongodb-driver-bulkwrite.update","purpose":"Add an update operation to the bulk","prototype":"void MongoDB\\Driver\\BulkWrite::update(array|object $filter, array|object $newObj [, array $updateOptions = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Session::advanceClusterTime":{"id":"mongodb-driver-session.advanceclustertime","purpose":"Advances the cluster time for this session","prototype":"void MongoDB\\Driver\\Session::advanceClusterTime(array|object $clusterTime)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Session::advanceOperationTime":{"id":"mongodb-driver-session.advanceoperationtime","purpose":"Advances the operation time for this session","prototype":"void MongoDB\\Driver\\Session::advanceOperationTime(MongoDB\\BSON\\TimestampInterface $operationTime)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Session::__construct":{"id":"mongodb-driver-session.construct","purpose":"Create a new Session (not used)","prototype":" MongoDB\\Driver\\Session::__construct()","return":"","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Session::getClusterTime":{"id":"mongodb-driver-session.getclustertime","purpose":"Returns the cluster time for this session","prototype":"object|null MongoDB\\Driver\\Session::getClusterTime()","return":"<p class=\"para\">   Returns the cluster time for this session, or <strong><code>NULL<\/code><\/strong> if the session has no   cluster time.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Session::getLogicalSessionId":{"id":"mongodb-driver-session.getlogicalsessionid","purpose":"Returns the logical session ID for this session","prototype":"object MongoDB\\Driver\\Session::getLogicalSessionId()","return":"<p class=\"para\">   Returns the logical session ID for this session.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Session::getOperationTime":{"id":"mongodb-driver-session.getoperationtime","purpose":"Returns the operation time for this session","prototype":"MongoDB\\BSON\\Timestamp|null MongoDB\\Driver\\Session::getOperationTime()","return":"<p class=\"para\">   Returns the operation time for this session, or <strong><code>NULL<\/code><\/strong> if the session has no   operation time.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\WriteConcern::bsonSerialize":{"id":"mongodb-driver-writeconcern.bsonserialize","purpose":"Returns an object for BSON serialization","prototype":"object MongoDB\\Driver\\WriteConcern::bsonSerialize()","return":"<p class=\"para\">   Returns an object for serializing the WriteConcern as BSON.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\Driver\\WriteConcern::__construct":{"id":"mongodb-driver-writeconcern.construct","purpose":"Create a new WriteConcern","prototype":" MongoDB\\Driver\\WriteConcern::__construct(string|integer $w [, int $wtimeout = '' [, bool $journal = '']])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcern::getJournal":{"id":"mongodb-driver-writeconcern.getjournal","purpose":"Returns the WriteConcern's \"journal\" option","prototype":"boolean|null MongoDB\\Driver\\WriteConcern::getJournal()","return":"<p class=\"para\">   Returns the WriteConcern&#039;s &quot;journal&quot; option.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcern::getW":{"id":"mongodb-driver-writeconcern.getw","purpose":"Returns the WriteConcern's \"w\" option","prototype":"string|integer|null MongoDB\\Driver\\WriteConcern::getW()","return":"<p class=\"para\">   Returns the WriteConcern&#039;s &quot;w&quot; option.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcern::getWtimeout":{"id":"mongodb-driver-writeconcern.getwtimeout","purpose":"Returns the WriteConcern's \"wtimeout\" option","prototype":"int MongoDB\\Driver\\WriteConcern::getWtimeout()","return":"<p class=\"para\">   Returns the WriteConcern&#039;s &quot;wtimeout&quot; option.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcern::isDefault":{"id":"mongodb-driver-writeconcern.isdefault","purpose":"Checks if this is the default write concern","prototype":"bool MongoDB\\Driver\\WriteConcern::isDefault()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this is the default write concern and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\ReadPreference::bsonSerialize":{"id":"mongodb-driver-readpreference.bsonserialize","purpose":"Returns an object for BSON serialization","prototype":"object MongoDB\\Driver\\ReadPreference::bsonSerialize()","return":"<p class=\"para\">   Returns an object for serializing the ReadPreference as BSON.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\Driver\\ReadPreference::__construct":{"id":"mongodb-driver-readpreference.construct","purpose":"Create a new ReadPreference","prototype":" MongoDB\\Driver\\ReadPreference::__construct(string|integer $mode [, array $tagSets = '' [, array $options = array()]])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\ReadPreference::getMaxStalenessSeconds":{"id":"mongodb-driver-readpreference.getmaxstalenessseconds","purpose":"Returns the ReadPreference's \"maxStalenessSeconds\" option","prototype":"int MongoDB\\Driver\\ReadPreference::getMaxStalenessSeconds()","return":"<p class=\"para\">   Returns the ReadPreference&#039;s &quot;maxStalenessSeconds&quot; option. If no max   staleness has been specified,   <strong><code>MongoDB\\Driver\\ReadPreference::NO_MAX_STALENESS<\/code><\/strong> will be   returned.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\Driver\\ReadPreference::getMode":{"id":"mongodb-driver-readpreference.getmode","purpose":"Returns the ReadPreference's \"mode\" option","prototype":"int MongoDB\\Driver\\ReadPreference::getMode()","return":"<p class=\"para\">   Returns the ReadPreference&#039;s &quot;mode&quot; option.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\ReadPreference::getTagSets":{"id":"mongodb-driver-readpreference.gettagsets","purpose":"Returns the ReadPreference's \"tagSets\" option","prototype":"array MongoDB\\Driver\\ReadPreference::getTagSets()","return":"<p class=\"para\">   Returns the ReadPreference&#039;s &quot;tagSets&quot; option.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\ReadConcern::bsonSerialize":{"id":"mongodb-driver-readconcern.bsonserialize","purpose":"Returns an object for BSON serialization","prototype":"object MongoDB\\Driver\\ReadConcern::bsonSerialize()","return":"<p class=\"para\">   Returns an object for serializing the ReadConcern as BSON.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\Driver\\ReadConcern::__construct":{"id":"mongodb-driver-readconcern.construct","purpose":"Create a new ReadConcern","prototype":" MongoDB\\Driver\\ReadConcern::__construct([string $level = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\ReadConcern::getLevel":{"id":"mongodb-driver-readconcern.getlevel","purpose":"Returns the ReadConcern's \"level\" option","prototype":"string|null MongoDB\\Driver\\ReadConcern::getLevel()","return":"<p class=\"para\">   Returns the ReadConcern&#039;s &quot;level&quot; option.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\ReadConcern::isDefault":{"id":"mongodb-driver-readconcern.isdefault","purpose":"Checks if this is the default read concern","prototype":"bool MongoDB\\Driver\\ReadConcern::isDefault()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this is the default read concern and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Cursor::__construct":{"id":"mongodb-driver-cursor.construct","purpose":"Create a new Cursor (not used)","prototype":" MongoDB\\Driver\\Cursor::__construct()","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Cursor::getId":{"id":"mongodb-driver-cursor.getid","purpose":"Returns the ID for this cursor","prototype":"MongoDB\\Driver\\CursorId MongoDB\\Driver\\Cursor::getId()","return":"<p class=\"para\">   Returns the <span class=\"classname\">MongoDB\\Driver\\CursorId<\/span> for this cursor.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Cursor::getServer":{"id":"mongodb-driver-cursor.getserver","purpose":"Returns the server associated with this cursor","prototype":"MongoDB\\Driver\\Server MongoDB\\Driver\\Cursor::getServer()","return":"<p class=\"para\">   Returns the <span class=\"classname\">MongoDB\\Driver\\Server<\/span> associated with this   cursor.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Cursor::isDead":{"id":"mongodb-driver-cursor.isdead","purpose":"Checks if the cursor may have additional results","prototype":"bool MongoDB\\Driver\\Cursor::isDead()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if additional results are not available, and <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Cursor::setTypeMap":{"id":"mongodb-driver-cursor.settypemap","purpose":"Sets a type map to use for BSON unserialization","prototype":"void MongoDB\\Driver\\Cursor::setTypeMap(array $typemap)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Cursor::toArray":{"id":"mongodb-driver-cursor.toarray","purpose":"Returns an array containing all results for this cursor","prototype":"array MongoDB\\Driver\\Cursor::toArray()","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all results for this cursor.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\CursorId::__construct":{"id":"mongodb-driver-cursorid.construct","purpose":"Create a new CursorId (not used)","prototype":" MongoDB\\Driver\\CursorId::__construct()","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\CursorId::__toString":{"id":"mongodb-driver-cursorid.tostring","purpose":"String representation of the cursor ID","prototype":"string MongoDB\\Driver\\CursorId::__toString()","return":"<p class=\"para\">   Returns the <span class=\"type\">string<\/span> representation of the cursor ID.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::__construct":{"id":"mongodb-driver-server.construct","purpose":"Create a new Server (not used)","prototype":" MongoDB\\Driver\\Server::__construct()","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::executeBulkWrite":{"id":"mongodb-driver-server.executebulkwrite","purpose":"Execute one or more write operations on this server","prototype":"MongoDB\\Driver\\WriteResult MongoDB\\Driver\\Server::executeBulkWrite(string $namespace, MongoDB\\Driver\\BulkWrite $bulk [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\WriteResult<\/span> on success.<\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::executeCommand":{"id":"mongodb-driver-server.executecommand","purpose":"Execute a database command on this server","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Server::executeCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::executeQuery":{"id":"mongodb-driver-server.executequery","purpose":"Execute a database query on this server","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Server::executeQuery(string $namespace, MongoDB\\Driver\\Query $query [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::executeReadCommand":{"id":"mongodb-driver-server.executereadcommand","purpose":"Execute a database command that reads on this server","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Server::executeReadCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Server::executeReadWriteCommand":{"id":"mongodb-driver-server.executereadwritecommand","purpose":"Execute a database command that reads and writes on this server","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Server::executeReadWriteCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Server::executeWriteCommand":{"id":"mongodb-driver-server.executewritecommand","purpose":"Execute a database command that writes on this server","prototype":"MongoDB\\Driver\\Cursor MongoDB\\Driver\\Server::executeWriteCommand(string $db, MongoDB\\Driver\\Command $command [, array $options = array()])","return":"<p class=\"para\">Returns <span class=\"classname\">MongoDB\\Driver\\Cursor<\/span> on success.<\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Server::getHost":{"id":"mongodb-driver-server.gethost","purpose":"Returns the hostname of this server","prototype":"string MongoDB\\Driver\\Server::getHost()","return":"<p class=\"para\">   Returns the hostname of this server.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::getInfo":{"id":"mongodb-driver-server.getinfo","purpose":"Returns an array of information about this server","prototype":"array MongoDB\\Driver\\Server::getInfo()","return":"<p class=\"para\">   Returns an array of information about this server.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::getLatency":{"id":"mongodb-driver-server.getlatency","purpose":"Returns the latency of this server","prototype":"string MongoDB\\Driver\\Server::getLatency()","return":"<p class=\"para\">   Returns the latency of this server.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::getPort":{"id":"mongodb-driver-server.getport","purpose":"Returns the port on which this server is listening","prototype":"int MongoDB\\Driver\\Server::getPort()","return":"<p class=\"para\">   Returns the port on which this server is listening.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::getTags":{"id":"mongodb-driver-server.gettags","purpose":"Returns an array of tags describing this server in a replica set","prototype":"string MongoDB\\Driver\\Server::getTags()","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> of tags used to describe this server in a   replica set.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::getType":{"id":"mongodb-driver-server.gettype","purpose":"Returns an integer denoting the type of this server","prototype":"integer MongoDB\\Driver\\Server::getType()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span> denoting the type of this server.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::isArbiter":{"id":"mongodb-driver-server.isarbiter","purpose":"Checks if this server is an arbiter member of a replica set","prototype":"bool MongoDB\\Driver\\Server::isArbiter()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this server is an arbiter member of a replica set, and   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::isHidden":{"id":"mongodb-driver-server.ishidden","purpose":"Checks if this server is a hidden member of a replica set","prototype":"bool MongoDB\\Driver\\Server::isHidden()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this server is a hidden member of a replica set, and   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::isPassive":{"id":"mongodb-driver-server.ispassive","purpose":"Checks if this server is a passive member of a replica set","prototype":"bool MongoDB\\Driver\\Server::isPassive()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this server is a passive member of a replica set, and   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::isPrimary":{"id":"mongodb-driver-server.isprimary","purpose":"Checks if this server is a primary member of a replica set","prototype":"bool MongoDB\\Driver\\Server::isPrimary()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this server is a primary member of a replica set, and   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\Server::isSecondary":{"id":"mongodb-driver-server.issecondary","purpose":"Checks if this server is a secondary member of a replica set","prototype":"bool MongoDB\\Driver\\Server::isSecondary()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this server is a secondary member of a replica set, and   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcernError::getCode":{"id":"mongodb-driver-writeconcernerror.getcode","purpose":"Returns the WriteConcernError's error code","prototype":"int MongoDB\\Driver\\WriteConcernError::getCode()","return":"<p class=\"para\">   Returns the WriteConcernError&#039;s error code.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcernError::getInfo":{"id":"mongodb-driver-writeconcernerror.getinfo","purpose":"Returns additional metadata for the WriteConcernError","prototype":"mixed MongoDB\\Driver\\WriteConcernError::getInfo()","return":"<p class=\"para\">   Returns additional metadata for the WriteConcernError, or <strong><code>NULL<\/code><\/strong> if no   metadata is available.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteConcernError::getMessage":{"id":"mongodb-driver-writeconcernerror.getmessage","purpose":"Returns the WriteConcernError's error message","prototype":"string MongoDB\\Driver\\WriteConcernError::getMessage()","return":"<p class=\"para\">   Returns the WriteConcernError&#039;s error message.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteError::getCode":{"id":"mongodb-driver-writeerror.getcode","purpose":"Returns the WriteError's error code","prototype":"int MongoDB\\Driver\\WriteError::getCode()","return":"<p class=\"para\">   Returns the WriteError&#039;s error code.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteError::getIndex":{"id":"mongodb-driver-writeerror.getindex","purpose":"Returns the index of the write operation corresponding to this WriteError","prototype":"int MongoDB\\Driver\\WriteError::getIndex()","return":"<p class=\"para\">   Returns the index of the write operation (from   <span class=\"classname\">MongoDB\\Driver\\BulkWrite<\/span>) corresponding to this   WriteError.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteError::getInfo":{"id":"mongodb-driver-writeerror.getinfo","purpose":"Returns additional metadata for the WriteError","prototype":"mixed MongoDB\\Driver\\WriteError::getInfo()","return":"<p class=\"para\">   Returns additional metadata for the WriteError, or <strong><code>NULL<\/code><\/strong> if no metadata is   available.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteError::getMessage":{"id":"mongodb-driver-writeerror.getmessage","purpose":"Returns the WriteError's error message","prototype":"string MongoDB\\Driver\\WriteError::getMessage()","return":"<p class=\"para\">   Returns the WriteError&#039;s error message.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getDeletedCount":{"id":"mongodb-driver-writeresult.getdeletedcount","purpose":"Returns the number of documents deleted","prototype":"integer|null MongoDB\\Driver\\WriteResult::getDeletedCount()","return":"<p class=\"para\">   Returns the number of documents deleted, or <strong><code>NULL<\/code><\/strong> if the write was not   acknowledged.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getInsertedCount":{"id":"mongodb-driver-writeresult.getinsertedcount","purpose":"Returns the number of documents inserted (excluding upserts)","prototype":"integer|null MongoDB\\Driver\\WriteResult::getInsertedCount()","return":"<p class=\"para\">   Returns the number of documents inserted (excluding upserts), or <strong><code>NULL<\/code><\/strong> if   the write was not acknowledged.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getMatchedCount":{"id":"mongodb-driver-writeresult.getmatchedcount","purpose":"Returns the number of documents selected for update","prototype":"integer|null MongoDB\\Driver\\WriteResult::getMatchedCount()","return":"<p class=\"para\">   Returns the number of documents selected for update, or <strong><code>NULL<\/code><\/strong> if the write   was not acknowledged.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getModifiedCount":{"id":"mongodb-driver-writeresult.getmodifiedcount","purpose":"Returns the number of existing documents updated","prototype":"integer|null MongoDB\\Driver\\WriteResult::getModifiedCount()","return":"<p class=\"para\">   Returns the number of existing documents updated, or <strong><code>NULL<\/code><\/strong> if the write was   not acknowledged.  <\/p>  <p class=\"para\">   The modified count is not available on versions of MongoDB before 2.6, which   used the legacy wire protocol version (i.e. OP_UPDATE). If this is the case,   the modified count will also be <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getServer":{"id":"mongodb-driver-writeresult.getserver","purpose":"Returns the server associated with this write result","prototype":"MongoDB\\Driver\\Server MongoDB\\Driver\\WriteResult::getServer()","return":"<p class=\"para\">   Returns the <span class=\"classname\">MongoDB\\Driver\\Server<\/span> associated with this   write result.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getUpsertedCount":{"id":"mongodb-driver-writeresult.getupsertedcount","purpose":"Returns the number of documents inserted by an upsert","prototype":"integer|null MongoDB\\Driver\\WriteResult::getUpsertedCount()","return":"<p class=\"para\">   Returns the number of documents inserted by an upsert.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getUpsertedIds":{"id":"mongodb-driver-writeresult.getupsertedids","purpose":"Returns an array of identifiers for upserted documents","prototype":"array MongoDB\\Driver\\WriteResult::getUpsertedIds()","return":"<p class=\"para\">   Returns an array of identifiers (i.e. <em>&quot;_id&quot;<\/em> field values)   for upserted documents. The array keys will correspond to the index of the   write operation (from <span class=\"classname\">MongoDB\\Driver\\BulkWrite<\/span>)   responsible for the upsert.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getWriteConcernError":{"id":"mongodb-driver-writeresult.getwriteconcernerror","purpose":"Returns any write concern error that occurred","prototype":"MongoDB\\Driver\\WriteConcernError|null MongoDB\\Driver\\WriteResult::getWriteConcernError()","return":"<p class=\"para\">   Returns a <span class=\"classname\">MongoDB\\Driver\\WriteConcernError<\/span> if a write   concern error was encountered during the write operation, and <strong><code>NULL<\/code><\/strong>   otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::getWriteErrors":{"id":"mongodb-driver-writeresult.getwriteerrors","purpose":"Returns any write errors that occurred","prototype":"array MongoDB\\Driver\\WriteResult::getWriteErrors()","return":"<p class=\"para\">   Returns an array of <span class=\"classname\">MongoDB\\Driver\\WriteError<\/span> objects   for any write errors encountered during the write operation. The array will   be empty if no write errors occurred.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\Driver\\WriteResult::isAcknowledged":{"id":"mongodb-driver-writeresult.isacknowledged","purpose":"Returns whether the write was acknowledged","prototype":"bool MongoDB\\Driver\\WriteResult::isAcknowledged()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the write was acknowledged, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\fromJSON":{"id":"function.mongodb.bson-fromjson","purpose":"Returns the BSON representation of a JSON value","prototype":"string MongoDB\\BSON\\fromJSON(string $json)","return":"<p class=\"para\">   The serialized BSON document as a binary string.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\fromPHP":{"id":"function.mongodb.bson-fromphp","purpose":"Returns the BSON representation of a PHP value","prototype":"string MongoDB\\BSON\\fromPHP(array|object $value)","return":"<p class=\"para\">   The serialized BSON document as a binary string.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\toCanonicalExtendedJSON":{"id":"function.mongodb.bson-tocanonicalextendedjson","purpose":"Returns the Canonical Extended JSON representation of a BSON value","prototype":"string MongoDB\\BSON\\toCanonicalExtendedJSON(string $bson)","return":"<p class=\"para\">   The converted JSON value.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\toJSON":{"id":"function.mongodb.bson-tojson","purpose":"Returns the Legacy Extended JSON representation of a BSON value","prototype":"string MongoDB\\BSON\\toJSON(string $bson)","return":"<p class=\"para\">   The converted JSON value.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\toPHP":{"id":"function.mongodb.bson-tophp","purpose":"Returns the PHP representation of a BSON value","prototype":"array|object MongoDB\\BSON\\toPHP(string $bson [, array $typeMap = array()])","return":"<p class=\"para\">   The unserialized PHP value.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\toRelaxedExtendedJSON":{"id":"function.mongodb.bson-torelaxedextendedjson","purpose":"Returns the Relaxed Extended JSON representation of a BSON value","prototype":"string MongoDB\\BSON\\toRelaxedExtendedJSON(string $bson)","return":"<p class=\"para\">   The converted JSON value.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\Binary::__construct":{"id":"mongodb-bson-binary.construct","purpose":"Construct a new Binary","prototype":" MongoDB\\BSON\\Binary::__construct(string $data, int $type)","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Binary::getData":{"id":"mongodb-bson-binary.getdata","purpose":"Returns the Binary's data","prototype":"string MongoDB\\BSON\\Binary::getData()","return":"<p class=\"para\">   Returns the Binary&#039;s data.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Binary::getType":{"id":"mongodb-bson-binary.gettype","purpose":"Returns the Binary's type","prototype":"int MongoDB\\BSON\\Binary::getType()","return":"<p class=\"para\">   Returns the Binary&#039;s type.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Binary::jsonSerialize":{"id":"mongodb-bson-binary.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Binary::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Binary<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Binary::serialize":{"id":"mongodb-bson-binary.serialize","purpose":"Serialize a Binary","prototype":"string MongoDB\\BSON\\Binary::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Binary<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Binary::__toString":{"id":"mongodb-bson-binary.tostring","purpose":"Returns the Binary's data","prototype":"string MongoDB\\BSON\\Binary::__toString()","return":"<p class=\"para\">   Returns the Binary&#039;s data.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Binary::unserialize":{"id":"mongodb-bson-binary.unserialize","purpose":"Unserialize a Binary","prototype":"void MongoDB\\BSON\\Binary::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Binary<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Decimal128::__construct":{"id":"mongodb-bson-decimal128.construct","purpose":"Construct a new Decimal128","prototype":" MongoDB\\BSON\\Decimal128::__construct([string $value = ''])","return":"","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Decimal128::jsonSerialize":{"id":"mongodb-bson-decimal128.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Decimal128::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Decimal128<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Decimal128::serialize":{"id":"mongodb-bson-decimal128.serialize","purpose":"Serialize a Decimal128","prototype":"string MongoDB\\BSON\\Decimal128::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Decimal128<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Decimal128::__toString":{"id":"mongodb-bson-decimal128.tostring","purpose":"Returns the string representation of this Decimal128","prototype":"string MongoDB\\BSON\\Decimal128::__toString()","return":"<p class=\"para\">   Returns the string representation of this Decimal128.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Decimal128::unserialize":{"id":"mongodb-bson-decimal128.unserialize","purpose":"Unserialize a Decimal128","prototype":"void MongoDB\\BSON\\Decimal128::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Decimal128<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Javascript::__construct":{"id":"mongodb-bson-javascript.construct","purpose":"Construct a new Javascript","prototype":" MongoDB\\BSON\\Javascript::__construct(string $code [, array|object $scope = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Javascript::getCode":{"id":"mongodb-bson-javascript.getcode","purpose":"Returns the Javascript's code","prototype":"string MongoDB\\BSON\\Javascript::getCode()","return":"<p class=\"para\">   Returns the Javascript&#039;s code.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Javascript::getScope":{"id":"mongodb-bson-javascript.getscope","purpose":"Returns the Javascript's scope document","prototype":"object|null MongoDB\\BSON\\Javascript::getScope()","return":"<p class=\"para\">   Returns the Javascript&#039;s scope document.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Javascript::jsonSerialize":{"id":"mongodb-bson-javascript.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Javascript::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Javascript<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Javascript::serialize":{"id":"mongodb-bson-javascript.serialize","purpose":"Serialize a Javascript","prototype":"string MongoDB\\BSON\\Javascript::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Javascript<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Javascript::__toString":{"id":"mongodb-bson-javascript.tostring","purpose":"Returns the Javascript's code","prototype":"string MongoDB\\BSON\\Javascript::__toString()","return":"<p class=\"para\">   Returns the Javascript&#039;s code.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Javascript::unserialize":{"id":"mongodb-bson-javascript.unserialize","purpose":"Unserialize a Javascript","prototype":"void MongoDB\\BSON\\Javascript::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Javascript<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\MaxKey::__construct":{"id":"mongodb-bson-maxkey.construct","purpose":"Construct a new MaxKey","prototype":" MongoDB\\BSON\\MaxKey::__construct()","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\MaxKey::jsonSerialize":{"id":"mongodb-bson-maxkey.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\MaxKey::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\MaxKey<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\MaxKey::serialize":{"id":"mongodb-bson-maxkey.serialize","purpose":"Serialize a MaxKey","prototype":"string MongoDB\\BSON\\MaxKey::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\MaxKey<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\MaxKey::unserialize":{"id":"mongodb-bson-maxkey.unserialize","purpose":"Unserialize a MaxKey","prototype":"void MongoDB\\BSON\\MaxKey::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\MaxKey<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\MinKey::__construct":{"id":"mongodb-bson-minkey.construct","purpose":"Construct a new MinKey","prototype":" MongoDB\\BSON\\MinKey::__construct()","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\MinKey::jsonSerialize":{"id":"mongodb-bson-minkey.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\MinKey::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\MinKey<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\MinKey::serialize":{"id":"mongodb-bson-minkey.serialize","purpose":"Serialize a MinKey","prototype":"string MongoDB\\BSON\\MinKey::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\MinKey<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\MinKey::unserialize":{"id":"mongodb-bson-minkey.unserialize","purpose":"Unserialize a MinKey","prototype":"void MongoDB\\BSON\\MinKey::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\MinKey<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\ObjectId::__construct":{"id":"mongodb-bson-objectid.construct","purpose":"Construct a new ObjectId","prototype":" MongoDB\\BSON\\ObjectId::__construct([string $id = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\ObjectId::getTimestamp":{"id":"mongodb-bson-objectid.gettimestamp","purpose":"Returns the timestamp component of this ObjectId","prototype":"int MongoDB\\BSON\\ObjectId::getTimestamp()","return":"<p class=\"para\">   Returns the timestamp component of this ObjectId.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\ObjectId::jsonSerialize":{"id":"mongodb-bson-objectid.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\ObjectId::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\ObjectId<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\ObjectId::serialize":{"id":"mongodb-bson-objectid.serialize","purpose":"Serialize an ObjectId","prototype":"string MongoDB\\BSON\\ObjectId::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\ObjectId<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\ObjectId::__toString":{"id":"mongodb-bson-objectid.tostring","purpose":"Returns the hexidecimal representation of this ObjectId","prototype":"string MongoDB\\BSON\\ObjectId::__toString()","return":"<p class=\"para\">   Returns the hexidecimal representation of this ObjectId.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\ObjectId::unserialize":{"id":"mongodb-bson-objectid.unserialize","purpose":"Unserialize an ObjectId","prototype":"void MongoDB\\BSON\\ObjectId::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\ObjectId<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Regex::__construct":{"id":"mongodb-bson-regex.construct","purpose":"Construct a new Regex","prototype":" MongoDB\\BSON\\Regex::__construct(string $pattern [, string $flags = \"\"])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Regex::getFlags":{"id":"mongodb-bson-regex.getflags","purpose":"Returns the Regex's flags","prototype":"string MongoDB\\BSON\\Regex::getFlags()","return":"<p class=\"para\">   Returns the Regex&#039;s flags.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Regex::getPattern":{"id":"mongodb-bson-regex.getpattern","purpose":"Returns the Regex's pattern","prototype":"string MongoDB\\BSON\\Regex::getPattern()","return":"<p class=\"para\">   Returns the Regex&#039;s pattern.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Regex::jsonSerialize":{"id":"mongodb-bson-regex.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Regex::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Regex<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Regex::serialize":{"id":"mongodb-bson-regex.serialize","purpose":"Serialize a Regex","prototype":"string MongoDB\\BSON\\Regex::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Regex<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Regex::__toString":{"id":"mongodb-bson-regex.tostring","purpose":"Returns the string representation of this Regex","prototype":"string MongoDB\\BSON\\Regex::__toString()","return":"<p class=\"para\">   Returns the string representation of this Regex.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Regex::unserialize":{"id":"mongodb-bson-regex.unserialize","purpose":"Unserialize a Regex","prototype":"void MongoDB\\BSON\\Regex::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Regex<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Timestamp::__construct":{"id":"mongodb-bson-timestamp.construct","purpose":"Construct a new Timestamp","prototype":" MongoDB\\BSON\\Timestamp::__construct(int $increment, int $timestamp)","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Timestamp::getIncrement":{"id":"mongodb-bson-timestamp.getincrement","purpose":"Returns the increment component of this Timestamp","prototype":"int MongoDB\\BSON\\Timestamp::getIncrement()","return":"<p class=\"para\">   Returns the increment component of this Timestamp.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"simpara\">    On 32-bit systems this method may return a negative number. Although the    increment and timestamp parts of the BSON timestamp type consists of two    unsigned 32-bit values, PHP can not represent these on 32-bit platforms.   <\/p>  <\/div>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\Timestamp::getTimestamp":{"id":"mongodb-bson-timestamp.gettimestamp","purpose":"Returns the timestamp component of this Timestamp","prototype":"int MongoDB\\BSON\\Timestamp::getTimestamp()","return":"<p class=\"para\">   Returns the timestamp component of this Timestamp.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"simpara\">    On 32-bit systems this method may return a negative number. Although the    increment and timestamp parts of the BSON timestamp type consists of two    unsigned 32-bit values, PHP can not represent these on 32-bit platforms.   <\/p>  <\/div>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\Timestamp::jsonSerialize":{"id":"mongodb-bson-timestamp.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Timestamp::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Timestamp<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Timestamp::serialize":{"id":"mongodb-bson-timestamp.serialize","purpose":"Serialize a Timestamp","prototype":"string MongoDB\\BSON\\Timestamp::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Timestamp<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Timestamp::__toString":{"id":"mongodb-bson-timestamp.tostring","purpose":"Returns the string representation of this Timestamp","prototype":"string MongoDB\\BSON\\Timestamp::__toString()","return":"<p class=\"para\">   Returns the string representation of this Timestamp.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Timestamp::unserialize":{"id":"mongodb-bson-timestamp.unserialize","purpose":"Unserialize a Timestamp","prototype":"void MongoDB\\BSON\\Timestamp::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Timestamp<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\UTCDateTime::__construct":{"id":"mongodb-bson-utcdatetime.construct","purpose":"Construct a new UTCDateTime","prototype":" MongoDB\\BSON\\UTCDateTime::__construct([integer|float|string|DateTimeInterface $milliseconds = ''])","return":"","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\UTCDateTime::jsonSerialize":{"id":"mongodb-bson-utcdatetime.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\UTCDateTime::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\UTCDateTime<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\UTCDateTime::serialize":{"id":"mongodb-bson-utcdatetime.serialize","purpose":"Serialize a UTCDateTime","prototype":"string MongoDB\\BSON\\UTCDateTime::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\UTCDateTime<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\UTCDateTime::toDateTime":{"id":"mongodb-bson-utcdatetime.todatetime","purpose":"Returns the DateTime representation of this UTCDateTime","prototype":"DateTime MongoDB\\BSON\\UTCDateTime::toDateTime()","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> representation of this   UTCDateTime. The returned <span class=\"classname\">DateTime<\/span> will use the UTC   time zone.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\UTCDateTime::__toString":{"id":"mongodb-bson-utcdatetime.tostring","purpose":"Returns the string representation of this UTCDateTime","prototype":"string MongoDB\\BSON\\UTCDateTime::__toString()","return":"<p class=\"para\">   Returns the string representation of this UTCDateTime.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\UTCDateTime::unserialize":{"id":"mongodb-bson-utcdatetime.unserialize","purpose":"Unserialize a UTCDateTime","prototype":"void MongoDB\\BSON\\UTCDateTime::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\UTCDateTime<\/span>.  <\/p>","versions":"mongodb >=1.2.0"},"MongoDB\\BSON\\Serializable::bsonSerialize":{"id":"mongodb-bson-serializable.bsonserialize","purpose":"Provides an array or document to serialize as BSON","prototype":"array MongoDB\\BSON\\Serializable::bsonSerialize()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> or <span class=\"classname\">stdClass<\/span> to be serialized as   a BSON array or document.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\Unserializable::bsonUnserialize":{"id":"mongodb-bson-unserializable.bsonunserialize","purpose":"Constructs the object from a BSON array or document","prototype":"array MongoDB\\BSON\\Unserializable::bsonUnserialize(array $data)","return":"<p class=\"para\">   The return value from this method is ignored.  <\/p>","versions":"mongodb >=1.0.0"},"MongoDB\\BSON\\BinaryInterface::getData":{"id":"mongodb-bson-binaryinterface.getdata","purpose":"Returns the BinaryInterface's data","prototype":"string MongoDB\\BSON\\BinaryInterface::getData()","return":"<p class=\"para\">   Returns the BinaryInterface&#039;s data.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\BinaryInterface::getType":{"id":"mongodb-bson-binaryinterface.gettype","purpose":"Returns the BinaryInterface's type","prototype":"int MongoDB\\BSON\\BinaryInterface::getType()","return":"<p class=\"para\">   Returns the BinaryInterface&#039;s type.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\BinaryInterface::__toString":{"id":"mongodb-bson-binaryinterface.tostring","purpose":"Returns the BinaryInterface's data","prototype":"string MongoDB\\BSON\\BinaryInterface::__toString()","return":"<p class=\"para\">   Returns the BinaryInterface&#039;s data.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\Decimal128Interface::__toString":{"id":"mongodb-bson-decimal128interface.tostring","purpose":"Returns the string representation of this Decimal128Interface","prototype":"string MongoDB\\BSON\\Decimal128Interface::__toString()","return":"<p class=\"para\">   Returns the string representation of this Decimal128Interface.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\JavascriptInterface::getCode":{"id":"mongodb-bson-javascriptinterface.getcode","purpose":"Returns the JavascriptInterface's code","prototype":"string MongoDB\\BSON\\JavascriptInterface::getCode()","return":"<p class=\"para\">   Returns the JavascriptInterface&#039;s code.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\JavascriptInterface::getScope":{"id":"mongodb-bson-javascriptinterface.getscope","purpose":"Returns the JavascriptInterface's scope document","prototype":"object|null MongoDB\\BSON\\JavascriptInterface::getScope()","return":"<p class=\"para\">   Returns the JavascriptInterface&#039;s scope document.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\JavascriptInterface::__toString":{"id":"mongodb-bson-javascriptinterface.tostring","purpose":"Returns the JavascriptInterface's code","prototype":"string MongoDB\\BSON\\JavascriptInterface::__toString()","return":"<p class=\"para\">   Returns the JavascriptInterface&#039;s code.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\ObjectIdInterface::getTimestamp":{"id":"mongodb-bson-objectidinterface.gettimestamp","purpose":"Returns the timestamp component of this ObjectIdInterface","prototype":"int MongoDB\\BSON\\ObjectIdInterface::getTimestamp()","return":"<p class=\"para\">   Returns the timestamp component of this ObjectIdInterface.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\ObjectIdInterface::__toString":{"id":"mongodb-bson-objectidinterface.tostring","purpose":"Returns the hexidecimal representation of this ObjectIdInterface","prototype":"string MongoDB\\BSON\\ObjectIdInterface::__toString()","return":"<p class=\"para\">   Returns the hexidecimal representation of this ObjectIdInterface.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\RegexInterface::getFlags":{"id":"mongodb-bson-regexinterface.getflags","purpose":"Returns the RegexInterface's flags","prototype":"string MongoDB\\BSON\\RegexInterface::getFlags()","return":"<p class=\"para\">   Returns the RegexInterface&#039;s flags.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\RegexInterface::getPattern":{"id":"mongodb-bson-regexinterface.getpattern","purpose":"Returns the RegexInterface's pattern","prototype":"string MongoDB\\BSON\\RegexInterface::getPattern()","return":"<p class=\"para\">   Returns the RegexInterface&#039;s pattern.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\RegexInterface::__toString":{"id":"mongodb-bson-regexinterface.tostring","purpose":"Returns the string representation of this RegexInterface","prototype":"string MongoDB\\BSON\\RegexInterface::__toString()","return":"<p class=\"para\">   Returns the string representation of this RegexInterface.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\TimestampInterface::getIncrement":{"id":"mongodb-bson-timestampinterface.getincrement","purpose":"Returns the increment component of this TimestampInterface","prototype":"int MongoDB\\BSON\\TimestampInterface::getIncrement()","return":"<p class=\"para\">   Returns the increment component of this TimestampInterface.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"simpara\">    On 32-bit systems this method may return a negative number. Although the    increment and timestamp parts of the BSON timestamp type consists of two    unsigned 32-bit values, PHP can not represent these on 32-bit platforms.   <\/p>  <\/div>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\TimestampInterface::getTimestamp":{"id":"mongodb-bson-timestampinterface.gettimestamp","purpose":"Returns the timestamp component of this TimestampInterface","prototype":"int MongoDB\\BSON\\TimestampInterface::getTimestamp()","return":"<p class=\"para\">   Returns the timestamp component of this TimestampInterface.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"simpara\">    On 32-bit systems this method may return a negative number. Although the    increment and timestamp parts of the BSON timestamp type consists of two    unsigned 32-bit values, PHP can not represent these on 32-bit platforms.   <\/p>  <\/div>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\TimestampInterface::__toString":{"id":"mongodb-bson-timestampinterface.tostring","purpose":"Returns the string representation of this TimestampInterface","prototype":"string MongoDB\\BSON\\TimestampInterface::__toString()","return":"<p class=\"para\">   Returns the string representation of this TimestampInterface.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\UTCDateTimeInterface::toDateTime":{"id":"mongodb-bson-utcdatetimeinterface.todatetime","purpose":"Returns the DateTime representation of this UTCDateTimeInterface","prototype":"DateTime MongoDB\\BSON\\UTCDateTimeInterface::toDateTime()","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> representation of this   UTCDateTimeInterface. The returned <span class=\"classname\">DateTime<\/span> should use   the UTC time zone.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\UTCDateTimeInterface::__toString":{"id":"mongodb-bson-utcdatetimeinterface.tostring","purpose":"Returns the string representation of this UTCDateTimeInterface","prototype":"string MongoDB\\BSON\\UTCDateTimeInterface::__toString()","return":"<p class=\"para\">   Returns the string representation of this UTCDateTimeInterface.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\BSON\\DBPointer::__construct":{"id":"mongodb-bson-dbpointer.construct","purpose":"Construct a new DBPointer (unused)","prototype":" MongoDB\\BSON\\DBPointer::__construct()","return":"","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\DBPointer::jsonSerialize":{"id":"mongodb-bson-dbpointer.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\DBPointer::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\DBPointer<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\DBPointer::serialize":{"id":"mongodb-bson-dbpointer.serialize","purpose":"Serialize a DBPointer","prototype":"string MongoDB\\BSON\\DBPointer::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\DBPointer<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\DBPointer::__toString":{"id":"mongodb-bson-dbpointer.tostring","purpose":"Returns an empty string","prototype":"string MongoDB\\BSON\\DBPointer::__toString()","return":"<p class=\"para\">   Returns an empty string.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\DBPointer::unserialize":{"id":"mongodb-bson-dbpointer.unserialize","purpose":"Unserialize a DBPointer","prototype":"void MongoDB\\BSON\\DBPointer::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\DBPointer<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Symbol::__construct":{"id":"mongodb-bson-symbol.construct","purpose":"Construct a new Symbol (unused)","prototype":" MongoDB\\BSON\\Symbol::__construct()","return":"","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Symbol::jsonSerialize":{"id":"mongodb-bson-symbol.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Symbol::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Symbol<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Symbol::serialize":{"id":"mongodb-bson-symbol.serialize","purpose":"Serialize a Symbol","prototype":"string MongoDB\\BSON\\Symbol::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Symbol<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Symbol::__toString":{"id":"mongodb-bson-symbol.tostring","purpose":"Returns the Symbol as a string","prototype":"string MongoDB\\BSON\\Symbol::__toString()","return":"<p class=\"para\">   Returns the string representation of this Symbol.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Symbol::unserialize":{"id":"mongodb-bson-symbol.unserialize","purpose":"Unserialize a Symbol","prototype":"void MongoDB\\BSON\\Symbol::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Symbol<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Undefined::__construct":{"id":"mongodb-bson-undefined.construct","purpose":"Construct a new Undefined (unused)","prototype":" MongoDB\\BSON\\Undefined::__construct()","return":"","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Undefined::jsonSerialize":{"id":"mongodb-bson-undefined.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":"mixed MongoDB\\BSON\\Undefined::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span> to   produce an extended JSON representation of the   <span class=\"classname\">MongoDB\\BSON\\Undefined<\/span>.  <\/p>  <p class=\"para\">   The output is consistent with the <span class=\"function\">MongoDB\\BSON\\toJSON<\/span>   function, which represents the driver specifc legacy extended JSON format,   which does not necessarily match the relaxed or <a href=\"https:\/\/docs.mongodb.com\/manual\/reference\/mongodb-extended-json\/\" class=\"link external\">&raquo;&nbsp;canonical extended JSON<\/a>   representation.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Undefined::serialize":{"id":"mongodb-bson-undefined.serialize","purpose":"Serialize a Undefined","prototype":"string MongoDB\\BSON\\Undefined::serialize()","return":"<p class=\"para\">   Returns the serialized representation of the   <span class=\"classname\">MongoDB\\BSON\\Undefined<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Undefined::__toString":{"id":"mongodb-bson-undefined.tostring","purpose":"Returns an empty string","prototype":"string MongoDB\\BSON\\Undefined::__toString()","return":"<p class=\"para\">   Returns an empty string.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\BSON\\Undefined::unserialize":{"id":"mongodb-bson-undefined.unserialize","purpose":"Unserialize a Undefined","prototype":"void MongoDB\\BSON\\Undefined::unserialize(string $serialized)","return":"<p class=\"para\">   Returns the unserialized <span class=\"classname\">MongoDB\\BSON\\Undefined<\/span>.  <\/p>","versions":"mongodb >=1.4.0"},"MongoDB\\Driver\\Monitoring\\addSubscriber":{"id":"function.mongodb.driver.monitoring.addsubscriber","purpose":"Registers a new monitoring event subscriber","prototype":"void MongoDB\\Driver\\Monitoring\\addSubscriber(MongoDB\\Driver\\Monitoring\\Subscriber $subscriber)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\removeSubscriber":{"id":"function.mongodb.driver.monitoring.removesubscriber","purpose":"Unregisters an existing monitoring event subscriber","prototype":"void MongoDB\\Driver\\Monitoring\\removeSubscriber(MongoDB\\Driver\\Monitoring\\Subscriber $subscriber)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getCommandName":{"id":"mongodb-driver-monitoring-commandfailedevent.getcommandname","purpose":"Returns the command name","prototype":"string MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getCommandName()","return":"<p class=\"para\">   Returns the command name.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getDurationMicros":{"id":"mongodb-driver-monitoring-commandfailedevent.getdurationmicros","purpose":"Returns the command's duration in microseconds","prototype":"int MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getDurationMicros()","return":"<p class=\"para\">   Returns the command&#039;s duration in microseconds.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getError":{"id":"mongodb-driver-monitoring-commandfailedevent.geterror","purpose":"Returns the Exception associated with the failed command","prototype":"Exception MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getError()","return":"<p class=\"para\">   Returns the <span class=\"classname\">Exception<\/span> associated with the failed command.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getOperationId":{"id":"mongodb-driver-monitoring-commandfailedevent.getoperationid","purpose":"Returns the command's operation ID","prototype":"string MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getOperationId()","return":"<p class=\"para\">   Returns the command&#039;s operation ID.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getReply":{"id":"mongodb-driver-monitoring-commandfailedevent.getreply","purpose":"Returns the command reply document","prototype":"stdClass MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getReply()","return":"<p class=\"para\">   Returns the command reply document as a <span class=\"classname\">stdClass<\/span>   object.  <\/p>","versions":"mongodb >=1.5.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getRequestId":{"id":"mongodb-driver-monitoring-commandfailedevent.getrequestid","purpose":"Returns the command's request ID","prototype":"string MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getRequestId()","return":"<p class=\"para\">   Returns the command&#039;s request ID.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServer":{"id":"mongodb-driver-monitoring-commandfailedevent.getserver","purpose":"Returns the Server on which the command was executed","prototype":"MongoDB\\Driver\\Server MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServer()","return":"<p class=\"para\">   Returns the <span class=\"classname\">MongoDB\\Driver\\Server<\/span> on which the command   was executed.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommand":{"id":"mongodb-driver-monitoring-commandstartedevent.getcommand","purpose":"Returns the command document","prototype":"stdClass MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommand()","return":"<p class=\"para\">   Returns the command document as a <span class=\"classname\">stdClass<\/span> object.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommandName":{"id":"mongodb-driver-monitoring-commandstartedevent.getcommandname","purpose":"Returns the command name","prototype":"string MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommandName()","return":"<p class=\"para\">   Returns the command name.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getDatabaseName":{"id":"mongodb-driver-monitoring-commandstartedevent.getdatabasename","purpose":"Returns the database on which the command was executed","prototype":"string MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getDatabaseName()","return":"<p class=\"para\">   Returns the database on which the command was executed.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getOperationId":{"id":"mongodb-driver-monitoring-commandstartedevent.getoperationid","purpose":"Returns the command's operation ID","prototype":"string MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getOperationId()","return":"<p class=\"para\">   Returns the command&#039;s operation ID.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getRequestId":{"id":"mongodb-driver-monitoring-commandstartedevent.getrequestid","purpose":"Returns the command's request ID","prototype":"string MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getRequestId()","return":"<p class=\"para\">   Returns the command&#039;s request ID.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServer":{"id":"mongodb-driver-monitoring-commandstartedevent.getserver","purpose":"Returns the Server on which the command was executed","prototype":"MongoDB\\Driver\\Server MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServer()","return":"<p class=\"para\">   Returns the <span class=\"classname\">MongoDB\\Driver\\Server<\/span> on which the command   was executed.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getCommandName":{"id":"mongodb-driver-monitoring-commandsucceededevent.getcommandname","purpose":"Returns the command name","prototype":"string MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getCommandName()","return":"<p class=\"para\">   Returns the command name.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getDurationMicros":{"id":"mongodb-driver-monitoring-commandsucceededevent.getdurationmicros","purpose":"Returns the command's duration in microseconds","prototype":"int MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getDurationMicros()","return":"<p class=\"para\">   Returns the command&#039;s duration in microseconds.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getOperationId":{"id":"mongodb-driver-monitoring-commandsucceededevent.getoperationid","purpose":"Returns the command's operation ID","prototype":"string MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getOperationId()","return":"<p class=\"para\">   Returns the command&#039;s operation ID.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getReply":{"id":"mongodb-driver-monitoring-commandsucceededevent.getreply","purpose":"Returns the command reply document","prototype":"stdClass MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getReply()","return":"<p class=\"para\">   Returns the command reply document as a <span class=\"classname\">stdClass<\/span>   object.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getRequestId":{"id":"mongodb-driver-monitoring-commandsucceededevent.getrequestid","purpose":"Returns the command's request ID","prototype":"string MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getRequestId()","return":"<p class=\"para\">   Returns the command&#039;s request ID.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServer":{"id":"mongodb-driver-monitoring-commandsucceededevent.getserver","purpose":"Returns the Server on which the command was executed","prototype":"MongoDB\\Driver\\Server MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServer()","return":"<p class=\"para\">   Returns the <span class=\"classname\">MongoDB\\Driver\\Server<\/span> on which the command   was executed.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandFailed":{"id":"mongodb-driver-monitoring-commandsubscriber.commandfailed","purpose":"Notification method for a failed command","prototype":"void MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandFailed(MongoDB\\Driver\\Monitoring\\CommandFailedEvent $event)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandStarted":{"id":"mongodb-driver-monitoring-commandsubscriber.commandstarted","purpose":"Notification method for a started command","prototype":"void MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandStarted(MongoDB\\Driver\\Monitoring\\CommandStartedEvent $event)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandSucceeded":{"id":"mongodb-driver-monitoring-commandsubscriber.commandsucceeded","purpose":"Notification method for a successful command","prototype":"void MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandSucceeded(MongoDB\\Driver\\Monitoring\\CommandSucceededEvent $event)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"mongodb >=1.3.0"},"MongoDB\\Driver\\Exception\\CommandException::getResultDocument":{"id":"mongodb-driver-commandexception.getresultdocument","purpose":"Returns the result document for the failed command","prototype":"object MongoDB\\Driver\\Exception\\CommandException::getResultDocument()","return":"<p class=\"para\">   The result document for the failed command.  <\/p>","versions":"mongodb >= 1.5.0"},"MongoDB\\Driver\\Exception\\WriteException::getWriteResult":{"id":"mongodb-driver-writeexception.getwriteresult","purpose":"Returns the WriteResult for the failed write operation","prototype":"MongoDB\\Driver\\WriteResult MongoDB\\Driver\\Exception\\WriteException::getWriteResult()","return":"<p class=\"para\">   The <span class=\"classname\">MongoDB\\Driver\\WriteResult<\/span> for the failed write   operation.  <\/p>","versions":"mongodb >= 1.0.0"},"msql_affected_rows":{"id":"function.msql-affected-rows","purpose":"Returns number of affected rows","prototype":"int msql_affected_rows(resource $result)","return":"<p class=\"para\">   Returns the number of affected rows on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_close":{"id":"function.msql-close","purpose":"Close mSQL connection","prototype":"bool msql_close([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_connect":{"id":"function.msql-connect","purpose":"Open mSQL connection","prototype":"resource msql_connect([string $hostname = ''])","return":"<p class=\"para\">   Returns a positive mSQL link identifier on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_create_db":{"id":"function.msql-create-db","purpose":"Create mSQL database","prototype":"bool msql_create_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_createdb":{"id":"function.msql-createdb","purpose":"Alias of msql_create_db","prototype":" msql_createdb()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_data_seek":{"id":"function.msql-data-seek","purpose":"Move internal row pointer","prototype":"bool msql_data_seek(resource $result, int $row_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_db_query":{"id":"function.msql-db-query","purpose":"Send mSQL query","prototype":"resource msql_db_query(string $database, string $query [, resource $link_identifier = ''])","return":"<p class=\"para\">    Returns a positive mSQL query identifier to the query result, or <strong><code>FALSE<\/code><\/strong>   on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_dbname":{"id":"function.msql-dbname","purpose":"Alias of msql_result","prototype":" msql_dbname()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_drop_db":{"id":"function.msql-drop-db","purpose":"Drop (delete) mSQL database","prototype":"bool msql_drop_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_error":{"id":"function.msql-error","purpose":"Returns error message of last msql call","prototype":"string msql_error()","return":"<p class=\"para\">   The last error message or an empty string if no error was issued.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_fetch_array":{"id":"function.msql-fetch-array","purpose":"Fetch row as array","prototype":"array msql_fetch_array(resource $result [, int $result_type = ''])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if   there are no more rows.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_fetch_field":{"id":"function.msql-fetch-field","purpose":"Get field information","prototype":"object msql_fetch_field(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns an object containing field information. The properties of the    object are:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <p class=\"para\">      <span class=\"property\">name<\/span> - column name     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <span class=\"property\">table<\/span> - name of the table the column belongs to     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <span class=\"property\">not_null<\/span> - 1 if the column cannot be <strong><code>NULL<\/code><\/strong>     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <span class=\"property\">unique<\/span> - 1 if the column is a unique key     <\/p>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      type - the type of the column     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_fetch_object":{"id":"function.msql-fetch-object","purpose":"Fetch row as object","prototype":"object msql_fetch_object(resource $result)","return":"<p class=\"para\">   Returns an object with properties that correspond to the fetched   row, or <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_fetch_row":{"id":"function.msql-fetch-row","purpose":"Get row as enumerated array","prototype":"array msql_fetch_row(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if   there are no more rows.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_field_flags":{"id":"function.msql-field-flags","purpose":"Get field flags","prototype":"string msql_field_flags(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns a string containing the field flags of the specified key.   This can be: <em>primary key not null<\/em>,   <em>not null<\/em>, <em>primary key<\/em>,    <em>unique not null<\/em> or <em>unique<\/em>.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_field_len":{"id":"function.msql-field-len","purpose":"Get field length","prototype":"int msql_field_len(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns the length of the specified field or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_field_name":{"id":"function.msql-field-name","purpose":"Get the name of the specified field in a result","prototype":"string msql_field_name(resource $result, int $field_offset)","return":"<p class=\"para\">   The name of the field or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_field_seek":{"id":"function.msql-field-seek","purpose":"Set field offset","prototype":"bool msql_field_seek(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_field_table":{"id":"function.msql-field-table","purpose":"Get table name for field","prototype":"int msql_field_table(resource $result, int $field_offset)","return":"<p class=\"para\">   The name of the table on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_field_type":{"id":"function.msql-field-type","purpose":"Get field type","prototype":"string msql_field_type(resource $result, int $field_offset)","return":"<p class=\"para\">   The type of the field. One of <em>int<\/em>,    <em>char<\/em>, <em>real<\/em>, <em>ident<\/em>,   <em>null<\/em> or <em>unknown<\/em>. This functions will   return <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_fieldflags":{"id":"function.msql-fieldflags","purpose":"Alias of msql_field_flags","prototype":" msql_fieldflags()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_fieldlen":{"id":"function.msql-fieldlen","purpose":"Alias of msql_field_len","prototype":" msql_fieldlen()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_fieldname":{"id":"function.msql-fieldname","purpose":"Alias of msql_field_name","prototype":" msql_fieldname()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_fieldtable":{"id":"function.msql-fieldtable","purpose":"Alias of msql_field_table","prototype":" msql_fieldtable()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_fieldtype":{"id":"function.msql-fieldtype","purpose":"Alias of msql_field_type","prototype":" msql_fieldtype()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_free_result":{"id":"function.msql-free-result","purpose":"Free result memory","prototype":"bool msql_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_list_dbs":{"id":"function.msql-list-dbs","purpose":"List mSQL databases on server","prototype":"resource msql_list_dbs([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a result set which may be traversed with any function that fetches   result sets, such as <span class=\"function\">msql_fetch_array<\/span>. On failure,    this function will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_list_fields":{"id":"function.msql-list-fields","purpose":"List result fields","prototype":"resource msql_list_fields(string $database, string $tablename [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a result set which may be traversed with any function that fetches   result sets, such as <span class=\"function\">msql_fetch_array<\/span>. On failure,    this function will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_list_tables":{"id":"function.msql-list-tables","purpose":"List tables in an mSQL database","prototype":"resource msql_list_tables(string $database [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a result set which may be traversed with any function that fetches   result sets, such as <span class=\"function\">msql_fetch_array<\/span>. On failure,    this function will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_num_fields":{"id":"function.msql-num-fields","purpose":"Get number of fields in result","prototype":"int msql_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields in the result set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_num_rows":{"id":"function.msql-num-rows","purpose":"Get number of rows in result","prototype":"int msql_num_rows(resource $query_identifier)","return":"<p class=\"para\">   Returns the number of rows in the result set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_numfields":{"id":"function.msql-numfields","purpose":"Alias of msql_num_fields","prototype":" msql_numfields()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_numrows":{"id":"function.msql-numrows","purpose":"Alias of msql_num_rows","prototype":" msql_numrows()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_pconnect":{"id":"function.msql-pconnect","purpose":"Open persistent mSQL connection","prototype":"resource msql_pconnect([string $hostname = ''])","return":"<p class=\"para\">   Returns a positive mSQL link identifier on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_query":{"id":"function.msql-query","purpose":"Send mSQL query","prototype":"resource msql_query(string $query [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a positive mSQL query identifier on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_regcase":{"id":"function.msql-regcase","purpose":"Alias of sql_regcase","prototype":" msql_regcase()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql_result":{"id":"function.msql-result","purpose":"Get result data","prototype":"string msql_result(resource $result, int $row [, mixed $field = ''])","return":"<p class=\"para\">   Returns the contents of the cell at the row and offset in the   specified mSQL result set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_select_db":{"id":"function.msql-select-db","purpose":"Select mSQL database","prototype":"bool msql_select_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"msql_tablename":{"id":"function.msql-tablename","purpose":"Alias of msql_result","prototype":" msql_tablename()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"msql":{"id":"function.msql","purpose":"Alias of msql_db_query","prototype":" msql()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"mssql_bind":{"id":"function.mssql-bind","purpose":"Adds a parameter to a stored procedure or a remote stored procedure","prototype":"bool mssql_bind(resource $stmt, string $param_name, mixed $var, int $type [, bool $is_output = '' [, bool $is_null = '' [, int $maxlen = -1]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1"},"mssql_close":{"id":"function.mssql-close","purpose":"Close MS SQL Server connection","prototype":"bool mssql_close([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_connect":{"id":"function.mssql-connect","purpose":"Open MS SQL server connection","prototype":"resource mssql_connect([string $servername = '' [, string $username = '' [, string $password = '' [, bool $new_link = '']]]])","return":"<p class=\"para\">   Returns a MS SQL link identifier on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_data_seek":{"id":"function.mssql-data-seek","purpose":"Moves internal row pointer","prototype":"bool mssql_data_seek(resource $result_identifier, int $row_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_execute":{"id":"function.mssql-execute","purpose":"Executes a stored procedure on a MS SQL server database","prototype":"mixed mssql_execute(resource $stmt [, bool $skip_results = ''])","return":"","versions":"PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1"},"mssql_fetch_array":{"id":"function.mssql-fetch-array","purpose":"Fetch a result row as an associative array, a numeric array, or both","prototype":"array mssql_fetch_array(resource $result [, int $result_type = MSSQL_BOTH])","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_fetch_assoc":{"id":"function.mssql-fetch-assoc","purpose":"Returns an associative array of the current row in the result","prototype":"array mssql_fetch_assoc(resource $result_id)","return":"<p class=\"para\">   Returns an associative array that corresponds to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PECL odbtp >= 1.1.1"},"mssql_fetch_batch":{"id":"function.mssql-fetch-batch","purpose":"Returns the next batch of records","prototype":"int mssql_fetch_batch(resource $result)","return":"<p class=\"para\">   Returns the number of rows in the returned batch.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_fetch_field":{"id":"function.mssql-fetch-field","purpose":"Get field information","prototype":"object mssql_fetch_field(resource $result [, int $field_offset = -1])","return":"<p class=\"para\">   Returns an object containing field information.  <\/p>  <p class=\"para\">   The properties of the object are:  <\/p>  <ul class=\"itemizedlist\">   <li class=\"listitem\">    <span class=\"simpara\">     name - column name.  if the column is a result of a function,     this property is set to computed#N, where #N is a serial     number.    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     column_source - the table from which the column was taken    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     max_length - maximum length of the column    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     numeric - 1 if the column is numeric    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     type - the column type.    <\/span>   <\/li>  <\/ul>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_fetch_object":{"id":"function.mssql-fetch-object","purpose":"Fetch row as object","prototype":"object mssql_fetch_object(resource $result)","return":"<p class=\"para\">   Returns an object with properties that correspond to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_fetch_row":{"id":"function.mssql-fetch-row","purpose":"Get row as enumerated array","prototype":"array mssql_fetch_row(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_field_length":{"id":"function.mssql-field-length","purpose":"Get the length of a field","prototype":"int mssql_field_length(resource $result [, int $offset = -1])","return":"<p class=\"para\">   The length of the specified field index on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_field_name":{"id":"function.mssql-field-name","purpose":"Get the name of a field","prototype":"string mssql_field_name(resource $result [, int $offset = -1])","return":"<p class=\"para\">   The name of the specified field index on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_field_seek":{"id":"function.mssql-field-seek","purpose":"Seeks to the specified field offset","prototype":"bool mssql_field_seek(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_field_type":{"id":"function.mssql-field-type","purpose":"Gets the type of a field","prototype":"string mssql_field_type(resource $result [, int $offset = -1])","return":"<p class=\"para\">   The type of the specified field index on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_free_result":{"id":"function.mssql-free-result","purpose":"Free result memory","prototype":"bool mssql_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_free_statement":{"id":"function.mssql-free-statement","purpose":"Free statement memory","prototype":"bool mssql_free_statement(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PECL odbtp >= 1.1.1"},"mssql_get_last_message":{"id":"function.mssql-get-last-message","purpose":"Returns the last message from the server","prototype":"string mssql_get_last_message()","return":"<p class=\"para\">   Returns last error message from server, or an empty string if    no error messages are returned from MSSQL.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_guid_string":{"id":"function.mssql-guid-string","purpose":"Converts a 16 byte binary GUID to a string","prototype":"string mssql_guid_string(string $binary [, bool $short_format = ''])","return":"<p class=\"para\">   Returns the converted string on success.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1"},"mssql_init":{"id":"function.mssql-init","purpose":"Initializes a stored procedure or a remote stored procedure","prototype":"resource mssql_init(string $sp_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a resource identifier &quot;statement&quot;, used in subsequent calls to   <span class=\"function\">mssql_bind<\/span> and <span class=\"function\">mssql_execute<\/span>,   or <strong><code>FALSE<\/code><\/strong> on errors.   <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1"},"mssql_min_error_severity":{"id":"function.mssql-min-error-severity","purpose":"Sets the minimum error severity","prototype":"void mssql_min_error_severity(int $severity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_min_message_severity":{"id":"function.mssql-min-message-severity","purpose":"Sets the minimum message severity","prototype":"void mssql_min_message_severity(int $severity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_next_result":{"id":"function.mssql-next-result","purpose":"Move the internal result pointer to the next result","prototype":"bool mssql_next_result(resource $result_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if an additional result set was available or <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PECL odbtp >= 1.1.1"},"mssql_num_fields":{"id":"function.mssql-num-fields","purpose":"Gets the number of fields in result","prototype":"int mssql_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields, as an integer.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_num_rows":{"id":"function.mssql-num-rows","purpose":"Gets the number of rows in result","prototype":"int mssql_num_rows(resource $result)","return":"<p class=\"para\">   Returns the number of rows, as an integer.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_pconnect":{"id":"function.mssql-pconnect","purpose":"Open persistent MS SQL connection","prototype":"resource mssql_pconnect([string $servername = '' [, string $username = '' [, string $password = '' [, bool $new_link = '']]]])","return":"<p class=\"para\">   Returns a positive MS SQL persistent link identifier on success, or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_query":{"id":"function.mssql-query","purpose":"Send MS SQL query","prototype":"mixed mssql_query(string $query [, resource $link_identifier = '' [, int $batch_size = '']])","return":"<p class=\"para\">   Returns a MS SQL result resource on success, <strong><code>TRUE<\/code><\/strong> if no rows were   returned, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_result":{"id":"function.mssql-result","purpose":"Get result data","prototype":"string mssql_result(resource $result, int $row, mixed $field)","return":"<p class=\"para\">   Returns the contents of the specified cell.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_rows_affected":{"id":"function.mssql-rows-affected","purpose":"Returns the number of records affected by the query","prototype":"int mssql_rows_affected(resource $link_identifier)","return":"<p class=\"para\">   Returns the number of records affected by last operation.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PECL odbtp >= 1.1.1"},"mssql_select_db":{"id":"function.mssql-select-db","purpose":"Select MS SQL database","prototype":"bool mssql_select_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PECL odbtp >= 1.1.1"},"mysqli::$affected_rows":{"id":"mysqli.affected-rows","purpose":"Gets the number of affected rows in a previous MySQL operation","prototype":"int mysqli::$affected_rows(mysqli $link)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or   retrieved.   Zero indicates that no records were updated for an UPDATE statement, no   rows matched the <em>WHERE<\/em> clause in the query or that no   query has yet been executed. -1 indicates that the query returned an   error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of affected rows is greater than the maximum integer value(<strong><code> PHP_INT_MAX <\/code><\/strong>), the    number of affected rows will be returned as a string.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_affected_rows":{"id":"mysqli.affected-rows","purpose":"Gets the number of affected rows in a previous MySQL operation","prototype":"int mysqli.$affected_rows(mysqli $link)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or   retrieved.   Zero indicates that no records were updated for an UPDATE statement, no   rows matched the <em>WHERE<\/em> clause in the query or that no   query has yet been executed. -1 indicates that the query returned an   error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of affected rows is greater than the maximum integer value(<strong><code> PHP_INT_MAX <\/code><\/strong>), the    number of affected rows will be returned as a string.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli::autocommit":{"id":"mysqli.autocommit","purpose":"Turns on or off auto-committing database modifications","prototype":"bool mysqli::autocommit(bool $mode, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_autocommit":{"id":"mysqli.autocommit","purpose":"Turns on or off auto-committing database modifications","prototype":"bool mysqli_autocommit(bool $mode, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::begin_transaction":{"id":"mysqli.begin-transaction","purpose":"Starts a transaction","prototype":"bool mysqli::begin_transaction([int $flags = '' [, string $name = '', mysqli $link]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"mysqli_begin_transaction":{"id":"mysqli.begin-transaction","purpose":"Starts a transaction","prototype":"bool mysqli_begin_transaction([int $flags = '' [, string $name = '', mysqli $link]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"mysqli::change_user":{"id":"mysqli.change-user","purpose":"Changes the user of the specified database connection","prototype":"bool mysqli::change_user(string $user, string $password, string $database, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_change_user":{"id":"mysqli.change-user","purpose":"Changes the user of the specified database connection","prototype":"bool mysqli_change_user(string $user, string $password, string $database, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::character_set_name":{"id":"mysqli.character-set-name","purpose":"Returns the default character set for the database connection","prototype":"string mysqli::character_set_name(mysqli $link)","return":"<p class=\"para\">The default character set for the current connection<\/p>","versions":"PHP 5, PHP 7"},"mysqli_character_set_name":{"id":"mysqli.character-set-name","purpose":"Returns the default character set for the database connection","prototype":"string mysqli_character_set_name(mysqli $link)","return":"<p class=\"para\">The default character set for the current connection<\/p>","versions":"PHP 5, PHP 7"},"mysqli::close":{"id":"mysqli.close","purpose":"Closes a previously opened database connection","prototype":"bool mysqli::close(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_close":{"id":"mysqli.close","purpose":"Closes a previously opened database connection","prototype":"bool mysqli_close(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::commit":{"id":"mysqli.commit","purpose":"Commits the current transaction","prototype":"bool mysqli::commit([int $flags = '' [, string $name = '', mysqli $link]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_commit":{"id":"mysqli.commit","purpose":"Commits the current transaction","prototype":"bool mysqli_commit([int $flags = '' [, string $name = '', mysqli $link]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$connect_errno":{"id":"mysqli.connect-errno","purpose":"Returns the error code from last connect call","prototype":"int mysqli::$connect_errno()","return":"<p class=\"para\">   An error code value for the last call to <span class=\"function\">mysqli_connect<\/span>, if it failed.   zero means no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_connect_errno":{"id":"mysqli.connect-errno","purpose":"Returns the error code from last connect call","prototype":"int mysqli.$connect_errno()","return":"<p class=\"para\">   An error code value for the last call to <span class=\"function\">mysqli_connect<\/span>, if it failed.   zero means no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$connect_error":{"id":"mysqli.connect-error","purpose":"Returns a string description of the last connect error","prototype":"string mysqli::$connect_error()","return":"<p class=\"para\">   A string that describes the error. <strong><code>NULL<\/code><\/strong> is returned if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_connect_error":{"id":"mysqli.connect-error","purpose":"Returns a string description of the last connect error","prototype":"string mysqli.$connect_error()","return":"<p class=\"para\">   A string that describes the error. <strong><code>NULL<\/code><\/strong> is returned if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::__construct":{"id":"mysqli.construct","purpose":"Open a new connection to the MySQL server","prototype":"mysqli mysqli::__construct([string $host = ini_get(\"mysqli.default_host\") [, string $username = ini_get(\"mysqli.default_user\") [, string $passwd = ini_get(\"mysqli.default_pw\") [, string $dbname = \"\" [, int $port = ini_get(\"mysqli.default_port\") [, string $socket = ini_get(\"mysqli.default_socket\")]]]]]])","return":"<p class=\"para\">   Returns an object which represents the connection to a MySQL Server.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::connect":{"id":"mysqli.construct","purpose":"Open a new connection to the MySQL server","prototype":"mysqli mysqli::connect([string $host = ini_get(\"mysqli.default_host\") [, string $username = ini_get(\"mysqli.default_user\") [, string $passwd = ini_get(\"mysqli.default_pw\") [, string $dbname = \"\" [, int $port = ini_get(\"mysqli.default_port\") [, string $socket = ini_get(\"mysqli.default_socket\")]]]]]])","return":"<p class=\"para\">   Returns an object which represents the connection to a MySQL Server.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_connect":{"id":"function.mysqli-connect","purpose":"Alias of mysqli::__construct","prototype":" mysqli_connect()","return":"","versions":"PHP 5, PHP 7"},"mysqli::debug":{"id":"mysqli.debug","purpose":"Performs debugging operations","prototype":"bool mysqli::debug(string $message)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_debug":{"id":"mysqli.debug","purpose":"Performs debugging operations","prototype":"bool mysqli_debug(string $message)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::dump_debug_info":{"id":"mysqli.dump-debug-info","purpose":"Dump debugging information into the log","prototype":"bool mysqli::dump_debug_info(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_dump_debug_info":{"id":"mysqli.dump-debug-info","purpose":"Dump debugging information into the log","prototype":"bool mysqli_dump_debug_info(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$errno":{"id":"mysqli.errno","purpose":"Returns the error code for the most recent function call","prototype":"int mysqli::$errno(mysqli $link)","return":"<p class=\"para\">   An error code value for the last call, if it failed. zero means no error   occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_errno":{"id":"mysqli.errno","purpose":"Returns the error code for the most recent function call","prototype":"int mysqli.$errno(mysqli $link)","return":"<p class=\"para\">   An error code value for the last call, if it failed. zero means no error   occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$error_list":{"id":"mysqli.error-list","purpose":"Returns a list of errors from the last command executed","prototype":"array mysqli::$error_list(mysqli $link)","return":"<p class=\"para\">   A list of errors, each as an associative <span class=\"type\">array<\/span>   containing the errno, error, and sqlstate.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"mysqli_error_list":{"id":"mysqli.error-list","purpose":"Returns a list of errors from the last command executed","prototype":"array mysqli.$error_list(mysqli $link)","return":"<p class=\"para\">   A list of errors, each as an associative <span class=\"type\">array<\/span>   containing the errno, error, and sqlstate.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"mysqli::$error":{"id":"mysqli.error","purpose":"Returns a string description of the last error","prototype":"string mysqli::$error(mysqli $link)","return":"<p class=\"para\">    A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_error":{"id":"mysqli.error","purpose":"Returns a string description of the last error","prototype":"string mysqli.$error(mysqli $link)","return":"<p class=\"para\">    A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$field_count":{"id":"mysqli.field-count","purpose":"Returns the number of columns for the most recent query","prototype":"int mysqli::$field_count(mysqli $link)","return":"<p class=\"para\">   An integer representing the number of fields in a result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_field_count":{"id":"mysqli.field-count","purpose":"Returns the number of columns for the most recent query","prototype":"int mysqli.$field_count(mysqli $link)","return":"<p class=\"para\">   An integer representing the number of fields in a result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::get_charset":{"id":"mysqli.get-charset","purpose":"Returns a character set object","prototype":"object mysqli::get_charset(mysqli $link)","return":"<p class=\"para\">   The function returns a character set object with the following properties:   <dl>         <dt><code class=\"parameter\">charset<\/code><\/dt>     <dd><p class=\"para\">Character set name<\/p><\/dd>             <dt><code class=\"parameter\">collation<\/code><\/dt>     <dd><p class=\"para\">Collation name<\/p><\/dd>             <dt><code class=\"parameter\">dir<\/code><\/dt>     <dd><p class=\"para\">Directory the charset description was fetched from (?) or &quot;&quot; for built-in character sets<\/p><\/dd>             <dt><code class=\"parameter\">min_length<\/code><\/dt>     <dd><p class=\"para\">Minimum character length in bytes<\/p><\/dd>             <dt><code class=\"parameter\">max_length<\/code><\/dt>     <dd><p class=\"para\">Maximum character length in bytes<\/p><\/dd>             <dt><code class=\"parameter\">number<\/code><\/dt>     <dd><p class=\"para\">Internal character set number<\/p><\/dd>             <dt><code class=\"parameter\">state<\/code><\/dt>     <dd><p class=\"para\">Character set status (?)<\/p><\/dd>       <\/dl>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"mysqli_get_charset":{"id":"mysqli.get-charset","purpose":"Returns a character set object","prototype":"object mysqli_get_charset(mysqli $link)","return":"<p class=\"para\">   The function returns a character set object with the following properties:   <dl>         <dt><code class=\"parameter\">charset<\/code><\/dt>     <dd><p class=\"para\">Character set name<\/p><\/dd>             <dt><code class=\"parameter\">collation<\/code><\/dt>     <dd><p class=\"para\">Collation name<\/p><\/dd>             <dt><code class=\"parameter\">dir<\/code><\/dt>     <dd><p class=\"para\">Directory the charset description was fetched from (?) or &quot;&quot; for built-in character sets<\/p><\/dd>             <dt><code class=\"parameter\">min_length<\/code><\/dt>     <dd><p class=\"para\">Minimum character length in bytes<\/p><\/dd>             <dt><code class=\"parameter\">max_length<\/code><\/dt>     <dd><p class=\"para\">Maximum character length in bytes<\/p><\/dd>             <dt><code class=\"parameter\">number<\/code><\/dt>     <dd><p class=\"para\">Internal character set number<\/p><\/dd>             <dt><code class=\"parameter\">state<\/code><\/dt>     <dd><p class=\"para\">Character set status (?)<\/p><\/dd>       <\/dl>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"mysqli::$client_info":{"id":"mysqli.get-client-info","purpose":"Get MySQL client info","prototype":"string mysqli::$client_info(mysqli $link)","return":"<p class=\"para\">   A string that represents the MySQL client library version  <\/p>","versions":""},"mysqli::get_client_info":{"id":"mysqli.get-client-info","purpose":"Get MySQL client info","prototype":"string mysqli.$client_info(mysqli $link)","return":"<p class=\"para\">   A string that represents the MySQL client library version  <\/p>","versions":""},"mysqli_get_client_info":{"id":"mysqli.get-client-info","purpose":"Get MySQL client info","prototype":"string mysqli.$client_info(mysqli $link)","return":"<p class=\"para\">   A string that represents the MySQL client library version  <\/p>","versions":""},"mysqli::$client_version":{"id":"mysqli.get-client-version","purpose":"Returns the MySQL client version as an integer","prototype":"int mysqli::$client_version(mysqli $link)","return":"<p class=\"para\">   A number that represents the MySQL client library version in format:   <em>main_version*10000 + minor_version *100 + sub_version<\/em>.   For example, 4.1.0 is returned as 40100.  <\/p>  <p class=\"para\">   This is useful to quickly determine the version of the client library   to know if some capability exists.  <\/p>","versions":""},"mysqli_get_client_version":{"id":"mysqli.get-client-version","purpose":"Returns the MySQL client version as an integer","prototype":"int mysqli.$client_version(mysqli $link)","return":"<p class=\"para\">   A number that represents the MySQL client library version in format:   <em>main_version*10000 + minor_version *100 + sub_version<\/em>.   For example, 4.1.0 is returned as 40100.  <\/p>  <p class=\"para\">   This is useful to quickly determine the version of the client library   to know if some capability exists.  <\/p>","versions":""},"mysqli::get_connection_stats":{"id":"mysqli.get-connection-stats","purpose":"Returns statistics about the client connection","prototype":"array mysqli::get_connection_stats(mysqli $link)","return":"<p class=\"para\">   Returns an array with connection stats if success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_get_connection_stats":{"id":"mysqli.get-connection-stats","purpose":"Returns statistics about the client connection","prototype":"array mysqli_get_connection_stats(mysqli $link)","return":"<p class=\"para\">   Returns an array with connection stats if success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli::$host_info":{"id":"mysqli.get-host-info","purpose":"Returns a string representing the type of connection used","prototype":"string mysqli::$host_info(mysqli $link)","return":"<p class=\"para\">   A character string representing the server hostname and the connection type.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_get_host_info":{"id":"mysqli.get-host-info","purpose":"Returns a string representing the type of connection used","prototype":"string mysqli.$host_info(mysqli $link)","return":"<p class=\"para\">   A character string representing the server hostname and the connection type.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$protocol_version":{"id":"mysqli.get-proto-info","purpose":"Returns the version of the MySQL protocol used","prototype":"int mysqli::$protocol_version(mysqli $link)","return":"<p class=\"para\">   Returns an integer representing the protocol version.  <\/p>","versions":""},"mysqli_get_proto_info":{"id":"mysqli.get-proto-info","purpose":"Returns the version of the MySQL protocol used","prototype":"int mysqli.$protocol_version(mysqli $link)","return":"<p class=\"para\">   Returns an integer representing the protocol version.  <\/p>","versions":""},"mysqli::$server_info":{"id":"mysqli.get-server-info","purpose":"Returns the version of the MySQL server","prototype":"string mysqli::$server_info(mysqli $link)","return":"<p class=\"para\">   A character string representing the server version.  <\/p>","versions":""},"mysqli::get_server_info":{"id":"mysqli.get-server-info","purpose":"Returns the version of the MySQL server","prototype":"string mysqli.$server_info(mysqli $link)","return":"<p class=\"para\">   A character string representing the server version.  <\/p>","versions":""},"mysqli_get_server_info":{"id":"mysqli.get-server-info","purpose":"Returns the version of the MySQL server","prototype":"string mysqli.$server_info(mysqli $link)","return":"<p class=\"para\">   A character string representing the server version.  <\/p>","versions":""},"mysqli::$server_version":{"id":"mysqli.get-server-version","purpose":"Returns the version of the MySQL server as an integer","prototype":"int mysqli::$server_version(mysqli $link)","return":"<p class=\"para\">   An integer representing the server version.  <\/p>  <p class=\"para\">   The form of this version number is   <em>main_version * 10000 + minor_version * 100 + sub_version<\/em>   (i.e. version 4.1.0 is 40100).  <\/p>","versions":""},"mysqli_get_server_version":{"id":"mysqli.get-server-version","purpose":"Returns the version of the MySQL server as an integer","prototype":"int mysqli.$server_version(mysqli $link)","return":"<p class=\"para\">   An integer representing the server version.  <\/p>  <p class=\"para\">   The form of this version number is   <em>main_version * 10000 + minor_version * 100 + sub_version<\/em>   (i.e. version 4.1.0 is 40100).  <\/p>","versions":""},"mysqli::get_warnings":{"id":"mysqli.get-warnings","purpose":"Get result of SHOW WARNINGS","prototype":"mysqli_warning mysqli::get_warnings(mysqli $link)","return":"","versions":"PHP 5 >= 5.1.0, PHP 7"},"mysqli_get_warnings":{"id":"mysqli.get-warnings","purpose":"Get result of SHOW WARNINGS","prototype":"mysqli_warning mysqli_get_warnings(mysqli $link)","return":"","versions":"PHP 5 >= 5.1.0, PHP 7"},"mysqli::$info":{"id":"mysqli.info","purpose":"Retrieves information about the most recently executed query","prototype":"string mysqli::$info(mysqli $link)","return":"<p class=\"para\">   A character string representing additional information about the most recently executed query.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_info":{"id":"mysqli.info","purpose":"Retrieves information about the most recently executed query","prototype":"string mysqli.$info(mysqli $link)","return":"<p class=\"para\">   A character string representing additional information about the most recently executed query.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::init":{"id":"mysqli.init","purpose":"Initializes MySQLi and returns a resource for use with mysqli_real_connect()","prototype":"mysqli mysqli::init()","return":"<p class=\"para\">   Returns an object.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_init":{"id":"mysqli.init","purpose":"Initializes MySQLi and returns a resource for use with mysqli_real_connect()","prototype":"mysqli mysqli_init()","return":"<p class=\"para\">   Returns an object.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$insert_id":{"id":"mysqli.insert-id","purpose":"Returns the auto generated id used in the latest query","prototype":"mixed mysqli::$insert_id(mysqli $link)","return":"<p class=\"para\">   The value of the <em>AUTO_INCREMENT<\/em> field that was updated   by the previous query. Returns zero if there was no previous query on the   connection or if the query did not update an <em>AUTO_INCREMENT<\/em>   value.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number is greater than maximal int value, <span class=\"function\">mysqli_insert_id<\/span>    will return a string.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_insert_id":{"id":"mysqli.insert-id","purpose":"Returns the auto generated id used in the latest query","prototype":"mixed mysqli.$insert_id(mysqli $link)","return":"<p class=\"para\">   The value of the <em>AUTO_INCREMENT<\/em> field that was updated   by the previous query. Returns zero if there was no previous query on the   connection or if the query did not update an <em>AUTO_INCREMENT<\/em>   value.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number is greater than maximal int value, <span class=\"function\">mysqli_insert_id<\/span>    will return a string.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli::kill":{"id":"mysqli.kill","purpose":"Asks the server to kill a MySQL thread","prototype":"bool mysqli::kill(int $processid, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_kill":{"id":"mysqli.kill","purpose":"Asks the server to kill a MySQL thread","prototype":"bool mysqli_kill(int $processid, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::more_results":{"id":"mysqli.more-results","purpose":"Check if there are any more query results from a multi query","prototype":"bool mysqli::more_results(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if one or more result sets are available from a previous call to   <span class=\"function\">mysqli_multi_query<\/span>, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_more_results":{"id":"mysqli.more-results","purpose":"Check if there are any more query results from a multi query","prototype":"bool mysqli_more_results(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if one or more result sets are available from a previous call to   <span class=\"function\">mysqli_multi_query<\/span>, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::multi_query":{"id":"mysqli.multi-query","purpose":"Performs a query on the database","prototype":"bool mysqli::multi_query(string $query, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the first statement failed.   To retrieve subsequent errors from other statements you have to call   <span class=\"function\">mysqli_next_result<\/span> first.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_multi_query":{"id":"mysqli.multi-query","purpose":"Performs a query on the database","prototype":"bool mysqli_multi_query(string $query, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the first statement failed.   To retrieve subsequent errors from other statements you have to call   <span class=\"function\">mysqli_next_result<\/span> first.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::next_result":{"id":"mysqli.next-result","purpose":"Prepare next result from multi_query","prototype":"bool mysqli::next_result(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_next_result":{"id":"mysqli.next-result","purpose":"Prepare next result from multi_query","prototype":"bool mysqli_next_result(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::options":{"id":"mysqli.options","purpose":"Set options","prototype":"bool mysqli::options(int $option, mixed $value, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_options":{"id":"mysqli.options","purpose":"Set options","prototype":"bool mysqli_options(int $option, mixed $value, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::ping":{"id":"mysqli.ping","purpose":"Pings a server connection, or tries to reconnect if the connection has gone down","prototype":"bool mysqli::ping(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_ping":{"id":"mysqli.ping","purpose":"Pings a server connection, or tries to reconnect if the connection has gone down","prototype":"bool mysqli_ping(mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::poll":{"id":"mysqli.poll","purpose":"Poll connections","prototype":"int mysqli::poll(array $read, array $error, array $reject, int $sec [, int $usec = ''])","return":"<p class=\"para\">   Returns number of ready connections upon success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_poll":{"id":"mysqli.poll","purpose":"Poll connections","prototype":"int mysqli_poll(array $read, array $error, array $reject, int $sec [, int $usec = ''])","return":"<p class=\"para\">   Returns number of ready connections upon success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli::prepare":{"id":"mysqli.prepare","purpose":"Prepare an SQL statement for execution","prototype":"mysqli_stmt mysqli::prepare(string $query, mysqli $link)","return":"<p class=\"para\">   <span class=\"function\">mysqli_prepare<\/span> returns a statement object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_prepare":{"id":"mysqli.prepare","purpose":"Prepare an SQL statement for execution","prototype":"mysqli_stmt mysqli_prepare(string $query, mysqli $link)","return":"<p class=\"para\">   <span class=\"function\">mysqli_prepare<\/span> returns a statement object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::query":{"id":"mysqli.query","purpose":"Performs a query on the database","prototype":"mixed mysqli::query(string $query [, int $resultmode = MYSQLI_STORE_RESULT, mysqli $link])","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure. For successful <em>SELECT, SHOW, DESCRIBE<\/em> or   <em>EXPLAIN<\/em> queries <span class=\"function\">mysqli_query<\/span> will return   a <span class=\"classname\">mysqli_result<\/span> object. For other successful queries <span class=\"function\">mysqli_query<\/span> will   return <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_query":{"id":"mysqli.query","purpose":"Performs a query on the database","prototype":"mixed mysqli_query(string $query [, int $resultmode = MYSQLI_STORE_RESULT, mysqli $link])","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure. For successful <em>SELECT, SHOW, DESCRIBE<\/em> or   <em>EXPLAIN<\/em> queries <span class=\"function\">mysqli_query<\/span> will return   a <span class=\"classname\">mysqli_result<\/span> object. For other successful queries <span class=\"function\">mysqli_query<\/span> will   return <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::real_connect":{"id":"mysqli.real-connect","purpose":"Opens a connection to a mysql server","prototype":"bool mysqli::real_connect([string $host = '' [, string $username = '' [, string $passwd = '' [, string $dbname = '' [, int $port = '' [, string $socket = '' [, int $flags = '', mysqli $link]]]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_real_connect":{"id":"mysqli.real-connect","purpose":"Opens a connection to a mysql server","prototype":"bool mysqli_real_connect([string $host = '' [, string $username = '' [, string $passwd = '' [, string $dbname = '' [, int $port = '' [, string $socket = '' [, int $flags = '', mysqli $link]]]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::real_escape_string":{"id":"mysqli.real-escape-string","purpose":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","prototype":"string mysqli::real_escape_string(string $escapestr, mysqli $link)","return":"<p class=\"para\">   Returns an escaped string.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::escape_string":{"id":"mysqli.real-escape-string","purpose":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","prototype":"string mysqli::escape_string(string $escapestr, mysqli $link)","return":"<p class=\"para\">   Returns an escaped string.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_real_escape_string":{"id":"mysqli.real-escape-string","purpose":"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection","prototype":"string mysqli_real_escape_string(string $escapestr, mysqli $link)","return":"<p class=\"para\">   Returns an escaped string.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::real_query":{"id":"mysqli.real-query","purpose":"Execute an SQL query","prototype":"bool mysqli::real_query(string $query, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_real_query":{"id":"mysqli.real-query","purpose":"Execute an SQL query","prototype":"bool mysqli_real_query(string $query, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::reap_async_query":{"id":"mysqli.reap-async-query","purpose":"Get result from async query","prototype":"mysqli_result mysqli::reap_async_query(mysqli $link)","return":"<p class=\"para\">   Returns <span class=\"classname\">mysqli_result<\/span> in success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_reap_async_query":{"id":"mysqli.reap-async-query","purpose":"Get result from async query","prototype":"mysqli_result mysqli_reap_async_query(mysqli $link)","return":"<p class=\"para\">   Returns <span class=\"classname\">mysqli_result<\/span> in success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli::refresh":{"id":"mysqli.refresh","purpose":"Refreshes","prototype":"bool mysqli::refresh(int $options, resource $link)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the refresh was a success, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_refresh":{"id":"mysqli.refresh","purpose":"Refreshes","prototype":"bool mysqli_refresh(int $options, resource $link)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the refresh was a success, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli::release_savepoint":{"id":"mysqli.release-savepoint","purpose":"Removes the named savepoint from the set of savepoints of the current transaction","prototype":"bool mysqli::release_savepoint(string $name, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"mysqli_release_savepoint":{"id":"mysqli.release-savepoint","purpose":"Removes the named savepoint from the set of savepoints of the current transaction","prototype":"bool mysqli_release_savepoint(string $name, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"mysqli::rollback":{"id":"mysqli.rollback","purpose":"Rolls back current transaction","prototype":"bool mysqli::rollback([int $flags = '' [, string $name = '', mysqli $link]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_rollback":{"id":"mysqli.rollback","purpose":"Rolls back current transaction","prototype":"bool mysqli_rollback([int $flags = '' [, string $name = '', mysqli $link]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::rpl_query_type":{"id":"mysqli.rpl-query-type","purpose":"Returns RPL query type","prototype":"int mysqli::rpl_query_type(string $query, mysqli $link)","return":"","versions":"PHP 5, PHP 7"},"mysqli_rpl_query_type":{"id":"mysqli.rpl-query-type","purpose":"Returns RPL query type","prototype":"int mysqli_rpl_query_type(string $query, mysqli $link)","return":"","versions":"PHP 5, PHP 7"},"mysqli::savepoint":{"id":"mysqli.savepoint","purpose":"Set a named transaction savepoint","prototype":"bool mysqli::savepoint(string $name, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"mysqli_savepoint":{"id":"mysqli.savepoint","purpose":"Set a named transaction savepoint","prototype":"bool mysqli_savepoint(string $name, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"mysqli::select_db":{"id":"mysqli.select-db","purpose":"Selects the default database for database queries","prototype":"bool mysqli::select_db(string $dbname, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_select_db":{"id":"mysqli.select-db","purpose":"Selects the default database for database queries","prototype":"bool mysqli_select_db(string $dbname, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::send_query":{"id":"mysqli.send-query","purpose":"Send the query and return","prototype":"bool mysqli::send_query(string $query, mysqli $link)","return":"","versions":"PHP 5, PHP 7"},"mysqli_send_query":{"id":"mysqli.send-query","purpose":"Send the query and return","prototype":"bool mysqli_send_query(string $query, mysqli $link)","return":"","versions":"PHP 5, PHP 7"},"mysqli::set_charset":{"id":"mysqli.set-charset","purpose":"Sets the default client character set","prototype":"bool mysqli::set_charset(string $charset, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.0.5, PHP 7"},"mysqli_set_charset":{"id":"mysqli.set-charset","purpose":"Sets the default client character set","prototype":"bool mysqli_set_charset(string $charset, mysqli $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.0.5, PHP 7"},"mysqli::set_local_infile_default":{"id":"mysqli.set-local-infile-default","purpose":"Unsets user defined handler for load local infile command","prototype":"void mysqli::set_local_infile_default(mysqli $link)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_set_local_infile_default":{"id":"mysqli.set-local-infile-default","purpose":"Unsets user defined handler for load local infile command","prototype":"void mysqli_set_local_infile_default(mysqli $link)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::set_local_infile_handler":{"id":"mysqli.set-local-infile-handler","purpose":"Set callback function for LOAD DATA LOCAL INFILE command","prototype":"bool mysqli::set_local_infile_handler(mysqli $link, callable $read_func)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_set_local_infile_handler":{"id":"mysqli.set-local-infile-handler","purpose":"Set callback function for LOAD DATA LOCAL INFILE command","prototype":"bool mysqli_set_local_infile_handler(mysqli $link, callable $read_func)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$sqlstate":{"id":"mysqli.sqlstate","purpose":"Returns the SQLSTATE error from previous MySQL operation","prototype":"string mysqli::$sqlstate(mysqli $link)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_sqlstate":{"id":"mysqli.sqlstate","purpose":"Returns the SQLSTATE error from previous MySQL operation","prototype":"string mysqli.$sqlstate(mysqli $link)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::ssl_set":{"id":"mysqli.ssl-set","purpose":"Used for establishing secure connections using SSL","prototype":"bool mysqli::ssl_set(string $key, string $cert, string $ca, string $capath, string $cipher, mysqli $link)","return":"<p class=\"para\">   This function always returns <strong><code>TRUE<\/code><\/strong> value. If SSL setup is   incorrect <span class=\"function\">mysqli_real_connect<\/span> will return an error   when you attempt to connect.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_ssl_set":{"id":"mysqli.ssl-set","purpose":"Used for establishing secure connections using SSL","prototype":"bool mysqli_ssl_set(string $key, string $cert, string $ca, string $capath, string $cipher, mysqli $link)","return":"<p class=\"para\">   This function always returns <strong><code>TRUE<\/code><\/strong> value. If SSL setup is   incorrect <span class=\"function\">mysqli_real_connect<\/span> will return an error   when you attempt to connect.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::stat":{"id":"mysqli.stat","purpose":"Gets the current system status","prototype":"string mysqli::stat(mysqli $link)","return":"<p class=\"para\">   A string describing the server status. <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stat":{"id":"mysqli.stat","purpose":"Gets the current system status","prototype":"string mysqli_stat(mysqli $link)","return":"<p class=\"para\">   A string describing the server status. <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::stmt_init":{"id":"mysqli.stmt-init","purpose":"Initializes a statement and returns an object for use with mysqli_stmt_prepare","prototype":"mysqli_stmt mysqli::stmt_init(mysqli $link)","return":"<p class=\"para\">   Returns an object.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_init":{"id":"mysqli.stmt-init","purpose":"Initializes a statement and returns an object for use with mysqli_stmt_prepare","prototype":"mysqli_stmt mysqli_stmt_init(mysqli $link)","return":"<p class=\"para\">   Returns an object.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::store_result":{"id":"mysqli.store-result","purpose":"Transfers a result set from the last query","prototype":"mysqli_result mysqli::store_result([int $option = '', mysqli $link])","return":"<p class=\"para\">   Returns a buffered result object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    <span class=\"function\">mysqli_store_result<\/span> returns <strong><code>FALSE<\/code><\/strong> in case the query    didn&#039;t return a result set (if the query was, for example an INSERT    statement). This function also returns <strong><code>FALSE<\/code><\/strong> if the reading of the    result set failed. You can check if you have got an error by checking    if <span class=\"function\">mysqli_error<\/span> doesn&#039;t return an empty string, if    <span class=\"function\">mysqli_errno<\/span> returns a non zero value, or if    <span class=\"function\">mysqli_field_count<\/span> returns a non zero value.    Also possible reason for this function returning <strong><code>FALSE<\/code><\/strong> after    successful call to <span class=\"function\">mysqli_query<\/span> can be too large    result set (memory for it cannot be allocated). If    <span class=\"function\">mysqli_field_count<\/span> returns a non-zero value, the    statement should have produced a non-empty result set.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_store_result":{"id":"mysqli.store-result","purpose":"Transfers a result set from the last query","prototype":"mysqli_result mysqli_store_result([int $option = '', mysqli $link])","return":"<p class=\"para\">   Returns a buffered result object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    <span class=\"function\">mysqli_store_result<\/span> returns <strong><code>FALSE<\/code><\/strong> in case the query    didn&#039;t return a result set (if the query was, for example an INSERT    statement). This function also returns <strong><code>FALSE<\/code><\/strong> if the reading of the    result set failed. You can check if you have got an error by checking    if <span class=\"function\">mysqli_error<\/span> doesn&#039;t return an empty string, if    <span class=\"function\">mysqli_errno<\/span> returns a non zero value, or if    <span class=\"function\">mysqli_field_count<\/span> returns a non zero value.    Also possible reason for this function returning <strong><code>FALSE<\/code><\/strong> after    successful call to <span class=\"function\">mysqli_query<\/span> can be too large    result set (memory for it cannot be allocated). If    <span class=\"function\">mysqli_field_count<\/span> returns a non-zero value, the    statement should have produced a non-empty result set.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli::$thread_id":{"id":"mysqli.thread-id","purpose":"Returns the thread ID for the current connection","prototype":"int mysqli::$thread_id(mysqli $link)","return":"<p class=\"para\">   Returns the Thread ID for the current connection.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_thread_id":{"id":"mysqli.thread-id","purpose":"Returns the thread ID for the current connection","prototype":"int mysqli.$thread_id(mysqli $link)","return":"<p class=\"para\">   Returns the Thread ID for the current connection.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::thread_safe":{"id":"mysqli.thread-safe","purpose":"Returns whether thread safety is given or not","prototype":"bool mysqli::thread_safe()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the client library is thread-safe, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_thread_safe":{"id":"mysqli.thread-safe","purpose":"Returns whether thread safety is given or not","prototype":"bool mysqli_thread_safe()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the client library is thread-safe, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::use_result":{"id":"mysqli.use-result","purpose":"Initiate a result set retrieval","prototype":"mysqli_result mysqli::use_result(mysqli $link)","return":"<p class=\"para\">   Returns an unbuffered result object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_use_result":{"id":"mysqli.use-result","purpose":"Initiate a result set retrieval","prototype":"mysqli_result mysqli_use_result(mysqli $link)","return":"<p class=\"para\">   Returns an unbuffered result object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli::$warning_count":{"id":"mysqli.warning-count","purpose":"Returns the number of warnings from the last query for the given link","prototype":"int mysqli::$warning_count(mysqli $link)","return":"<p class=\"para\">   Number of warnings or zero if there are no warnings.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_warning_count":{"id":"mysqli.warning-count","purpose":"Returns the number of warnings from the last query for the given link","prototype":"int mysqli.$warning_count(mysqli $link)","return":"<p class=\"para\">   Number of warnings or zero if there are no warnings.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::$affected_rows":{"id":"mysqli-stmt.affected-rows","purpose":"Returns the total number of rows changed, deleted, or  inserted by the last executed statement","prototype":"int mysqli_stmt::$affected_rows(mysqli_stmt $stmt)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or   retrieved.   Zero indicates that no records where updated for an UPDATE\/DELETE   statement, no rows matched the WHERE clause in the query or that no query   has yet been executed. -1 indicates that the query has returned an error.   NULL indicates an invalid argument was supplied to the function.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of affected rows is greater than maximal PHP int value, the    number of affected rows will be returned as a string value.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_stmt_affected_rows":{"id":"mysqli-stmt.affected-rows","purpose":"Returns the total number of rows changed, deleted, or  inserted by the last executed statement","prototype":"int mysqli_stmt.$affected_rows(mysqli_stmt $stmt)","return":"<p class=\"para\">   An integer greater than zero indicates the number of rows affected or   retrieved.   Zero indicates that no records where updated for an UPDATE\/DELETE   statement, no rows matched the WHERE clause in the query or that no query   has yet been executed. -1 indicates that the query has returned an error.   NULL indicates an invalid argument was supplied to the function.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of affected rows is greater than maximal PHP int value, the    number of affected rows will be returned as a string value.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_stmt::attr_get":{"id":"mysqli-stmt.attr-get","purpose":"Used to get the current value of a statement attribute","prototype":"int mysqli_stmt::attr_get(int $attr, mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the attribute is not found, otherwise returns the value of the attribute.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_attr_get":{"id":"mysqli-stmt.attr-get","purpose":"Used to get the current value of a statement attribute","prototype":"int mysqli_stmt_attr_get(int $attr, mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the attribute is not found, otherwise returns the value of the attribute.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::attr_set":{"id":"mysqli-stmt.attr-set","purpose":"Used to modify the behavior of a prepared statement","prototype":"bool mysqli_stmt::attr_set(int $attr, int $mode, mysqli_stmt $stmt)","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt_attr_set":{"id":"mysqli-stmt.attr-set","purpose":"Used to modify the behavior of a prepared statement","prototype":"bool mysqli_stmt_attr_set(int $attr, int $mode, mysqli_stmt $stmt)","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt::bind_param":{"id":"mysqli-stmt.bind-param","purpose":"Binds variables to a prepared statement as parameters","prototype":"bool mysqli_stmt::bind_param(string $types, mixed $var1 [, mixed $... = '', mysqli_stmt $stmt])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_bind_param":{"id":"mysqli-stmt.bind-param","purpose":"Binds variables to a prepared statement as parameters","prototype":"bool mysqli_stmt_bind_param(string $types, mixed $var1 [, mixed $... = '', mysqli_stmt $stmt])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::bind_result":{"id":"mysqli-stmt.bind-result","purpose":"Binds variables to a prepared statement for result storage","prototype":"bool mysqli_stmt::bind_result(mixed $var1 [, mixed $... = '', mysqli_stmt $stmt])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_bind_result":{"id":"mysqli-stmt.bind-result","purpose":"Binds variables to a prepared statement for result storage","prototype":"bool mysqli_stmt_bind_result(mixed $var1 [, mixed $... = '', mysqli_stmt $stmt])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::close":{"id":"mysqli-stmt.close","purpose":"Closes a prepared statement","prototype":"bool mysqli_stmt::close(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_close":{"id":"mysqli-stmt.close","purpose":"Closes a prepared statement","prototype":"bool mysqli_stmt_close(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::__construct":{"id":"mysqli-stmt.construct","purpose":"Constructs a new mysqli_stmt object","prototype":" mysqli_stmt::__construct(mysqli $link [, string $query = ''])","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt::data_seek":{"id":"mysqli-stmt.data-seek","purpose":"Seeks to an arbitrary row in statement result set","prototype":"void mysqli_stmt::data_seek(int $offset, mysqli_stmt $stmt)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_data_seek":{"id":"mysqli-stmt.data-seek","purpose":"Seeks to an arbitrary row in statement result set","prototype":"void mysqli_stmt_data_seek(int $offset, mysqli_stmt $stmt)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::$errno":{"id":"mysqli-stmt.errno","purpose":"Returns the error code for the most recent statement call","prototype":"int mysqli_stmt::$errno(mysqli_stmt $stmt)","return":"<p class=\"para\">   An error code value. Zero means no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_errno":{"id":"mysqli-stmt.errno","purpose":"Returns the error code for the most recent statement call","prototype":"int mysqli_stmt.$errno(mysqli_stmt $stmt)","return":"<p class=\"para\">   An error code value. Zero means no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::$error_list":{"id":"mysqli-stmt.error-list","purpose":"Returns a list of errors from the last statement executed","prototype":"array mysqli_stmt::$error_list(mysqli_stmt $stmt)","return":"<p class=\"para\">   A list of errors, each as an associative <span class=\"type\">array<\/span>   containing the errno, error, and sqlstate.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"mysqli_stmt_error_list":{"id":"mysqli-stmt.error-list","purpose":"Returns a list of errors from the last statement executed","prototype":"array mysqli_stmt.$error_list(mysqli_stmt $stmt)","return":"<p class=\"para\">   A list of errors, each as an associative <span class=\"type\">array<\/span>   containing the errno, error, and sqlstate.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"mysqli_stmt::$error":{"id":"mysqli-stmt.error","purpose":"Returns a string description for last statement error","prototype":"string mysqli_stmt::$error(mysqli_stmt $stmt)","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_error":{"id":"mysqli-stmt.error","purpose":"Returns a string description for last statement error","prototype":"string mysqli_stmt.$error(mysqli_stmt $stmt)","return":"<p class=\"para\">   A string that describes the error. An empty string if no error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::execute":{"id":"mysqli-stmt.execute","purpose":"Executes a prepared Query","prototype":"bool mysqli_stmt::execute(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_execute":{"id":"mysqli-stmt.execute","purpose":"Executes a prepared Query","prototype":"bool mysqli_stmt_execute(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::fetch":{"id":"mysqli-stmt.fetch","purpose":"Fetch results from a prepared statement into the bound variables","prototype":"bool mysqli_stmt::fetch(mysqli_stmt $stmt)","return":"<table class=\"doctable table\">   <caption><strong>Return Values<\/strong><\/caption>       <thead>     <tr>      <th>Value<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><strong><code>TRUE<\/code><\/strong><\/td>      <td>Success. Data has been fetched<\/td>     <\/tr>     <tr>      <td><strong><code>FALSE<\/code><\/strong><\/td>      <td>Error occurred<\/td>     <\/tr>     <tr>      <td><strong><code>NULL<\/code><\/strong><\/td>      <td>No more rows\/data exists or data truncation occurred<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PHP 5, PHP 7"},"mysqli_stmt_fetch":{"id":"mysqli-stmt.fetch","purpose":"Fetch results from a prepared statement into the bound variables","prototype":"bool mysqli_stmt_fetch(mysqli_stmt $stmt)","return":"<table class=\"doctable table\">   <caption><strong>Return Values<\/strong><\/caption>       <thead>     <tr>      <th>Value<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><strong><code>TRUE<\/code><\/strong><\/td>      <td>Success. Data has been fetched<\/td>     <\/tr>     <tr>      <td><strong><code>FALSE<\/code><\/strong><\/td>      <td>Error occurred<\/td>     <\/tr>     <tr>      <td><strong><code>NULL<\/code><\/strong><\/td>      <td>No more rows\/data exists or data truncation occurred<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PHP 5, PHP 7"},"mysqli_stmt::$field_count":{"id":"mysqli-stmt.field-count","purpose":"Returns the number of field in the given statement","prototype":"int mysqli_stmt::$field_count(mysqli_stmt $stmt)","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt_field_count":{"id":"mysqli-stmt.field-count","purpose":"Returns the number of field in the given statement","prototype":"int mysqli_stmt.$field_count(mysqli_stmt $stmt)","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt::free_result":{"id":"mysqli-stmt.free-result","purpose":"Frees stored result memory for the given statement handle","prototype":"void mysqli_stmt::free_result(mysqli_stmt $stmt)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_free_result":{"id":"mysqli-stmt.free-result","purpose":"Frees stored result memory for the given statement handle","prototype":"void mysqli_stmt_free_result(mysqli_stmt $stmt)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::get_result":{"id":"mysqli-stmt.get-result","purpose":"Gets a result set from a prepared statement","prototype":"mysqli_result mysqli_stmt::get_result(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns a resultset for successful SELECT queries, or <strong><code>FALSE<\/code><\/strong> for other DML   queries or on failure. The <span class=\"function\">mysqli_errno<\/span> function can be   used to distinguish between the two types of failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_stmt_get_result":{"id":"mysqli-stmt.get-result","purpose":"Gets a result set from a prepared statement","prototype":"mysqli_result mysqli_stmt_get_result(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns a resultset for successful SELECT queries, or <strong><code>FALSE<\/code><\/strong> for other DML   queries or on failure. The <span class=\"function\">mysqli_errno<\/span> function can be   used to distinguish between the two types of failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_stmt::get_warnings":{"id":"mysqli-stmt.get-warnings","purpose":"Get result of SHOW WARNINGS","prototype":"object mysqli_stmt::get_warnings(mysqli_stmt $stmt)","return":"","versions":"PHP 5 >= 5.1.0, PHP 7"},"mysqli_stmt_get_warnings":{"id":"mysqli-stmt.get-warnings","purpose":"Get result of SHOW WARNINGS","prototype":"object mysqli_stmt_get_warnings(mysqli_stmt $stmt)","return":"","versions":"PHP 5 >= 5.1.0, PHP 7"},"mysqli_stmt::$insert_id":{"id":"mysqli-stmt.insert-id","purpose":"Get the ID generated from the previous INSERT operation","prototype":"mixed mysqli_stmt::$insert_id(mysqli_stmt $stmt)","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt_insert_id":{"id":"mysqli-stmt.insert-id","purpose":"Get the ID generated from the previous INSERT operation","prototype":"mixed mysqli_stmt.$insert_id(mysqli_stmt $stmt)","return":"","versions":"PHP 5, PHP 7"},"mysqli_stmt::more_results":{"id":"mysqli-stmt.more-results","purpose":"Check if there are more query results from a multiple query","prototype":"bool mysqli_stmt::more_results(mysql_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if more results exist, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_stmt_more_results":{"id":"mysqli-stmt.more-results","purpose":"Check if there are more query results from a multiple query","prototype":"bool mysqli_stmt_more_results(mysql_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if more results exist, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_stmt::next_result":{"id":"mysqli-stmt.next-result","purpose":"Reads the next result from a multiple query","prototype":"bool mysqli_stmt::next_result(mysql_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_stmt_next_result":{"id":"mysqli-stmt.next-result","purpose":"Reads the next result from a multiple query","prototype":"bool mysqli_stmt_next_result(mysql_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_stmt::$num_rows":{"id":"mysqli-stmt.num-rows","purpose":"Return the number of rows in statements result set","prototype":"int mysqli_stmt::$num_rows(mysqli_stmt $stmt)","return":"<p class=\"para\">   An integer representing the number of rows in result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::num_rows":{"id":"mysqli-stmt.num-rows","purpose":"Return the number of rows in statements result set","prototype":"int mysqli_stmt.$num_rows(mysqli_stmt $stmt)","return":"<p class=\"para\">   An integer representing the number of rows in result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_num_rows":{"id":"mysqli-stmt.num-rows","purpose":"Return the number of rows in statements result set","prototype":"int mysqli_stmt.$num_rows(mysqli_stmt $stmt)","return":"<p class=\"para\">   An integer representing the number of rows in result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::$param_count":{"id":"mysqli-stmt.param-count","purpose":"Returns the number of parameter for the given statement","prototype":"int mysqli_stmt::$param_count(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns an integer representing the number of parameters.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_param_count":{"id":"mysqli-stmt.param-count","purpose":"Returns the number of parameter for the given statement","prototype":"int mysqli_stmt.$param_count(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns an integer representing the number of parameters.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::prepare":{"id":"mysqli-stmt.prepare","purpose":"Prepare an SQL statement for execution","prototype":"bool mysqli_stmt::prepare(string $query, mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_prepare":{"id":"mysqli-stmt.prepare","purpose":"Prepare an SQL statement for execution","prototype":"bool mysqli_stmt_prepare(string $query, mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::reset":{"id":"mysqli-stmt.reset","purpose":"Resets a prepared statement","prototype":"bool mysqli_stmt::reset(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_reset":{"id":"mysqli-stmt.reset","purpose":"Resets a prepared statement","prototype":"bool mysqli_stmt_reset(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::result_metadata":{"id":"mysqli-stmt.result-metadata","purpose":"Returns result set metadata from a prepared statement","prototype":"mysqli_result mysqli_stmt::result_metadata(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns a result object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_result_metadata":{"id":"mysqli-stmt.result-metadata","purpose":"Returns result set metadata from a prepared statement","prototype":"mysqli_result mysqli_stmt_result_metadata(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns a result object or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::send_long_data":{"id":"mysqli-stmt.send-long-data","purpose":"Send data in blocks","prototype":"bool mysqli_stmt::send_long_data(int $param_nr, string $data, mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_send_long_data":{"id":"mysqli-stmt.send-long-data","purpose":"Send data in blocks","prototype":"bool mysqli_stmt_send_long_data(int $param_nr, string $data, mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::$sqlstate":{"id":"mysqli-stmt.sqlstate","purpose":"Returns SQLSTATE error from previous statement operation","prototype":"string mysqli_stmt::$sqlstate(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_sqlstate":{"id":"mysqli-stmt.sqlstate","purpose":"Returns SQLSTATE error from previous statement operation","prototype":"string mysqli_stmt.$sqlstate(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;<\/em> means no error.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt::store_result":{"id":"mysqli-stmt.store-result","purpose":"Transfers a result set from a prepared statement","prototype":"bool mysqli_stmt::store_result(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_stmt_store_result":{"id":"mysqli-stmt.store-result","purpose":"Transfers a result set from a prepared statement","prototype":"bool mysqli_stmt_store_result(mysqli_stmt $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::$current_field":{"id":"mysqli-result.current-field","purpose":"Get current field offset of a result pointer","prototype":"int mysqli_result::$current_field(mysqli_result $result)","return":"<p class=\"para\">   Returns current offset of field cursor.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_field_tell":{"id":"mysqli-result.current-field","purpose":"Get current field offset of a result pointer","prototype":"int mysqli_result.$current_field(mysqli_result $result)","return":"<p class=\"para\">   Returns current offset of field cursor.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::data_seek":{"id":"mysqli-result.data-seek","purpose":"Adjusts the result pointer to an arbitrary row in the result","prototype":"bool mysqli_result::data_seek(int $offset, mysqli_result $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_data_seek":{"id":"mysqli-result.data-seek","purpose":"Adjusts the result pointer to an arbitrary row in the result","prototype":"bool mysqli_data_seek(int $offset, mysqli_result $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_all":{"id":"mysqli-result.fetch-all","purpose":"Fetches all result rows as an associative array, a numeric array, or both","prototype":"mixed mysqli_result::fetch_all([int $resulttype = MYSQLI_NUM, mysqli_result $result])","return":"<p class=\"para\">   Returns an array of associative or numeric arrays holding result rows.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_fetch_all":{"id":"mysqli-result.fetch-all","purpose":"Fetches all result rows as an associative array, a numeric array, or both","prototype":"mixed mysqli_fetch_all([int $resulttype = MYSQLI_NUM, mysqli_result $result])","return":"<p class=\"para\">   Returns an array of associative or numeric arrays holding result rows.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_result::fetch_array":{"id":"mysqli-result.fetch-array","purpose":"Fetch a result row as an associative, a numeric array, or both","prototype":"mixed mysqli_result::fetch_array([int $resulttype = MYSQLI_BOTH, mysqli_result $result])","return":"<p class=\"para\">   Returns an array of strings that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there   are no more rows in resultset.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_fetch_array":{"id":"mysqli-result.fetch-array","purpose":"Fetch a result row as an associative, a numeric array, or both","prototype":"mixed mysqli_fetch_array([int $resulttype = MYSQLI_BOTH, mysqli_result $result])","return":"<p class=\"para\">   Returns an array of strings that corresponds to the fetched row or <strong><code>NULL<\/code><\/strong> if there   are no more rows in resultset.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_assoc":{"id":"mysqli-result.fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array mysqli_result::fetch_assoc(mysqli_result $result)","return":"<p class=\"para\">   Returns an associative array of strings representing the fetched row in the result   set, where each key in the array represents the name of one of the result   set&#039;s columns or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>  <p class=\"para\">   If two or more columns of the result have the same field names, the last   column will take precedence. To access the other column(s) of the same   name, you either need to access the result with numeric indices by using   <span class=\"function\">mysqli_fetch_row<\/span> or add alias names.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_fetch_assoc":{"id":"mysqli-result.fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array mysqli_fetch_assoc(mysqli_result $result)","return":"<p class=\"para\">   Returns an associative array of strings representing the fetched row in the result   set, where each key in the array represents the name of one of the result   set&#039;s columns or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>  <p class=\"para\">   If two or more columns of the result have the same field names, the last   column will take precedence. To access the other column(s) of the same   name, you either need to access the result with numeric indices by using   <span class=\"function\">mysqli_fetch_row<\/span> or add alias names.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_field_direct":{"id":"mysqli-result.fetch-field-direct","purpose":"Fetch meta-data for a single field","prototype":"object mysqli_result::fetch_field_direct(int $fieldnr, mysqli_result $result)","return":"<p class=\"para\">   Returns an object which contains field definition information or <strong><code>FALSE<\/code><\/strong>   if no field information for specified <em>fieldnr<\/em> is    available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object attributes<\/strong><\/caption>       <thead>     <tr>      <th>Attribute<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>orgname<\/td>      <td>Original column name if an alias was specified<\/td>     <\/tr>     <tr>      <td>table<\/td>      <td>The name of the table this field belongs to (if not calculated)<\/td>     <\/tr>     <tr>      <td>orgtable<\/td>      <td>Original table name if an alias was specified<\/td>     <\/tr>     <tr>      <td>def<\/td>      <td>The default value for this field, represented as a string<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>length<\/td>      <td>The width of the field, as specified in the table definition.<\/td>     <\/tr>     <tr>      <td>charsetnr<\/td>      <td>The character set number for the field.<\/td>     <\/tr>     <tr>      <td>flags<\/td>      <td>An integer representing the bit-flags for the field.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for numeric fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_fetch_field_direct":{"id":"mysqli-result.fetch-field-direct","purpose":"Fetch meta-data for a single field","prototype":"object mysqli_fetch_field_direct(int $fieldnr, mysqli_result $result)","return":"<p class=\"para\">   Returns an object which contains field definition information or <strong><code>FALSE<\/code><\/strong>   if no field information for specified <em>fieldnr<\/em> is    available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object attributes<\/strong><\/caption>       <thead>     <tr>      <th>Attribute<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>orgname<\/td>      <td>Original column name if an alias was specified<\/td>     <\/tr>     <tr>      <td>table<\/td>      <td>The name of the table this field belongs to (if not calculated)<\/td>     <\/tr>     <tr>      <td>orgtable<\/td>      <td>Original table name if an alias was specified<\/td>     <\/tr>     <tr>      <td>def<\/td>      <td>The default value for this field, represented as a string<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>length<\/td>      <td>The width of the field, as specified in the table definition.<\/td>     <\/tr>     <tr>      <td>charsetnr<\/td>      <td>The character set number for the field.<\/td>     <\/tr>     <tr>      <td>flags<\/td>      <td>An integer representing the bit-flags for the field.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for numeric fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_field":{"id":"mysqli-result.fetch-field","purpose":"Returns the next field in the result set","prototype":"object mysqli_result::fetch_field(mysqli_result $result)","return":"<p class=\"para\">   Returns an object which contains field definition information or <strong><code>FALSE<\/code><\/strong>   if no field information is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>orgname<\/td>      <td>Original column name if an alias was specified<\/td>     <\/tr>     <tr>      <td>table<\/td>      <td>The name of the table this field belongs to (if not calculated)<\/td>     <\/tr>     <tr>      <td>orgtable<\/td>      <td>Original table name if an alias was specified<\/td>     <\/tr>     <tr>      <td>def<\/td>      <td>Reserved for default value, currently always &quot;&quot;<\/td>     <\/tr>     <tr>      <td>db<\/td>      <td>Database (since PHP 5.3.6)<\/td>     <\/tr>     <tr>      <td>catalog<\/td>      <td>The catalog name, always &quot;def&quot; (since PHP 5.3.6)<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>length<\/td>      <td>The width of the field, as specified in the table definition.<\/td>     <\/tr>     <tr>      <td>charsetnr<\/td>      <td>The character set number for the field.<\/td>     <\/tr>     <tr>      <td>flags<\/td>      <td>An integer representing the bit-flags for the field.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_fetch_field":{"id":"mysqli-result.fetch-field","purpose":"Returns the next field in the result set","prototype":"object mysqli_fetch_field(mysqli_result $result)","return":"<p class=\"para\">   Returns an object which contains field definition information or <strong><code>FALSE<\/code><\/strong>   if no field information is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>orgname<\/td>      <td>Original column name if an alias was specified<\/td>     <\/tr>     <tr>      <td>table<\/td>      <td>The name of the table this field belongs to (if not calculated)<\/td>     <\/tr>     <tr>      <td>orgtable<\/td>      <td>Original table name if an alias was specified<\/td>     <\/tr>     <tr>      <td>def<\/td>      <td>Reserved for default value, currently always &quot;&quot;<\/td>     <\/tr>     <tr>      <td>db<\/td>      <td>Database (since PHP 5.3.6)<\/td>     <\/tr>     <tr>      <td>catalog<\/td>      <td>The catalog name, always &quot;def&quot; (since PHP 5.3.6)<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>length<\/td>      <td>The width of the field, as specified in the table definition.<\/td>     <\/tr>     <tr>      <td>charsetnr<\/td>      <td>The character set number for the field.<\/td>     <\/tr>     <tr>      <td>flags<\/td>      <td>An integer representing the bit-flags for the field.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_fields":{"id":"mysqli-result.fetch-fields","purpose":"Returns an array of objects representing the fields in a result set","prototype":"array mysqli_result::fetch_fields(mysqli_result $result)","return":"<p class=\"para\">   Returns an array of objects which contains field definition information or   <strong><code>FALSE<\/code><\/strong> if no field information is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>orgname<\/td>      <td>Original column name if an alias was specified<\/td>     <\/tr>     <tr>      <td>table<\/td>      <td>The name of the table this field belongs to (if not calculated)<\/td>     <\/tr>     <tr>      <td>orgtable<\/td>      <td>Original table name if an alias was specified<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>length<\/td>      <td>       The width of the field, in bytes, as specified in the table definition. Note that        this number (bytes) might differ from your table definition value (characters), depending on       the character set you use. For example, the character set utf8 has 3 bytes per character,        so varchar(10) will return a length of 30 for utf8 (10*3), but return 10 for latin1 (10*1).      <\/td>     <\/tr>     <tr>      <td>charsetnr<\/td>      <td>The character set number (id) for the field.<\/td>     <\/tr>     <tr>      <td>flags<\/td>      <td>An integer representing the bit-flags for the field.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_fetch_fields":{"id":"mysqli-result.fetch-fields","purpose":"Returns an array of objects representing the fields in a result set","prototype":"array mysqli_fetch_fields(mysqli_result $result)","return":"<p class=\"para\">   Returns an array of objects which contains field definition information or   <strong><code>FALSE<\/code><\/strong> if no field information is available.  <\/p>  <p class=\"para\">  <table class=\"doctable table\">   <caption><strong>Object properties<\/strong><\/caption>       <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>name<\/td>      <td>The name of the column<\/td>     <\/tr>     <tr>      <td>orgname<\/td>      <td>Original column name if an alias was specified<\/td>     <\/tr>     <tr>      <td>table<\/td>      <td>The name of the table this field belongs to (if not calculated)<\/td>     <\/tr>     <tr>      <td>orgtable<\/td>      <td>Original table name if an alias was specified<\/td>     <\/tr>     <tr>      <td>max_length<\/td>      <td>The maximum width of the field for the result set.<\/td>     <\/tr>     <tr>      <td>length<\/td>      <td>       The width of the field, in bytes, as specified in the table definition. Note that        this number (bytes) might differ from your table definition value (characters), depending on       the character set you use. For example, the character set utf8 has 3 bytes per character,        so varchar(10) will return a length of 30 for utf8 (10*3), but return 10 for latin1 (10*1).      <\/td>     <\/tr>     <tr>      <td>charsetnr<\/td>      <td>The character set number (id) for the field.<\/td>     <\/tr>     <tr>      <td>flags<\/td>      <td>An integer representing the bit-flags for the field.<\/td>     <\/tr>     <tr>      <td>type<\/td>      <td>The data type used for this field<\/td>     <\/tr>     <tr>      <td>decimals<\/td>      <td>The number of decimals used (for integer fields)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_object":{"id":"mysqli-result.fetch-object","purpose":"Returns the current row of a result set as an object","prototype":"object mysqli_result::fetch_object([string $class_name = \"stdClass\" [, array $params = '', mysqli_result $result]])","return":"<p class=\"para\">   Returns an object with string properties that corresponds to the fetched   row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">Field names returned by this functionare <em class=\"emphasis\">case-sensitive<\/em>.<\/span><\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_fetch_object":{"id":"mysqli-result.fetch-object","purpose":"Returns the current row of a result set as an object","prototype":"object mysqli_fetch_object([string $class_name = \"stdClass\" [, array $params = '', mysqli_result $result]])","return":"<p class=\"para\">   Returns an object with string properties that corresponds to the fetched   row or <strong><code>NULL<\/code><\/strong> if there are no more rows in resultset.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">Field names returned by this functionare <em class=\"emphasis\">case-sensitive<\/em>.<\/span><\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_result::fetch_row":{"id":"mysqli-result.fetch-row","purpose":"Get a result row as an enumerated array","prototype":"mixed mysqli_result::fetch_row(mysqli_result $result)","return":"<p class=\"para\">   <span class=\"function\">mysqli_fetch_row<\/span> returns an array of strings that corresponds to the fetched row   or <strong><code>NULL<\/code><\/strong> if there are no more rows in result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_fetch_row":{"id":"mysqli-result.fetch-row","purpose":"Get a result row as an enumerated array","prototype":"mixed mysqli_fetch_row(mysqli_result $result)","return":"<p class=\"para\">   <span class=\"function\">mysqli_fetch_row<\/span> returns an array of strings that corresponds to the fetched row   or <strong><code>NULL<\/code><\/strong> if there are no more rows in result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">This function sets NULL fields tothe PHP <strong><code>NULL<\/code><\/strong> value.<\/span><\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_result::$field_count":{"id":"mysqli-result.field-count","purpose":"Get the number of fields in a result","prototype":"int mysqli_result::$field_count(mysqli_result $result)","return":"<p class=\"para\">   The number of fields from a result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_num_fields":{"id":"mysqli-result.field-count","purpose":"Get the number of fields in a result","prototype":"int mysqli_result.$field_count(mysqli_result $result)","return":"<p class=\"para\">   The number of fields from a result set.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::field_seek":{"id":"mysqli-result.field-seek","purpose":"Set result pointer to a specified field offset","prototype":"bool mysqli_result::field_seek(int $fieldnr, mysqli_result $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_field_seek":{"id":"mysqli-result.field-seek","purpose":"Set result pointer to a specified field offset","prototype":"bool mysqli_field_seek(int $fieldnr, mysqli_result $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::free":{"id":"mysqli-result.free","purpose":"Frees the memory associated with a result","prototype":"void mysqli_result::free(mysqli_result $result)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::close":{"id":"mysqli-result.free","purpose":"Frees the memory associated with a result","prototype":"void mysqli_result::close(mysqli_result $result)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::free_result":{"id":"mysqli-result.free","purpose":"Frees the memory associated with a result","prototype":"void mysqli_result::free_result(mysqli_result $result)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_free_result":{"id":"mysqli-result.free","purpose":"Frees the memory associated with a result","prototype":"void mysqli_free_result(mysqli_result $result)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::$lengths":{"id":"mysqli-result.lengths","purpose":"Returns the lengths of the columns of the current row in the result set","prototype":"array mysqli_result::$lengths(mysqli_result $result)","return":"<p class=\"para\">   An array of integers representing the size of each column (not including   any terminating null characters). <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>  <p class=\"para\">   <span class=\"function\">mysqli_fetch_lengths<\/span> is valid only for the current   row of the result set. It returns <strong><code>FALSE<\/code><\/strong> if you call it before calling   mysqli_fetch_row\/array\/object or after retrieving all rows in the result.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_fetch_lengths":{"id":"mysqli-result.lengths","purpose":"Returns the lengths of the columns of the current row in the result set","prototype":"array mysqli_result.$lengths(mysqli_result $result)","return":"<p class=\"para\">   An array of integers representing the size of each column (not including   any terminating null characters). <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>  <p class=\"para\">   <span class=\"function\">mysqli_fetch_lengths<\/span> is valid only for the current   row of the result set. It returns <strong><code>FALSE<\/code><\/strong> if you call it before calling   mysqli_fetch_row\/array\/object or after retrieving all rows in the result.  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_result::$num_rows":{"id":"mysqli-result.num-rows","purpose":"Gets the number of rows in a result","prototype":"int mysqli_result::$num_rows(mysqli_result $result)","return":"<p class=\"para\">   Returns number of rows in the result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of rows is greater than <strong><code>PHP_INT_MAX<\/code><\/strong>, the number    will be returned as a string.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_num_rows":{"id":"mysqli-result.num-rows","purpose":"Gets the number of rows in a result","prototype":"int mysqli_result.$num_rows(mysqli_result $result)","return":"<p class=\"para\">   Returns number of rows in the result set.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the number of rows is greater than <strong><code>PHP_INT_MAX<\/code><\/strong>, the number    will be returned as a string.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"mysqli_driver::embedded_server_end":{"id":"mysqli-driver.embedded-server-end","purpose":"Stop embedded server","prototype":"void mysqli_driver::embedded_server_end()","return":"","versions":"PHP 5, PHP 7"},"mysqli_embedded_server_end":{"id":"mysqli-driver.embedded-server-end","purpose":"Stop embedded server","prototype":"void mysqli_embedded_server_end()","return":"","versions":"PHP 5, PHP 7"},"mysqli_driver::embedded_server_start":{"id":"mysqli-driver.embedded-server-start","purpose":"Initialize and start embedded server","prototype":"bool mysqli_driver::embedded_server_start(int $start, array $arguments, array $groups)","return":"","versions":"PHP 5, PHP 7"},"mysqli_embedded_server_start":{"id":"mysqli-driver.embedded-server-start","purpose":"Initialize and start embedded server","prototype":"bool mysqli_embedded_server_start(int $start, array $arguments, array $groups)","return":"","versions":"PHP 5, PHP 7"},"mysqli_driver::$report_mode":{"id":"mysqli-driver.report-mode","purpose":"Enables or disables internal report functions","prototype":"bool mysqli_driver::$report_mode(int $flags)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"mysqli_report":{"id":"function.mysqli-report","purpose":"Alias of mysqli_driver->report_mode","prototype":" mysqli_report()","return":"","versions":"PHP 5, PHP 7"},"mysqli_warning::__construct":{"id":"mysqli-warning.construct","purpose":"The __construct purpose","prototype":" mysqli_warning::__construct()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_warning::next":{"id":"mysqli-warning.next","purpose":"The next purpose","prototype":"void mysqli_warning::next()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5, PHP 7"},"mysqli_bind_param":{"id":"function.mysqli-bind-param","purpose":"Alias for mysqli_stmt_bind_param","prototype":" mysqli_bind_param()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli_bind_result":{"id":"function.mysqli-bind-result","purpose":"Alias for mysqli_stmt_bind_result","prototype":" mysqli_bind_result()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli_client_encoding":{"id":"function.mysqli-client-encoding","purpose":"Alias of mysqli_character_set_name","prototype":" mysqli_client_encoding()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli::disable_reads_from_master":{"id":"function.mysqli-disable-reads-from-master","purpose":"Disable reads from master","prototype":"bool mysqli::disable_reads_from_master(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_disable_reads_from_master":{"id":"function.mysqli-disable-reads-from-master","purpose":"Disable reads from master","prototype":"bool mysqli_disable_reads_from_master(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_disable_rpl_parse":{"id":"function.mysqli-disable-rpl-parse","purpose":"Disable RPL parse","prototype":"bool mysqli_disable_rpl_parse(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_enable_reads_from_master":{"id":"function.mysqli-enable-reads-from-master","purpose":"Enable reads from master","prototype":"bool mysqli_enable_reads_from_master(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_enable_rpl_parse":{"id":"function.mysqli-enable-rpl-parse","purpose":"Enable RPL parse","prototype":"bool mysqli_enable_rpl_parse(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_escape_string":{"id":"function.mysqli-escape-string","purpose":"Alias of mysqli_real_escape_string","prototype":" mysqli_escape_string()","return":"","versions":"PHP 5, PHP 7"},"mysqli_execute":{"id":"function.mysqli-execute","purpose":"Alias for mysqli_stmt_execute","prototype":" mysqli_execute()","return":"","versions":"PHP 5, PHP 7"},"mysqli_fetch":{"id":"function.mysqli-fetch","purpose":"Alias for mysqli_stmt_fetch","prototype":" mysqli_fetch()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli_get_cache_stats":{"id":"function.mysqli-get-cache-stats","purpose":"Returns client Zval cache statistics","prototype":"array mysqli_get_cache_stats()","return":"<p class=\"para\">   Returns an empty array on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0 and < 5.4.0"},"mysqli_get_client_stats":{"id":"function.mysqli-get-client-stats","purpose":"Returns client per-process statistics","prototype":"array mysqli_get_client_stats()","return":"<p class=\"para\">   Returns an array with client stats if success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mysqli_get_links_stats":{"id":"function.mysqli-get-links-stats","purpose":"Return information about open and cached links","prototype":"array mysqli_get_links_stats()","return":"<p class=\"para\">   <span class=\"function\">mysqli_get_links_stats<\/span> returns an associative array   with three elements, keyed as follows:   <dl>         <dt><code class=\"parameter\">total<\/code><\/dt>     <dd>      <p class=\"para\">       An <span class=\"type\">integer<\/span> indicating the total number of open links in       any state.      <\/p>     <\/dd>             <dt><code class=\"parameter\">active_plinks<\/code><\/dt>     <dd>      <p class=\"para\">       An <span class=\"type\">integer<\/span> representing the number of active persistent       connections.      <\/p>     <\/dd>             <dt><code class=\"parameter\">cached_plinks<\/code><\/dt>     <dd>      <p class=\"para\">       An <span class=\"type\">integer<\/span> representing the number of inactive persistent       connections.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"mysqli_get_metadata":{"id":"function.mysqli-get-metadata","purpose":"Alias for mysqli_stmt_result_metadata","prototype":" mysqli_get_metadata()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli_master_query":{"id":"function.mysqli-master-query","purpose":"Enforce execution of a query on the master in a master\/slave setup","prototype":"bool mysqli_master_query(mysqli $link, string $query)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_param_count":{"id":"function.mysqli-param-count","purpose":"Alias for mysqli_stmt_param_count","prototype":" mysqli_param_count()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli_rpl_parse_enabled":{"id":"function.mysqli-rpl-parse-enabled","purpose":"Check if RPL parse is enabled","prototype":"int mysqli_rpl_parse_enabled(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_rpl_probe":{"id":"function.mysqli-rpl-probe","purpose":"RPL probe","prototype":"bool mysqli_rpl_probe(mysqli $link)","return":"","versions":"PHP 5 < 5.3.0"},"mysqli_send_long_data":{"id":"function.mysqli-send-long-data","purpose":"Alias for mysqli_stmt_send_long_data","prototype":" mysqli_send_long_data()","return":"","versions":"PHP 5 < 5.4.0"},"mysqli::set_opt":{"id":"function.mysqli-set-opt","purpose":"Alias of mysqli_options","prototype":" mysqli::set_opt()","return":"","versions":"PHP 5, PHP 7"},"mysqli_set_opt":{"id":"function.mysqli-set-opt","purpose":"Alias of mysqli_options","prototype":" mysqli_set_opt()","return":"","versions":"PHP 5, PHP 7"},"mysqli_slave_query":{"id":"function.mysqli-slave-query","purpose":"Force execution of a query on a slave in a master\/slave setup","prototype":"bool mysqli_slave_query(mysqli $link, string $query)","return":"","versions":"PHP 5 < 5.3.0"},"expression":{"id":"function.mysql-xdevapi-expression","purpose":"Description","prototype":"ReturnType expression(string $expression)","return":"<p class=\"para\">     <\/p>","versions":""},"getSession":{"id":"function.mysql-xdevapi-getsession","purpose":"Connect to a MySQL server","prototype":"mysql_xdevapi\\Session getSession(string $uri)","return":"<p class=\"para\">   A <span class=\"classname\">mysql_xdevap\\Session<\/span> object.  <\/p>","versions":""},"BaseResult::getWarningCount":{"id":"mysql-xdevapi-baseresult.getwarningcount","purpose":"Fetch warning count from last operation","prototype":"integer BaseResult::getWarningCount()","return":"<p class=\"para\">   The number of warnings from the last operation.  <\/p>","versions":""},"BaseResult::getWarnings":{"id":"mysql-xdevapi-baseresult.getwarnings","purpose":"Fetch warnings from last operation","prototype":"array BaseResult::getWarnings()","return":"<p class=\"para\">   An array of warnings raised by the last operation, or an empty   array if no warnings are present.  <\/p>","versions":""},"Collection::add":{"id":"mysql-xdevapi-collection.add","purpose":"Add collection document","prototype":"mysql_xdevapi\\Result Collection::add(mixed $document)","return":"<p class=\"para\">   A Result object that can be used to query the number of affected items, the   number warnings generated by the operation, or to fetch a list of generated IDs    for the inserted documents.  <\/p>","versions":""},"Collection::addOrReplaceOne":{"id":"mysql-xdevapi-collection.addorreplaceone","purpose":"Add or replace collection document","prototype":"mysql_xdevapi\\Result Collection::addOrReplaceOne(string $id, string $doc)","return":"<p class=\"para\">   A Result object.  <\/p>","versions":""},"Collection::__construct":{"id":"mysql-xdevapi-collection.construct","purpose":"Collection constructor","prototype":" Collection::__construct()","return":"","versions":""},"Collection::count":{"id":"mysql-xdevapi-collection.count","purpose":"Get document count","prototype":"integer Collection::count()","return":"<p class=\"para\">   The number of documents in the collection.  <\/p>","versions":""},"Collection::createIndex":{"id":"mysql-xdevapi-collection.createindex","purpose":"Create collection index","prototype":"void Collection::createIndex(string $index_name, string $index_desc_json)","return":"<p class=\"para\"\/>","versions":""},"Collection::dropIndex":{"id":"mysql-xdevapi-collection.dropindex","purpose":"Drop collection index","prototype":"bool Collection::dropIndex(string $index_name)","return":"<p class=\"para\">   The functions return a boolean value, true if the drop has succeed and false in the other case.  <\/p>","versions":""},"Collection::existsInDatabase":{"id":"mysql-xdevapi-collection.existsindatabase","purpose":"Check if collection exists in database","prototype":"bool Collection::existsInDatabase()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if collection exists in the database, else <strong><code>FALSE<\/code><\/strong> if it does not.  <\/p>","versions":""},"Collection::find":{"id":"mysql-xdevapi-collection.find","purpose":"Search for document","prototype":"mysql_xdevapi\\CollectionFind Collection::find([string $search_condition = ''])","return":"<p class=\"para\">   A CollectionFind object that can use used to verify the operation   or fetch found documents.  <\/p>","versions":""},"Collection::getName":{"id":"mysql-xdevapi-collection.getname","purpose":"Get collection name","prototype":"string Collection::getName()","return":"<p class=\"para\">   The collection name, as a string.  <\/p>","versions":""},"Collection::getOne":{"id":"mysql-xdevapi-collection.getone","purpose":"Get one document","prototype":"Document Collection::getOne(string $id)","return":"<p class=\"para\">   The collection object, or <strong><code>NULL<\/code><\/strong> if the ID does not match a document.  <\/p>","versions":""},"Collection::getSchema":{"id":"mysql-xdevapi-collection.getschema","purpose":"Get schema object","prototype":"Schema Object Collection::getSchema()","return":"<p class=\"para\">   The schema object on success, or <strong><code>NULL<\/code><\/strong> if the object cannot be retrieved   for the given collection.  <\/p>","versions":""},"Collection::getSession":{"id":"mysql-xdevapi-collection.getsession","purpose":"Get session object","prototype":"Session Collection::getSession()","return":"<p class=\"para\">   The session object.  <\/p>","versions":""},"Collection::modify":{"id":"mysql-xdevapi-collection.modify","purpose":"Modify collection documents","prototype":"mysql_xdevapi\\CollectionModify Collection::modify(string $search_condition)","return":"<p class=\"para\">   If the operation is not executed, then the function will return    a Modify object that can be used to add additional   modify operations.  <\/p>  <p class=\"para\">   If the modify operation is executed, then the returned object will contain   the result of the operation.  <\/p>","versions":""},"Collection::remove":{"id":"mysql-xdevapi-collection.remove","purpose":"Remove collection documents","prototype":"mysql_xdevapi\\CollectionRemove Collection::remove(string $search_condition)","return":"<p class=\"para\">   If the operation is not executed, then the function will return    a Remove object that can be used to add additional   remove operations.  <\/p>  <p class=\"para\">   If the remove operation is executed, then the returned object will contain   the result of the operation.  <\/p>","versions":""},"Collection::removeOne":{"id":"mysql-xdevapi-collection.removeone","purpose":"Remove one collection document","prototype":"mysql_xdevapi\\Result Collection::removeOne(string $id)","return":"<p class=\"para\">   A Result object that can be used to query the number of affected items or the   number warnings generated by the operation.  <\/p>","versions":""},"Collection::replaceOne":{"id":"mysql-xdevapi-collection.replaceone","purpose":"Replace one collection document","prototype":"mysql_xdevapi\\Result Collection::replaceOne(string $id, string $doc)","return":"<p class=\"para\">   A Result object that can be used to query the number of affected items and the   number warnings generated by the operation.  <\/p>","versions":""},"CollectionAdd::__construct":{"id":"mysql-xdevapi-collectionadd.construct","purpose":"CollectionAdd constructor","prototype":" CollectionAdd::__construct()","return":"","versions":""},"CollectionAdd::execute":{"id":"mysql-xdevapi-collectionadd.execute","purpose":"Execute the statement","prototype":"mysql_xdevapi\\Result CollectionAdd::execute()","return":"<p class=\"para\">   A Result object that can be used to verify the status of the operation,   such as the number of affected rows.  <\/p>","versions":""},"CollectionFind::bind":{"id":"mysql-xdevapi-collectionfind.bind","purpose":"Bind value to query placeholder","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::bind(array $placeholder_values)","return":"<p class=\"para\">   A CollectionFind that can be used for further processing.  <\/p>","versions":""},"CollectionFind::__construct":{"id":"mysql-xdevapi-collectionfind.construct","purpose":"CollectionFind constructor","prototype":" CollectionFind::__construct()","return":"","versions":""},"CollectionFind::execute":{"id":"mysql-xdevapi-collectionfind.execute","purpose":"Execute the statement","prototype":"mysql_xdevapi\\DocResult CollectionFind::execute()","return":"<p class=\"para\">   A DocResult object that can be used to query the status of the operation  <\/p>","versions":""},"CollectionFind::fields":{"id":"mysql-xdevapi-collectionfind.fields","purpose":"Set document field filter","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::fields(string $projection)","return":"<p class=\"para\">   A CollectionFind object that can be used for further processing  <\/p>","versions":""},"CollectionFind::groupBy":{"id":"mysql-xdevapi-collectionfind.groupby","purpose":"Set grouping criteria","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::groupBy(string $sort_expr)","return":"<p class=\"para\">   A CollectionFind that can be used for further processing  <\/p>","versions":""},"CollectionFind::having":{"id":"mysql-xdevapi-collectionfind.having","purpose":"Set condition for aggregate functions","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::having(string $sort_expr)","return":"<p class=\"para\">  CollectionFind object that can be used for further processing   <\/p>","versions":""},"CollectionFind::limit":{"id":"mysql-xdevapi-collectionfind.limit","purpose":"Limit number of returned documents","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::limit(integer $rows)","return":"<p class=\"para\">   CollectionFind object that can be used for further processing  <\/p>","versions":""},"CollectionFind::lockExclusive":{"id":"mysql-xdevapi-collectionfind.lockexclusive","purpose":"Execute operation with EXCLUSIVE LOCK","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::lockExclusive([integer $lock_waiting_option = ''])","return":"<p class=\"para\">   Returns a CollectionFind object that can be used for further processing  <\/p>","versions":""},"CollectionFind::lockShared":{"id":"mysql-xdevapi-collectionfind.lockshared","purpose":"Execute operation with SHARED LOCK","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::lockShared([integer $lock_waiting_option = ''])","return":"<p class=\"para\">   A CollectionFind object that can be used for further processing  <\/p>","versions":""},"CollectionFind::skip":{"id":"mysql-xdevapi-collectionfind.skip","purpose":"Skip given number of elements to be returned","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::skip(integer $position)","return":"<p class=\"para\">   CollectionFind object that can be used for further processing.  <\/p>","versions":""},"CollectionFind::sort":{"id":"mysql-xdevapi-collectionfind.sort","purpose":"Set the sorting criteria","prototype":"mysql_xdevapi\\CollectionFind CollectionFind::sort(string $sort_expr)","return":"<p class=\"para\">   A CollectionFind object that can be used to execute the command, or to add additional operations.  <\/p>","versions":""},"CollectionModify::arrayAppend":{"id":"mysql-xdevapi-collectionmodify.arrayappend","purpose":"Append element to an array field","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::arrayAppend(string $collection_field, string $expression_or_literal)","return":"<p class=\"para\">   A CollectionModify object that can be used to execute the command, or to add additional operations.  <\/p>","versions":""},"CollectionModify::arrayDelete":{"id":"mysql-xdevapi-collectionmodify.arraydelete","purpose":"Delete element","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::arrayDelete(string $collection_field)","return":"<p class=\"para\">   A CollectionModify object that can be used to execute the command, or to add further operations  <\/p>","versions":""},"CollectionModify::arrayInsert":{"id":"mysql-xdevapi-collectionmodify.arrayinsert","purpose":"Insert element into an array field","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::arrayInsert(string $collection_field, string $expression_or_literal)","return":"<p class=\"para\">   A CollectionModify object that can be used to execute the command, or to add additional operations  <\/p>","versions":""},"CollectionModify::bind":{"id":"mysql-xdevapi-collectionmodify.bind","purpose":"Bind value to query placeholder","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::bind(array $placeholder_values)","return":"<p class=\"para\">   A CollectionModify object that can be used to execute the command, or to add additional operations.  <\/p>","versions":""},"CollectionModify::__construct":{"id":"mysql-xdevapi-collectionmodify.construct","purpose":"CollectionModify constructor","prototype":" CollectionModify::__construct()","return":"","versions":""},"CollectionModify::execute":{"id":"mysql-xdevapi-collectionmodify.execute","purpose":"Execute modify operation","prototype":"mysql_xdevapi\\Result CollectionModify::execute()","return":"<p class=\"para\">   A Result object that can be used to verify the status of the operation,   such as the number of affected rows.  <\/p>","versions":""},"CollectionModify::limit":{"id":"mysql-xdevapi-collectionmodify.limit","purpose":"Limit number of modified documents","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::limit(integer $rows)","return":"<p class=\"para\">\t  A CollectionModify object.  <\/p>","versions":""},"CollectionModify::merge":{"id":"mysql-xdevapi-collectionmodify.merge","purpose":"Merge attributes to document","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::merge(string $document)","return":"<p class=\"para\">\t  A CollectionModify object.  <\/p>","versions":""},"CollectionModify::patch":{"id":"mysql-xdevapi-collectionmodify.patch","purpose":"Patch document","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::patch(string $document)","return":"<p class=\"para\">\t  A CollectionModify object.  <\/p>","versions":""},"CollectionModify::replace":{"id":"mysql-xdevapi-collectionmodify.replace","purpose":"Replace document field","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::replace(string $collection_field, string $expression_or_literal)","return":"<p class=\"para\">\t  A CollectionModify object.  <\/p>","versions":""},"CollectionModify::set":{"id":"mysql-xdevapi-collectionmodify.set","purpose":"Set document attribute","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::set(string $collection_field, string $expression_or_literal)","return":"<p class=\"para\">\t  A CollectionModify object.  <\/p>","versions":""},"CollectionModify::skip":{"id":"mysql-xdevapi-collectionmodify.skip","purpose":"Skip elements","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::skip(integer $position)","return":"<p class=\"para\">\t  A CollectionModify object to use for further processing.  <\/p>","versions":""},"CollectionModify::sort":{"id":"mysql-xdevapi-collectionmodify.sort","purpose":"Set the sorting criteria","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::sort(string $sort_expr)","return":"<p class=\"para\">\t  CollectionModify object that can be used for further processing.  <\/p>","versions":""},"CollectionModify::unset":{"id":"mysql-xdevapi-collectionmodify.unset","purpose":"Unset the value of document fields","prototype":"mysql_xdevapi\\CollectionModify CollectionModify::unset(array $fields)","return":"<p class=\"para\">\t  CollectionModify object that can be used for further processing.  <\/p>","versions":""},"CollectionRemove::bind":{"id":"mysql-xdevapi-collectionremove.bind","purpose":"Bind value to placeholder","prototype":"mysql_xdevapi\\CollectionRemove CollectionRemove::bind(array $placeholder_values)","return":"<p class=\"para\">   A CollectionRemove object that can be used to execute the command, or to add additional operations.  <\/p>","versions":""},"CollectionRemove::__construct":{"id":"mysql-xdevapi-collectionremove.construct","purpose":"CollectionRemove constructor","prototype":" CollectionRemove::__construct()","return":"","versions":""},"CollectionRemove::execute":{"id":"mysql-xdevapi-collectionremove.execute","purpose":"Execute remove operation","prototype":"mysql_xdevapi\\Result CollectionRemove::execute()","return":"<p class=\"para\">\t  Result object.  <\/p>","versions":""},"CollectionRemove::limit":{"id":"mysql-xdevapi-collectionremove.limit","purpose":"Limit number of documents to remove","prototype":"mysql_xdevapi\\CollectionRemove CollectionRemove::limit(integer $rows)","return":"<p class=\"para\">   Returns a CollectionRemove object that can be used to execute the command,   or to add additional operations.  <\/p>","versions":""},"CollectionRemove::sort":{"id":"mysql-xdevapi-collectionremove.sort","purpose":"Set the sorting criteria","prototype":"mysql_xdevapi\\CollectionRemove CollectionRemove::sort(string $sort_expr)","return":"<p class=\"para\">   A CollectionRemove object that can be used to execute the command, or to add additional operations.  <\/p>","versions":""},"ColumnResult::__construct":{"id":"mysql-xdevapi-columnresult.construct","purpose":"ColumnResult constructor","prototype":" ColumnResult::__construct()","return":"","versions":""},"ColumnResult::getCharacterSetName":{"id":"mysql-xdevapi-columnresult.getcharactersetname","purpose":"Get character set","prototype":"string ColumnResult::getCharacterSetName()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getCollationName":{"id":"mysql-xdevapi-columnresult.getcollationname","purpose":"Get collation name","prototype":"string ColumnResult::getCollationName()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getColumnLabel":{"id":"mysql-xdevapi-columnresult.getcolumnlabel","purpose":"Get column label","prototype":"string ColumnResult::getColumnLabel()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getColumnName":{"id":"mysql-xdevapi-columnresult.getcolumnname","purpose":"Get column name","prototype":"string ColumnResult::getColumnName()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getFractionalDigits":{"id":"mysql-xdevapi-columnresult.getfractionaldigits","purpose":"Get fractional digit length","prototype":"integer ColumnResult::getFractionalDigits()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getLength":{"id":"mysql-xdevapi-columnresult.getlength","purpose":"Get column field length","prototype":"integer ColumnResult::getLength()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getSchemaName":{"id":"mysql-xdevapi-columnresult.getschemaname","purpose":"Get schema name","prototype":"string ColumnResult::getSchemaName()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getTableLabel":{"id":"mysql-xdevapi-columnresult.gettablelabel","purpose":"Get table label","prototype":"string ColumnResult::getTableLabel()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::getTableName":{"id":"mysql-xdevapi-columnresult.gettablename","purpose":"Get table name","prototype":"string ColumnResult::getTableName()","return":"<p class=\"para\">   Name of the table for the column.  <\/p>","versions":""},"ColumnResult::getType":{"id":"mysql-xdevapi-columnresult.gettype","purpose":"Get column type","prototype":"integer ColumnResult::getType()","return":"<p class=\"para\">     <\/p>","versions":""},"ColumnResult::isNumberSigned":{"id":"mysql-xdevapi-columnresult.isnumbersigned","purpose":"Check if signed type","prototype":"integer ColumnResult::isNumberSigned()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if a given column as a signed type.  <\/p>","versions":""},"ColumnResult::isPadded":{"id":"mysql-xdevapi-columnresult.ispadded","purpose":"Check if padded","prototype":"integer ColumnResult::isPadded()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if a given column is padded.  <\/p>","versions":""},"CrudOperationBindable::bind":{"id":"mysql-xdevapi-crudoperationbindable.bind","purpose":"Bind value to placeholder","prototype":"mysql_xdevapi\\CrudOperationBindable CrudOperationBindable::bind(array $placeholder_values)","return":"<p class=\"para\">\t  A CrudOperationBindable object.  <\/p>","versions":""},"CrudOperationLimitable::limit":{"id":"mysql-xdevapi-crudoperationlimitable.limit","purpose":"Set result limit","prototype":"mysql_xdevapi\\CrudOperationLimitable CrudOperationLimitable::limit(integer $rows)","return":"<p class=\"para\">\tA CrudOperationLimitable object.  <\/p>","versions":""},"CrudOperationSkippable::skip":{"id":"mysql-xdevapi-crudoperationskippable.skip","purpose":"Number of operations to skip","prototype":"mysql_xdevapi\\CrudOperationSkippable CrudOperationSkippable::skip(integer $skip)","return":"<p class=\"para\">\tA CrudOperationSkippable object.  <\/p>","versions":""},"CrudOperationSortable::sort":{"id":"mysql-xdevapi-crudoperationsortable.sort","purpose":"Sort results","prototype":"mysql_xdevapi\\CrudOperationSortable CrudOperationSortable::sort(string $sort_expr)","return":"<p class=\"para\">\t A CrudOperationSortable object.  <\/p>","versions":""},"DatabaseObject::existsInDatabase":{"id":"mysql-xdevapi-databaseobject.existsindatabase","purpose":"Check if object exists in database","prototype":"bool DatabaseObject::existsInDatabase()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if object exists in the database, else <strong><code>FALSE<\/code><\/strong> if it does not.  <\/p>","versions":""},"DatabaseObject::getName":{"id":"mysql-xdevapi-databaseobject.getname","purpose":"Get object name","prototype":"string DatabaseObject::getName()","return":"<p class=\"para\">\tThe name of this database object.  <\/p>","versions":""},"DatabaseObject::getSession":{"id":"mysql-xdevapi-databaseobject.getsession","purpose":"Get session name","prototype":"mysql_xdevapi\\Session DatabaseObject::getSession()","return":"<p class=\"para\">\t  The Session object.  <\/p>","versions":""},"DocResult::__construct":{"id":"mysql-xdevapi-docresult.construct","purpose":"DocResult constructor","prototype":" DocResult::__construct()","return":"","versions":""},"DocResult::fetchAll":{"id":"mysql-xdevapi-docresult.fetchall","purpose":"Get all rows","prototype":"Array DocResult::fetchAll()","return":"<p class=\"para\">   An array of Result objects from the last operation on the collection.  <\/p>","versions":""},"DocResult::fetchOne":{"id":"mysql-xdevapi-docresult.fetchone","purpose":"Get one row","prototype":"Object DocResult::fetchOne()","return":"<p class=\"para\">   A Result object from the last operation on a collection.  <\/p>","versions":""},"DocResult::getWarningCount":{"id":"mysql-xdevapi-docresult.getwarningcount","purpose":"Get warning count from last operation","prototype":"integer DocResult::getWarningCount()","return":"<p class=\"para\">     <\/p>","versions":""},"DocResult::getWarnings":{"id":"mysql-xdevapi-docresult.getwarnings","purpose":"Get warnings from last operation","prototype":"Array DocResult::getWarnings()","return":"<p class=\"para\">   An array of Warning objects from the last operation.  <\/p>","versions":""},"Driver::__construct":{"id":"mysql-xdevapi-driver.construct","purpose":"Driver constructor","prototype":" Driver::__construct()","return":"","versions":""},"Executable::execute":{"id":"mysql-xdevapi-executable.execute","purpose":"Execute statement","prototype":"mysql_xdevapi\\Result Executable::execute()","return":"<p class=\"para\">   A Result object.  <\/p>","versions":""},"ExecutionStatus::__construct":{"id":"mysql-xdevapi-executionstatus.construct","purpose":"ExecutionStatus constructor","prototype":" ExecutionStatus::__construct()","return":"","versions":""},"Expression::__construct":{"id":"mysql-xdevapi-expression.construct","purpose":"Expression constructor","prototype":" Expression::__construct(string $expression)","return":"","versions":""},"FieldMetadata::__construct":{"id":"mysql-xdevapi-fieldmetadata.construct","purpose":"FieldMetadata constructor","prototype":" FieldMetadata::__construct()","return":"","versions":""},"Result::__construct":{"id":"mysql-xdevapi-result.construct","purpose":"Result constructor","prototype":" Result::__construct()","return":"","versions":""},"Result::getAffectedItemsCount":{"id":"mysql-xdevapi-result.getaffecteditemscount","purpose":"Get affected row count","prototype":"int Result::getAffectedItemsCount()","return":"<p class=\"para\">     <\/p>","versions":""},"Result::getAutoIncrementValue":{"id":"mysql-xdevapi-result.getautoincrementvalue","purpose":"Get autoincremented value","prototype":"int Result::getAutoIncrementValue()","return":"<p class=\"para\">     <\/p>","versions":""},"Result::getGeneratedIds":{"id":"mysql-xdevapi-result.getgeneratedids","purpose":"Get generated ids","prototype":"ArrayOfInt Result::getGeneratedIds()","return":"<p class=\"para\">   An array of generated IDs from the last operation.  <\/p>","versions":""},"Result::getWarningCount":{"id":"mysql-xdevapi-result.getwarningcount","purpose":"Get warning count from last operation","prototype":"integer Result::getWarningCount()","return":"<p class=\"para\">   The number of warnings generated by the last operation.  <\/p>","versions":""},"Result::getWarnings":{"id":"mysql-xdevapi-result.getwarnings","purpose":"Get warnings from last operation","prototype":"array Result::getWarnings()","return":"<p class=\"para\">   An array of Warning objects from the last operation.  <\/p>","versions":""},"RowResult::__construct":{"id":"mysql-xdevapi-rowresult.construct","purpose":"RowResult constructor","prototype":" RowResult::__construct()","return":"","versions":""},"RowResult::fetchAll":{"id":"mysql-xdevapi-rowresult.fetchall","purpose":"Get all rows from result","prototype":"array RowResult::fetchAll()","return":"<p class=\"para\">     <\/p>","versions":""},"RowResult::fetchOne":{"id":"mysql-xdevapi-rowresult.fetchone","purpose":"Get row from result","prototype":"object RowResult::fetchOne()","return":"<p class=\"para\">     <\/p>","versions":""},"RowResult::getColumnCount":{"id":"mysql-xdevapi-rowresult.getcolumncount","purpose":"Get column count","prototype":"integer RowResult::getColumnCount()","return":"<p class=\"para\">   The number of columns.  <\/p>","versions":""},"RowResult::getColumnNames":{"id":"mysql-xdevapi-rowresult.getcolumnnames","purpose":"Get all column names","prototype":"array RowResult::getColumnNames()","return":"<p class=\"para\">   An array with the columns names.  <\/p>","versions":""},"RowResult::getColumns":{"id":"mysql-xdevapi-rowresult.getcolumns","purpose":"Get columns","prototype":"array RowResult::getColumns()","return":"<p class=\"para\">   An array of objects representing the columns.  <\/p>","versions":""},"RowResult::getWarningCount":{"id":"mysql-xdevapi-rowresult.getwarningcount","purpose":"Get warning count from last operation","prototype":"integer RowResult::getWarningCount()","return":"<p class=\"para\">   The number of warnings generated by the last operation.  <\/p>","versions":""},"RowResult::getWarnings":{"id":"mysql-xdevapi-rowresult.getwarnings","purpose":"Get warnings from last operation","prototype":"array RowResult::getWarnings()","return":"<p class=\"para\">   An array of Warning objects from the last operation.  <\/p>","versions":""},"Schema::__construct":{"id":"mysql-xdevapi-schema.construct","purpose":"constructor","prototype":" Schema::__construct()","return":"","versions":""},"Schema::createCollection":{"id":"mysql-xdevapi-schema.createcollection","purpose":"Add collection to schema","prototype":"mysql_xdevapi\\Collection Schema::createCollection(string $name)","return":"<p class=\"para\">     <\/p>","versions":""},"Schema::dropCollection":{"id":"mysql-xdevapi-schema.dropcollection","purpose":"Drop collection from schema","prototype":"bool Schema::dropCollection(string $collection_name)","return":"<p class=\"para\">  <\/p>","versions":""},"Schema::existsInDatabase":{"id":"mysql-xdevapi-schema.existsindatabase","purpose":"Check if schema exists in database","prototype":"bool Schema::existsInDatabase()","return":"<p class=\"para\">     <\/p>","versions":""},"Schema::getCollection":{"id":"mysql-xdevapi-schema.getcollection","purpose":"Get collection from schema","prototype":"mysql_xdevapi\\Collection Schema::getCollection(string $name)","return":"<p class=\"para\">   The Collection object for the selected collection.  <\/p>","versions":""},"Schema::getCollectionAsTable":{"id":"mysql-xdevapi-schema.getcollectionastable","purpose":"Get collection table object","prototype":"mysql_xdevapi\\Table Schema::getCollectionAsTable(string $name)","return":"<p class=\"para\">   A table object for the defined table.  <\/p>","versions":""},"Schema::getCollections":{"id":"mysql-xdevapi-schema.getcollections","purpose":"Get all schema collections","prototype":"array Schema::getCollections()","return":"<p class=\"para\">\tArray of all collections in this schema.  <\/p>","versions":""},"Schema::getName":{"id":"mysql-xdevapi-schema.getname","purpose":"Get schema name","prototype":"string Schema::getName()","return":"<p class=\"para\">     <\/p>","versions":""},"Schema::getSession":{"id":"mysql-xdevapi-schema.getsession","purpose":"Get schema session","prototype":"mysql_xdevapi\\Session Schema::getSession()","return":"<p class=\"para\">  <\/p>","versions":""},"Schema::getTable":{"id":"mysql-xdevapi-schema.gettable","purpose":"Get schema table","prototype":"mysql_xdevapi\\Table Schema::getTable(string $name)","return":"<p class=\"para\">     <\/p>","versions":""},"Schema::getTables":{"id":"mysql-xdevapi-schema.gettables","purpose":"Get schema tables","prototype":"array Schema::getTables()","return":"<p class=\"para\">   An array of table objects.  <\/p>","versions":""},"SchemaObject::getSchema":{"id":"mysql-xdevapi-schemaobject.getschema","purpose":"Get schema object","prototype":"mysql_xdevapi\\Schema SchemaObject::getSchema()","return":"<p class=\"para\">   The current Schema object.  <\/p>","versions":""},"Session::close":{"id":"mysql-xdevapi-session.close","purpose":"Close session","prototype":"bool Session::close()","return":"<p class=\"para\">     <\/p>","versions":""},"Session::commit":{"id":"mysql-xdevapi-session.commit","purpose":"Commit transaction","prototype":"Object Session::commit()","return":"<p class=\"para\">     <\/p>","versions":"PHP 4 >= 4.4.0, PHP 5, PHP 7"},"Session::__construct":{"id":"mysql-xdevapi-session.construct","purpose":"Description constructor","prototype":" Session::__construct()","return":"","versions":""},"Session::createSchema":{"id":"mysql-xdevapi-session.createschema","purpose":"Create new schema","prototype":"mysql_xdevapi\\Schema Session::createSchema(string $schema_name)","return":"<p class=\"para\">   A Schema object on success, and emits an exception on failure.  <\/p>","versions":""},"Session::dropSchema":{"id":"mysql-xdevapi-session.dropschema","purpose":"Drop a schema","prototype":"bool Session::dropSchema(string $schema_name)","return":"<p class=\"para\">     <\/p>","versions":""},"Session::executeSql":{"id":"mysql-xdevapi-session.executesql","purpose":"Execute an SQL statement","prototype":"Object Session::executeSql(string $statement)","return":"<p class=\"para\">     <\/p>","versions":""},"Session::generateUUID":{"id":"mysql-xdevapi-session.generateuuid","purpose":"Get new UUID","prototype":"string Session::generateUUID()","return":"<p class=\"para\">     <\/p>","versions":""},"Session::getClientId":{"id":"mysql-xdevapi-session.getclientid","purpose":"Get client ID","prototype":"string Session::getClientId()","return":"<p class=\"para\">   ID of the connected client.  <\/p>","versions":""},"Session::getSchema":{"id":"mysql-xdevapi-session.getschema","purpose":"Get the schema","prototype":"mysql_xdevapi\\Schema Session::getSchema()","return":"<p class=\"para\">  A Schema object.  <\/p>","versions":""},"Session::getSchemas":{"id":"mysql-xdevapi-session.getschemas","purpose":"Get the schemas","prototype":"array Session::getSchemas()","return":"<p class=\"para\">   An array containing objects that reppresent all the schemas.  <\/p>","versions":""},"Session::getServerVersion":{"id":"mysql-xdevapi-session.getserverversion","purpose":"Get server version","prototype":"integer Session::getServerVersion()","return":"<p class=\"para\">   The MySQL server version for the session.  <\/p>","versions":""},"Session::killClient":{"id":"mysql-xdevapi-session.killclient","purpose":"Kill the client","prototype":"object Session::killClient(integer $client_id)","return":"<p class=\"para\">     <\/p>","versions":""},"Session::listClients":{"id":"mysql-xdevapi-session.listclients","purpose":"Get client list","prototype":"array Session::listClients()","return":"<p class=\"para\">   An array containing the currently logged clients.  <\/p>","versions":""},"Session::quoteName":{"id":"mysql-xdevapi-session.quotename","purpose":"Add quotes","prototype":"string Session::quoteName(string $name)","return":"<p class=\"para\">     <\/p>","versions":""},"Session::releaseSavepoint":{"id":"mysql-xdevapi-session.releasesavepoint","purpose":"Release set savepoint","prototype":"void Session::releaseSavepoint(string $name)","return":"<p class=\"para\">  <\/p>","versions":""},"Session::rollback":{"id":"mysql-xdevapi-session.rollback","purpose":"Rollback transaction","prototype":"void Session::rollback()","return":"<p class=\"para\">     <\/p>","versions":""},"Session::rollbackTo":{"id":"mysql-xdevapi-session.rollbackto","purpose":"Rollback transaction to savepoint","prototype":"void Session::rollbackTo(string $name)","return":"<p class=\"para\">  <\/p>","versions":""},"Session::setSavepoint":{"id":"mysql-xdevapi-session.setsavepoint","purpose":"Create savepoint","prototype":"string Session::setSavepoint([string $name = ''])","return":"<p class=\"para\">     <\/p>","versions":""},"Session::sql":{"id":"mysql-xdevapi-session.sql","purpose":"Execute SQL query","prototype":"mysql_xdevapi\\SqlStatement Session::sql(string $query)","return":"<p class=\"para\">\t An SqlStatement object.  <\/p>","versions":""},"Session::startTransaction":{"id":"mysql-xdevapi-session.starttransaction","purpose":"Start transaction","prototype":"void Session::startTransaction()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatement::bind":{"id":"mysql-xdevapi-sqlstatement.bind","purpose":"Bind statement parameters","prototype":"mysql_xdevapi\\SqlStatement SqlStatement::bind(string $param)","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatement::__construct":{"id":"mysql-xdevapi-sqlstatement.construct","purpose":"Description constructor","prototype":" SqlStatement::__construct()","return":"","versions":""},"SqlStatement::execute":{"id":"mysql-xdevapi-sqlstatement.execute","purpose":"Execute the operation","prototype":"mysql_xdevapi\\Result SqlStatement::execute()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatement::getNextResult":{"id":"mysql-xdevapi-sqlstatement.getnextresult","purpose":"Get next result","prototype":"mysql_xdevapi\\Result SqlStatement::getNextResult()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatement::getResult":{"id":"mysql-xdevapi-sqlstatement.getresult","purpose":"Get result","prototype":"mysql_xdevapi\\Result SqlStatement::getResult()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatement::hasMoreResults":{"id":"mysql-xdevapi-sqlstatement.hasmoreresults","purpose":"Check for more results","prototype":"bool SqlStatement::hasMoreResults()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the result set has more objects to fetch.  <\/p>","versions":""},"SqlStatementResult::__construct":{"id":"mysql-xdevapi-sqlstatementresult.construct","purpose":"Description constructor","prototype":" SqlStatementResult::__construct()","return":"","versions":""},"SqlStatementResult::fetchAll":{"id":"mysql-xdevapi-sqlstatementresult.fetchall","purpose":"Get all rows","prototype":"array SqlStatementResult::fetchAll()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatementResult::fetchOne":{"id":"mysql-xdevapi-sqlstatementresult.fetchone","purpose":"Get single row","prototype":"object SqlStatementResult::fetchOne()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatementResult::getAffectedItemsCount":{"id":"mysql-xdevapi-sqlstatementresult.getaffecteditemscount","purpose":"Get affected row count","prototype":"integer SqlStatementResult::getAffectedItemsCount()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatementResult::getColumnCount":{"id":"mysql-xdevapi-sqlstatementresult.getcolumncount","purpose":"Get column count","prototype":"integer SqlStatementResult::getColumnCount()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatementResult::getColumnNames":{"id":"mysql-xdevapi-sqlstatementresult.getcolumnnames","purpose":"Get column names","prototype":"array SqlStatementResult::getColumnNames()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatementResult::getColumns":{"id":"mysql-xdevapi-sqlstatementresult.getcolumns","purpose":"Get columns","prototype":"Array SqlStatementResult::getColumns()","return":"<p class=\"para\">     <\/p>","versions":""},"SqlStatementResult::getGeneratedIds":{"id":"mysql-xdevapi-sqlstatementresult.getgeneratedids","purpose":"Get generated ids","prototype":"array SqlStatementResult::getGeneratedIds()","return":"<p class=\"para\">   An array of generated IDs from the last operation.  <\/p>","versions":""},"SqlStatementResult::getLastInsertId":{"id":"mysql-xdevapi-sqlstatementresult.getlastinsertid","purpose":"Get last insert id","prototype":"String SqlStatementResult::getLastInsertId()","return":"<p class=\"para\">   The ID for the last insert operation.  <\/p>","versions":""},"SqlStatementResult::getWarningCount":{"id":"mysql-xdevapi-sqlstatementresult.getwarningcount","purpose":"Get warning count from last operation","prototype":"integer SqlStatementResult::getWarningCount()","return":"<p class=\"para\">   The number of warnings raised during the last CRUD operation.  <\/p>","versions":""},"SqlStatementResult::getWarnings":{"id":"mysql-xdevapi-sqlstatementresult.getwarnings","purpose":"Get warnings from last operation","prototype":"array SqlStatementResult::getWarnings()","return":"<p class=\"para\">   All warnings raised by the last CRUD operation, as an array.  <\/p>","versions":""},"SqlStatementResult::hasData":{"id":"mysql-xdevapi-sqlstatementresult.hasdata","purpose":"Check if result has data","prototype":"bool SqlStatementResult::hasData()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the result set has data.  <\/p>","versions":""},"SqlStatementResult::nextResult":{"id":"mysql-xdevapi-sqlstatementresult.nextresult","purpose":"Get next result","prototype":"mysql_xdevapi\\Result SqlStatementResult::nextResult()","return":"<p class=\"para\">   The next Result object from the result set.  <\/p>","versions":""},"Statement::__construct":{"id":"mysql-xdevapi-statement.construct","purpose":"Description constructor","prototype":" Statement::__construct()","return":"","versions":""},"Statement::getNextResult":{"id":"mysql-xdevapi-statement.getnextresult","purpose":"Get next result","prototype":"mysql_xdevapi\\Result Statement::getNextResult()","return":"<p class=\"para\">     <\/p>","versions":""},"Statement::getResult":{"id":"mysql-xdevapi-statement.getresult","purpose":"Get result","prototype":"mysql_xdevapi\\Result Statement::getResult()","return":"<p class=\"para\">     <\/p>","versions":""},"Statement::hasMoreResults":{"id":"mysql-xdevapi-statement.hasmoreresults","purpose":"Check if more results","prototype":"bool Statement::hasMoreResults()","return":"<p class=\"para\">     <\/p>","versions":""},"Table::__construct":{"id":"mysql-xdevapi-table.construct","purpose":"Table constructor","prototype":" Table::__construct()","return":"","versions":""},"Table::count":{"id":"mysql-xdevapi-table.count","purpose":"Get row count","prototype":"integer Table::count()","return":"<p class=\"para\">\tThe total of rows in the table.  <\/p>","versions":""},"Table::delete":{"id":"mysql-xdevapi-table.delete","purpose":"Delete rows from table","prototype":"mysql_xdevapi\\TableDelete Table::delete()","return":"<p class=\"para\">\tA TableDelete object  <\/p>","versions":""},"Table::existsInDatabase":{"id":"mysql-xdevapi-table.existsindatabase","purpose":"Check if table exists in database","prototype":"bool Table::existsInDatabase()","return":"<p class=\"para\">\t Returns <strong><code>TRUE<\/code><\/strong> if table exists in the database, else <strong><code>FALSE<\/code><\/strong> if it does not.  <\/p>","versions":""},"Table::getName":{"id":"mysql-xdevapi-table.getname","purpose":"Get table name","prototype":"string Table::getName()","return":"<p class=\"para\">\tThe name of this database object.  <\/p>","versions":""},"Table::getSchema":{"id":"mysql-xdevapi-table.getschema","purpose":"Get table schema","prototype":"mysql_xdevapi\\Schema Table::getSchema()","return":"<p class=\"para\">\tA Schema object.  <\/p>","versions":""},"Table::getSession":{"id":"mysql-xdevapi-table.getsession","purpose":"Get table session","prototype":"mysql_xdevapi\\Session Table::getSession()","return":"<p class=\"para\">\t A Session object.  <\/p>","versions":""},"Table::insert":{"id":"mysql-xdevapi-table.insert","purpose":"Insert table rows","prototype":"mysql_xdevapi\\TableInsert Table::insert(mixed $columns [, mixed $... = ''])","return":"<p class=\"para\">\t A TableInsert object.  <\/p>","versions":""},"Table::isView":{"id":"mysql-xdevapi-table.isview","purpose":"Check if table is view","prototype":"bool Table::isView()","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if the underlying object is a view, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":""},"Table::select":{"id":"mysql-xdevapi-table.select","purpose":"Select rows from table","prototype":"mysql_xdevapi\\TableSelect Table::select(mixed $columns [, mixed $... = ''])","return":"<p class=\"para\">\tTableSelect object.  <\/p>","versions":""},"Table::update":{"id":"mysql-xdevapi-table.update","purpose":"Update rows in table","prototype":"mysql_xdevapi\\TableUpdate Table::update()","return":"<p class=\"para\">\t A TableUpdate object.  <\/p>","versions":""},"TableDelete::bind":{"id":"mysql-xdevapi-tabledelete.bind","purpose":"Bind delete query parameters","prototype":"mysql_xdevapi\\TableDelete TableDelete::bind(array $placeholder_values)","return":"<p class=\"para\">\tA TableDelete object.  <\/p>","versions":""},"TableDelete::__construct":{"id":"mysql-xdevapi-tabledelete.construct","purpose":"TableDelete constructor","prototype":" TableDelete::__construct()","return":"","versions":""},"TableDelete::execute":{"id":"mysql-xdevapi-tabledelete.execute","purpose":"Execute delete query","prototype":"mysql_xdevapi\\Result TableDelete::execute()","return":"<p class=\"para\">\tA Result object.  <\/p>","versions":""},"TableDelete::limit":{"id":"mysql-xdevapi-tabledelete.limit","purpose":"Limit deleted rows","prototype":"mysql_xdevapi\\TableDelete TableDelete::limit(integer $rows)","return":"<p class=\"para\">\tTableDelete object.  <\/p>","versions":""},"TableDelete::offset":{"id":"mysql-xdevapi-tabledelete.offset","purpose":"Set delete limit offset","prototype":"mysql_xdevapi\\TableDelete TableDelete::offset(integer $position)","return":"<p class=\"para\">\t A TableDelete object.  <\/p>","versions":""},"TableDelete::orderby":{"id":"mysql-xdevapi-tabledelete.orderby","purpose":"Set delete sort criteria","prototype":"mysql_xdevapi\\TableDelete TableDelete::orderby(string $orderby_expr)","return":"<p class=\"para\">\tA TableDelete object.  <\/p>","versions":""},"TableDelete::where":{"id":"mysql-xdevapi-tabledelete.where","purpose":"Set delete search condition","prototype":"mysql_xdevapi\\TableDelete TableDelete::where(string $where_expr)","return":"<p class=\"para\">\tTableDelete object.  <\/p>","versions":""},"TableInsert::__construct":{"id":"mysql-xdevapi-tableinsert.construct","purpose":"TableInsert constructor","prototype":" TableInsert::__construct()","return":"","versions":""},"TableInsert::execute":{"id":"mysql-xdevapi-tableinsert.execute","purpose":"Execute insert query","prototype":"mysql_xdevapi\\Result TableInsert::execute()","return":"<p class=\"para\">\tA Result object.  <\/p>","versions":""},"TableInsert::values":{"id":"mysql-xdevapi-tableinsert.values","purpose":"Add insert row values","prototype":"mysql_xdevapi\\TableInsert TableInsert::values(array $row_values)","return":"<p class=\"para\">\tA TableInsert object.  <\/p>","versions":""},"TableSelect::bind":{"id":"mysql-xdevapi-tableselect.bind","purpose":"Bind select query parameters","prototype":"mysql_xdevapi\\TableSelect TableSelect::bind(array $placeholder_values)","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::__construct":{"id":"mysql-xdevapi-tableselect.construct","purpose":"TableSelect constructor","prototype":" TableSelect::__construct()","return":"","versions":""},"TableSelect::execute":{"id":"mysql-xdevapi-tableselect.execute","purpose":"Execute select statement","prototype":"mysql_xdevapi\\RowResult TableSelect::execute()","return":"<p class=\"para\">\tA RowResult object.  <\/p>","versions":""},"TableSelect::groupBy":{"id":"mysql-xdevapi-tableselect.groupby","purpose":"Set select grouping criteria","prototype":"mysql_xdevapi\\TableSelect TableSelect::groupBy(mixed $sort_expr)","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::having":{"id":"mysql-xdevapi-tableselect.having","purpose":"Set select having condition","prototype":"mysql_xdevapi\\TableSelect TableSelect::having(string $sort_expr)","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::limit":{"id":"mysql-xdevapi-tableselect.limit","purpose":"Limit selected rows","prototype":"mysql_xdevapi\\TableSelect TableSelect::limit(integer $rows)","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::lockExclusive":{"id":"mysql-xdevapi-tableselect.lockexclusive","purpose":"Execute EXCLUSIVE LOCK","prototype":"mysql_xdevapi\\TableSelect TableSelect::lockExclusive([integer $lock_waiting_option = ''])","return":"<p class=\"para\">\tTableSelect object.  <\/p>","versions":""},"TableSelect::lockShared":{"id":"mysql-xdevapi-tableselect.lockshared","purpose":"Execute SHARED LOCK","prototype":"mysql_xdevapi\\TableSelect TableSelect::lockShared([integer $lock_waiting_option = ''])","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::offset":{"id":"mysql-xdevapi-tableselect.offset","purpose":"Set limit offset","prototype":"mysql_xdevapi\\TableSelect TableSelect::offset(integer $position)","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::orderby":{"id":"mysql-xdevapi-tableselect.orderby","purpose":"Set select sort criteria","prototype":"mysql_xdevapi\\TableSelect TableSelect::orderby(mixed $sort_expr [, mixed $... = ''])","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableSelect::where":{"id":"mysql-xdevapi-tableselect.where","purpose":"Set select search condition","prototype":"mysql_xdevapi\\TableSelect TableSelect::where(string $where_expr)","return":"<p class=\"para\">\tA TableSelect object.  <\/p>","versions":""},"TableUpdate::bind":{"id":"mysql-xdevapi-tableupdate.bind","purpose":"Bind update query parameters","prototype":"mysql_xdevapi\\TableUpdate TableUpdate::bind(array $placeholder_values)","return":"<p class=\"para\">\tA TableUpdate object.  <\/p>","versions":""},"TableUpdate::__construct":{"id":"mysql-xdevapi-tableupdate.construct","purpose":"TableUpdate constructor","prototype":" TableUpdate::__construct()","return":"","versions":""},"TableUpdate::execute":{"id":"mysql-xdevapi-tableupdate.execute","purpose":"Execute update query","prototype":"mysql_xdevapi\\TableUpdate TableUpdate::execute()","return":"<p class=\"para\">\tA TableUpdate object.  <\/p>","versions":""},"TableUpdate::limit":{"id":"mysql-xdevapi-tableupdate.limit","purpose":"Limit update row count","prototype":"mysql_xdevapi\\TableUpdate TableUpdate::limit(integer $rows)","return":"<p class=\"para\">\t A TableUpdate object.  <\/p>","versions":""},"TableUpdate::orderby":{"id":"mysql-xdevapi-tableupdate.orderby","purpose":"Set sorting criteria","prototype":"mysql_xdevapi\\TableUpdate TableUpdate::orderby(mixed $orderby_expr [, mixed $... = ''])","return":"<p class=\"para\">\tTableUpdate object.  <\/p>","versions":""},"TableUpdate::set":{"id":"mysql-xdevapi-tableupdate.set","purpose":"Add field to be updated","prototype":"mysql_xdevapi\\TableUpdate TableUpdate::set(string $table_field, string $expression_or_literal)","return":"<p class=\"para\">\tTableUpdate object.  <\/p>","versions":""},"TableUpdate::where":{"id":"mysql-xdevapi-tableupdate.where","purpose":"Set search filter","prototype":"mysql_xdevapi\\TableUpdate TableUpdate::where(string $where_expr)","return":"<p class=\"para\">\t A TableUpdate object.  <\/p>","versions":""},"Warning::__construct":{"id":"mysql-xdevapi-warning.construct","purpose":"Warning constructor","prototype":" Warning::__construct()","return":"","versions":""},"XSession::__construct":{"id":"mysql-xdevapi-xsession.construct","purpose":"Description constructor","prototype":" XSession::__construct()","return":"","versions":""},"mysql_affected_rows":{"id":"function.mysql-affected-rows","purpose":"Get number of affected rows in previous MySQL operation","prototype":"int mysql_affected_rows([resource $link_identifier = null])","return":"<p class=\"para\">   Returns the number of affected rows on success, and -1 if the last query   failed.  <\/p>  <p class=\"para\">   If the last query was a DELETE query with no WHERE clause, all   of the records will have been deleted from the table but this   function will return zero with MySQL versions prior to 4.1.2.  <\/p>  <p class=\"para\">   When using UPDATE, MySQL will not update columns where the new value is the    same as the old value.  This creates the possibility that    <span class=\"function\">mysql_affected_rows<\/span> may not actually equal the number    of rows matched, only the number of rows that were literally affected by    the query.  <\/p>  <p class=\"para\">   The REPLACE statement first deletes the record with the same primary key    and then inserts the new record. This function returns the number of    deleted records plus the number of inserted records.  <\/p>   <p class=\"para\">   In the case of &quot;INSERT ... ON DUPLICATE KEY UPDATE&quot; queries, the    return value will be <em>1<\/em> if an insert was performed,    or <em>2<\/em> for an update of an existing row.     <\/p>","versions":"PHP 4, PHP 5"},"mysql_client_encoding":{"id":"function.mysql-client-encoding","purpose":"Returns the name of the character set","prototype":"string mysql_client_encoding([resource $link_identifier = null])","return":"<p class=\"para\">   Returns the default character set name for the current connection.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_close":{"id":"function.mysql-close","purpose":"Close MySQL connection","prototype":"bool mysql_close([resource $link_identifier = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_connect":{"id":"function.mysql-connect","purpose":"Open a connection to a MySQL Server","prototype":"resource mysql_connect([string $server = ini_get(\"mysql.default_host\") [, string $username = ini_get(\"mysql.default_user\") [, string $password = ini_get(\"mysql.default_password\") [, bool $new_link = '' [, int $client_flags = '']]]]])","return":"<p class=\"para\">   Returns a MySQL link identifier on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_create_db":{"id":"function.mysql-create-db","purpose":"Create a MySQL database","prototype":"bool mysql_create_db(string $database_name [, resource $link_identifier = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_data_seek":{"id":"function.mysql-data-seek","purpose":"Move internal result pointer","prototype":"bool mysql_data_seek(resource $result, int $row_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_db_name":{"id":"function.mysql-db-name","purpose":"Retrieves database name from the call to mysql_list_dbs","prototype":"string mysql_db_name(resource $result, int $row [, mixed $field = null])","return":"<p class=\"para\">   Returns the database name on success, and <strong><code>FALSE<\/code><\/strong> on failure. If <strong><code>FALSE<\/code><\/strong>   is returned, use <span class=\"function\">mysql_error<\/span> to determine the nature   of the error.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_db_query":{"id":"function.mysql-db-query","purpose":"Selects a database and executes a query on it","prototype":"resource mysql_db_query(string $database, string $query [, resource $link_identifier = null])","return":"<p class=\"para\">   Returns a positive MySQL result resource to the query result,   or <strong><code>FALSE<\/code><\/strong> on error. The function also returns <strong><code>TRUE<\/code><\/strong>\/<strong><code>FALSE<\/code><\/strong> for   <em>INSERT<\/em>\/<em>UPDATE<\/em>\/<em>DELETE<\/em>   queries to indicate success\/failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_drop_db":{"id":"function.mysql-drop-db","purpose":"Drop (delete) a MySQL database","prototype":"bool mysql_drop_db(string $database_name [, resource $link_identifier = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_errno":{"id":"function.mysql-errno","purpose":"Returns the numerical value of the error message from previous MySQL operation","prototype":"int mysql_errno([resource $link_identifier = null])","return":"<p class=\"para\">   Returns the error number from the last MySQL function, or   <em>0<\/em> (zero) if no error occurred.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_error":{"id":"function.mysql-error","purpose":"Returns the text of the error message from previous MySQL operation","prototype":"string mysql_error([resource $link_identifier = null])","return":"<p class=\"para\">   Returns the error text from the last MySQL function, or   <em>&#039;&#039;<\/em> (empty string) if no error occurred.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_escape_string":{"id":"function.mysql-escape-string","purpose":"Escapes a string for use in a mysql_query","prototype":"string mysql_escape_string(string $unescaped_string)","return":"<p class=\"para\">   Returns the escaped string.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5"},"mysql_fetch_array":{"id":"function.mysql-fetch-array","purpose":"Fetch a result row as an associative array, a numeric array, or both","prototype":"array mysql_fetch_array(resource $result [, int $result_type = MYSQL_BOTH])","return":"<p class=\"para\">   Returns an array of strings that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong>   if there are no more rows. The type of returned array depends on   how <code class=\"parameter\">result_type<\/code> is defined. By using    <strong><code>MYSQL_BOTH<\/code><\/strong> (default), you&#039;ll get an array with both    associative and number indices. Using <strong><code>MYSQL_ASSOC<\/code><\/strong>, you    only get associative indices (as <span class=\"function\">mysql_fetch_assoc<\/span>    works), using <strong><code>MYSQL_NUM<\/code><\/strong>, you only get number indices    (as <span class=\"function\">mysql_fetch_row<\/span> works).  <\/p>  <p class=\"para\">   If two or more columns of the result have the same field names,   the last column will take precedence. To access the other column(s)   of the same name, you must use the numeric index of the column or   make an alias for the column. For aliased columns, you cannot   access the contents with the original column name.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_fetch_assoc":{"id":"function.mysql-fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array mysql_fetch_assoc(resource $result)","return":"<p class=\"para\">   Returns an associative array of strings that corresponds to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>  <p class=\"para\">   If two or more columns of the result have the same field names,   the last column will take precedence. To access the other   column(s) of the same name, you either need to access the   result with numeric indices by using   <span class=\"function\">mysql_fetch_row<\/span> or add alias names.   See the example at the <span class=\"function\">mysql_fetch_array<\/span>   description about aliases.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5"},"mysql_fetch_field":{"id":"function.mysql-fetch-field","purpose":"Get column information from a result and return as an object","prototype":"object mysql_fetch_field(resource $result [, int $field_offset = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">object<\/span> containing field information. The properties    of the object are:  <\/p>  <p class=\"para\">   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      name - column name     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      table - name of the table the column belongs to, which is the alias name if one is defined     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      max_length - maximum length of the column     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      not_null - 1 if the column cannot be <strong><code>NULL<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      primary_key - 1 if the column is a primary key     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      unique_key - 1 if the column is a unique key     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      multiple_key - 1 if the column is a non-unique key     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      numeric - 1 if the column is numeric     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      blob - 1 if the column is a BLOB     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      type - the type of the column     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      unsigned - 1 if the column is unsigned     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      zerofill - 1 if the column is zero-filled     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5"},"mysql_fetch_lengths":{"id":"function.mysql-fetch-lengths","purpose":"Get the length of each output in a result","prototype":"array mysql_fetch_lengths(resource $result)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of lengths on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_fetch_object":{"id":"function.mysql-fetch-object","purpose":"Fetch a result row as an object","prototype":"object mysql_fetch_object(resource $result [, string $class_name = '' [, array $params = '']])","return":"<p class=\"para\">   Returns an <span class=\"type\">object<\/span> with string properties that correspond to the   fetched row, or <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_fetch_row":{"id":"function.mysql-fetch-row","purpose":"Get a result row as an enumerated array","prototype":"array mysql_fetch_row(resource $result)","return":"<p class=\"para\">   Returns an numerical array of strings that corresponds to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>  <p class=\"para\">   <span class=\"function\">mysql_fetch_row<\/span> fetches one row of data from   the result associated with the specified result identifier.  The   row is returned as an array.  Each result column is stored in an   array offset, starting at offset 0.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_field_flags":{"id":"function.mysql-field-flags","purpose":"Get the flags associated with the specified field in a result","prototype":"string mysql_field_flags(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns a string of flags associated with the result or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The following flags are reported, if your version of MySQL   is current enough to support them: <em>&quot;not_null&quot;<\/em>,    <em>&quot;primary_key&quot;<\/em>, <em>&quot;unique_key&quot;<\/em>,    <em>&quot;multiple_key&quot;<\/em>, <em>&quot;blob&quot;<\/em>,    <em>&quot;unsigned&quot;<\/em>, <em>&quot;zerofill&quot;<\/em>,   <em>&quot;binary&quot;<\/em>, <em>&quot;enum&quot;<\/em>,    <em>&quot;auto_increment&quot;<\/em> and <em>&quot;timestamp&quot;<\/em>.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_field_len":{"id":"function.mysql-field-len","purpose":"Returns the length of the specified field","prototype":"int mysql_field_len(resource $result, int $field_offset)","return":"<p class=\"para\">   The length of the specified field index on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_field_name":{"id":"function.mysql-field-name","purpose":"Get the name of the specified field in a result","prototype":"string mysql_field_name(resource $result, int $field_offset)","return":"<p class=\"para\">   The name of the specified field index on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_field_seek":{"id":"function.mysql-field-seek","purpose":"Set result pointer to a specified field offset","prototype":"bool mysql_field_seek(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_field_table":{"id":"function.mysql-field-table","purpose":"Get name of the table the specified field is in","prototype":"string mysql_field_table(resource $result, int $field_offset)","return":"<p class=\"para\">   The name of the table on success.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_field_type":{"id":"function.mysql-field-type","purpose":"Get the type of the specified field in a result","prototype":"string mysql_field_type(resource $result, int $field_offset)","return":"<p class=\"para\">   The returned field type   will be one of <em>&quot;int&quot;<\/em>, <em>&quot;real&quot;<\/em>,    <em>&quot;string&quot;<\/em>, <em>&quot;blob&quot;<\/em>, and others as   detailed in the <a href=\"http:\/\/dev.mysql.com\/doc\/\" class=\"link external\">&raquo;&nbsp;MySQL   documentation<\/a>.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_free_result":{"id":"function.mysql-free-result","purpose":"Free result memory","prototype":"bool mysql_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If a non-resource is used for the <code class=\"parameter\">result<\/code>, an   error of level E_WARNING will be emitted.  It&#039;s worth noting that   <span class=\"function\">mysql_query<\/span> only returns a <span class=\"type\">resource<\/span>   for SELECT, SHOW, EXPLAIN, and DESCRIBE queries.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_get_client_info":{"id":"function.mysql-get-client-info","purpose":"Get MySQL client info","prototype":"string mysql_get_client_info()","return":"<p class=\"para\">   The MySQL client version.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5"},"mysql_get_host_info":{"id":"function.mysql-get-host-info","purpose":"Get MySQL host info","prototype":"string mysql_get_host_info([resource $link_identifier = null])","return":"<p class=\"para\">   Returns a string describing the type of MySQL connection in use for the   connection or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5"},"mysql_get_proto_info":{"id":"function.mysql-get-proto-info","purpose":"Get MySQL protocol info","prototype":"int mysql_get_proto_info([resource $link_identifier = null])","return":"<p class=\"para\">   Returns the MySQL protocol on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5"},"mysql_get_server_info":{"id":"function.mysql-get-server-info","purpose":"Get MySQL server info","prototype":"string mysql_get_server_info([resource $link_identifier = null])","return":"<p class=\"para\">   Returns the MySQL server version on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5"},"mysql_info":{"id":"function.mysql-info","purpose":"Get information about the most recent query","prototype":"string mysql_info([resource $link_identifier = null])","return":"<p class=\"para\">   Returns information about the statement on success, or <strong><code>FALSE<\/code><\/strong> on   failure. See the example below for which statements provide information,   and what the returned value may look like. Statements that are not listed    will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_insert_id":{"id":"function.mysql-insert-id","purpose":"Get the ID generated in the last query","prototype":"int mysql_insert_id([resource $link_identifier = null])","return":"<p class=\"para\">   The ID generated for an AUTO_INCREMENT column by the previous    query on success, <em>0<\/em> if the previous   query does not generate an AUTO_INCREMENT value, or <strong><code>FALSE<\/code><\/strong> if   no MySQL connection was established.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_list_dbs":{"id":"function.mysql-list-dbs","purpose":"List databases available on a MySQL server","prototype":"resource mysql_list_dbs([resource $link_identifier = null])","return":"<p class=\"para\">   Returns a result pointer <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on   failure. Use the <span class=\"function\">mysql_tablename<\/span> function to traverse    this result pointer, or any function for result tables, such as    <span class=\"function\">mysql_fetch_array<\/span>.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_list_fields":{"id":"function.mysql-list-fields","purpose":"List MySQL table fields","prototype":"resource mysql_list_fields(string $database_name, string $table_name [, resource $link_identifier = null])","return":"<p class=\"para\">   A result pointer <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>  <p class=\"para\">   The returned result can be used with <span class=\"function\">mysql_field_flags<\/span>,   <span class=\"function\">mysql_field_len<\/span>,   <span class=\"function\">mysql_field_name<\/span> and   <span class=\"function\">mysql_field_type<\/span>.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_list_processes":{"id":"function.mysql-list-processes","purpose":"List MySQL processes","prototype":"resource mysql_list_processes([resource $link_identifier = null])","return":"<p class=\"para\">   A result pointer <span class=\"type\">resource<\/span> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_list_tables":{"id":"function.mysql-list-tables","purpose":"List tables in a MySQL database","prototype":"resource mysql_list_tables(string $database [, resource $link_identifier = null])","return":"<p class=\"para\">   A result pointer <span class=\"type\">resource<\/span> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Use the <span class=\"function\">mysql_tablename<\/span> function to   traverse this result pointer, or any function for result tables,   such as <span class=\"function\">mysql_fetch_array<\/span>.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_num_fields":{"id":"function.mysql-num-fields","purpose":"Get number of fields in result","prototype":"int mysql_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields in the result set <span class=\"type\">resource<\/span> on   success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_num_rows":{"id":"function.mysql-num-rows","purpose":"Get number of rows in result","prototype":"int mysql_num_rows(resource $result)","return":"<p class=\"para\">   The number of rows in a result set on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_pconnect":{"id":"function.mysql-pconnect","purpose":"Open a persistent connection to a MySQL server","prototype":"resource mysql_pconnect([string $server = ini_get(\"mysql.default_host\") [, string $username = ini_get(\"mysql.default_user\") [, string $password = ini_get(\"mysql.default_password\") [, int $client_flags = '']]]])","return":"<p class=\"para\">   Returns a MySQL persistent link identifier on success, or <strong><code>FALSE<\/code><\/strong> on    failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_ping":{"id":"function.mysql-ping","purpose":"Ping a server connection or reconnect if there is no connection","prototype":"bool mysql_ping([resource $link_identifier = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the connection to the server MySQL server is working,    otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_query":{"id":"function.mysql-query","purpose":"Send a MySQL query","prototype":"mixed mysql_query(string $query [, resource $link_identifier = null])","return":"<p class=\"para\">   For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,   <span class=\"function\">mysql_query<\/span>    returns a <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>  <p class=\"para\">   For other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc,   <span class=\"function\">mysql_query<\/span> returns <strong><code>TRUE<\/code><\/strong> on success   or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   The returned result resource should be passed to   <span class=\"function\">mysql_fetch_array<\/span>, and other   functions for dealing with result tables, to access the returned data.  <\/p>  <p class=\"para\">   Use <span class=\"function\">mysql_num_rows<\/span> to find out how many rows   were returned for a SELECT statement or   <span class=\"function\">mysql_affected_rows<\/span> to find out how many   rows were affected by a DELETE, INSERT, REPLACE, or UPDATE   statement.  <\/p>  <p class=\"para\">   <span class=\"function\">mysql_query<\/span> will also fail and return <strong><code>FALSE<\/code><\/strong>   if the user does not have permission to access the table(s) referenced by   the query.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_real_escape_string":{"id":"function.mysql-real-escape-string","purpose":"Escapes special characters in a string for use in an SQL statement","prototype":"string mysql_real_escape_string(string $unescaped_string [, resource $link_identifier = null])","return":"<p class=\"para\">   Returns the escaped string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_result":{"id":"function.mysql-result","purpose":"Get result data","prototype":"string mysql_result(resource $result, int $row [, mixed $field = ''])","return":"<p class=\"para\">   The contents of one cell from a MySQL result set on success, or    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_select_db":{"id":"function.mysql-select-db","purpose":"Select a MySQL database","prototype":"bool mysql_select_db(string $database_name [, resource $link_identifier = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_set_charset":{"id":"function.mysql-set-charset","purpose":"Sets the client character set","prototype":"bool mysql_set_charset(string $charset [, resource $link_identifier = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.3"},"mysql_stat":{"id":"function.mysql-stat","purpose":"Get current system status","prototype":"string mysql_stat([resource $link_identifier = null])","return":"<p class=\"para\">   Returns a string with the status for uptime, threads, queries, open tables,   flush tables and queries per second. For a complete list of other status   variables, you have to use the <em>SHOW STATUS<\/em> SQL command.   If <code class=\"parameter\">link_identifier<\/code> is invalid, <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_tablename":{"id":"function.mysql-tablename","purpose":"Get table name of field","prototype":"string mysql_tablename(resource $result, int $i)","return":"<p class=\"para\">   The name of the table on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Use the <span class=\"function\">mysql_tablename<\/span> function to   traverse this result pointer, or any function for result tables,   such as <span class=\"function\">mysql_fetch_array<\/span>.  <\/p>","versions":"PHP 4, PHP 5"},"mysql_thread_id":{"id":"function.mysql-thread-id","purpose":"Return the current thread ID","prototype":"int mysql_thread_id([resource $link_identifier = null])","return":"<p class=\"para\">   The thread ID on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"mysql_unbuffered_query":{"id":"function.mysql-unbuffered-query","purpose":"Send an SQL query to MySQL without fetching and buffering the result rows","prototype":"resource mysql_unbuffered_query(string $query [, resource $link_identifier = null])","return":"<p class=\"para\">   For SELECT, SHOW, DESCRIBE or EXPLAIN statements,   <span class=\"function\">mysql_unbuffered_query<\/span>    returns a <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>  <p class=\"para\">   For other type of SQL statements, UPDATE, DELETE, DROP, etc,   <span class=\"function\">mysql_unbuffered_query<\/span> returns <strong><code>TRUE<\/code><\/strong> on success   or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5"},"mysqlnd_ms_dump_servers":{"id":"function.mysqlnd-ms-dump-servers","purpose":"Returns a list of currently configured servers","prototype":"array mysqlnd_ms_dump_servers(mixed $connection)","return":"<p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on error. Otherwise, returns an array with two entries   <em>masters<\/em> and <em>slaves<\/em> each of which contains   an array listing all corresponding servers.  <\/p>  <p class=\"para\">   The function can be used to check and debug the list of servers currently   used by the plugin. It is mostly useful when the list of servers changes at   runtime, for example, when using MySQL Fabric.  <\/p>  <p class=\"para\">   <em>masters<\/em> and <em>slaves<\/em> server entries  <\/p>  <table class=\"doctable informaltable\">       <col width=\"1*\" \/>    <col width=\"7*\" \/>    <col width=\"2*\" \/>    <thead>     <tr>      <th>Key<\/th>      <th>Description<\/th>      <th>Version<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>       <em>name_from_config<\/em>      <\/td>      <td>       <p class=\"para\">         Server entry name from config, if appliciable. NULL if no         configuration name is available.       <\/p>      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>hostname<\/em>      <\/td>      <td>       <p class=\"para\">         Host name of the server.       <\/p>      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>user<\/em>      <\/td>      <td>       <p class=\"para\">         Database user used to authenticate against the server.       <\/p>      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>port<\/em>      <\/td>      <td>       <p class=\"para\">         TCP\/IP port of the server.       <\/p>      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>       <tr>      <td>       <em>socket<\/em>      <\/td>      <td>       <p class=\"para\">         Unix domain socket of the server.       <\/p>      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":""},"mysqlnd_ms_fabric_select_global":{"id":"function.mysqlnd-ms-fabric-select-global","purpose":"Switch to global sharding server for a given table","prototype":"array mysqlnd_ms_fabric_select_global(mixed $connection, mixed $table_name)","return":"<p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on error. Otherwise, <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":""},"mysqlnd_ms_fabric_select_shard":{"id":"function.mysqlnd-ms-fabric-select-shard","purpose":"Switch to shard","prototype":"array mysqlnd_ms_fabric_select_shard(mixed $connection, mixed $table_name, mixed $shard_key)","return":"<p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on error. Otherwise, <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":""},"mysqlnd_ms_get_last_gtid":{"id":"function.mysqlnd-ms-get-last-gtid","purpose":"Returns the latest global transaction ID","prototype":"string mysqlnd_ms_get_last_gtid(mixed $connection)","return":"<p class=\"para\">   Returns a global transaction ID (GTID) on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>  <p class=\"para\">   The function <span class=\"function\">mysqlnd_ms_get_last_gtid<\/span> returns the   GTID obtained when executing the SQL statement from   the <em>fetch_last_gtid<\/em> entry of the   <em>global_transaction_id_injection<\/em> section from   the plugins configuration file.  <\/p>  <p class=\"para\">   The function may be called after the GTID has been incremented.  <\/p>","versions":"PECL mysqlnd_ms >= 1.2.0"},"mysqlnd_ms_get_last_used_connection":{"id":"function.mysqlnd-ms-get-last-used-connection","purpose":"Returns an array which describes the last used connection","prototype":"array mysqlnd_ms_get_last_used_connection(mixed $connection)","return":"<p class=\"para\">   <strong><code>FALSE<\/code><\/strong> on error. Otherwise, an   array which describes the connection used to   execute the last statement on.  <\/p>  <p class=\"para\">   Array which describes the connection.  <\/p>  <table class=\"doctable informaltable\">       <col width=\"1*\" \/>    <col width=\"7*\" \/>    <col width=\"2*\" \/>    <thead>     <tr>      <th>Property<\/th>      <th>Description<\/th>      <th>Version<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>       <em>scheme<\/em>      <\/td>      <td>       Connection scheme. Either <em>tcp:\/\/host:port<\/em>       or <em>unix:\/\/host:socket<\/em>. If you want to       distinguish connections from each other use a combination       of <em>scheme<\/em> and <em>thread_id<\/em> as a unique       key. Neither <em>scheme<\/em> nor <em>thread_id<\/em>       alone are sufficient to distinguish two connections from each other.       Two servers may assign the same <em>thread_id<\/em> to two       different connections. Thus, connections in the pool may have the same       <em>thread_id<\/em>. Also, do not rely on uniqueness of       <em>scheme<\/em> in a pool. Your QA engineers may use the       same MySQL server instance for two distinct logical roles and add it       multiple times to the pool. This hack is used, for example,       in the test suite.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>host<\/em>      <\/td>      <td>       Database server host used with the connection.       The host is only set with TCP\/IP connections.       It is empty with Unix domain or Windows named pipe connections,      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>host_info<\/em>      <\/td>      <td>        A character string representing the server hostname and the connection type.      <\/td>      <td>Since 1.1.2.<\/td>     <\/tr>     <tr>      <td>       <em>port<\/em>      <\/td>      <td>       Database server port used with the connection.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>socket_or_pipe<\/em>      <\/td>      <td>       Unix domain socket or Windows named pipe used with the connection.       The value is empty for TCP\/IP connections.      <\/td>      <td>Since 1.1.2.<\/td>     <\/tr>     <tr>      <td>       <em>thread_id<\/em>      <\/td>      <td>       Connection thread id.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>last_message<\/em>      <\/td>      <td>       Info message obtained from the       MySQL C API function mysql_info(). Please, see       <span class=\"function\">mysqli_info<\/span> for       a description.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>errno<\/em>      <\/td>      <td>       Error code.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>error<\/em>      <\/td>      <td>       Error message.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>sqlstate<\/em>      <\/td>      <td>       Error SQLstate code.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL mysqlnd_ms >= 1.1.0"},"mysqlnd_ms_get_stats":{"id":"function.mysqlnd-ms-get-stats","purpose":"Returns query distribution and connection statistics","prototype":"array mysqlnd_ms_get_stats()","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if   the PHP configuration directive   <a href=\"mysqlnd-ms.configuration.html#ini.mysqlnd-ms.enable\" class=\"link\"><em>mysqlnd_ms.enable<\/em><\/a>   has disabled the plugin. Otherwise, returns array of statistics.  <\/p>  <p class=\"para\">   Array of statistics  <\/p>  <table class=\"doctable informaltable\">       <col width=\"1*\" \/>    <col width=\"7*\" \/>    <col width=\"2*\" \/>    <thead>     <tr>      <th>Statistic<\/th>      <th>Description<\/th>      <th>Version<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>       <em>use_slave<\/em>      <\/td>      <td>       <p class=\"para\">         The semantics of this statistic has changed between 1.0.1 - 1.1.0.       <\/p>       <p class=\"para\">         The meaning for version 1.0.1 is as follows.         Number of statements considered as read-only by the built-in query analyzer.         Neither statements which begin with a SQL hint to force         use of slave nor statements directed to a slave by an user-defined         callback are included. The total number of statements sent to the slaves is         <em>use_slave<\/em> + <em>use_slave_sql_hint<\/em> +         <em>use_slave_callback<\/em>.        <\/p>        <p class=\"para\">         PECL\/mysqlnd_ms 1.1.0 introduces a new concept of chained filters. The         statistics is now set by the internal load balancing filter. With         version 1.1.0 the load balancing filter is always the last in the         filter chain, if used. In future versions a load balancing filter may be         followed by other filters causing another change in the meaning of         the statistic. If, in the future, a load balancing filter is followed         by another filter it is no longer guaranteed that the statement, which         increments <em>use_slave<\/em>, will be executed on the slaves.        <\/p>        <p class=\"para\">         The meaning for version 1.1.0 is as follows. Number of statements         sent to the slaves. Statements directed to a slave by the user filter         (an user-defined callback) are not included. The latter are counted by         <em>use_slave_callback<\/em>.        <\/p>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_master<\/em>      <\/td>      <td>       <p class=\"para\">         The semantics of this statistic has changed between 1.0.1 - 1.1.0.       <\/p>       <p class=\"para\">        The meaning for version 1.0.1 is as follows.        Number of statements not considered as read-only by the built-in query analyzer.        Neither statements which begin with a SQL hint to force        use of master nor statements directed to a master by an user-defined        callback are included. The total number of statements sent to the master is        <em>use_master<\/em> + <em>use_master_sql_hint<\/em> +        <em>use_master_callback<\/em>.       <\/p>       <p class=\"para\">         PECL\/mysqlnd_ms 1.1.0 introduces a new concept of chained filters. The         statictics is now set by the internal load balancing filter. With         version 1.1.0 the load balancing filter is always the last in the         filter chain, if used. In future versions a load balancing filter may be         followed by other filters causing another change in the meaning of         the statistic. If, in the future, a load balancing filter is followed         by another filter it is no longer guaranteed that the statement, which         increments <em>use_master<\/em>, will be executed on the slaves.        <\/p>        <p class=\"para\">         The meaning for version 1.1.0 is as follows. Number of statements         sent to the masters. Statements directed to a master by the user filter         (an user-defined callback) are not included. The latter are counted by         <em>use_master_callback<\/em>.        <\/p>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_slave_guess<\/em>      <\/td>      <td>       Number of statements the built-in query analyzer recommends sending to       a slave because they contain no SQL hint to force use of a       certain server. The recommendation may be overruled in the following.       It is not guaranteed whether the statement will be executed on a slave       or not. This is how often the internal <em>is_select<\/em>       function has guessed that a slave shall be used. Please, see also the       user space function <span class=\"function\">mysqlnd_ms_query_is_select<\/span>.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_master_guess<\/em>      <\/td>      <td>       Number of statements the built-in query analyzer recommends sending to       a master because they contain no SQL hint to force use of a       certain server. The recommendation may be overruled in the following.       It is not guaranteed whether the statement will be executed on a slave       or not. This is how often the internal <em>is_select<\/em>       function has guessed that a master shall be used. Please, see also the       user space function <span class=\"function\">mysqlnd_ms_query_is_select<\/span>.      <\/td>      <td>Since 1.1.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_slave_sql_hint<\/em>      <\/td>      <td>       Number of statements sent to a slave because statement begins with       the SQL hint to force use of slave.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_master_sql_hint<\/em>      <\/td>      <td>       Number of statements sent to a master because statement begins with       the SQL hint to force use of master.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_last_used_sql_hint<\/em>      <\/td>      <td>       Number of statements sent to server which has run the previous statement,       because statement begins with the SQL hint to force use of previously       used server.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_slave_callback<\/em>      <\/td>      <td>       Number of statements sent to a slave because an user-defined callback       has chosen a slave server for statement execution.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>use_master_callback<\/em>      <\/td>      <td>       Number of statements sent to a master because an user-defined callback       has chosen a master server for statement execution.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>non_lazy_connections_slave_success<\/em>      <\/td>      <td>       Number of successfully opened slave connections from       configurations not using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.       The total number of successfully opened slave connections       is <em>non_lazy_connections_slave_success<\/em> +       <em>lazy_connections_slave_success<\/em>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>non_lazy_connections_slave_failure<\/em>      <\/td>      <td>       Number of failed slave connection attempts from       configurations not using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.       The total number of failed slave connection attempts       is <em>non_lazy_connections_slave_failure<\/em> +       <em>lazy_connections_slave_failure<\/em>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>non_lazy_connections_master_success<\/em>      <\/td>      <td>       Number of successfully opened master connections from       configurations not using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.       The total number of successfully opened master connections       is <em>non_lazy_connections_master_success<\/em> +       <em>lazy_connections_master_success<\/em>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>non_lazy_connections_master_failure<\/em>      <\/td>      <td>       Number of failed master connection attempts from       configurations not using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.       The total number of failed master connection attempts       is <em>non_lazy_connections_master_failure<\/em> +       <em>lazy_connections_master_failure<\/em>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>lazy_connections_slave_success<\/em>      <\/td>      <td>       Number of successfully opened slave connections from       configurations using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>lazy_connections_slave_failure<\/em>      <\/td>      <td>       Number of failed slave connection attempts from       configurations using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>lazy_connections_master_success<\/em>      <\/td>      <td>       Number of successfully opened master connections from       configurations using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>lazy_connections_master_failure<\/em>      <\/td>      <td>       Number of failed master connection attempts from       configurations using       <em><a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.lazy-connections\" class=\"link\">lazy connections<\/a><\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>trx_autocommit_on<\/em>      <\/td>      <td>       Number of <em>autocommit<\/em> mode activations via API calls.       This figure may be used to monitor activity related to the plugin configuration       setting       <a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.trx-stickiness\" class=\"link\"><em>trx_stickiness<\/em><\/a>.       If, for example, you want to know if a certain API call invokes the       <em>mysqlnd<\/em> library function <em>trx_autocommit()<\/em>,       which is a requirement for       <a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.trx-stickiness\" class=\"link\"><em>trx_stickiness<\/em><\/a>,       you may call the user API function in question and check if the       statistic has changed. The statistic is modified only by the       plugins internal subclassed <em>trx_autocommit()<\/em>       method.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>trx_autocommit_off<\/em>      <\/td>      <td>       Number of <em>autocommit<\/em> mode deactivations via API calls.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>trx_master_forced<\/em>      <\/td>      <td>       Number of statements redirected to the master while       <a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.trx-stickiness\" class=\"link\"><em>trx_stickiness=master<\/em><\/a>       and <em>autocommit<\/em> mode is disabled.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>gtid_autocommit_injections_success<\/em>      <\/td>      <td>       Number of successful SQL injections in autocommit mode as part       of the plugins client-side       <a href=\"mysqlnd-ms.gtid.html\" class=\"link\">global transaction id emulation<\/a>.      <\/td>      <td>Since 1.2.0.<\/td>     <\/tr>     <tr>      <td>       <em>gtid_autocommit_injections_failure<\/em>      <\/td>      <td>       Number of failed SQL injections in autocommit mode as part       of the plugins client-side       <a href=\"mysqlnd-ms.gtid.html\" class=\"link\">global transaction id emulation<\/a>.      <\/td>      <td>Since 1.2.0.<\/td>     <\/tr>     <tr>      <td>       <em>gtid_commit_injections_success<\/em>      <\/td>      <td>       Number of successful SQL injections in commit mode as part       of the plugins client-side       <a href=\"mysqlnd-ms.gtid.html\" class=\"link\">global transaction id emulation<\/a>.      <\/td>      <td>Since 1.2.0.<\/td>     <\/tr>     <tr>      <td>       <em>gtid_commit_injections_failure<\/em>      <\/td>      <td>       Number of failed SQL injections in commit mode as part       of the plugins client-side       <a href=\"mysqlnd-ms.gtid.html\" class=\"link\">global transaction id emulation<\/a>.      <\/td>      <td>Since 1.2.0.<\/td>     <\/tr>     <tr>      <td>       <em>gtid_implicit_commit_injections_success<\/em>      <\/td>      <td>       Number of successful SQL injections when implicit commit is detected as part       of the plugins client-side       <a href=\"mysqlnd-ms.gtid.html\" class=\"link\">global transaction id emulation<\/a>.       Implicit commit happens, for example, when autocommit has been turned       off, a query is executed and autocommit is enabled again. In that case,       the statement will be committed by the server and SQL to maintain is       injected before the autocommit is re-enabled. Another sequence       causing an implicit commit is <em>begin()<\/em>,       <em>query()<\/em>, <em>begin()<\/em>. The second call       to <em>begin()<\/em> will implicitly commit the transaction       started by the first call to <em>begin()<\/em>.       <em>begin()<\/em> refers to internal library calls not actual       PHP user API calls.      <\/td>      <td>Since 1.2.0.<\/td>     <\/tr>     <tr>      <td>       <em>gtid_implicit_commit_injections_failure<\/em>      <\/td>      <td>       Number of failed SQL injections when implicit commit is detected as part       of the plugins client-side       <a href=\"mysqlnd-ms.gtid.html\" class=\"link\">global transaction id emulation<\/a>.       Implicit commit happens, for example, when autocommit has been turned       off, a query is executed and autocommit is enabled again. In that case,       the statement will be committed by the server and SQL to maintain is       injected before the autocommit is re-enabled.      <\/td>      <td>Since 1.2.0.<\/td>     <\/tr>     <tr>      <td>       <em>transient_error_retries<\/em>      <\/td>      <td>       How often an operation has been retried when a transient error was       detected. See also,       <a href=\"mysqlnd-ms.plugin-ini-json.html#ini.mysqlnd-ms-plugin-config-v2.transient_error\" class=\"link\"><em>transient_error<\/em><\/a>       plugin configuration file setting.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>fabric_sharding_lookup_servers_success<\/em>      <\/td>      <td>       Number of successful <em>sharding.lookup_servers<\/em>       remote procedure calls to MySQL Fabric.       A call is considered successful if the plugin could reach MySQL       Fabric and got any reply. The reply itself may or may not be       understood by the plugin. Success refers to the network transport       only. If the reply was not understood or indicates a valid error condition,       <em>fabric_sharding_lookup_servers_xml_failure<\/em>       gets incremented.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>fabric_sharding_lookup_servers_failure<\/em>      <\/td>      <td>       Number of failed <em>sharding.lookup_servers<\/em>       remote procedure calls to MySQL Fabric.       A remote procedure call is considered failed if there was a       network error in connecting to, writing to or reading from       MySQL Fabric.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>fabric_sharding_lookup_servers_time_total<\/em>      <\/td>      <td>       Time spent connecting to,writing to and reading from MySQL       Fabrich during the <em>sharding.lookup_servers<\/em>       remote procedure call. The value is aggregated for all calls. Time is       measured in microseconds.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>fabric_sharding_lookup_servers_bytes_total<\/em>      <\/td>      <td>       Total number of bytes received from MySQL Fabric in reply to       <em>sharding.lookup_servers<\/em> calls.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>fabric_sharding_lookup_servers_xml_failure<\/em>      <\/td>      <td>       How often a reply from MySQL Fabric to       <em>sharding.lookup_servers<\/em> calls was not understood.       Please note, the current experimental implementation does not       distinguish between valid errors returned and malformed replies.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_begin<\/em>      <\/td>      <td>       How many XA\/distributed transactions have been started       using <span class=\"function\">mysqlnd_ms_xa_begin<\/span>.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_commit_success<\/em>      <\/td>      <td>       How many XA\/distributed transactions have been successfully committed       using <span class=\"function\">mysqlnd_ms_xa_commit<\/span>.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_commit_failure<\/em>      <\/td>      <td>       How many XA\/distributed transactions failed to commit       during <span class=\"function\">mysqlnd_ms_xa_commit<\/span>.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_rollback_success<\/em>      <\/td>      <td>       How many XA\/distributed transactions have been successfully rolled back       using <span class=\"function\">mysqlnd_ms_xa_rollback<\/span>. The figure does       not include implict rollbacks performed as a result of       <span class=\"function\">mysqlnd_ms_xa_commit<\/span> failure.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_rollback_failure<\/em>      <\/td>      <td>       How many XA\/distributed transactions could not be rolled back.       This includes failures of <span class=\"function\">mysqlnd_ms_xa_rollback<\/span>       but also failured during rollback when closing a connection, if       <em>rollback_on_close<\/em> is set. Please, see also       <em>xa_rollback_on_close<\/em> below.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_participants<\/em>      <\/td>      <td>       Total number of participants in any XA transaction started with       <span class=\"function\">mysqlnd_ms_xa_begin<\/span>.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>xa_rollback_on_close<\/em>      <\/td>      <td>       How many XA transactions have been rolled back implicitly when       a connection was close and <em>rollback_on_close<\/em> is set.       Depending on your coding policies, this may hint a flaw in your code as       you may prefer to explicitly clean up resources.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>pool_masters_total<\/em>      <\/td>      <td>       Number of master servers (connections) in the internal connection pool.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>pool_slaves_total<\/em>      <\/td>      <td>       Number of slave servers (connections) in the internal connection pool.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>pool_masters_active<\/em>      <\/td>      <td>       Number of master servers (connections) from the internal connection pool       which are currently used for picking a connection.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>pool_slaves_active<\/em>      <\/td>      <td>       Number of slave servers (connections) from the internal connection pool       which are currently used for picking a connection.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>       <tr>      <td>       <em>pool_updates<\/em>      <\/td>      <td>       How often the active connection list has been replaced and a       new set of master and slave servers had been installed.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>pool_master_reactivated<\/em>      <\/td>      <td>       How often a master connection has been reused after being       flushed from the active list.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>     <tr>      <td>       <em>pool_slave_reactivated<\/em>      <\/td>      <td>       How often a slave connection has been reused after being       flushed from the active list.      <\/td>      <td>Since 1.6.0.<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL mysqlnd_ms >= 1.0.0"},"mysqlnd_ms_match_wild":{"id":"function.mysqlnd-ms-match-wild","purpose":"Finds whether a table name matches a wildcard pattern or not","prototype":"bool mysqlnd_ms_match_wild(string $table_name, string $wildcard)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> <em>table_name<\/em> is   matched by <em>wildcard<\/em>.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd_ms >= 1.1.0"},"mysqlnd_ms_query_is_select":{"id":"function.mysqlnd-ms-query-is-select","purpose":"Find whether to send the query to the master, the slave or the last used MySQL server","prototype":"int mysqlnd_ms_query_is_select(string $query)","return":"<p class=\"para\">   A return value of <strong><code>MYSQLND_MS_QUERY_USE_MASTER<\/code><\/strong>   indicates that the query should be send to the MySQL replication   master server. The function returns a value of   <strong><code>MYSQLND_MS_QUERY_USE_SLAVE<\/code><\/strong> if the query can be run   on a slave because it is considered read-only. A value of   <strong><code>MYSQLND_MS_QUERY_USE_LAST_USED<\/code><\/strong> is returned to recommend   running the query on the last used server. This can either be a MySQL   replication master server or a MySQL replication slave server.  <\/p>  <p class=\"para\">   If read write splitting has been disabled by setting   <em>mysqlnd_ms.disable_rw_split<\/em>, the function will   always return <strong><code>MYSQLND_MS_QUERY_USE_MASTER<\/code><\/strong> or   <strong><code>MYSQLND_MS_QUERY_USE_LAST_USED<\/code><\/strong>.  <\/p>","versions":"PECL mysqlnd_ms >= 1.0.0"},"mysqlnd_ms_set_qos":{"id":"function.mysqlnd-ms-set-qos","purpose":"Sets the quality of service needed from the cluster","prototype":"bool mysqlnd_ms_set_qos(mixed $connection, int $service_level [, int $service_level_option = '' [, mixed $option_value = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the connections service level   has been switched to the requested. Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd_ms < 1.2.0"},"mysqlnd_ms_set_user_pick_server":{"id":"function.mysqlnd-ms-set-user-pick-server","purpose":"Sets a callback for user-defined read\/write splitting","prototype":"bool mysqlnd_ms_set_user_pick_server(string $function)","return":"<p class=\"para\">   Host to run the query on. The host URI is to be taken from the   master and slave connection lists passed to the callback function.   If callback returns a value neither found in the master nor in the slave   connection lists the plugin will fallback to the second pick method configured   via the <em>pick[]<\/em> setting in the plugin configuration file.   If not second pick method is given, the plugin falls back to the build-in   default pick method for server selection.  <\/p>","versions":"PECL mysqlnd_ms < 1.1.0"},"mysqlnd_ms_xa_begin":{"id":"function.mysqlnd-ms-xa-begin","purpose":"Starts a distributed\/XA transaction among MySQL servers","prototype":"int mysqlnd_ms_xa_begin(mixed $connection, string $gtrid [, int $timeout = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there is no open local or global transaction and a new global   transaction can be started. Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd_ms < 1.6.0"},"mysqlnd_ms_xa_commit":{"id":"function.mysqlnd-ms-xa-commit","purpose":"Commits a distributed\/XA transaction among MySQL servers","prototype":"int mysqlnd_ms_xa_commit(mixed $connection, string $gtrid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the global transaction has been committed. Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd_ms < 1.6.0"},"mysqlnd_ms_xa_gc":{"id":"function.mysqlnd-ms-xa-gc","purpose":"Garbage collects unfinished XA transactions after severe errors","prototype":"int mysqlnd_ms_xa_gc(mixed $connection [, string $gtrid = '' [, bool $ignore_max_retries = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if garbage collection was successful. Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd_ms < 1.6.0"},"mysqlnd_ms_xa_rollback":{"id":"function.mysqlnd-ms-xa-rollback","purpose":"Rolls back a distributed\/XA transaction among MySQL servers","prototype":"int mysqlnd_ms_xa_rollback(mixed $connection, string $gtrid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the global transaction has been rolled back. Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd_ms < 1.6.0"},"mysqlnd_qc_clear_cache":{"id":"function.mysqlnd-qc-clear-cache","purpose":"Flush all cache contents","prototype":"bool mysqlnd_qc_clear_cache()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   A return value of   <strong><code>FALSE<\/code><\/strong>   indicates that flushing all cache contents has   failed or the operation is not supported by   the active storage handler. Applications must   not expect that calling the function will always   flush the cache.  <\/p>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_get_available_handlers":{"id":"function.mysqlnd-qc-get-available-handlers","purpose":"Returns a list of available storage handler","prototype":"array mysqlnd_qc_get_available_handlers()","return":"<p class=\"para\">   Returns an array of available built-in storage handler.   For each storage handler the version number and version string   is given.  <\/p>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_get_cache_info":{"id":"function.mysqlnd-qc-get-cache-info","purpose":"Returns information on the current handler, the number of cache entries and cache entries, if available","prototype":"array mysqlnd_qc_get_cache_info()","return":"<p class=\"para\">   Returns information on the current handler, the number of cache entries and   cache entries, if available. If and what data will be returned for the cache   entries is subject to the active storage handler.   Storage handler are free to return any data. Storage handler are   recommended to return at least the data provided by the default handler,   if technically possible.  <\/p>  <p class=\"para\">   The scope of the information is the PHP process. Depending on the PHP deployment   model a process may serve one or more web requests.  <\/p>  <p class=\"para\">   Values are aggregated for all cache activities on a per storage handler basis.   It is not possible to tell how much queries originating from   <em>mysqli<\/em>, <em>PDO_MySQL<\/em> or   <em>mysql<\/em>.API calls have contributed to the aggregated data values. Use   <span class=\"function\">mysqlnd_qc_get_core_stats<\/span>   to get timing data aggregated for all storage handlers.  <\/p>  <p class=\"para\">   Array of cache information  <\/p>  <p class=\"para\">   <dl>         <dt>      <code class=\"parameter\">handler<\/code>      <span class=\"type\">string<\/span>     <\/dt>     <dd>      <p class=\"para\">       The active storage handler.      <\/p>      <p class=\"para\">       All storage handler. Since 1.0.0.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">handler_version<\/code>      <span class=\"type\">string<\/span>     <\/dt>     <dd>      <p class=\"para\">       The version of the active storage handler.      <\/p>      <p class=\"para\">       All storage handler. Since 1.0.0.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">num_entries<\/code>      <span class=\"type\">int<\/span>     <\/dt>     <dd>      <p class=\"para\">       The number of cache entries. The value depends on the storage handler in use.      <\/p>      <p class=\"para\">       The default, APC and SQLite storage handler provide the actual       number of cache entries.      <\/p>      <p class=\"para\">       The MEMCACHE storage handler always returns <em>0<\/em>.       MEMCACHE does not support counting the number of cache entries.      <\/p>      <p class=\"para\">       If a user defined handler is used, the number of       entries of the <em>data<\/em> property is reported.      <\/p>      <p class=\"para\">       Since 1.0.0.      <\/p>     <\/dd>             <dt>      <code class=\"parameter\">data<\/code>      <span class=\"type\">array<\/span>     <\/dt>     <dd>      <p class=\"para\">       The version of the active storage handler.      <\/p>      <p class=\"para\">       Additional storage handler dependent data on the cache entries.       Storage handler are requested to provide similar and comparable       information. A user defined storage handler is free to return any data.      <\/p>      <p class=\"para\">       Since 1.0.0.      <\/p>      <p class=\"para\">       The following information is provided by the default storage handler       for the <em>data<\/em> property.      <\/p>      <p class=\"para\">       The <em>data<\/em>       property holds a hash. The hash is indexed by the internal       cache entry identifier of the storage handler. The cache entry identifier       is human-readable and contains the query string leading to the cache entry.       Please, see also the example below. The following data is given for       every cache entry.      <\/p>      <p class=\"para\">       <dl>                 <dt>          <code class=\"parameter\">statistics<\/code>          <span class=\"type\">array<\/span>         <\/dt>         <dd>          <p class=\"para\">           Statistics of the cache entry.          <\/p>          <p class=\"para\">            Since 1.0.0.          <\/p>          <table class=\"doctable informaltable\">                       <col width=\"1*\" \/>            <col width=\"7*\" \/>            <col width=\"2*\" \/>            <thead>             <tr>              <th>Property<\/th>              <th>Description<\/th>              <th>Version<\/th>             <\/tr>            <\/thead>            <tbody class=\"tbody\">             <tr>              <td>               <em>rows<\/em>              <\/td>              <td>               Number of rows of the cached result set.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>stored_size<\/em>              <\/td>              <td>               The size of the cached result set in bytes. This is the size               of the payload. The value is not suited for calculating the               total memory consumption of all cache entries including the               administrative overhead of the cache entries.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>cache_hits<\/em>              <\/td>              <td>               How often the cached entry has been returned.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>run_time<\/em>              <\/td>              <td>               Run time of the statement to which the cache entry belongs.               This is the run time of the uncached statement. It is the time               between sending the statement to MySQL receiving a reply from MySQL.               Run time saved by using the query cache plugin can be calculated               like this: <em>cache_hits * ((run_time - avg_run_time) + (store_time - avg_store_time))<\/em>.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>store_time<\/em>              <\/td>              <td>               Store time of the statements result set to which the cache entry belongs.               This is the time it took to fetch and store the results of the uncached               statement.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>min_run_time<\/em>              <\/td>              <td>               Minimum run time of the cached statement. How long it took               to find the statement in the cache.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>min_store_time<\/em>              <\/td>              <td>               Minimum store time of the cached statement. The time taken               for fetching the cached result set from the storage medium and               decoding              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>avg_run_time<\/em>              <\/td>              <td>               Average run time of the cached statement.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>avg_store_time<\/em>              <\/td>              <td>               Average store time of the cached statement.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>max_run_time<\/em>              <\/td>              <td>               Average run time of the cached statement.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>max_store_time<\/em>              <\/td>              <td>               Average store time of the cached statement.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>valid_until<\/em>              <\/td>              <td>               Timestamp when the cache entry expires.              <\/td>              <td>Since 1.1.0.<\/td>             <\/tr>            <\/tbody>                     <\/table>         <\/dd>                         <dt>          <code class=\"parameter\">metadata<\/code>          <span class=\"type\">array<\/span>         <\/dt>         <dd>          <p class=\"para\">           Metadata of the cache entry.           This is the metadata provided by MySQL together with the           result set of the statement in question. Different versions           of the MySQL server may return different metadata. Unlike with           some of the PHP MySQL extensions no attempt is made to hide           MySQL server version dependencies and version details from the           caller. Please, refer to the MySQL C API documentation that           belongs to the MySQL server in use for further details.          <\/p>          <p class=\"para\">           The metadata list contains one entry for every column.          <\/p>          <p class=\"para\">            Since 1.0.0.          <\/p>          <table class=\"doctable informaltable\">                       <col width=\"1*\" \/>            <col width=\"7*\" \/>            <col width=\"2*\" \/>            <thead>             <tr>              <th>Property<\/th>              <th>Description<\/th>              <th>Version<\/th>             <\/tr>            <\/thead>            <tbody class=\"tbody\">             <tr>              <td>               <em>name<\/em>              <\/td>              <td>               The field name. Depending on the MySQL version this               may be the fields alias name.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>org_name<\/em>              <\/td>              <td>               The field name.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>table<\/em>              <\/td>              <td>               The table name. If an alias name was used for the table, this               usually holds the alias name.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>org_table<\/em>              <\/td>              <td>               The table name.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>db<\/em>              <\/td>              <td>               The database\/schema name.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>max_length<\/em>              <\/td>              <td>               The maximum width of the field. Details may vary by MySQL server version.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>length<\/em>              <\/td>              <td>               The width of the field. Details may vary by MySQL server version.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>             <tr>              <td>               <em>type<\/em>              <\/td>              <td>               The data type of the field. Details may vary by the MySQL server in use.               This is the MySQL C API type constants value. It is recommended               to use type constants provided by the <em>mysqli<\/em> extension               to test for its meaning. You should not test for certain type values               by comparing with certain numbers.              <\/td>              <td>Since 1.0.0.<\/td>             <\/tr>            <\/tbody>                     <\/table>         <\/dd>               <\/dl>      <\/p>      <p class=\"para\">       The APC storage handler returns the same information       for the <em>data<\/em> property but no <em>metadata<\/em>.       The <em>metadata<\/em> of a cache entry is set to <em>NULL<\/em>.      <\/p>      <p class=\"para\">       The MEMCACHE storage handler does not fill the <em>data<\/em> property.       Statistics are not available on a per cache entry basis with the MEMCACHE storage       handler.      <\/p>      <p class=\"para\">       A user defined storage handler is free to provide any data.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_get_core_stats":{"id":"function.mysqlnd-qc-get-core-stats","purpose":"Statistics collected by the core of the query cache","prototype":"array mysqlnd_qc_get_core_stats()","return":"<p class=\"para\">      Array of core statistics  <\/p>  <table class=\"doctable informaltable\">       <col style=\"width: 10%;\" \/>    <col style=\"width: 70%;\" \/>    <col style=\"width: 20%;\" \/>    <thead>     <tr>      <th>Statistic<\/th>      <th>Description<\/th>      <th>Version<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>       <em>cache_hit<\/em>      <\/td>      <td>       Statement is considered cacheable and cached data has been reused.       Statement is considered cacheable and a cache miss happened but       the statement got cached by someone else while we process it and thus       we can fetch the result from the refreshed cache.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>cache_miss<\/em>      <\/td>      <td>       Statement is considered cacheable...       <ul class=\"itemizedlist\">        <li class=\"listitem\">         <p class=\"para\">          ... and has been added to the cache         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          ... but the          <em>PHP<\/em>          configuration directive setting of          <em>mysqlnd_qc.cache_no_table = 1<\/em> has prevented caching.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">           ... but an unbuffered result set is requested.         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          ... but a buffered result set was empty.         <\/p>        <\/li>       <\/ul>      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>cache_put<\/em>      <\/td>      <td>       Statement is considered cacheable and has been added to the cache.       Take care when calculating derived statistics. Storage handler       with a storage life time beyond process scope may report       <em>cache_put = 0<\/em> together with       <em>cache_hit &gt; 0<\/em>, if another process has filled       the cache. You may want to use       <em>num_entries<\/em> from       <span class=\"function\">mysqlnd_qc_get_cache_info<\/span> if the handler       supports it (       <em>default<\/em>,       <em>APC<\/em>).      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_should_cache<\/em>      <\/td>      <td>       Statement is considered cacheable based on query string analysis.       The statement may or may not be added to the cache. See also       <em>cache_put<\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_should_not_cache<\/em>      <\/td>      <td>       Statement is considered not cacheable based on query string analysis.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_not_cached<\/em>      <\/td>      <td>       Statement is considered not cacheable or it is       considered cachable but the storage handler has not returned a       hash key for it.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_could_cache<\/em>      <\/td>      <td>       Statement is considered cacheable...       <ul class=\"itemizedlist\">        <li class=\"listitem\">         <p class=\"para\">          ... and statement has been run without errors         <\/p>        <\/li>        <li class=\"listitem\">         <p class=\"para\">          ... and meta data shows at least one column in the result set         <\/p>        <\/li>       <\/ul>       The statement may or may not be in the cache already.       It may or may not be added to the cache later on.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_found_in_cache<\/em>      <\/td>      <td>       Statement is considered cacheable and we have found it in the cache       but we have not replayed the cached data yet and we have not send       the result set to the client yet. This is not considered       a cache hit because the client might not fetch the result or       the cached data may be faulty.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_uncached_other<\/em>      <\/td>      <td>       Statement is considered cacheable and it may or may not be in       the cache already but either replaying cached data has failed,       no result set is available or some other error has happened.      <\/td>     <\/tr>     <tr>      <td>       <em>query_uncached_no_table<\/em>      <\/td>      <td>       Statement has not been cached because the result set has at least       one column which has no table name in its meta data. An example of       such a query is       <em>SELECT SLEEP(1)<\/em>. To cache those       statements you have to change default value of the PHP configuration directive       <em>mysqlnd_qc.cache_no_table<\/em> and set       <em>mysqlnd_qc.cache_no_table = 1<\/em>. Often, it is not       desired to cache such statements.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_uncached_use_result<\/em>      <\/td>      <td>       Statement would have been cached if a buffered result set       had been used. The situation is also considered as a cache miss and       <em>cache_miss<\/em> will be incremented as well.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_aggr_run_time_cache_hit<\/em>      <\/td>      <td>       Aggregated run time (ms) of all cached queries.       Cached queries are those which have incremented       <em>cache_hit<\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_aggr_run_time_cache_put<\/em>      <\/td>      <td>       Aggregated run time (ms) of all uncached queries that       have been put into the cache. See also       <em>cache_put<\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_aggr_run_time_total<\/em>      <\/td>      <td>       Aggregated run time (ms) of all uncached and cached queries       that have been inspected and executed by the query cache.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_aggr_store_time_cache_hit<\/em>      <\/td>      <td>       Aggregated store time (ms) of all cached queries.       Cached queries are those which have incremented       <em>cache_hit<\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_aggr_store_time_cache_put<\/em>      <\/td>      <td>       Aggregated store time (       <em>ms<\/em>) of all uncached queries that       have been put into the cache. See also       <em>cache_put<\/em>.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>query_aggr_store_time_total<\/em>      <\/td>      <td>       Aggregated store time (ms) of all uncached and cached queries       that have been inspected and executed by the query cache.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>receive_bytes_recorded<\/em>      <\/td>      <td>       Recorded incoming network traffic (       <em>bytes<\/em>) send from MySQL to PHP.       The traffic may or may not have been added to the cache. The       traffic is the total for all queries regardless if cached or not.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>receive_bytes_replayed<\/em>      <\/td>      <td>       Network traffic replayed during cache. This is the total amount of       incoming traffic saved because of the usage of the query cache plugin.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>send_bytes_recorded<\/em>      <\/td>      <td>       Recorded outgoing network traffic (       <em>bytes<\/em>) send from MySQL to PHP.       The traffic may or may not have been added to the cache. The       traffic is the total for all queries regardless if cached or not.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>send_bytes_replayed<\/em>      <\/td>      <td>       Network traffic replayed during cache. This is the total amount of       outgoing traffic saved because of the usage of the query cache plugin.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>slam_stale_refresh<\/em>      <\/td>      <td>       Number of cache misses which triggered serving stale data until       the client causing the cache miss has refreshed the cache entry.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>     <tr>      <td>       <em>slam_stale_hit<\/em>      <\/td>      <td>       Number of cache hits while a stale cache entry gets refreshed.      <\/td>      <td>Since 1.0.0.<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_get_normalized_query_trace_log":{"id":"function.mysqlnd-qc-get-normalized-query-trace-log","purpose":"Returns a normalized query trace log for each query inspected by the query cache","prototype":"array mysqlnd_qc_get_normalized_query_trace_log()","return":"<p class=\"para\">   An array of query log. Every list entry contains   the normalized query stringand further detail information.  <\/p>  <table class=\"doctable informaltable\">       <col width=\"1*\" \/>    <col width=\"9*\" \/>    <thead>     <tr>      <th>Key<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>       <em>query<\/em>      <\/td>      <td>       Normalized statement string.      <\/td>     <\/tr>     <tr>      <td>       <em>occurences<\/em>      <\/td>      <td>       How many statements have matched the normalized statement       string in addition to the one which has created the log entry.       The value is zero if a statement has been normalized, its normalized       representation has been added to the log but no further queries inspected       by PECL\/mysqlnd_qc have the same normalized statement string.      <\/td>     <\/tr>     <tr>      <td>       <em>eligible_for_caching<\/em>      <\/td>      <td>       Whether the statement could be cached. An statement eligible for       caching has not necessarily been cached. It not possible to tell       for sure if or how many cached statement have contributed to the       aggregated normalized statement log entry. However, comparing       the minimum and average run time one can make an educated guess.      <\/td>     <\/tr>     <tr>      <td>       <em>avg_run_time<\/em>      <\/td>      <td>       The average run time of all queries contributing to the       query log entry. The run time is the time between sending the       query statement to MySQL and receiving an answer from MySQL.      <\/td>     <\/tr>     <tr>      <td>       <em>avg_store_time<\/em>      <\/td>      <td>       The average store time of all queries contributing to the       query log entry. The store time is the time needed to fetch       a statements result set from the server to the client and,       storing it on the client.      <\/td>     <\/tr>     <tr>      <td>       <em>min_run_time<\/em>      <\/td>      <td>       The minimum run time of all queries contributing to the       query log entry.      <\/td>     <\/tr>     <tr>      <td>       <em>min_store_time<\/em>      <\/td>      <td>       The minimum store time of all queries contributing to the       query log entry.      <\/td>     <\/tr>     <tr>      <td>       <em>max_run_time<\/em>      <\/td>      <td>       The maximum run time of all queries contributing to the       query log entry.      <\/td>     <\/tr>     <tr>      <td>       <em>max_store_time<\/em>      <\/td>      <td>       The maximum store time of all queries contributing to the       query log entry.      <\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_get_query_trace_log":{"id":"function.mysqlnd-qc-get-query-trace-log","purpose":"Returns a backtrace for each query inspected by the query cache","prototype":"array mysqlnd_qc_get_query_trace_log()","return":"<p class=\"para\">   An array of query backtrace. Every list entry contains   the query string, a backtrace and further detail information.  <\/p>  <table class=\"doctable informaltable\">       <col width=\"1*\" \/>    <col width=\"9*\" \/>    <thead>     <tr>      <th>Key<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>       <em>query<\/em>      <\/td>      <td>              Query string.      <\/td>     <\/tr>     <tr>      <td>       <em>origin<\/em>      <\/td>      <td>       Code backtrace.      <\/td>     <\/tr>     <tr>      <td>       <em>run_time<\/em>      <\/td>      <td>       Query run time in milliseconds. The collection of       all times and the necessary       <em>gettimeofday<\/em>       system calls can be disabled by setting the PHP configuration       directive       <em>mysqlnd_qc.time_statistics<\/em> to       <em>0<\/em>      <\/td>     <\/tr>     <tr>      <td>       <em>store_time<\/em>      <\/td>      <td>       Query result set store time in milliseconds. The collection of       all times and the necessary       <em>gettimeofday<\/em>       system calls can be disabled by setting the PHP configuration       directive       <em>mysqlnd_qc.time_statistics<\/em> to       <em>0<\/em>      <\/td>     <\/tr>     <tr>      <td>       <em>eligible_for_caching<\/em>      <\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if query is cacheable otherwise       <strong><code>FALSE<\/code><\/strong>.      <\/td>     <\/tr>     <tr>      <td>       <em>no_table<\/em>      <\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if the query has generated a result       set and at least one column from the result set has no table       name set in its metadata. This is usually the case with       queries which one probably do not want to cache such as       <em>SELECT SLEEP(1)<\/em>. By default any such query       will not be added to the cache. See also PHP configuration directive       <em>mysqlnd_qc.cache_no_table<\/em>.      <\/td>     <\/tr>     <tr>      <td>       <em>was_added<\/em>      <\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if the query result has been put into       the cache, otherwise       <strong><code>FALSE<\/code><\/strong>.      <\/td>     <\/tr>     <tr>      <td>       <em>was_already_in_cache<\/em>      <\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if the query result would have been       added to the cache if it was not already in the cache (cache hit).       Otherwise       <strong><code>FALSE<\/code><\/strong>.      <\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_set_cache_condition":{"id":"function.mysqlnd-qc-set-cache-condition","purpose":"Set conditions for automatic caching","prototype":"bool mysqlnd_qc_set_cache_condition(int $condition_type, mixed $condition, mixed $condition_option)","return":"<p class=\"para\">   Returns TRUE on success or FALSE on FAILURE.  <\/p>","versions":"PECL mysqlnd_qc >= 1.1.0"},"mysqlnd_qc_set_is_select":{"id":"function.mysqlnd-qc-set-is-select","purpose":"Installs a callback which decides whether a statement is cached","prototype":"mixed mysqlnd_qc_set_is_select(string $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_set_storage_handler":{"id":"function.mysqlnd-qc-set-storage-handler","purpose":"Change current storage handler","prototype":"bool mysqlnd_qc_set_storage_handler(string $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If changing the storage handler fails a catchable fatal error will   be thrown. The query cache cannot operate if the previous storage   handler has been shutdown but no new storage handler has been installed.  <\/p>","versions":"PECL mysqlnd_qc >= 1.0.0"},"mysqlnd_qc_set_user_handlers":{"id":"function.mysqlnd-qc-set-user-handlers","purpose":"Sets the callback functions for a user-defined procedural storage handler","prototype":"bool mysqlnd_qc_set_user_handlers(string $get_hash, string $find_query_in_cache, string $return_to_cache, string $add_query_to_cache_if_not_exists, string $query_is_select, string $update_query_run_time_stats, string $get_stats, string $clear_cache)","return":"<p class=\"para\">   Returns TRUE on success or FALSE on FAILURE.  <\/p>","versions":"PECL mysqlnd_qc >= 1.0.0"},"MysqlndUhConnection::changeUser":{"id":"mysqlnduhconnection.changeuser","purpose":"Changes the user of the specified mysqlnd database connection","prototype":"bool MysqlndUhConnection::changeUser(mysqlnd_connection $connection, string $user, string $password, string $database, bool $silent, int $passwd_len)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::charsetName":{"id":"mysqlnduhconnection.charsetname","purpose":"Returns the default character set for the database connection","prototype":"string MysqlndUhConnection::charsetName(mysqlnd_connection $connection)","return":"<p class=\"para\">   The default character set.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::close":{"id":"mysqlnduhconnection.close","purpose":"Closes a previously opened database connection","prototype":"bool MysqlndUhConnection::close(mysqlnd_connection $connection, int $close_type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::connect":{"id":"mysqlnduhconnection.connect","purpose":"Open a new connection to the MySQL server","prototype":"bool MysqlndUhConnection::connect(mysqlnd_connection $connection, string $host, string $use\", string $password, string $database, int $port, string $socket, int $mysql_flags)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::__construct":{"id":"mysqlnduhconnection.construct","purpose":"The __construct purpose","prototype":" MysqlndUhConnection::__construct()","return":"<p class=\"para\">  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::endPSession":{"id":"mysqlnduhconnection.endpsession","purpose":"End a persistent connection","prototype":"bool MysqlndUhConnection::endPSession(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::escapeString":{"id":"mysqlnduhconnection.escapestring","purpose":"Escapes special characters in a string for use in an SQL statement,   taking into account the current charset of the connection","prototype":"string MysqlndUhConnection::escapeString(mysqlnd_connection $connection, string $escape_string)","return":"<p class=\"para\">   The escaped string.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getAffectedRows":{"id":"mysqlnduhconnection.getaffectedrows","purpose":"Gets the number of affected rows in a previous MySQL operation","prototype":"int MysqlndUhConnection::getAffectedRows(mysqlnd_connection $connection)","return":"<p class=\"para\">   Number of affected rows.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getErrorNumber":{"id":"mysqlnduhconnection.geterrornumber","purpose":"Returns the error code for the most recent function call","prototype":"int MysqlndUhConnection::getErrorNumber(mysqlnd_connection $connection)","return":"<p class=\"para\">   Error code for the most recent function call.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getErrorString":{"id":"mysqlnduhconnection.geterrorstring","purpose":"Returns a string description of the last error","prototype":"string MysqlndUhConnection::getErrorString(mysqlnd_connection $connection)","return":"<p class=\"para\">   Error string for the most recent function call.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getFieldCount":{"id":"mysqlnduhconnection.getfieldcount","purpose":"Returns the number of columns for the most recent query","prototype":"int MysqlndUhConnection::getFieldCount(mysqlnd_connection $connection)","return":"<p class=\"para\">   Number of columns.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getHostInformation":{"id":"mysqlnduhconnection.gethostinformation","purpose":"Returns a string representing the type of connection used","prototype":"string MysqlndUhConnection::getHostInformation(mysqlnd_connection $connection)","return":"<p class=\"para\">   Connection description.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getLastInsertId":{"id":"mysqlnduhconnection.getlastinsertid","purpose":"Returns the auto generated id used in the last query","prototype":"int MysqlndUhConnection::getLastInsertId(mysqlnd_connection $connection)","return":"<p class=\"para\">   Last insert id.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getLastMessage":{"id":"mysqlnduhconnection.getlastmessage","purpose":"Retrieves information about the most recently executed query","prototype":"void MysqlndUhConnection::getLastMessage(mysqlnd_connection $connection)","return":"<p class=\"para\">   Last message. Trying to return a string longer than 511 bytes   will cause an error of the type <em>E_WARNING<\/em> and   result in the string being truncated.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getProtocolInformation":{"id":"mysqlnduhconnection.getprotocolinformation","purpose":"Returns the version of the MySQL protocol used","prototype":"string MysqlndUhConnection::getProtocolInformation(mysqlnd_connection $connection)","return":"<p class=\"para\">   The protocol version.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getServerInformation":{"id":"mysqlnduhconnection.getserverinformation","purpose":"Returns the version of the MySQL server","prototype":"string MysqlndUhConnection::getServerInformation(mysqlnd_connection $connection)","return":"<p class=\"para\">   The server version.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getServerStatistics":{"id":"mysqlnduhconnection.getserverstatistics","purpose":"Gets the current system status","prototype":"string MysqlndUhConnection::getServerStatistics(mysqlnd_connection $connection)","return":"<p class=\"para\">   The system status message.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getServerVersion":{"id":"mysqlnduhconnection.getserverversion","purpose":"Returns the version of the MySQL server as an integer","prototype":"int MysqlndUhConnection::getServerVersion(mysqlnd_connection $connection)","return":"<p class=\"para\">   The MySQL version.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getSqlstate":{"id":"mysqlnduhconnection.getsqlstate","purpose":"Returns the SQLSTATE error from previous MySQL operation","prototype":"string MysqlndUhConnection::getSqlstate(mysqlnd_connection $connection)","return":"<p class=\"para\">   The SQLSTATE code.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getStatistics":{"id":"mysqlnduhconnection.getstatistics","purpose":"Returns statistics about the client connection","prototype":"array MysqlndUhConnection::getStatistics(mysqlnd_connection $connection)","return":"<p class=\"para\">   Connection statistics collected by mysqlnd.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getThreadId":{"id":"mysqlnduhconnection.getthreadid","purpose":"Returns the thread ID for the current connection","prototype":"int MysqlndUhConnection::getThreadId(mysqlnd_connection $connection)","return":"<p class=\"para\">   Connection thread id.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::getWarningCount":{"id":"mysqlnduhconnection.getwarningcount","purpose":"Returns the number of warnings from the last query for the given link","prototype":"int MysqlndUhConnection::getWarningCount(mysqlnd_connection $connection)","return":"<p class=\"para\">   Number of warnings.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::init":{"id":"mysqlnduhconnection.init","purpose":"Initialize mysqlnd connection","prototype":"bool MysqlndUhConnection::init(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::killConnection":{"id":"mysqlnduhconnection.killconnection","purpose":"Asks the server to kill a MySQL thread","prototype":"bool MysqlndUhConnection::killConnection(mysqlnd_connection $connection, int $pid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::listFields":{"id":"mysqlnduhconnection.listfields","purpose":"List MySQL table fields","prototype":"array MysqlndUhConnection::listFields(mysqlnd_connection $connection, string $table, string $achtung_wild)","return":"<p class=\"para\">  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::listMethod":{"id":"mysqlnduhconnection.listmethod","purpose":"Wrapper for assorted list commands","prototype":"void MysqlndUhConnection::listMethod(mysqlnd_connection $connection, string $query, string $achtung_wild, string $par1)","return":"<p class=\"para\">   TODO  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::moreResults":{"id":"mysqlnduhconnection.moreresults","purpose":"Check if there are any more query results from a multi query","prototype":"bool MysqlndUhConnection::moreResults(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::nextResult":{"id":"mysqlnduhconnection.nextresult","purpose":"Prepare next result from multi_query","prototype":"bool MysqlndUhConnection::nextResult(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::ping":{"id":"mysqlnduhconnection.ping","purpose":"Pings a server connection, or tries to reconnect if the connection has gone down","prototype":"bool MysqlndUhConnection::ping(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::query":{"id":"mysqlnduhconnection.query","purpose":"Performs a query on the database","prototype":"bool MysqlndUhConnection::query(mysqlnd_connection $connection, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::queryReadResultsetHeader":{"id":"mysqlnduhconnection.queryreadresultsetheader","purpose":"Read a result set header","prototype":"bool MysqlndUhConnection::queryReadResultsetHeader(mysqlnd_connection $connection, mysqlnd_statement $mysqlnd_stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::reapQuery":{"id":"mysqlnduhconnection.reapquery","purpose":"Get result from async query","prototype":"bool MysqlndUhConnection::reapQuery(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::refreshServer":{"id":"mysqlnduhconnection.refreshserver","purpose":"Flush or reset tables and caches","prototype":"bool MysqlndUhConnection::refreshServer(mysqlnd_connection $connection, int $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::restartPSession":{"id":"mysqlnduhconnection.restartpsession","purpose":"Restart a persistent mysqlnd connection","prototype":"bool MysqlndUhConnection::restartPSession(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::selectDb":{"id":"mysqlnduhconnection.selectdb","purpose":"Selects the default database for database queries","prototype":"bool MysqlndUhConnection::selectDb(mysqlnd_connection $connection, string $database)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::sendClose":{"id":"mysqlnduhconnection.sendclose","purpose":"Sends a close command to MySQL","prototype":"bool MysqlndUhConnection::sendClose(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::sendQuery":{"id":"mysqlnduhconnection.sendquery","purpose":"Sends a query to MySQL","prototype":"bool MysqlndUhConnection::sendQuery(mysqlnd_connection $connection, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::serverDumpDebugInformation":{"id":"mysqlnduhconnection.serverdumpdebuginformation","purpose":"Dump debugging information into the log for the MySQL server","prototype":"bool MysqlndUhConnection::serverDumpDebugInformation(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::setAutocommit":{"id":"mysqlnduhconnection.setautocommit","purpose":"Turns on or off auto-committing database modifications","prototype":"bool MysqlndUhConnection::setAutocommit(mysqlnd_connection $connection, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.1-alpha"},"MysqlndUhConnection::setCharset":{"id":"mysqlnduhconnection.setcharset","purpose":"Sets the default client character set","prototype":"bool MysqlndUhConnection::setCharset(mysqlnd_connection $connection, string $charset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::setClientOption":{"id":"mysqlnduhconnection.setclientoption","purpose":"Sets a client option","prototype":"bool MysqlndUhConnection::setClientOption(mysqlnd_connection $connection, int $option, int $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::setServerOption":{"id":"mysqlnduhconnection.setserveroption","purpose":"Sets a server option","prototype":"void MysqlndUhConnection::setServerOption(mysqlnd_connection $connection, int $option)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::shutdownServer":{"id":"mysqlnduhconnection.shutdownserver","purpose":"The shutdownServer purpose","prototype":"void MysqlndUhConnection::shutdownServer(string $MYSQLND_UH_RES_MYSQLND_NAME, string $level)","return":"<p class=\"para\">  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::simpleCommand":{"id":"mysqlnduhconnection.simplecommand","purpose":"Sends a basic COM_* command","prototype":"bool MysqlndUhConnection::simpleCommand(mysqlnd_connection $connection, int $command, string $arg, int $ok_packet, bool $silent, bool $ignore_upsert_status)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::simpleCommandHandleResponse":{"id":"mysqlnduhconnection.simplecommandhandleresponse","purpose":"Process a response for a basic COM_* command send to the client","prototype":"bool MysqlndUhConnection::simpleCommandHandleResponse(mysqlnd_connection $connection, int $ok_packet, bool $silent, int $command, bool $ignore_upsert_status)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::sslSet":{"id":"mysqlnduhconnection.sslset","purpose":"Used for establishing secure connections using SSL","prototype":"bool MysqlndUhConnection::sslSet(mysqlnd_connection $connection, string $key, string $cert, string $ca, string $capath, string $cipher)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::stmtInit":{"id":"mysqlnduhconnection.stmtinit","purpose":"Initializes a statement and returns a resource for use with mysqli_statement::prepare","prototype":"resource MysqlndUhConnection::stmtInit(mysqlnd_connection $connection)","return":"<p class=\"para\">   Resource of type <em>Mysqlnd Prepared Statement (internal only - you must not modify it!)<\/em>.   The documentation may also refer to such resources using the alias name   <em>mysqlnd_prepared_statement<\/em>.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::storeResult":{"id":"mysqlnduhconnection.storeresult","purpose":"Transfers a result set from the last query","prototype":"resource MysqlndUhConnection::storeResult(mysqlnd_connection $connection)","return":"<p class=\"para\">   Resource of type <em>Mysqlnd Resultset (internal only - you must not modify it!)<\/em>.   The documentation may also refer to such resources using the alias name   <em>mysqlnd_resultset<\/em>.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhConnection::txCommit":{"id":"mysqlnduhconnection.txcommit","purpose":"Commits the current transaction","prototype":"bool MysqlndUhConnection::txCommit(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.1-alpha"},"MysqlndUhConnection::txRollback":{"id":"mysqlnduhconnection.txrollback","purpose":"Rolls back current transaction","prototype":"bool MysqlndUhConnection::txRollback(mysqlnd_connection $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.1-alpha"},"MysqlndUhConnection::useResult":{"id":"mysqlnduhconnection.useresult","purpose":"Initiate a result set retrieval","prototype":"resource MysqlndUhConnection::useResult(mysqlnd_connection $connection)","return":"<p class=\"para\">   Resource of type <em>Mysqlnd Resultset (internal only - you must not modify it!)<\/em>.   The documentation may also refer to such resources using the alias name   <em>mysqlnd_resultset<\/em>.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhPreparedStatement::__construct":{"id":"mysqlnduhpreparedstatement.construct","purpose":"The __construct purpose","prototype":" MysqlndUhPreparedStatement::__construct()","return":"<p class=\"para\">  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhPreparedStatement::execute":{"id":"mysqlnduhpreparedstatement.execute","purpose":"Executes a prepared Query","prototype":"bool MysqlndUhPreparedStatement::execute(mysqlnd_prepared_statement $statement)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"MysqlndUhPreparedStatement::prepare":{"id":"mysqlnduhpreparedstatement.prepare","purpose":"Prepare an SQL statement for execution","prototype":"bool MysqlndUhPreparedStatement::prepare(mysqlnd_prepared_statement $statement, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"mysqlnd_uh_convert_to_mysqlnd":{"id":"function.mysqlnd-uh-convert-to-mysqlnd","purpose":"Converts a MySQL connection handle into a mysqlnd connection handle","prototype":"resource mysqlnd_uh_convert_to_mysqlnd(mysqli $mysql_connection)","return":"<p class=\"para\">   A mysqlnd connection handle.  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"mysqlnd_uh_set_connection_proxy":{"id":"function.mysqlnd-uh-set-connection-proxy","purpose":"Installs a proxy for mysqlnd connections","prototype":"bool mysqlnd_uh_set_connection_proxy(MysqlndUhConnection $connection_proxy [, mysqli $mysqli_connection = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"mysqlnd_uh_set_statement_proxy":{"id":"function.mysqlnd-uh-set-statement-proxy","purpose":"Installs a proxy for mysqlnd statements","prototype":"bool mysqlnd_uh_set_statement_proxy(MysqlndUhStatement $statement_proxy)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.   Otherwise, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL mysqlnd-uh >= 1.0.0-alpha"},"mysqlnd_memcache_get_config":{"id":"function.mysqlnd-memcache-get-config","purpose":"Returns information about the plugin configuration","prototype":"array mysqlnd_memcache_get_config(mixed $connection)","return":"<p class=\"para\">   An array of mysqlnd_memcache configuration information on success, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>  <p class=\"para\">   The returned array has these elements:  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong><span class=\"function\">mysqlnd_memcache_get_config<\/span> array structure<\/strong><\/caption>          <thead>      <tr>       <th>Array Key<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">       <tr>       <td>memcached<\/td>       <td>        Instance of Memcached associated to this MySQL connection        by  <span class=\"methodname\">mysqlnd_memcache_set<\/span>. You can use this to        change settings of the memcache connection, or directly by querying the        server on this connection.       <\/td>      <\/tr>      <tr>       <td>pattern<\/td>       <td>        The PCRE regular expression used to match the SQL query sent to the server.        Queries matching this pattern will be further analyzed to decide whether        the query can be intercepted and sent via the memcache interface or        whether the query is sent using the general MySQL protocol to the        server. The pattern is either the default pattern        (<em>MYSQLND_MEMCACHE_DEFAULT_REGEXP<\/em>) or it is set via        <span class=\"function\">mysqlnd_memcache_set<\/span>.       <\/td>      <\/tr>      <tr>       <td>mappings<\/td>       <td>        An associative array with a list of all configured containers as they        were discovered by this plugin. The key for these elements is the name        of the container in the MySQL configuration. The value is described        below. The contents of this field is created by querying the MySQL        Server during association to MySQL and a memcache connection using         <span class=\"methodname\">mysqlnd_memcache_set<\/span>.       <\/td>      <\/tr>      <tr>       <td>mapping_query<\/td>       <td>An SQL query used during         <span class=\"methodname\">mysqlnd_memcache_set<\/span>        to identify the available containers and mappings. The result of that         query is provided in the mappings element.       <\/td>      <\/tr>     <\/tbody>       <\/table>   <table class=\"doctable table\">    <caption><strong>Mapping entry structure<\/strong><\/caption>         <thead>      <tr>       <th>Array Key<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>prefix<\/td>       <td>        A prefix used while accessing data via memcache. With the MySQL InnoDB         Memcache Deamon plugin, this usually begins with @@ and ends with a        configurable separator. This prefix is placed in front of the key value        while using the memcache protocol.       <\/td>      <\/tr>      <tr>       <td>schema_name<\/td>       <td>        Name of the schema (database) which contains the table being accessed.       <\/td>      <\/tr>      <tr>       <td>table_name<\/td>       <td>        Name of the table which contains the data accessible via memcache        protocol.       <\/td>      <\/tr>      <tr>       <td>id_field_name<\/td>       <td>        Name of the database field (column) with the id used as key when        accessing the table via memcache. Often this is the database field        having a primary key.       <\/td>      <\/tr>      <tr>       <td>separator<\/td>       <td>        The separator used to split the different field values. This is needed as        memcache only provides access to a single value while MySQL can map        multiple columns to this value.        <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:          <p class=\"para\">          The separator, which can be set in the MySQL Server configuration,          should not be part of any value retrieved via memcache because proper          mapping can&#039;t be guaranteed.         <\/p>        <\/p><\/blockquote>       <\/td>      <\/tr>      <tr>       <td>fields<\/td>       <td>        An array with the name of all fields available for this mapping.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL mysqlnd_memcache >= 1.0.0"},"mysqlnd_memcache_set":{"id":"function.mysqlnd-memcache-set","purpose":"Associate a MySQL connection with a Memcache connection","prototype":"bool mysqlnd_memcache_set(mixed $mysql_connection [, Memcached $memcache_connection = '' [, string $pattern = '' [, callback $callback = '']]])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the association or disassociation is successful, otherwise <strong><code>FALSE<\/code><\/strong> if there   is an error.  <\/p>","versions":"PECL mysqlnd_memcache >= 1.0.0"},"oci_bind_array_by_name":{"id":"function.oci-bind-array-by-name","purpose":"Binds a PHP array to an Oracle PL\/SQL array parameter","prototype":"bool oci_bind_array_by_name(resource $statement, string $name, array $var_array, int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL OCI8 >= 1.2.0"},"oci_bind_by_name":{"id":"function.oci-bind-by-name","purpose":"Binds a PHP variable to an Oracle placeholder","prototype":"bool oci_bind_by_name(resource $statement, string $bv_name, mixed $variable [, int $maxlength = -1 [, int $type = SQLT_CHR]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_cancel":{"id":"function.oci-cancel","purpose":"Cancels reading from cursor","prototype":"bool oci_cancel(resource $statement)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_client_version":{"id":"function.oci-client-version","purpose":"Returns the Oracle client library version","prototype":"string oci_client_version()","return":"<p class=\"para\">   Returns the version number as a string.  <\/p>","versions":"PHP 5 >= 5.3.7, PHP 7, PECL OCI8 >= 1.4.6"},"oci_close":{"id":"function.oci-close","purpose":"Closes an Oracle connection","prototype":"bool oci_close(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_commit":{"id":"function.oci-commit","purpose":"Commits the outstanding database transaction","prototype":"bool oci_commit(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_connect":{"id":"function.oci-connect","purpose":"Connect to an Oracle database","prototype":"resource oci_connect(string $username, string $password [, string $connection_string = '' [, string $character_set = '' [, int $session_mode = '']]])","return":"<p class=\"para\">   Returns a connection identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_define_by_name":{"id":"function.oci-define-by-name","purpose":"Associates a PHP variable with a column for query fetches","prototype":"bool oci_define_by_name(resource $statement, string $column_name, mixed $variable [, int $type = SQLT_CHR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_error":{"id":"function.oci-error","purpose":"Returns the last error found","prototype":"array oci_error([resource $resource = ''])","return":"<p class=\"para\">   If no error is found, <span class=\"function\">oci_error<\/span> returns   <strong><code>FALSE<\/code><\/strong>. Otherwise, <span class=\"function\">oci_error<\/span> returns the   error information as an associative array.  <\/p>  <p class=\"para\">   <table class=\"doctable table\">   <caption><strong><span class=\"function\">oci_error<\/span> Array Description<\/strong><\/caption>         <thead>      <tr>       <th>Array key<\/th>       <th>Type<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><em>code<\/em><\/td>       <td><span class=\"type\">integer<\/span><\/td>       <td>         The Oracle error number.       <\/td>      <\/tr>      <tr>       <td><em>message<\/em><\/td>       <td><span class=\"type\">string<\/span><\/td>       <td>         The Oracle error text.       <\/td>      <\/tr>      <tr>       <td><em>offset<\/em><\/td>       <td><span class=\"type\">integer<\/span><\/td>       <td>         The byte position of an error in the SQL statement.  If there         was no statement, this is <em>0<\/em>       <\/td>      <\/tr>      <tr>       <td><em>sqltext<\/em><\/td>       <td><span class=\"type\">string<\/span><\/td>       <td>         The SQL statement text.  If there was no statement, this is         an empty string.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_execute":{"id":"function.oci-execute","purpose":"Executes a statement","prototype":"bool oci_execute(resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_fetch_all":{"id":"function.oci-fetch-all","purpose":"Fetches multiple rows from a query into a two-dimensional array","prototype":"int oci_fetch_all(resource $statement, array $output [, int $skip = '' [, int $maxrows = -1 [, int $flags =  + ]]])","return":"<p class=\"para\">   Returns the number of rows in <code class=\"parameter\">output<\/code>, which   may be 0 or more,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_fetch_array":{"id":"function.oci-fetch-array","purpose":"Returns the next row from a query as an associative or numeric array","prototype":"array oci_fetch_array(resource $statement [, int $mode = ''])","return":"<p class=\"para\">   Returns an array with associative and\/or numeric indices. If there   are no more rows in the <code class=\"parameter\">statement<\/code> then   <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>  <p class=\"para\">    By default, <em>LOB<\/em> columns are returned as LOB descriptors.  <\/p>  <p class=\"para\">   <em>DATE<\/em> columns are returned as strings formatted   to the current date format.  The default format can be changed with   Oracle environment variables such as <em>NLS_LANG<\/em> or   by a previously executed <em>ALTER SESSION SET   NLS_DATE_FORMAT<\/em> command.  <\/p>  <p class=\"para\">   Oracle&#039;s default, non-case sensitive column names will have   uppercase associative indices in the result array.  Case-sensitive   column names will have array indices using the exact column case.   Use <span class=\"function\">var_dump<\/span> on the result array to verify the   appropriate case to use for each query.   <\/p>  <p class=\"para\">   The table name is not included in the array index.  If your query   contains two different columns with the same name,   use <strong><code>OCI_NUM<\/code><\/strong> or add a column alias to the query   to ensure name uniqueness, see example #7. Otherwise only one   column will be returned via PHP.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_fetch_assoc":{"id":"function.oci-fetch-assoc","purpose":"Returns the next row from a query as an associative array","prototype":"array oci_fetch_assoc(resource $statement)","return":"<p class=\"para\">   Returns an associative array. If there are no more rows in   the <code class=\"parameter\">statement<\/code> then <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_fetch_object":{"id":"function.oci-fetch-object","purpose":"Returns the next row from a query as an object","prototype":"object oci_fetch_object(resource $statement)","return":"<p class=\"para\">   Returns an object.  Each attribute of the object corresponds to a   column of the row.  If there are no more rows in   the <code class=\"parameter\">statement<\/code> then <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>  <p class=\"para\">    Any <em>LOB<\/em> columns are returned as LOB descriptors.  <\/p>  <p class=\"para\">   <em>DATE<\/em> columns are returned as strings formatted   to the current date format.  The default format can be changed with   Oracle environment variables such as <em>NLS_LANG<\/em> or   by a previously executed <em>ALTER SESSION SET   NLS_DATE_FORMAT<\/em> command.  <\/p>  <p class=\"para\">   Oracle&#039;s default, non-case sensitive column names will have   uppercase attribute names.  Case-sensitive column names will have   attribute names using the exact column case.   Use <span class=\"function\">var_dump<\/span> on the result object to verify   the appropriate case for attribute access.  <\/p>  <p class=\"para\">    Attribute values will be <strong><code>NULL<\/code><\/strong> for any <em>NULL<\/em>    data fields.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_fetch_row":{"id":"function.oci-fetch-row","purpose":"Returns the next row from a query as a numeric array","prototype":"array oci_fetch_row(resource $statement)","return":"<p class=\"para\">   Returns a numerically indexed array.  If there are no more rows in   the <code class=\"parameter\">statement<\/code> then <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_fetch":{"id":"function.oci-fetch","purpose":"Fetches the next row from a query into internal buffers","prototype":"bool oci_fetch(resource $statement)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> if there are no more rows in the   <code class=\"parameter\">statement<\/code>.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_is_null":{"id":"function.oci-field-is-null","purpose":"Checks if a field in the currently fetched row is NULL","prototype":"bool oci_field_is_null(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">field<\/code> is <strong><code>NULL<\/code><\/strong>, <strong><code>FALSE<\/code><\/strong> otherwise.   <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_name":{"id":"function.oci-field-name","purpose":"Returns the name of a field from the statement","prototype":"string oci_field_name(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns the name as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_precision":{"id":"function.oci-field-precision","purpose":"Tell the precision of a field","prototype":"int oci_field_precision(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns the precision as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_scale":{"id":"function.oci-field-scale","purpose":"Tell the scale of the field","prototype":"int oci_field_scale(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns the scale as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_size":{"id":"function.oci-field-size","purpose":"Returns field's size","prototype":"int oci_field_size(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns the size of a <code class=\"parameter\">field<\/code> in bytes, or <strong><code>FALSE<\/code><\/strong> on   errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_type_raw":{"id":"function.oci-field-type-raw","purpose":"Tell the raw Oracle data type of the field","prototype":"int oci_field_type_raw(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns Oracle&#039;s raw data type as a number, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_field_type":{"id":"function.oci-field-type","purpose":"Returns a field's data type name","prototype":"mixed oci_field_type(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns the field data type as a string, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_free_descriptor":{"id":"function.oci-free-descriptor","purpose":"Frees a descriptor","prototype":"bool oci_free_descriptor(resource $descriptor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_free_statement":{"id":"function.oci-free-statement","purpose":"Frees all resources associated with statement or cursor","prototype":"bool oci_free_statement(resource $statement)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_get_implicit_resultset":{"id":"function.oci-get-implicit-resultset","purpose":"Returns the next child statement resource from a parent statement resource that has Oracle Database 12c Implicit Result Sets","prototype":"resource  oci_get_implicit_resultset(resource $statement)","return":"<p class=\"para\">   Returns a statement handle for the next child statement available   on <code class=\"parameter\">statement<\/code>.  Returns <strong><code>FALSE<\/code><\/strong> when child   statements do not exist, or all child statements have been returned   by previous calls   to <span class=\"function\">oci_get_implicit_resultset<\/span>.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7, PECL OCI8 >= 2.0.0"},"oci_internal_debug":{"id":"function.oci-internal-debug","purpose":"Enables or disables internal debug output","prototype":"void oci_internal_debug(bool $onoff)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_lob_copy":{"id":"function.oci-lob-copy","purpose":"Copies large object","prototype":"bool oci_lob_copy(OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_lob_is_equal":{"id":"function.oci-lob-is-equal","purpose":"Compares two LOB\/FILE locators for equality","prototype":"bool oci_lob_is_equal(OCI-Lob $lob1, OCI-Lob $lob2)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if these objects are equal, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_new_collection":{"id":"function.oci-new-collection","purpose":"Allocates new collection object","prototype":"OCI-Collection oci_new_collection(resource $connection, string $tdo [, string $schema = ''])","return":"<p class=\"para\">   Returns a new <span class=\"classname\">OCICollection<\/span> object or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_new_connect":{"id":"function.oci-new-connect","purpose":"Connect to the Oracle server using a unique connection","prototype":"resource oci_new_connect(string $username, string $password [, string $connection_string = '' [, string $character_set = '' [, int $session_mode = '']]])","return":"<p class=\"para\">   Returns a connection identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_new_cursor":{"id":"function.oci-new-cursor","purpose":"Allocates and returns a new cursor (statement handle)","prototype":"resource oci_new_cursor(resource $connection)","return":"<p class=\"para\">   Returns a new statement handle, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_new_descriptor":{"id":"function.oci-new-descriptor","purpose":"Initializes a new empty LOB or FILE descriptor","prototype":"OCI-Lob oci_new_descriptor(resource $connection [, int $type = OCI_DTYPE_LOB])","return":"<p class=\"para\">   Returns a new LOB or FILE descriptor on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_num_fields":{"id":"function.oci-num-fields","purpose":"Returns the number of result columns in a statement","prototype":"int oci_num_fields(resource $statement)","return":"<p class=\"para\">   Returns the number of columns as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_num_rows":{"id":"function.oci-num-rows","purpose":"Returns number of rows affected during statement execution","prototype":"int oci_num_rows(resource $statement)","return":"<p class=\"para\">   Returns the number of rows affected as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_parse":{"id":"function.oci-parse","purpose":"Prepares an Oracle statement for execution","prototype":"resource oci_parse(resource $connection, string $sql_text)","return":"<p class=\"para\">   Returns a statement handle on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_password_change":{"id":"function.oci-password-change","purpose":"Changes password of Oracle's user","prototype":"resource oci_password_change(resource $connection, string $username, string $old_password, string $new_password, string $dbname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_pconnect":{"id":"function.oci-pconnect","purpose":"Connect to an Oracle database using a persistent connection","prototype":"resource oci_pconnect(string $username, string $password [, string $connection_string = '' [, string $character_set = '' [, int $session_mode = '']]])","return":"<p class=\"para\">   Returns a connection identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_register_taf_callback":{"id":"function.oci-register-taf-callback","purpose":"Register a user-defined callback function for Oracle Database TAF","prototype":"bool oci_register_taf_callback(resource $connection [, mixed $callbackFn = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7.0 >= 7.0.21, PHP 7 >= 7.1.7, PECL OCI8 >= 2.1.7"},"oci_result":{"id":"function.oci-result","purpose":"Returns field's value from the fetched row","prototype":"mixed oci_result(resource $statement, mixed $field)","return":"<p class=\"para\">   Returns everything as strings except for abstract types (ROWIDs, LOBs and   FILEs). Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_rollback":{"id":"function.oci-rollback","purpose":"Rolls back the outstanding database transaction","prototype":"bool oci_rollback(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_server_version":{"id":"function.oci-server-version","purpose":"Returns the Oracle Database version","prototype":"string oci_server_version(resource $connection)","return":"<p class=\"para\">   Returns the version information as a string or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_set_action":{"id":"function.oci-set-action","purpose":"Sets the action name","prototype":"bool oci_set_action(resource $connection, string $action_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL OCI8 >= 1.4.0"},"oci_set_client_identifier":{"id":"function.oci-set-client-identifier","purpose":"Sets the client identifier","prototype":"bool oci_set_client_identifier(resource $connection, string $client_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL OCI8 >= 1.4.0"},"oci_set_client_info":{"id":"function.oci-set-client-info","purpose":"Sets the client information","prototype":"bool oci_set_client_info(resource $connection, string $client_info)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL OCI8 >= 1.4.0"},"oci_set_edition":{"id":"function.oci-set-edition","purpose":"Sets the database edition","prototype":"bool oci_set_edition(string $edition)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL OCI8 >= 1.4.0"},"oci_set_module_name":{"id":"function.oci-set-module-name","purpose":"Sets the module name","prototype":"bool oci_set_module_name(resource $connection, string $module_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL OCI8 >= 1.4.0"},"oci_set_prefetch":{"id":"function.oci-set-prefetch","purpose":"Sets number of rows to be prefetched by queries","prototype":"bool oci_set_prefetch(resource $statement, int $rows)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_statement_type":{"id":"function.oci-statement-type","purpose":"Returns the type of a statement","prototype":"string oci_statement_type(resource $statement)","return":"<p class=\"para\">   Returns the type of <code class=\"parameter\">statement<\/code> as one of the   following strings.   <table class=\"doctable table\">    <caption><strong>Statement type<\/strong><\/caption>         <thead>      <tr>       <th>Return String<\/th>       <th>Notes<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><em>ALTER<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>BEGIN<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>CALL<\/em><\/td>       <td>Introduced in PHP 5.2.1 (PECL OCI8 1.2.3)<\/td>      <\/tr>      <tr>       <td><em>CREATE<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>DECLARE<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>DELETE<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>DROP<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>INSERT<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>SELECT<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>UPDATE<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td><em>UNKNOWN<\/em><\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"oci_unregister_taf_callback":{"id":"function.oci-unregister-taf-callback","purpose":"Unregister a user-defined callback function for Oracle Database TAF","prototype":"bool oci_unregister_taf_callback(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7.0 >= 7.0.23, PHP 7 >= 7.1.9, PHP 7.2, PECL OCI8 >= 2.1.7"},"OCI-Collection::append":{"id":"oci-collection.append","purpose":"Appends element to the collection","prototype":"bool OCI-Collection::append(mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::assign":{"id":"oci-collection.assign","purpose":"Assigns a value to the collection from another existing collection","prototype":"bool OCI-Collection::assign(OCI-Collection $from)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::assignElem":{"id":"oci-collection.assignelem","purpose":"Assigns a value to the element of the collection","prototype":"bool OCI-Collection::assignElem(int $index, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::free":{"id":"oci-collection.free","purpose":"Frees the resources associated with the collection object","prototype":"bool OCI-Collection::free()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::getElem":{"id":"oci-collection.getelem","purpose":"Returns value of the element","prototype":"mixed OCI-Collection::getElem(int $index)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if such element doesn&#039;t exist; <strong><code>NULL<\/code><\/strong> if element is <strong><code>NULL<\/code><\/strong>;   string if element is column of a string datatype or number if element is   numeric field.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::max":{"id":"oci-collection.max","purpose":"Returns the maximum number of elements in the collection","prototype":"int OCI-Collection::max()","return":"<p class=\"para\">   Returns the maximum number as an integer, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>  <p class=\"para\">   If the returned value is 0, then the number of elements is not limited.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::size":{"id":"oci-collection.size","purpose":"Returns size of the collection","prototype":"int OCI-Collection::size()","return":"<p class=\"para\">   Returns the number of elements in the collection or <strong><code>FALSE<\/code><\/strong> on error.   <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Collection::trim":{"id":"oci-collection.trim","purpose":"Trims elements from the end of the collection","prototype":"bool OCI-Collection::trim(int $num)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::append":{"id":"oci-lob.append","purpose":"Appends data from the large object to another large object","prototype":"bool OCI-Lob::append(OCI-Lob $lob_from)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::close":{"id":"oci-lob.close","purpose":"Closes LOB descriptor","prototype":"bool OCI-Lob::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::eof":{"id":"oci-lob.eof","purpose":"Tests for end-of-file on a large object's descriptor","prototype":"bool OCI-Lob::eof()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if internal pointer of large object is at the end of LOB.   Otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::erase":{"id":"oci-lob.erase","purpose":"Erases a specified portion of the internal LOB data","prototype":"int OCI-Lob::erase([int $offset = '' [, int $length = '']])","return":"<p class=\"para\">   Returns the actual number of characters\/bytes erased  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::export":{"id":"oci-lob.export","purpose":"Exports LOB's contents to a file","prototype":"bool OCI-Lob::export(string $filename [, int $start = '' [, int $length = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::flush":{"id":"oci-lob.flush","purpose":"Flushes\/writes buffer of the LOB to the server","prototype":"bool OCI-Lob::flush([int $flag = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if buffering was not enabled or an error occurred.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::free":{"id":"oci-lob.free","purpose":"Frees resources associated with the LOB descriptor","prototype":"bool OCI-Lob::free()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::getBuffering":{"id":"oci-lob.getbuffering","purpose":"Returns current state of buffering for the large object","prototype":"bool OCI-Lob::getBuffering()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if buffering for the large object is off and <strong><code>TRUE<\/code><\/strong> if   buffering is used.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::import":{"id":"oci-lob.import","purpose":"Imports file data to the LOB","prototype":"bool OCI-Lob::import(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::load":{"id":"oci-lob.load","purpose":"Returns large object's contents","prototype":"string OCI-Lob::load()","return":"<p class=\"para\">   Returns the contents of the object, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::read":{"id":"oci-lob.read","purpose":"Reads part of the large object","prototype":"string OCI-Lob::read(int $length)","return":"<p class=\"para\">   Returns the contents as a string,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::rewind":{"id":"oci-lob.rewind","purpose":"Moves the internal pointer to the beginning of the large object","prototype":"bool OCI-Lob::rewind()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::save":{"id":"oci-lob.save","purpose":"Saves data to the large object","prototype":"bool OCI-Lob::save(string $data [, int $offset = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::saveFile":{"id":"oci-lob.savefile","purpose":"Alias of OCI-Lob::import","prototype":" OCI-Lob::saveFile()","return":"","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::seek":{"id":"oci-lob.seek","purpose":"Sets the internal pointer of the large object","prototype":"bool OCI-Lob::seek(int $offset [, int $whence = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::setBuffering":{"id":"oci-lob.setbuffering","purpose":"Changes current state of buffering for the large object","prototype":"bool OCI-Lob::setBuffering(bool $on_off)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. Repeated calls to this method with the same flag will   return <strong><code>TRUE<\/code><\/strong>.   <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::size":{"id":"oci-lob.size","purpose":"Returns size of large object","prototype":"int OCI-Lob::size()","return":"<p class=\"para\">   Returns length of large object value  or <strong><code>FALSE<\/code><\/strong> on failure.   Empty objects have zero length.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::tell":{"id":"oci-lob.tell","purpose":"Returns the current position of internal pointer of large object","prototype":"int OCI-Lob::tell()","return":"<p class=\"para\">   Returns current position of a LOB&#039;s internal pointer or <strong><code>FALSE<\/code><\/strong> if an   error occurred.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::truncate":{"id":"oci-lob.truncate","purpose":"Truncates large object","prototype":"bool OCI-Lob::truncate([int $length = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::write":{"id":"oci-lob.write","purpose":"Writes data to the large object","prototype":"int OCI-Lob::write(string $data [, int $length = ''])","return":"<p class=\"para\">   Returns the number of bytes written  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::writeTemporary":{"id":"oci-lob.writetemporary","purpose":"Writes a temporary large object","prototype":"bool OCI-Lob::writeTemporary(string $data [, int $lob_type = OCI_TEMP_CLOB])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"OCI-Lob::writeToFile":{"id":"oci-lob.writetofile","purpose":"Alias of OCI-Lob::export","prototype":" OCI-Lob::writeToFile()","return":"","versions":"PHP 5, PHP 7, PECL OCI8 >= 1.1.0"},"ocibindbyname":{"id":"function.ocibindbyname","purpose":"Alias of oci_bind_by_name","prototype":" ocibindbyname()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicancel":{"id":"function.ocicancel","purpose":"Alias of oci_cancel","prototype":" ocicancel()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicloselob":{"id":"function.ocicloselob","purpose":"Alias of OCI-Lob::close","prototype":" ocicloselob()","return":"","versions":"PHP 4 >= 4.0.6, PECL OCI8 1.0"},"ocicollappend":{"id":"function.ocicollappend","purpose":"Alias of OCI-Collection::append","prototype":" ocicollappend()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicollassign":{"id":"function.ocicollassign","purpose":"Alias of OCI-Collection::assign","prototype":" ocicollassign()","return":"","versions":"PHP 4 >= 4.0.6, PECL OCI8 1.0"},"ocicollassignelem":{"id":"function.ocicollassignelem","purpose":"Alias of OCI-Collection::assignElem","prototype":" ocicollassignelem()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicollgetelem":{"id":"function.ocicollgetelem","purpose":"Alias of OCI-Collection::getElem","prototype":" ocicollgetelem()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicollmax":{"id":"function.ocicollmax","purpose":"Alias of OCI-Collection::max","prototype":" ocicollmax()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicollsize":{"id":"function.ocicollsize","purpose":"Alias of OCI-Collection::size","prototype":" ocicollsize()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolltrim":{"id":"function.ocicolltrim","purpose":"Alias of OCI-Collection::trim","prototype":" ocicolltrim()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumnisnull":{"id":"function.ocicolumnisnull","purpose":"Alias of oci_field_is_null","prototype":" ocicolumnisnull()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumnname":{"id":"function.ocicolumnname","purpose":"Alias of oci_field_name","prototype":" ocicolumnname()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumnprecision":{"id":"function.ocicolumnprecision","purpose":"Alias of oci_field_precision","prototype":" ocicolumnprecision()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumnscale":{"id":"function.ocicolumnscale","purpose":"Alias of oci_field_scale","prototype":" ocicolumnscale()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumnsize":{"id":"function.ocicolumnsize","purpose":"Alias of oci_field_size","prototype":" ocicolumnsize()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumntype":{"id":"function.ocicolumntype","purpose":"Alias of oci_field_type","prototype":" ocicolumntype()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicolumntyperaw":{"id":"function.ocicolumntyperaw","purpose":"Alias of oci_field_type_raw","prototype":" ocicolumntyperaw()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocicommit":{"id":"function.ocicommit","purpose":"Alias of oci_commit","prototype":" ocicommit()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocidefinebyname":{"id":"function.ocidefinebyname","purpose":"Alias of oci_define_by_name","prototype":" ocidefinebyname()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocierror":{"id":"function.ocierror","purpose":"Alias of oci_error","prototype":" ocierror()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociexecute":{"id":"function.ociexecute","purpose":"Alias of oci_execute","prototype":" ociexecute()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifetch":{"id":"function.ocifetch","purpose":"Alias of oci_fetch","prototype":" ocifetch()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifetchinto":{"id":"function.ocifetchinto","purpose":"Obsolete variant of oci_fetch_array, oci_fetch_object,   oci_fetch_assoc and   oci_fetch_row","prototype":" ocifetchinto()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifetchstatement":{"id":"function.ocifetchstatement","purpose":"Alias of oci_fetch_all","prototype":" ocifetchstatement()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifreecollection":{"id":"function.ocifreecollection","purpose":"Alias of OCI-Collection::free","prototype":" ocifreecollection()","return":"","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifreecursor":{"id":"function.ocifreecursor","purpose":"Alias of oci_free_statement","prototype":" ocifreecursor()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifreedesc":{"id":"function.ocifreedesc","purpose":"Alias of OCI-Lob::free","prototype":" ocifreedesc()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocifreestatement":{"id":"function.ocifreestatement","purpose":"Alias of oci_free_statement","prototype":" ocifreestatement()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociinternaldebug":{"id":"function.ociinternaldebug","purpose":"Alias of oci_internal_debug","prototype":" ociinternaldebug()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociloadlob":{"id":"function.ociloadlob","purpose":"Alias of OCI-Lob::load","prototype":" ociloadlob()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocilogoff":{"id":"function.ocilogoff","purpose":"Alias of oci_close","prototype":" ocilogoff()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocilogon":{"id":"function.ocilogon","purpose":"Alias of oci_connect","prototype":" ocilogon()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocinewcollection":{"id":"function.ocinewcollection","purpose":"Alias of oci_new_collection","prototype":" ocinewcollection()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocinewcursor":{"id":"function.ocinewcursor","purpose":"Alias of oci_new_cursor","prototype":" ocinewcursor()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocinewdescriptor":{"id":"function.ocinewdescriptor","purpose":"Alias of oci_new_descriptor","prototype":" ocinewdescriptor()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocinlogon":{"id":"function.ocinlogon","purpose":"Alias of oci_new_connect","prototype":" ocinlogon()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocinumcols":{"id":"function.ocinumcols","purpose":"Alias of oci_num_fields","prototype":" ocinumcols()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociparse":{"id":"function.ociparse","purpose":"Alias of oci_parse","prototype":" ociparse()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociplogon":{"id":"function.ociplogon","purpose":"Alias of oci_pconnect","prototype":" ociplogon()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociresult":{"id":"function.ociresult","purpose":"Alias of oci_result","prototype":" ociresult()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocirollback":{"id":"function.ocirollback","purpose":"Alias of oci_rollback","prototype":" ocirollback()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocirowcount":{"id":"function.ocirowcount","purpose":"Alias of oci_num_rows","prototype":" ocirowcount()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocisavelob":{"id":"function.ocisavelob","purpose":"Alias of OCI-Lob::save","prototype":" ocisavelob()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocisavelobfile":{"id":"function.ocisavelobfile","purpose":"Alias of OCI-Lob::import","prototype":" ocisavelobfile()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociserverversion":{"id":"function.ociserverversion","purpose":"Alias of oci_server_version","prototype":" ociserverversion()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocisetprefetch":{"id":"function.ocisetprefetch","purpose":"Alias of oci_set_prefetch","prototype":" ocisetprefetch()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ocistatementtype":{"id":"function.ocistatementtype","purpose":"Alias of oci_statement_type","prototype":" ocistatementtype()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociwritelobtofile":{"id":"function.ociwritelobtofile","purpose":"Alias of OCI-Lob::export","prototype":" ociwritelobtofile()","return":"","versions":"PHP 4, PHP 5, PHP 7, PECL OCI8 >= 1.0.0"},"ociwritetemporarylob":{"id":"function.ociwritetemporarylob","purpose":"Alias of OCI-Lob::writeTemporary","prototype":" ociwritetemporarylob()","return":"","versions":"PHP 4 >= 4.0.6, PECL OCI8 1.0"},"px_close":{"id":"function.px-close","purpose":"Closes a paradox database","prototype":"bool px_close(resource $pxdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_create_fp":{"id":"function.px-create-fp","purpose":"Create a new paradox database","prototype":"bool px_create_fp(resource $pxdoc, resource $file, array $fielddesc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_date2string":{"id":"function.px-date2string","purpose":"Converts a date into a string","prototype":"string px_date2string(resource $pxdoc, int $value, string $format)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.4.0"},"px_delete_record":{"id":"function.px-delete-record","purpose":"Deletes record from paradox database","prototype":"bool px_delete_record(resource $pxdoc, int $num)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.4.0"},"px_delete":{"id":"function.px-delete","purpose":"Deletes resource of paradox database","prototype":"bool px_delete(resource $pxdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_get_field":{"id":"function.px-get-field","purpose":"Returns the specification of a single field","prototype":"array px_get_field(resource $pxdoc, int $fieldno)","return":"<p class=\"para\">   Returns the specification of the <strong class=\"option unknown\">fieldno<\/strong>&#039;th database   field as an associated array. The array contains three fields named   <em>name<\/em>, <em>type<\/em>, and   <em>size<\/em>.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_get_info":{"id":"function.px-get-info","purpose":"Return lots of information about a paradox file","prototype":"array px_get_info(resource $pxdoc)","return":"<p class=\"para\">   Returns an associated array with lots of information about a paradox   file. This array is likely to be extended in the future.  <\/p>  <dl>       <dt>fileversion<\/dt>    <dd>     <p class=\"para\">Version of file multiplied by 10, e.g. 70.<\/p>    <\/dd>          <dt>tablename<\/dt>    <dd>     <p class=\"para\">Name of table as stored in the file. If the database was created       by pxlib, then this will be the name of the file without the       extension.<\/p>    <\/dd>          <dt>numrecords<\/dt>    <dd>     <p class=\"para\">Number of records in this table.<\/p>    <\/dd>          <dt>numfields<\/dt>    <dd>     <p class=\"para\">Number of fields in this table.<\/p>    <\/dd>          <dt>headersize<\/dt>    <dd>     <p class=\"para\">Number of bytes used for the header. This is usually 0x800.<\/p>    <\/dd>          <dt>recordsize<\/dt>    <dd>     <p class=\"para\">Number of bytes used for each record. This is the sum of all       field sizes (available since version 1.4.2).<\/p>    <\/dd>          <dt>maxtablesize<\/dt>    <dd>     <p class=\"para\">      This value multiplied by 0x400 is the size of a data block in bytes.      The maximum number of records in a datablock is the integer part of      (maxtablesize * 0x400 - 8) \/ recordsize.     <\/p>    <\/dd>          <dt>numdatablocks<\/dt>    <dd>     <p class=\"para\">      The number of data blocks in the file. Each data block contains a      certain number of records which depends on the record size and the data      block size (maxtablesize). Data blocks may not necessarily be      completely filled.     <\/p>    <\/dd>          <dt>numindexfields<\/dt>    <dd>     <p class=\"para\">      Number of fields used for the primary index. The fields do always start      with field number 1.    <\/p>   <\/dd>          <dt>codepage<\/dt>    <dd>     <p class=\"para\">      The DOS codepage which was used for encoding fields with character data.      If the target encoding is not set with      <span class=\"function\">px_set_targetencoding<\/span> this will be the encoding for      character fields when records are being accessed with      <span class=\"function\">px_get_record<\/span> or      <span class=\"function\">px_retrieve_record<\/span>.     <\/p>    <\/dd>     <\/dl>","versions":"PECL paradox >= 1.0.0"},"px_get_parameter":{"id":"function.px-get-parameter","purpose":"Gets a parameter","prototype":"string px_get_parameter(resource $pxdoc, string $name)","return":"<p class=\"para\">   Returns the value of the parameter or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.1.0"},"px_get_record":{"id":"function.px-get-record","purpose":"Returns record of paradox database","prototype":"array px_get_record(resource $pxdoc, int $num [, int $mode = ''])","return":"<p class=\"para\">   Returns the <code class=\"parameter\">num<\/code>&#039;th record from the paradox   database. The record is returned as an associated array with its keys   being the field names.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_get_schema":{"id":"function.px-get-schema","purpose":"Returns the database schema","prototype":"array px_get_schema(resource $pxdoc [, int $mode = ''])","return":"<p class=\"para\">   Returns the schema of a database file as an associated array. The key name   is equal to the field name. Each array element is itself an associated   array containing the two fields <em>type<\/em> and   <em>size<\/em>. <em>type<\/em> is one of the constants in   table <a href=\"paradox.constants.html#paradox.table-fieldtypes\" class=\"link\">Constants for field   types<\/a>. <em>size<\/em> is the number of bytes this field   consumes in the record. The total of all field sizes is equal to the   record size as it can be retrieved with <span class=\"function\">px-get-info<\/span>.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_get_value":{"id":"function.px-get-value","purpose":"Gets a value","prototype":"float px_get_value(resource $pxdoc, string $name)","return":"<p class=\"para\">   Returns the value of the parameter or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.1.0"},"px_insert_record":{"id":"function.px-insert-record","purpose":"Inserts record into paradox database","prototype":"int px_insert_record(resource $pxdoc, array $data)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure or the record number in case of success.  <\/p>","versions":"PECL paradox >= 1.4.0"},"px_new":{"id":"function.px-new","purpose":"Create a new paradox object","prototype":"resource px_new()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_numfields":{"id":"function.px-numfields","purpose":"Returns number of fields in a database","prototype":"int px_numfields(resource $pxdoc)","return":"<p class=\"para\">   Returns the number of fields in a database file. The return value of this   function is identical to the element <em>numfields<\/em> in the   array returned by <span class=\"function\">px_get_info<\/span>.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_numrecords":{"id":"function.px-numrecords","purpose":"Returns number of records in a database","prototype":"int px_numrecords(resource $pxdoc)","return":"<p class=\"para\">   Returns the number of records in a database file. The return value of this   function is identical to the element <em>numrecords<\/em> in the   array returned by <span class=\"function\">px_get_info<\/span>.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_open_fp":{"id":"function.px-open-fp","purpose":"Open paradox database","prototype":"bool px_open_fp(resource $pxdoc, resource $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_put_record":{"id":"function.px-put-record","purpose":"Stores record into paradox database","prototype":"bool px_put_record(resource $pxdoc, array $record [, int $recpos = -1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_retrieve_record":{"id":"function.px-retrieve-record","purpose":"Returns record of paradox database","prototype":"array px_retrieve_record(resource $pxdoc, int $num [, int $mode = ''])","return":"<p class=\"para\">   Returns the <code class=\"parameter\">num<\/code>&#039;th record from the paradox   database. The record is returned as an associated array with its keys   being the field names.  <\/p>","versions":"PECL paradox >= 1.4.0"},"px_set_blob_file":{"id":"function.px-set-blob-file","purpose":"Sets the file where blobs are read from","prototype":"bool px_set_blob_file(resource $pxdoc, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.3.0"},"px_set_parameter":{"id":"function.px-set-parameter","purpose":"Sets a parameter","prototype":"bool px_set_parameter(resource $pxdoc, string $name, string $value)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.<\/p>","versions":"PECL paradox >= 1.1.0"},"px_set_tablename":{"id":"function.px-set-tablename","purpose":"Sets the name of a table (deprecated)","prototype":"void px_set_tablename(resource $pxdoc, string $name)","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_set_targetencoding":{"id":"function.px-set-targetencoding","purpose":"Sets the encoding for character fields (deprecated)","prototype":"bool px_set_targetencoding(resource $pxdoc, string $encoding)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the encoding could not be set, e.g. the encoding is   unknown, or pxlib does not support recoding at all. In the second case a   warning will be issued.  <\/p>","versions":"PECL paradox >= 1.0.0"},"px_set_value":{"id":"function.px-set-value","purpose":"Sets a value","prototype":"bool px_set_value(resource $pxdoc, string $name, float $value)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.<\/p>","versions":"PECL paradox >= 1.1.0"},"px_timestamp2string":{"id":"function.px-timestamp2string","purpose":"Converts the timestamp into a string","prototype":"string px_timestamp2string(resource $pxdoc, float $value, string $format)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.4.0"},"px_update_record":{"id":"function.px-update-record","purpose":"Updates record in paradox database","prototype":"bool px_update_record(resource $pxdoc, array $data, int $num)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL paradox >= 1.4.0"},"pg_affected_rows":{"id":"function.pg-affected-rows","purpose":"Returns number of affected records (tuples)","prototype":"int pg_affected_rows(resource $result)","return":"<p class=\"para\">   The number of rows affected by the query.  If no tuple is   affected, it will return 0.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_cancel_query":{"id":"function.pg-cancel-query","purpose":"Cancel an asynchronous query","prototype":"bool pg_cancel_query(resource $connection)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_client_encoding":{"id":"function.pg-client-encoding","purpose":"Gets the client encoding","prototype":"string pg_client_encoding([resource $connection = ''])","return":"<p class=\"para\">    The client encoding, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"pg_close":{"id":"function.pg-close","purpose":"Closes a PostgreSQL connection","prototype":"bool pg_close([resource $connection = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_connect_poll":{"id":"function.pg-connect-poll","purpose":"Poll the status of an in-progress asynchronous PostgreSQL connection   attempt","prototype":"int pg_connect_poll(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>PGSQL_POLLING_FAILED<\/code><\/strong>,   <strong><code>PGSQL_POLLING_READING<\/code><\/strong>,   <strong><code>PGSQL_POLLING_WRITING<\/code><\/strong>,   <strong><code>PGSQL_POLLING_OK<\/code><\/strong>, or   <strong><code>PGSQL_POLLING_ACTIVE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"pg_connect":{"id":"function.pg-connect","purpose":"Open a PostgreSQL connection","prototype":"resource pg_connect(string $connection_string [, int $connect_type = ''])","return":"<p class=\"para\">   PostgreSQL connection resource on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_connection_busy":{"id":"function.pg-connection-busy","purpose":"Get connection is busy or not","prototype":"bool pg_connection_busy(resource $connection)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the connection is busy, <strong><code>FALSE<\/code><\/strong> otherwise.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_connection_reset":{"id":"function.pg-connection-reset","purpose":"Reset connection (reconnect)","prototype":"bool pg_connection_reset(resource $connection)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_connection_status":{"id":"function.pg-connection-status","purpose":"Get connection status","prototype":"int pg_connection_status(resource $connection)","return":"<p class=\"para\">    <strong><code>PGSQL_CONNECTION_OK<\/code><\/strong> or     <strong><code>PGSQL_CONNECTION_BAD<\/code><\/strong>.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_consume_input":{"id":"function.pg-consume-input","purpose":"Reads input on the connection","prototype":"bool pg_consume_input(resource $connection)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if no error occurred, or <strong><code>FALSE<\/code><\/strong> if there was an error. Note that   <strong><code>TRUE<\/code><\/strong> does not necessarily indicate that input was waiting to be read.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"pg_convert":{"id":"function.pg-convert","purpose":"Convert associative array values into forms suitable for SQL statements","prototype":"array pg_convert(resource $connection, string $table_name, array $assoc_array [, int $options = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of converted values, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_copy_from":{"id":"function.pg-copy-from","purpose":"Insert records into a table from an array","prototype":"bool pg_copy_from(resource $connection, string $table_name, array $rows [, string $delimiter = '' [, string $null_as = '']])","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_copy_to":{"id":"function.pg-copy-to","purpose":"Copy a table to an array","prototype":"array pg_copy_to(resource $connection, string $table_name [, string $delimiter = '' [, string $null_as = '']])","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> with one element for each line of <em>COPY<\/em> data.    It returns <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_dbname":{"id":"function.pg-dbname","purpose":"Get the database name","prototype":"string pg_dbname([resource $connection = ''])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the name of the database the    <code class=\"parameter\">connection<\/code> is to, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_delete":{"id":"function.pg-delete","purpose":"Deletes records","prototype":"mixed pg_delete(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  Returns <span class=\"type\">string<\/span> if <strong><code>PGSQL_DML_STRING<\/code><\/strong> is passed   via <code class=\"parameter\">options<\/code>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_end_copy":{"id":"function.pg-end-copy","purpose":"Sync with PostgreSQL backend","prototype":"bool pg_end_copy([resource $connection = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"pg_escape_bytea":{"id":"function.pg-escape-bytea","purpose":"Escape a string for insertion into a bytea field","prototype":"string pg_escape_bytea([resource $connection = '', string $data])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the escaped data.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_escape_identifier":{"id":"function.pg-escape-identifier","purpose":"Escape a identifier for insertion into a text field","prototype":"string pg_escape_identifier([resource $connection = '', string $data])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the escaped data.  <\/p>","versions":"PHP 5 >= 5.4.4, PHP 7"},"pg_escape_literal":{"id":"function.pg-escape-literal","purpose":"Escape a literal for insertion into a text field","prototype":"string pg_escape_literal([resource $connection = '', string $data])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the escaped data.  <\/p>","versions":"PHP 5 >= 5.4.4, PHP 7"},"pg_escape_string":{"id":"function.pg-escape-string","purpose":"Escape a string for query","prototype":"string pg_escape_string([resource $connection = '', string $data])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the escaped data.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_execute":{"id":"function.pg-execute","purpose":"Sends a request to execute a prepared statement with given parameters, and waits for the result","prototype":"resource pg_execute([resource $connection = '', string $stmtname, array $params])","return":"<p class=\"para\">    A query result resource on success or <strong><code>FALSE<\/code><\/strong> on failure.<\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_fetch_all_columns":{"id":"function.pg-fetch-all-columns","purpose":"Fetches all rows in a particular result column as an array","prototype":"array pg_fetch_all_columns(resource $result [, int $column = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> with all values in the result column.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">column<\/code> is larger than the number    of columns in the result, or on any other error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_fetch_all":{"id":"function.pg-fetch-all","purpose":"Fetches all rows from a result as an array","prototype":"array pg_fetch_all(resource $result [, int $result_type = PGSQL_ASSOC])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> with all rows in the result.  Each row is an array   of field values indexed by field name.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if there are no rows in the result, or on any   other error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_fetch_array":{"id":"function.pg-fetch-array","purpose":"Fetch a row as an array","prototype":"array pg_fetch_array(resource $result [, int $row = '' [, int $result_type = PGSQL_BOTH]])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> indexed numerically (beginning with 0) or   associatively (indexed by field name), or both.   Each value in the <span class=\"type\">array<\/span> is represented as a    <span class=\"type\">string<\/span>.  Database <em>NULL<\/em>   values are returned as <strong><code>NULL<\/code><\/strong>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">row<\/code> exceeds the number   of rows in the set, there are no more rows, or on any other error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_fetch_assoc":{"id":"function.pg-fetch-assoc","purpose":"Fetch a row as an associative array","prototype":"array pg_fetch_assoc(resource $result [, int $row = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> indexed associatively (by field name).   Each value in the <span class=\"type\">array<\/span> is represented as a    <span class=\"type\">string<\/span>.  Database <em>NULL<\/em>   values are returned as <strong><code>NULL<\/code><\/strong>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">row<\/code> exceeds the number   of rows in the set, there are no more rows, or on any other error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_fetch_object":{"id":"function.pg-fetch-object","purpose":"Fetch a row as an object","prototype":"object pg_fetch_object(resource $result [, int $row = '' [, int $result_type = PGSQL_ASSOC [, string $class_name = '' [, array $params = '']]]])","return":"<p class=\"para\">   An <span class=\"type\">object<\/span> with one attribute for each field   name in the result.  Database <em>NULL<\/em>   values are returned as <strong><code>NULL<\/code><\/strong>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">row<\/code> exceeds the number   of rows in the set, there are no more rows, or on any other error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_fetch_result":{"id":"function.pg-fetch-result","purpose":"Returns values from a result resource","prototype":"string pg_fetch_result(resource $result, int $row, mixed $field)","return":"<p class=\"para\">   Boolean is returned as &quot;t&quot; or &quot;f&quot;.  All   other types, including arrays are returned as strings formatted   in the same default PostgreSQL manner that you would see in the   <strong class=\"command\">psql<\/strong> program.  Database <em>NULL<\/em>   values are returned as <strong><code>NULL<\/code><\/strong>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">row<\/code> exceeds the number   of rows in the set, or on any other error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_fetch_row":{"id":"function.pg-fetch-row","purpose":"Get a row as an enumerated array","prototype":"array pg_fetch_row(resource $result [, int $row = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span>, indexed from 0 upwards, with each value   represented as a <span class=\"type\">string<\/span>.  Database <em>NULL<\/em>   values are returned as <strong><code>NULL<\/code><\/strong>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">row<\/code> exceeds the number   of rows in the set, there are no more rows, or on any other error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_field_is_null":{"id":"function.pg-field-is-null","purpose":"Test if a field is SQL NULL","prototype":"int pg_field_is_null(resource $result, int $row, mixed $field)","return":"<p class=\"para\">   Returns <em>1<\/em> if the field in the given row is SQL <em>NULL<\/em>, <em>0<\/em>   if not.  <strong><code>FALSE<\/code><\/strong> is returned if the row is out of range, or upon any other error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_field_name":{"id":"function.pg-field-name","purpose":"Returns the name of a field","prototype":"string pg_field_name(resource $result, int $field_number)","return":"<p class=\"para\">   The field name, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_field_num":{"id":"function.pg-field-num","purpose":"Returns the field number of the named field","prototype":"int pg_field_num(resource $result, string $field_name)","return":"<p class=\"para\">   The field number (numbered from 0), or -1 on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_field_prtlen":{"id":"function.pg-field-prtlen","purpose":"Returns the printed length","prototype":"integer pg_field_prtlen(resource $result, int $row_number, mixed $field_name_or_number)","return":"<p class=\"para\">   The field printed length, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_field_size":{"id":"function.pg-field-size","purpose":"Returns the internal storage size of the named field","prototype":"int pg_field_size(resource $result, int $field_number)","return":"<p class=\"para\">   The internal field storage size (in bytes).  -1 indicates a variable   length field.  <strong><code>FALSE<\/code><\/strong> is returned on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_field_table":{"id":"function.pg-field-table","purpose":"Returns the name or oid of the tables field","prototype":"mixed pg_field_table(resource $result, int $field_number [, bool $oid_only = ''])","return":"<p class=\"para\">   On success either the fields table name or oid. Or, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"pg_field_type_oid":{"id":"function.pg-field-type-oid","purpose":"Returns the type ID (OID) for the corresponding field number","prototype":"int pg_field_type_oid(resource $result, int $field_number)","return":"<p class=\"para\">   The OID of the field&#039;s base type. <strong><code>FALSE<\/code><\/strong> is returned on error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_field_type":{"id":"function.pg-field-type","purpose":"Returns the type name for the corresponding field number","prototype":"string pg_field_type(resource $result, int $field_number)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the base name of the field&#039;s type, or <strong><code>FALSE<\/code><\/strong>   on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_flush":{"id":"function.pg-flush","purpose":"Flush outbound query data on the connection","prototype":"mixed pg_flush(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the flush was successful or no data was waiting to be   flushed, <em>0<\/em> if part of the pending data was flushed but   more remains or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"pg_free_result":{"id":"function.pg-free-result","purpose":"Free result memory","prototype":"resource pg_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_get_notify":{"id":"function.pg-get-notify","purpose":"Gets SQL NOTIFY message","prototype":"array pg_get_notify(resource $connection [, int $result_type = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing the <em>NOTIFY<\/em> message name and backend PID.   As of PHP 5.4.0 and if supported by the server, the array also contains the server version and the payload.   Otherwise if no <em>NOTIFY<\/em> is waiting, then <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_get_pid":{"id":"function.pg-get-pid","purpose":"Gets the backend's process ID","prototype":"int pg_get_pid(resource $connection)","return":"<p class=\"para\">   The backend database process ID.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_get_result":{"id":"function.pg-get-result","purpose":"Get asynchronous query result","prototype":"resource pg_get_result([resource $connection = ''])","return":"<p class=\"para\">   The result <span class=\"type\">resource<\/span>, or <strong><code>FALSE<\/code><\/strong> if no more results are available.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_host":{"id":"function.pg-host","purpose":"Returns the host name associated with the connection","prototype":"string pg_host([resource $connection = ''])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the name of the host the    <code class=\"parameter\">connection<\/code> is to, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_insert":{"id":"function.pg-insert","purpose":"Insert array into table","prototype":"mixed pg_insert(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC])","return":"<p class=\"para\">   Returns the connection resource on success,  or <strong><code>FALSE<\/code><\/strong> on failure. Returns <span class=\"type\">string<\/span> if <strong><code>PGSQL_DML_STRING<\/code><\/strong> is passed   via <code class=\"parameter\">options<\/code>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_last_error":{"id":"function.pg-last-error","purpose":"Get the last error message string of a connection","prototype":"string pg_last_error([resource $connection = ''])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the last error message on the    given <code class=\"parameter\">connection<\/code>, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_last_notice":{"id":"function.pg-last-notice","purpose":"Returns the last notice message from PostgreSQL server","prototype":"mixed pg_last_notice(resource $connection [, int $option = PGSQL_NOTICE_LAST])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the last notice on the    given <code class=\"parameter\">connection<\/code> with   <strong><code>PGSQL_NOTICE_LAST<\/code><\/strong>,   an <span class=\"type\">array<\/span> with <strong><code>PGSQL_NOTICE_ALL<\/code><\/strong>,   a <span class=\"type\">boolean<\/span> with <strong><code>PGSQL_NOTICE_CLEAR<\/code><\/strong>,   or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"pg_last_oid":{"id":"function.pg-last-oid","purpose":"Returns the last row's OID","prototype":"string pg_last_oid(resource $result)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the OID assigned to the most recently inserted   row in the specified <code class=\"parameter\">connection<\/code>, or <strong><code>FALSE<\/code><\/strong> on error or   no available OID.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_close":{"id":"function.pg-lo-close","purpose":"Close a large object","prototype":"bool pg_lo_close(resource $large_object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_create":{"id":"function.pg-lo-create","purpose":"Create a large object","prototype":"int pg_lo_create([resource $connection = '', mixed $object_id])","return":"<p class=\"para\">   A large object <var class=\"varname\">OID<\/var> or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_export":{"id":"function.pg-lo-export","purpose":"Export a large object to file","prototype":"bool pg_lo_export([resource $connection = '', int $oid, string $pathname])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_import":{"id":"function.pg-lo-import","purpose":"Import a large object from file","prototype":"int pg_lo_import([resource $connection = '', string $pathname [, mixed $object_id = '']])","return":"<p class=\"para\">   The <var class=\"varname\">OID<\/var> of the newly created large object, or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_open":{"id":"function.pg-lo-open","purpose":"Open a large object","prototype":"resource pg_lo_open(resource $connection, int $oid, string $mode)","return":"<p class=\"para\">   A large object resource or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_read_all":{"id":"function.pg-lo-read-all","purpose":"Reads an entire large object and send straight to browser","prototype":"int pg_lo_read_all(resource $large_object)","return":"<p class=\"para\">   Number of bytes read or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_read":{"id":"function.pg-lo-read","purpose":"Read a large object","prototype":"string pg_lo_read(resource $large_object [, int $len = 8192])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing <code class=\"parameter\">len<\/code> bytes from the   large object, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_seek":{"id":"function.pg-lo-seek","purpose":"Seeks position within a large object","prototype":"bool pg_lo_seek(resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_tell":{"id":"function.pg-lo-tell","purpose":"Returns current seek position a of large object","prototype":"int pg_lo_tell(resource $large_object)","return":"<p class=\"para\">   The current seek offset (in number of bytes) from the beginning of the large   object.  If there is an error, the return value is negative.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_truncate":{"id":"function.pg-lo-truncate","purpose":"Truncates a large object","prototype":"bool pg_lo_truncate(resource $large_object, int $size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"pg_lo_unlink":{"id":"function.pg-lo-unlink","purpose":"Delete a large object","prototype":"bool pg_lo_unlink(resource $connection, int $oid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_lo_write":{"id":"function.pg-lo-write","purpose":"Write to a large object","prototype":"int pg_lo_write(resource $large_object, string $data [, int $len = ''])","return":"<p class=\"para\">   The number of bytes written to the large object, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_meta_data":{"id":"function.pg-meta-data","purpose":"Get meta data for table","prototype":"array pg_meta_data(resource $connection, string $table_name [, bool $extended = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of the table definition, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_num_fields":{"id":"function.pg-num-fields","purpose":"Returns the number of fields in a result","prototype":"int pg_num_fields(resource $result)","return":"<p class=\"para\">   The number of fields (columns) in the result. On error, -1 is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_num_rows":{"id":"function.pg-num-rows","purpose":"Returns the number of rows in a result","prototype":"int pg_num_rows(resource $result)","return":"<p class=\"para\">   The number of rows in the result. On error, -1 is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_options":{"id":"function.pg-options","purpose":"Get the options associated with the connection","prototype":"string pg_options([resource $connection = ''])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the <code class=\"parameter\">connection<\/code>   options, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_parameter_status":{"id":"function.pg-parameter-status","purpose":"Looks up a current parameter setting of the server","prototype":"string pg_parameter_status([resource $connection = '', string $param_name])","return":"<p class=\"para\">A <span class=\"type\">string<\/span> containing the value of the parameter, <strong><code>FALSE<\/code><\/strong> on failure or invalid  <code class=\"parameter\">param_name<\/code>.<\/p>","versions":"PHP 5, PHP 7"},"pg_pconnect":{"id":"function.pg-pconnect","purpose":"Open a persistent PostgreSQL connection","prototype":"resource pg_pconnect(string $connection_string [, int $connect_type = ''])","return":"<p class=\"para\">   PostgreSQL connection resource on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_ping":{"id":"function.pg-ping","purpose":"Ping database connection","prototype":"bool pg_ping([resource $connection = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_port":{"id":"function.pg-port","purpose":"Return the port number associated with the connection","prototype":"int pg_port([resource $connection = ''])","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> containing the port number of the database   server the <code class=\"parameter\">connection<\/code> is to,    or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_prepare":{"id":"function.pg-prepare","purpose":"Submits a request to create a prepared statement with the   given parameters, and waits for completion","prototype":"resource pg_prepare([resource $connection = '', string $stmtname, string $query])","return":"<p class=\"para\">   A query result resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_put_line":{"id":"function.pg-put-line","purpose":"Send a NULL-terminated string to PostgreSQL backend","prototype":"bool pg_put_line([resource $connection = '', string $data])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"pg_query_params":{"id":"function.pg-query-params","purpose":"Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text","prototype":"resource pg_query_params([resource $connection = '', string $query, array $params])","return":"<p class=\"para\">    A query result resource on success or <strong><code>FALSE<\/code><\/strong> on failure.<\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_query":{"id":"function.pg-query","purpose":"Execute a query","prototype":"resource pg_query([resource $connection = '', string $query])","return":"<p class=\"para\">    A query result resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_result_error_field":{"id":"function.pg-result-error-field","purpose":"Returns an individual field of an error report","prototype":"string pg_result_error_field(resource $result, int $fieldcode)","return":"<p class=\"para\">A <span class=\"type\">string<\/span> containing the contents of the error field, <strong><code>NULL<\/code><\/strong> if the field does not exist or <strong><code>FALSE<\/code><\/strong>  on failure.<\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_result_error":{"id":"function.pg-result-error","purpose":"Get error message associated with result","prototype":"string pg_result_error(resource $result)","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span>. Returns empty string if there is no error. If there is an error associated with the   <code class=\"parameter\">result<\/code> parameter, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_result_seek":{"id":"function.pg-result-seek","purpose":"Set internal row offset in result resource","prototype":"bool pg_result_seek(resource $result, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_result_status":{"id":"function.pg-result-status","purpose":"Get status of query result","prototype":"mixed pg_result_status(resource $result [, int $type = PGSQL_STATUS_LONG])","return":"<p class=\"para\">   Possible return values are <strong><code>PGSQL_EMPTY_QUERY<\/code><\/strong>,   <strong><code>PGSQL_COMMAND_OK<\/code><\/strong>, <strong><code>PGSQL_TUPLES_OK<\/code><\/strong>, <strong><code>PGSQL_COPY_OUT<\/code><\/strong>,   <strong><code>PGSQL_COPY_IN<\/code><\/strong>, <strong><code>PGSQL_BAD_RESPONSE<\/code><\/strong>, <strong><code>PGSQL_NONFATAL_ERROR<\/code><\/strong> and   <strong><code>PGSQL_FATAL_ERROR<\/code><\/strong> if <strong><code>PGSQL_STATUS_LONG<\/code><\/strong> is   specified.  Otherwise, a <span class=\"type\">string<\/span> containing the PostgreSQL command tag is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_select":{"id":"function.pg-select","purpose":"Select records","prototype":"mixed pg_select(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  Returns <span class=\"type\">string<\/span> if <strong><code>PGSQL_DML_STRING<\/code><\/strong> is passed   via <code class=\"parameter\">options<\/code>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_send_execute":{"id":"function.pg-send-execute","purpose":"Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)","prototype":"bool pg_send_execute(resource $connection, string $stmtname, array $params)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  Use <span class=\"function\">pg_get_result<\/span>  to determine the query result.<\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_send_prepare":{"id":"function.pg-send-prepare","purpose":"Sends a request to create a prepared statement with the given parameters, without waiting for completion","prototype":"bool pg_send_prepare(resource $connection, string $stmtname, string $query)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  Use <span class=\"function\">pg_get_result<\/span>  to determine the query result.<\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_send_query_params":{"id":"function.pg-send-query-params","purpose":"Submits a command and separate parameters to the server without waiting for the result(s)","prototype":"bool pg_send_query_params(resource $connection, string $query, array $params)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.<\/p>  <p class=\"para\">   Use <span class=\"function\">pg_get_result<\/span> to determine the query result.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_send_query":{"id":"function.pg-send-query","purpose":"Sends asynchronous query","prototype":"bool pg_send_query(resource $connection, string $query)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.<\/p>  <p class=\"para\">   Use <span class=\"function\">pg_get_result<\/span> to determine the query result.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pg_set_client_encoding":{"id":"function.pg-set-client-encoding","purpose":"Set the client encoding","prototype":"int pg_set_client_encoding([resource $connection = '', string $encoding])","return":"<p class=\"para\">   Returns 0 on success or -1 on error.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"pg_set_error_verbosity":{"id":"function.pg-set-error-verbosity","purpose":"Determines the verbosity of messages returned by pg_last_error    and pg_result_error","prototype":"int pg_set_error_verbosity([resource $connection = '', int $verbosity])","return":"<p class=\"para\">   The previous verbosity level: <strong><code>PGSQL_ERRORS_TERSE<\/code><\/strong>,   <strong><code>PGSQL_ERRORS_DEFAULT<\/code><\/strong>   or <strong><code>PGSQL_ERRORS_VERBOSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_socket":{"id":"function.pg-socket","purpose":"Get a read only handle to the socket underlying a PostgreSQL connection","prototype":"resource pg_socket(resource $connection)","return":"<p class=\"para\">   A socket resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"pg_trace":{"id":"function.pg-trace","purpose":"Enable tracing a PostgreSQL connection","prototype":"bool pg_trace(string $pathname [, string $mode = \"w\" [, resource $connection = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"pg_transaction_status":{"id":"function.pg-transaction-status","purpose":"Returns the current in-transaction status of the server","prototype":"int pg_transaction_status(resource $connection)","return":"<p class=\"para\">The status can be <strong><code>PGSQL_TRANSACTION_IDLE<\/code><\/strong> (currently idle),    <strong><code>PGSQL_TRANSACTION_ACTIVE<\/code><\/strong> (a command is in progress),    <strong><code>PGSQL_TRANSACTION_INTRANS<\/code><\/strong> (idle, in a valid transaction block),    or <strong><code>PGSQL_TRANSACTION_INERROR<\/code><\/strong> (idle, in a failed transaction block).    <strong><code>PGSQL_TRANSACTION_UNKNOWN<\/code><\/strong> is reported if the connection is bad.    <strong><code>PGSQL_TRANSACTION_ACTIVE<\/code><\/strong> is reported only when a query    has been sent to the server and not yet completed.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"pg_tty":{"id":"function.pg-tty","purpose":"Return the TTY name associated with the connection","prototype":"string pg_tty([resource $connection = ''])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the debug TTY of    the <code class=\"parameter\">connection<\/code>, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pg_unescape_bytea":{"id":"function.pg-unescape-bytea","purpose":"Unescape binary for bytea type","prototype":"string pg_unescape_bytea(string $data)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> containing the unescaped data.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_untrace":{"id":"function.pg-untrace","purpose":"Disable tracing of a PostgreSQL connection","prototype":"bool pg_untrace([resource $connection = ''])","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"pg_update":{"id":"function.pg-update","purpose":"Update table","prototype":"mixed pg_update(resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  Returns <span class=\"type\">string<\/span> if <strong><code>PGSQL_DML_STRING<\/code><\/strong> is passed   via <code class=\"parameter\">options<\/code>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pg_version":{"id":"function.pg-version","purpose":"Returns an array with client, protocol and server version (when available)","prototype":"array pg_version([resource $connection = ''])","return":"<p class=\"para\">   Returns an array with <em>client<\/em>, <em>protocol<\/em>    and <em>server<\/em> keys and values (if available).  Returns   <strong><code>FALSE<\/code><\/strong> on error or invalid connection.  <\/p>","versions":"PHP 5, PHP 7"},"sqlite_array_query":{"id":"function.sqlite-array-query","purpose":"Execute a query against a given database and returns an array","prototype":"array sqlite_array_query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the entire result set; <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::arrayQuery":{"id":"function.sqlite-array-query","purpose":"Execute a query against a given database and returns an array","prototype":"array SQLiteDatabase::arrayQuery(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the entire result set; <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_busy_timeout":{"id":"function.sqlite-busy-timeout","purpose":"Set busy timeout duration, or disable busy handlers","prototype":"void sqlite_busy_timeout(resource $dbhandle, int $milliseconds)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::busyTimeout":{"id":"function.sqlite-busy-timeout","purpose":"Set busy timeout duration, or disable busy handlers","prototype":"void SQLiteDatabase::busyTimeout(resource $dbhandle, int $milliseconds)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_changes":{"id":"function.sqlite-changes","purpose":"Returns the number of rows that were changed by the most   recent SQL statement","prototype":"int sqlite_changes(resource $dbhandle)","return":"<p class=\"para\">   Returns the number of changed rows.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::changes":{"id":"function.sqlite-changes","purpose":"Returns the number of rows that were changed by the most   recent SQL statement","prototype":"int SQLiteDatabase::changes(resource $dbhandle)","return":"<p class=\"para\">   Returns the number of changed rows.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_close":{"id":"function.sqlite-close","purpose":"Closes an open SQLite database","prototype":"void sqlite_close(resource $dbhandle)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_column":{"id":"function.sqlite-column","purpose":"Fetches a column from the current row of a result set","prototype":"mixed sqlite_column(resource $result, mixed $index_or_name [, bool $decode_binary = ''])","return":"<p class=\"para\">   Returns the column value.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::column":{"id":"function.sqlite-column","purpose":"Fetches a column from the current row of a result set","prototype":"mixed SQLiteResult::column(resource $result, mixed $index_or_name [, bool $decode_binary = ''])","return":"<p class=\"para\">   Returns the column value.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::column":{"id":"function.sqlite-column","purpose":"Fetches a column from the current row of a result set","prototype":"mixed SQLiteUnbuffered::column(resource $result, mixed $index_or_name [, bool $decode_binary = ''])","return":"<p class=\"para\">   Returns the column value.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_create_aggregate":{"id":"function.sqlite-create-aggregate","purpose":"Register an aggregating UDF for use in SQL statements","prototype":"void sqlite_create_aggregate(resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::createAggregate":{"id":"function.sqlite-create-aggregate","purpose":"Register an aggregating UDF for use in SQL statements","prototype":"void SQLiteDatabase::createAggregate(resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_create_function":{"id":"function.sqlite-create-function","purpose":"Registers a \"regular\" User Defined Function for use in SQL statements","prototype":"void sqlite_create_function(resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, sqlite >= 1.0.0"},"SQLiteDatabase::createFunction":{"id":"function.sqlite-create-function","purpose":"Registers a \"regular\" User Defined Function for use in SQL statements","prototype":"void SQLiteDatabase::createFunction(resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.4.0, sqlite >= 1.0.0"},"sqlite_current":{"id":"function.sqlite-current","purpose":"Fetches the current row from a result set as an array","prototype":"array sqlite_current(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the current row from a result set; <strong><code>FALSE<\/code><\/strong> if the   current position is beyond the final row.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::current":{"id":"function.sqlite-current","purpose":"Fetches the current row from a result set as an array","prototype":"array SQLiteResult::current(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the current row from a result set; <strong><code>FALSE<\/code><\/strong> if the   current position is beyond the final row.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::current":{"id":"function.sqlite-current","purpose":"Fetches the current row from a result set as an array","prototype":"array SQLiteUnbuffered::current(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the current row from a result set; <strong><code>FALSE<\/code><\/strong> if the   current position is beyond the final row.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_error_string":{"id":"function.sqlite-error-string","purpose":"Returns the textual description of an error code","prototype":"string sqlite_error_string(int $error_code)","return":"<p class=\"para\">   Returns a human readable description of the <code class=\"parameter\">error_code<\/code>,   as a <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_escape_string":{"id":"function.sqlite-escape-string","purpose":"Escapes a string for use as a query parameter","prototype":"string sqlite_escape_string(string $item)","return":"<p class=\"para\">   Returns an escaped <span class=\"type\">string<\/span> for use in an SQLite SQL statement.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_exec":{"id":"function.sqlite-exec","purpose":"Executes a result-less query against a given database","prototype":"bool sqlite_exec(resource $dbhandle, string $query [, string $error_msg = ''])","return":"<p class=\"para\">   This function will return a boolean result; <strong><code>TRUE<\/code><\/strong> for success or <strong><code>FALSE<\/code><\/strong> for failure.   If you need to run a query that returns rows, see <span class=\"function\">sqlite_query<\/span>.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.3"},"SQLiteDatabase::exec":{"id":"function.sqlite-exec","purpose":"Executes a result-less query against a given database","prototype":"bool SQLiteDatabase::exec(resource $dbhandle, string $query [, string $error_msg = ''])","return":"<p class=\"para\">   This function will return a boolean result; <strong><code>TRUE<\/code><\/strong> for success or <strong><code>FALSE<\/code><\/strong> for failure.   If you need to run a query that returns rows, see <span class=\"function\">sqlite_query<\/span>.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.3"},"sqlite_factory":{"id":"function.sqlite-factory","purpose":"Opens an SQLite database and returns an SQLiteDatabase object","prototype":"SQLiteDatabase sqlite_factory(string $filename [, int $mode = 0666 [, string $error_message = '']])","return":"<p class=\"para\">   Returns an SQLiteDatabase object on success, <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 < 5.4.0"},"sqlite_fetch_all":{"id":"function.sqlite-fetch-all","purpose":"Fetches all rows from a result set as an array of arrays","prototype":"array sqlite_fetch_all(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the remaining rows in a result set. If called right   after <span class=\"function\">sqlite_query<\/span>, it returns all rows. If called   after <span class=\"function\">sqlite_fetch_array<\/span>, it returns the rest. If   there are no rows in a result set, it returns an empty array.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::fetchAll":{"id":"function.sqlite-fetch-all","purpose":"Fetches all rows from a result set as an array of arrays","prototype":"array SQLiteResult::fetchAll(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the remaining rows in a result set. If called right   after <span class=\"function\">sqlite_query<\/span>, it returns all rows. If called   after <span class=\"function\">sqlite_fetch_array<\/span>, it returns the rest. If   there are no rows in a result set, it returns an empty array.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::fetchAll":{"id":"function.sqlite-fetch-all","purpose":"Fetches all rows from a result set as an array of arrays","prototype":"array SQLiteUnbuffered::fetchAll(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the remaining rows in a result set. If called right   after <span class=\"function\">sqlite_query<\/span>, it returns all rows. If called   after <span class=\"function\">sqlite_fetch_array<\/span>, it returns the rest. If   there are no rows in a result set, it returns an empty array.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_fetch_array":{"id":"function.sqlite-fetch-array","purpose":"Fetches the next row from a result set as an array","prototype":"array sqlite_fetch_array(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the next row from a result set; <strong><code>FALSE<\/code><\/strong> if the   next position is beyond the final row.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::fetch":{"id":"function.sqlite-fetch-array","purpose":"Fetches the next row from a result set as an array","prototype":"array SQLiteResult::fetch(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the next row from a result set; <strong><code>FALSE<\/code><\/strong> if the   next position is beyond the final row.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::fetch":{"id":"function.sqlite-fetch-array","purpose":"Fetches the next row from a result set as an array","prototype":"array SQLiteUnbuffered::fetch(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = '']])","return":"<p class=\"para\">   Returns an array of the next row from a result set; <strong><code>FALSE<\/code><\/strong> if the   next position is beyond the final row.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_fetch_column_types":{"id":"function.sqlite-fetch-column-types","purpose":"Return an array of column types from a particular table","prototype":"array sqlite_fetch_column_types(string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC])","return":"<p class=\"para\">   Returns an array of column data types; <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0"},"SQLiteDatabase::fetchColumnTypes":{"id":"function.sqlite-fetch-column-types","purpose":"Return an array of column types from a particular table","prototype":"array SQLiteDatabase::fetchColumnTypes(string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC])","return":"<p class=\"para\">   Returns an array of column data types; <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0"},"sqlite_fetch_object":{"id":"function.sqlite-fetch-object","purpose":"Fetches the next row from a result set as an object","prototype":"object sqlite_fetch_object(resource $result [, string $class_name = '' [, array $ctor_params = '' [, bool $decode_binary = '']]])","return":"","versions":"PHP 5 < 5.4.0"},"SQLiteResult::fetchObject":{"id":"function.sqlite-fetch-object","purpose":"Fetches the next row from a result set as an object","prototype":"object SQLiteResult::fetchObject(resource $result [, string $class_name = '' [, array $ctor_params = '' [, bool $decode_binary = '']]])","return":"","versions":"PHP 5 < 5.4.0"},"SQLiteUnbuffered::fetchObject":{"id":"function.sqlite-fetch-object","purpose":"Fetches the next row from a result set as an object","prototype":"object SQLiteUnbuffered::fetchObject(resource $result [, string $class_name = '' [, array $ctor_params = '' [, bool $decode_binary = '']]])","return":"","versions":"PHP 5 < 5.4.0"},"sqlite_fetch_single":{"id":"function.sqlite-fetch-single","purpose":"Fetches the first column of a result set as a string","prototype":"string sqlite_fetch_single(resource $result [, bool $decode_binary = ''])","return":"<p class=\"para\">   Returns the first column value, as a string.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.1"},"SQLiteResult::fetchSingle":{"id":"function.sqlite-fetch-single","purpose":"Fetches the first column of a result set as a string","prototype":"string SQLiteResult::fetchSingle(resource $result [, bool $decode_binary = ''])","return":"<p class=\"para\">   Returns the first column value, as a string.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.1"},"SQLiteUnbuffered::fetchSingle":{"id":"function.sqlite-fetch-single","purpose":"Fetches the first column of a result set as a string","prototype":"string SQLiteUnbuffered::fetchSingle(resource $result [, bool $decode_binary = ''])","return":"<p class=\"para\">   Returns the first column value, as a string.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.1"},"sqlite_fetch_string":{"id":"function.sqlite-fetch-string","purpose":"Alias of sqlite_fetch_single","prototype":" sqlite_fetch_string()","return":"","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_field_name":{"id":"function.sqlite-field-name","purpose":"Returns the name of a particular field","prototype":"string sqlite_field_name(resource $result, int $field_index)","return":"<p class=\"para\">   Returns the name of a field in an SQLite result set, given the ordinal   column number; <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::fieldName":{"id":"function.sqlite-field-name","purpose":"Returns the name of a particular field","prototype":"string SQLiteResult::fieldName(resource $result, int $field_index)","return":"<p class=\"para\">   Returns the name of a field in an SQLite result set, given the ordinal   column number; <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::fieldName":{"id":"function.sqlite-field-name","purpose":"Returns the name of a particular field","prototype":"string SQLiteUnbuffered::fieldName(resource $result, int $field_index)","return":"<p class=\"para\">   Returns the name of a field in an SQLite result set, given the ordinal   column number; <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">The column names returned by<strong><code>SQLITE_ASSOC<\/code><\/strong> and <strong><code>SQLITE_BOTH<\/code><\/strong> will becase-folded according to the value of the<a href=\"sqlite.configuration.html#ini.sqlite.assoc-case\" class=\"link\">sqlite.assoc_case<\/a> configurationoption.<\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_has_more":{"id":"function.sqlite-has-more","purpose":"Finds whether or not more rows are available","prototype":"bool sqlite_has_more(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more rows available from the   <code class=\"parameter\">result<\/code> handle, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_has_prev":{"id":"function.sqlite-has-prev","purpose":"Returns whether or not a previous row is available","prototype":"bool sqlite_has_prev(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more previous rows available from the   <code class=\"parameter\">result<\/code> handle, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0"},"SQLiteResult::hasPrev":{"id":"function.sqlite-has-prev","purpose":"Returns whether or not a previous row is available","prototype":"bool SQLiteResult::hasPrev(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more previous rows available from the   <code class=\"parameter\">result<\/code> handle, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0"},"sqlite_key":{"id":"function.sqlite-key","purpose":"Returns the current row index","prototype":"int sqlite_key()","return":"<p class=\"para\">   Returns the current row index of the buffered result set   <code class=\"parameter\">result<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.0 < 5.4.0"},"SQLiteResult::key":{"id":"function.sqlite-key","purpose":"Returns the current row index","prototype":"int SQLiteResult::key()","return":"<p class=\"para\">   Returns the current row index of the buffered result set   <code class=\"parameter\">result<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.0 < 5.4.0"},"sqlite_last_error":{"id":"function.sqlite-last-error","purpose":"Returns the error code of the last error for a database","prototype":"int sqlite_last_error(resource $dbhandle)","return":"<p class=\"para\">   Returns an error code, or 0 if no error occurred.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::lastError":{"id":"function.sqlite-last-error","purpose":"Returns the error code of the last error for a database","prototype":"int SQLiteDatabase::lastError(resource $dbhandle)","return":"<p class=\"para\">   Returns an error code, or 0 if no error occurred.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_last_insert_rowid":{"id":"function.sqlite-last-insert-rowid","purpose":"Returns the rowid of the most recently inserted row","prototype":"int sqlite_last_insert_rowid(resource $dbhandle)","return":"<p class=\"para\">   Returns the row id, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::lastInsertRowid":{"id":"function.sqlite-last-insert-rowid","purpose":"Returns the rowid of the most recently inserted row","prototype":"int SQLiteDatabase::lastInsertRowid(resource $dbhandle)","return":"<p class=\"para\">   Returns the row id, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_libencoding":{"id":"function.sqlite-libencoding","purpose":"Returns the encoding of the linked SQLite library","prototype":"string sqlite_libencoding()","return":"<p class=\"para\">   Returns the library encoding.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_libversion":{"id":"function.sqlite-libversion","purpose":"Returns the version of the linked SQLite library","prototype":"string sqlite_libversion()","return":"<p class=\"para\">   Returns the library version, as a string.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_next":{"id":"function.sqlite-next","purpose":"Seek to the next row number","prototype":"bool sqlite_next(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::next":{"id":"function.sqlite-next","purpose":"Seek to the next row number","prototype":"bool SQLiteResult::next(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::next":{"id":"function.sqlite-next","purpose":"Seek to the next row number","prototype":"bool SQLiteUnbuffered::next(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_num_fields":{"id":"function.sqlite-num-fields","purpose":"Returns the number of fields in a result set","prototype":"int sqlite_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::numFields":{"id":"function.sqlite-num-fields","purpose":"Returns the number of fields in a result set","prototype":"int SQLiteResult::numFields(resource $result)","return":"<p class=\"para\">   Returns the number of fields, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteUnbuffered::numFields":{"id":"function.sqlite-num-fields","purpose":"Returns the number of fields in a result set","prototype":"int SQLiteUnbuffered::numFields(resource $result)","return":"<p class=\"para\">   Returns the number of fields, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_num_rows":{"id":"function.sqlite-num-rows","purpose":"Returns the number of rows in a buffered result set","prototype":"int sqlite_num_rows(resource $result)","return":"<p class=\"para\">   Returns the number of rows, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::numRows":{"id":"function.sqlite-num-rows","purpose":"Returns the number of rows in a buffered result set","prototype":"int SQLiteResult::numRows(resource $result)","return":"<p class=\"para\">   Returns the number of rows, as an integer.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_open":{"id":"function.sqlite-open","purpose":"Opens an SQLite database and create the database if it does not exist","prototype":"resource sqlite_open(string $filename [, int $mode = 0666 [, string $error_message = '']])","return":"<p class=\"para\">   Returns a resource (database handle) on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_popen":{"id":"function.sqlite-popen","purpose":"Opens a persistent handle to an SQLite database and create the database if it does not exist","prototype":"resource sqlite_popen(string $filename [, int $mode = 0666 [, string $error_message = '']])","return":"<p class=\"para\">   Returns a resource (database handle) on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_prev":{"id":"function.sqlite-prev","purpose":"Seek to the previous row number of a result set","prototype":"bool sqlite_prev(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if there are no more previous rows.  <\/p>","versions":"PHP 5 < 5.4.0"},"SQLiteResult::prev":{"id":"function.sqlite-prev","purpose":"Seek to the previous row number of a result set","prototype":"bool SQLiteResult::prev(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if there are no more previous rows.  <\/p>","versions":"PHP 5 < 5.4.0"},"sqlite_query":{"id":"function.sqlite-query","purpose":"Executes a query against a given database and returns a result handle","prototype":"SQLiteResult sqlite_query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string $error_msg = '']])","return":"<p class=\"para\">   This function will return a result handle or <strong><code>FALSE<\/code><\/strong> on failure.   For queries that return rows, the result handle can then be used with   functions such as <span class=\"function\">sqlite_fetch_array<\/span> and   <span class=\"function\">sqlite_seek<\/span>.  <\/p>  <p class=\"para\">   Regardless of the query type, this function will return <strong><code>FALSE<\/code><\/strong> if the   query failed.  <\/p>  <p class=\"para\">   <span class=\"function\">sqlite_query<\/span> returns a buffered, seekable result   handle.  This is useful for reasonably small queries where you need to   be able to randomly access the rows.  Buffered result handles will   allocate memory to hold the entire result and will not return until it   has been fetched.  If you only need sequential access to the data, it is   recommended that you use the much higher performance   <span class=\"function\">sqlite_unbuffered_query<\/span> instead.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::query":{"id":"function.sqlite-query","purpose":"Executes a query against a given database and returns a result handle","prototype":"SQLiteResult SQLiteDatabase::query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string $error_msg = '']])","return":"<p class=\"para\">   This function will return a result handle or <strong><code>FALSE<\/code><\/strong> on failure.   For queries that return rows, the result handle can then be used with   functions such as <span class=\"function\">sqlite_fetch_array<\/span> and   <span class=\"function\">sqlite_seek<\/span>.  <\/p>  <p class=\"para\">   Regardless of the query type, this function will return <strong><code>FALSE<\/code><\/strong> if the   query failed.  <\/p>  <p class=\"para\">   <span class=\"function\">sqlite_query<\/span> returns a buffered, seekable result   handle.  This is useful for reasonably small queries where you need to   be able to randomly access the rows.  Buffered result handles will   allocate memory to hold the entire result and will not return until it   has been fetched.  If you only need sequential access to the data, it is   recommended that you use the much higher performance   <span class=\"function\">sqlite_unbuffered_query<\/span> instead.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_rewind":{"id":"function.sqlite-rewind","purpose":"Seek to the first row number","prototype":"bool sqlite_rewind(resource $result)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if there are no rows in the result set, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::rewind":{"id":"function.sqlite-rewind","purpose":"Seek to the first row number","prototype":"bool SQLiteResult::rewind(resource $result)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if there are no rows in the result set, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_seek":{"id":"function.sqlite-seek","purpose":"Seek to a particular row number of a buffered result set","prototype":"bool sqlite_seek(resource $result, int $rownum)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the row does not exist, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteResult::seek":{"id":"function.sqlite-seek","purpose":"Seek to a particular row number of a buffered result set","prototype":"bool SQLiteResult::seek(resource $result, int $rownum)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the row does not exist, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_single_query":{"id":"function.sqlite-single-query","purpose":"Executes a query and returns either an array for one single column or the value of the first row","prototype":"array sqlite_single_query(resource $db, string $query [, bool $first_row_only = '' [, bool $decode_binary = '']])","return":"","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.1"},"SQLiteDatabase::singleQuery":{"id":"function.sqlite-single-query","purpose":"Executes a query and returns either an array for one single column or the value of the first row","prototype":"array SQLiteDatabase::singleQuery(resource $db, string $query [, bool $first_row_only = '' [, bool $decode_binary = '']])","return":"","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.1"},"sqlite_udf_decode_binary":{"id":"function.sqlite-udf-decode-binary","purpose":"Decode binary data passed as parameters to an UDF","prototype":"string sqlite_udf_decode_binary(string $data)","return":"<p class=\"para\">   The decoded <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_udf_encode_binary":{"id":"function.sqlite-udf-encode-binary","purpose":"Encode binary data before returning it from an UDF","prototype":"string sqlite_udf_encode_binary(string $data)","return":"<p class=\"para\">   The encoded <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_unbuffered_query":{"id":"function.sqlite-unbuffered-query","purpose":"Execute a query that does not prefetch and buffer all data","prototype":"SQLiteUnbuffered sqlite_unbuffered_query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string $error_msg = '']])","return":"<p class=\"para\">   Returns a result handle or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   <span class=\"function\">sqlite_unbuffered_query<\/span> returns a sequential   forward-only result set that can only be used to read each row, one after   the other.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"SQLiteDatabase::unbufferedQuery":{"id":"function.sqlite-unbuffered-query","purpose":"Execute a query that does not prefetch and buffer all data","prototype":"SQLiteUnbuffered SQLiteDatabase::unbufferedQuery(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string $error_msg = '']])","return":"<p class=\"para\">   Returns a result handle or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   <span class=\"function\">sqlite_unbuffered_query<\/span> returns a sequential   forward-only result set that can only be used to read each row, one after   the other.  <\/p>","versions":"PHP 5 < 5.4.0, PECL sqlite >= 1.0.0"},"sqlite_valid":{"id":"function.sqlite-valid","purpose":"Returns whether more rows are available","prototype":"bool sqlite_valid(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more rows available from the   <code class=\"parameter\">result<\/code> handle, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0"},"SQLiteResult::valid":{"id":"function.sqlite-valid","purpose":"Returns whether more rows are available","prototype":"bool SQLiteResult::valid(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more rows available from the   <code class=\"parameter\">result<\/code> handle, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0"},"SQLiteUnbuffered::valid":{"id":"function.sqlite-valid","purpose":"Returns whether more rows are available","prototype":"bool SQLiteUnbuffered::valid(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are more rows available from the   <code class=\"parameter\">result<\/code> handle, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 < 5.4.0"},"SQLite3::busyTimeout":{"id":"sqlite3.busytimeout","purpose":"Sets the busy connection handler","prototype":"bool SQLite3::busyTimeout(int $msecs)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"SQLite3::changes":{"id":"sqlite3.changes","purpose":"Returns the number of database rows that were changed (or inserted or   deleted) by the most recent SQL statement","prototype":"int SQLite3::changes()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span> value corresponding to the number of   database rows changed (or inserted or deleted) by the most recent SQL   statement.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::close":{"id":"sqlite3.close","purpose":"Closes the database connection","prototype":"bool SQLite3::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::__construct":{"id":"sqlite3.construct","purpose":"Instantiates an SQLite3 object and opens an SQLite 3 database","prototype":" SQLite3::__construct(string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = '']])","return":"<p class=\"para\">   Returns an SQLite3 object on success.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::createAggregate":{"id":"sqlite3.createaggregate","purpose":"Registers a PHP function for use as an SQL aggregate function","prototype":"bool SQLite3::createAggregate(string $name, mixed $step_callback, mixed $final_callback [, int $argument_count = -1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> upon successful creation of the aggregate, <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::createCollation":{"id":"sqlite3.createcollation","purpose":"Registers a PHP function for use as an SQL collating function","prototype":"bool SQLite3::createCollation(string $name, callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.11, PHP 7"},"SQLite3::createFunction":{"id":"sqlite3.createfunction","purpose":"Registers a PHP function for use as an SQL scalar function","prototype":"bool SQLite3::createFunction(string $name, mixed $callback [, int $argument_count = -1 [, int $flags = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> upon successful creation of the function, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::enableExceptions":{"id":"sqlite3.enableexceptions","purpose":"Enable throwing exceptions","prototype":"bool SQLite3::enableExceptions([bool $enableExceptions = ''])","return":"<p class=\"para\">   Returns the old value; <strong><code>TRUE<\/code><\/strong> if exceptions were enabled, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::escapeString":{"id":"sqlite3.escapestring","purpose":"Returns a string that has been properly escaped","prototype":"string SQLite3::escapeString(string $value)","return":"<p class=\"para\">   Returns a properly escaped string that may be used safely in an SQL   statement.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::exec":{"id":"sqlite3.exec","purpose":"Executes a result-less query against a given database","prototype":"bool SQLite3::exec(string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the query succeeded, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::lastErrorCode":{"id":"sqlite3.lasterrorcode","purpose":"Returns the numeric result code of the most recent failed SQLite request","prototype":"int SQLite3::lastErrorCode()","return":"<p class=\"para\">   Returns an integer value representing the numeric result code of the most   recent failed SQLite request.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::lastErrorMsg":{"id":"sqlite3.lasterrormsg","purpose":"Returns English text describing the most recent failed SQLite request","prototype":"string SQLite3::lastErrorMsg()","return":"<p class=\"para\">   Returns an English string describing the most recent failed SQLite request.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::lastInsertRowID":{"id":"sqlite3.lastinsertrowid","purpose":"Returns the row ID of the most recent INSERT into the database","prototype":"int SQLite3::lastInsertRowID()","return":"<p class=\"para\">   Returns the row ID of the most recent INSERT into the database  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::loadExtension":{"id":"sqlite3.loadextension","purpose":"Attempts to load an SQLite extension library","prototype":"bool SQLite3::loadExtension(string $shared_library)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the extension is successfully loaded, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::open":{"id":"sqlite3.open","purpose":"Opens an SQLite database","prototype":"void SQLite3::open(string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::openBlob":{"id":"sqlite3.openblob","purpose":"Opens a stream resource to read a BLOB","prototype":"resource SQLite3::openBlob(string $table, string $column, int $rowid [, string $dbname = \"main\" [, int $flags = SQLITE3_OPEN_READONLY]])","return":"<p class=\"para\">   Returns a stream resource,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::prepare":{"id":"sqlite3.prepare","purpose":"Prepares an SQL statement for execution","prototype":"SQLite3Stmt SQLite3::prepare(string $query)","return":"<p class=\"para\">   Returns an <span class=\"classname\">SQLite3Stmt<\/span> object on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::query":{"id":"sqlite3.query","purpose":"Executes an SQL query","prototype":"SQLite3Result SQLite3::query(string $query)","return":"<p class=\"para\">   Returns an <span class=\"classname\">SQLite3Result<\/span> object,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::querySingle":{"id":"sqlite3.querysingle","purpose":"Executes a query and returns a single result","prototype":"mixed SQLite3::querySingle(string $query [, bool $entire_row = ''])","return":"<p class=\"para\">   Returns the value of the first column of results or an array of the entire   first row (if <code class=\"parameter\">entire_row<\/code> is <strong><code>TRUE<\/code><\/strong>).  <\/p>  <p class=\"para\">   If the query is valid but no results are returned, then <strong><code>NULL<\/code><\/strong> will be   returned if <code class=\"parameter\">entire_row<\/code> is <strong><code>FALSE<\/code><\/strong>, otherwise an   empty array is returned.  <\/p>  <p class=\"para\">   Invalid or failing queries will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3::version":{"id":"sqlite3.version","purpose":"Returns the SQLite3 library version as a string constant and as a number","prototype":"array SQLite3::version()","return":"<p class=\"para\">   Returns an associative array with the keys &quot;versionString&quot; and   &quot;versionNumber&quot;.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::bindParam":{"id":"sqlite3stmt.bindparam","purpose":"Binds a parameter to a statement variable","prototype":"bool SQLite3Stmt::bindParam(mixed $sql_param, mixed $param [, int $type = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the parameter is bound to the statement variable, <strong><code>FALSE<\/code><\/strong>   on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::bindValue":{"id":"sqlite3stmt.bindvalue","purpose":"Binds the value of a parameter to a statement variable","prototype":"bool SQLite3Stmt::bindValue(mixed $sql_param, mixed $value [, int $type = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the value is bound to the statement variable, <strong><code>FALSE<\/code><\/strong>   on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::clear":{"id":"sqlite3stmt.clear","purpose":"Clears all current bound parameters","prototype":"bool SQLite3Stmt::clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on successful clearing of bound parameters, <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::close":{"id":"sqlite3stmt.close","purpose":"Closes the prepared statement","prototype":"bool SQLite3Stmt::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::execute":{"id":"sqlite3stmt.execute","purpose":"Executes a prepared statement and returns a result set object","prototype":"SQLite3Result SQLite3Stmt::execute()","return":"<p class=\"para\">   Returns an <span class=\"classname\">SQLite3Result<\/span> object on successful execution of the prepared   statement, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::paramCount":{"id":"sqlite3stmt.paramcount","purpose":"Returns the number of parameters within the prepared statement","prototype":"int SQLite3Stmt::paramCount()","return":"<p class=\"para\">   Returns the number of parameters within the prepared statement.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Stmt::readOnly":{"id":"sqlite3stmt.readonly","purpose":"Returns whether a statement is definitely read only","prototype":"bool SQLite3Stmt::readOnly()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a statement is definitely read only, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.6, PHP 7"},"SQLite3Stmt::reset":{"id":"sqlite3stmt.reset","purpose":"Resets the prepared statement","prototype":"bool SQLite3Stmt::reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the statement is successfully reset, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Result::columnName":{"id":"sqlite3result.columnname","purpose":"Returns the name of the nth column","prototype":"string SQLite3Result::columnName(int $column_number)","return":"<p class=\"para\">   Returns the <span class=\"type\">string<\/span> name of the column identified by   <code class=\"parameter\">column_number<\/code>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Result::columnType":{"id":"sqlite3result.columntype","purpose":"Returns the type of the nth column","prototype":"int SQLite3Result::columnType(int $column_number)","return":"<p class=\"para\">   Returns the data type index of the column identified by   <code class=\"parameter\">column_number<\/code> (one of   <strong><code>SQLITE3_INTEGER<\/code><\/strong>, <strong><code>SQLITE3_FLOAT<\/code><\/strong>,   <strong><code>SQLITE3_TEXT<\/code><\/strong>, <strong><code>SQLITE3_BLOB<\/code><\/strong>, or   <strong><code>SQLITE3_NULL<\/code><\/strong>).  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Result::fetchArray":{"id":"sqlite3result.fetcharray","purpose":"Fetches a result row as an associative or numerically indexed array or both","prototype":"array SQLite3Result::fetchArray([int $mode = SQLITE3_BOTH])","return":"<p class=\"para\">   Returns a result row as an associatively or numerically indexed array or   both. Alternately will return <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>  <p class=\"para\">   The types of the values of the returned array are mapped from SQLite3 types   as follows: integers are mapped to <span class=\"type\">integer<\/span> if they fit into the   range <strong><code>PHP_INT_MIN<\/code><\/strong>..<strong><code>PHP_INT_MAX<\/code><\/strong>, and   to <span class=\"type\">string<\/span> otherwise. Floats are mapped to <span class=\"type\">float<\/span>,   <em>NULL<\/em> values are mapped to <span class=\"type\">null<\/span>, and strings   and blobs are mapped to <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Result::finalize":{"id":"sqlite3result.finalize","purpose":"Closes the result set","prototype":"bool SQLite3Result::finalize()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Result::numColumns":{"id":"sqlite3result.numcolumns","purpose":"Returns the number of columns in the result set","prototype":"int SQLite3Result::numColumns()","return":"<p class=\"para\">   Returns the number of columns in the result set.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SQLite3Result::reset":{"id":"sqlite3result.reset","purpose":"Resets the result set back to the first row","prototype":"bool SQLite3Result::reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the result set is successfully reset   back to the first row, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"sqlsrv_begin_transaction":{"id":"function.sqlsrv-begin-transaction","purpose":"Begins a database transaction","prototype":"bool sqlsrv_begin_transaction(resource $conn)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_cancel":{"id":"function.sqlsrv-cancel","purpose":"Cancels a statement","prototype":"bool sqlsrv_cancel(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_client_info":{"id":"function.sqlsrv-client-info","purpose":"Returns information about the client and specified connection","prototype":"array sqlsrv_client_info(resource $conn)","return":"<p class=\"para\">   Returns an associative array with keys described in the table below.    Returns <strong><code>FALSE<\/code><\/strong> otherwise.    <table class=\"doctable table\">   <caption><strong>Array returned by sqlsrv_client_info<\/strong><\/caption>       <thead>     <tr>      <th>Key<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>DriverDllName<\/td>      <td>SQLNCLI10.DLL<\/td>     <\/tr>     <tr>      <td>DriverODBCVer<\/td>      <td>ODBC version (xx.yy)<\/td>     <\/tr>     <tr>      <td>DriverVer<\/td>      <td>SQL Server Native Client DLL version (10.5.xxx)<\/td>     <\/tr>     <tr>      <td>ExtensionVer<\/td>      <td>php_sqlsrv.dll version (2.0.xxx.x)<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":""},"sqlsrv_close":{"id":"function.sqlsrv-close","purpose":"Closes an open connection and releases resourses associated with the connection","prototype":"bool sqlsrv_close(resource $conn)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_commit":{"id":"function.sqlsrv-commit","purpose":"Commits a transaction that was begun with sqlsrv_begin_transaction","prototype":"bool sqlsrv_commit(resource $conn)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_configure":{"id":"function.sqlsrv-configure","purpose":"Changes the driver error handling and logging configurations","prototype":"bool sqlsrv_configure(string $setting, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_connect":{"id":"function.sqlsrv-connect","purpose":"Opens a connection to a Microsoft SQL Server database","prototype":"resource sqlsrv_connect(string $serverName [, array $connectionInfo = ''])","return":"<p class=\"para\">   A connection resource. If a connection cannot be successfully opened, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":""},"sqlsrv_errors":{"id":"function.sqlsrv-errors","purpose":"Returns error and warning information about the last SQLSRV operation performed","prototype":"mixed sqlsrv_errors([int $errorsOrWarnings = ''])","return":"<p class=\"para\">   If errors and\/or warnings occurred on the last sqlsrv operation, an array of    arrays containing error information is returned. If no errors and\/or warnings    occurred on the last sqlsrv operation, <strong><code>NULL<\/code><\/strong> is returned. The following table    describes the structure of the returned arrays:   <table class=\"doctable table\">   <caption><strong>Array returned by sqlsrv_errors<\/strong><\/caption>       <thead>     <tr>      <th>Key<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>SQLSTATE<\/td>      <td>For errors that originate from the ODBC driver, the SQLSTATE returned       by ODBC. For errors that originate from the Microsoft Drivers for PHP for       SQL Server, a SQLSTATE of IMSSP. For warnings that originate from the       Microsoft Drivers for PHP for SQL Server, a SQLSTATE of 01SSP.      <\/td>     <\/tr>     <tr>      <td>code<\/td>      <td>For errors that originate from SQL Server, the native SQL Server       error code. For errors that originate from the ODBC driver, the error       code returned by ODBC. For errors that originate from the Microsoft Drivers       for PHP for SQL Server, the Microsoft Drivers for PHP for SQL Server error code.      <\/td>     <\/tr>     <tr>      <td>message<\/td>      <td>A description of the error.<\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":""},"sqlsrv_execute":{"id":"function.sqlsrv-execute","purpose":"Executes a statement prepared with sqlsrv_prepare","prototype":"bool sqlsrv_execute(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_fetch_array":{"id":"function.sqlsrv-fetch-array","purpose":"Returns a row as an array","prototype":"array sqlsrv_fetch_array(resource $stmt [, int $fetchType = '' [, int $row = '' [, int $offset = '']]])","return":"<p class=\"para\">   Returns an array on success, <strong><code>NULL<\/code><\/strong> if there are no more rows to return, and    <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":""},"sqlsrv_fetch_object":{"id":"function.sqlsrv-fetch-object","purpose":"Retrieves the next row of data in a result set as an object","prototype":"mixed sqlsrv_fetch_object(resource $stmt [, string $className = '' [, array $ctorParams = '' [, int $row = '' [, int $offset = '']]]])","return":"<p class=\"para\">    Returns an object on success, <strong><code>NULL<\/code><\/strong> if there are no more rows to return,    and <strong><code>FALSE<\/code><\/strong> if an error occurs or if the specified class does not exist.  <\/p>","versions":""},"sqlsrv_fetch":{"id":"function.sqlsrv-fetch","purpose":"Makes the next row in a result set available for reading","prototype":"mixed sqlsrv_fetch(resource $stmt [, int $row = '' [, int $offset = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the next row of a result set was successfully retrieved,    <strong><code>FALSE<\/code><\/strong> if an error occurs, and <strong><code>NULL<\/code><\/strong> if there are no more rows in the result set.  <\/p>","versions":""},"sqlsrv_field_metadata":{"id":"function.sqlsrv-field-metadata","purpose":"Retrieves metadata for the fields of a statement prepared by   sqlsrv_prepare or sqlsrv_query","prototype":"mixed sqlsrv_field_metadata(resource $stmt)","return":"<p class=\"para\">   Returns an array of arrays is returned on success. Otherwise, <strong><code>FALSE<\/code><\/strong> is returned.    Each returned array is described by the following table:   <table class=\"doctable table\">   <caption><strong>Array returned by sqlsrv_field_metadata<\/strong><\/caption>       <thead>     <tr>      <th>Key<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>Name<\/td>      <td>The name of the field.<\/td>     <\/tr>     <tr>      <td>Type<\/td>      <td>The numeric value for the SQL type.<\/td>     <\/tr>     <tr>      <td>Size<\/td>      <td>The number of characters for fields of character type, the number of       bytes for fields of binary type, or <strong><code>NULL<\/code><\/strong> for other types.<\/td>     <\/tr>     <tr>      <td>Precision<\/td>      <td>The precision for types of variable precision, <strong><code>NULL<\/code><\/strong> for other types.<\/td>     <\/tr>     <tr>      <td>Scale<\/td>      <td>The scale for types of variable scale, <strong><code>NULL<\/code><\/strong> for other types.<\/td>     <\/tr>     <tr>      <td>Nullable<\/td>      <td>An enumeration indicating whether the column is nullable, not nullable,       or if it is not known.<\/td>     <\/tr>    <\/tbody>     <\/table>  For more information, see <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/cc296197.aspx\" class=\"link external\">&raquo;&nbsp;sqlsrv_field_metadata<\/a>   in the Microsoft SQLSRV documentation.  <\/p>","versions":""},"sqlsrv_free_stmt":{"id":"function.sqlsrv-free-stmt","purpose":"Frees all resources for the specified statement","prototype":"bool sqlsrv_free_stmt(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_get_config":{"id":"function.sqlsrv-get-config","purpose":"Returns the value of the specified configuration setting","prototype":"mixed sqlsrv_get_config(string $setting)","return":"<p class=\"para\">   Returns the value of the specified setting. If an invalid setting is specified,    <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":""},"sqlsrv_get_field":{"id":"function.sqlsrv-get-field","purpose":"Gets field data from the currently selected row","prototype":"mixed sqlsrv_get_field(resource $stmt, int $fieldIndex [, int $getAsType = ''])","return":"<p class=\"para\">   Returns data from the specified field on success. Returns <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":""},"sqlsrv_has_rows":{"id":"function.sqlsrv-has-rows","purpose":"Indicates whether the specified statement has rows","prototype":"bool sqlsrv_has_rows(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the specified statement has rows and <strong><code>FALSE<\/code><\/strong> if the statement    does not have rows or if an error occurred.  <\/p>","versions":""},"sqlsrv_next_result":{"id":"function.sqlsrv-next-result","purpose":"Makes the next result of the specified statement active","prototype":"mixed sqlsrv_next_result(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the next result was successfully retrieved, <strong><code>FALSE<\/code><\/strong> if an error    occurred, and <strong><code>NULL<\/code><\/strong> if there are no more results to retrieve.  <\/p>","versions":""},"sqlsrv_num_fields":{"id":"function.sqlsrv-num-fields","purpose":"Retrieves the number of fields (columns) on a statement","prototype":"mixed sqlsrv_num_fields(resource $stmt)","return":"<p class=\"para\">   Returns the number of fields on success. Returns <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":""},"sqlsrv_num_rows":{"id":"function.sqlsrv-num-rows","purpose":"Retrieves the number of rows in a result set","prototype":"mixed sqlsrv_num_rows(resource $stmt)","return":"<p class=\"para\">   Returns the number of rows retrieved on success and <strong><code>FALSE<\/code><\/strong> if an error occurred.    If a forward cursor (the default) or dynamic cursor is used, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":""},"sqlsrv_prepare":{"id":"function.sqlsrv-prepare","purpose":"Prepares a query for execution","prototype":"mixed sqlsrv_prepare(resource $conn, string $sql [, array $params = '' [, array $options = '']])","return":"<p class=\"para\">   Returns a statement resource on success and <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":""},"sqlsrv_query":{"id":"function.sqlsrv-query","purpose":"Prepares and executes a query","prototype":"mixed sqlsrv_query(resource $conn, string $sql [, array $params = '' [, array $options = '']])","return":"<p class=\"para\">   Returns a statement resource on success and <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":""},"sqlsrv_rollback":{"id":"function.sqlsrv-rollback","purpose":"Rolls back a transaction that was begun with   sqlsrv_begin_transaction","prototype":"bool sqlsrv_rollback(resource $conn)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"sqlsrv_rows_affected":{"id":"function.sqlsrv-rows-affected","purpose":"Returns the number of rows modified by the last INSERT, UPDATE, or   DELETE query executed","prototype":"int sqlsrv_rows_affected(resource $stmt)","return":"<p class=\"para\">   Returns the number of rows affected by the last INSERT, UPDATE, or DELETE query.    If no rows were affected, 0 is returned. If the number of affected rows cannot    be determined, -1 is returned. If an error occurred, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":""},"sqlsrv_send_stream_data":{"id":"function.sqlsrv-send-stream-data","purpose":"Sends data from parameter streams to the server","prototype":"bool sqlsrv_send_stream_data(resource $stmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there is more data to send and <strong><code>FALSE<\/code><\/strong> if there is not.  <\/p>","versions":""},"sqlsrv_server_info":{"id":"function.sqlsrv-server-info","purpose":"Returns information about the server","prototype":"array sqlsrv_server_info(resource $conn)","return":"<p class=\"para\">   Returns an array as described in the following table:  <table class=\"doctable table\">  <caption><strong>Returned Array<\/strong><\/caption>       <thead>     <tr>      <th>CurrentDatabase<\/th>      <th>The connected-to database.<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>SQLServerVersion<\/td>      <td>The SQL Server version.<\/td>     <\/tr>     <tr>      <td>SQLServerName<\/td>      <td>The name of the server.<\/td>     <\/tr>    <\/tbody>     <\/table> <\/p>","versions":""},"sybase_affected_rows":{"id":"function.sybase-affected-rows","purpose":"Gets number of affected rows in last query","prototype":"int sybase_affected_rows([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns the number of affected rows, as an integer.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_close":{"id":"function.sybase-close","purpose":"Closes a Sybase connection","prototype":"bool sybase_close([resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_connect":{"id":"function.sybase-connect","purpose":"Opens a Sybase server connection","prototype":"resource sybase_connect([string $servername = '' [, string $username = '' [, string $password = '' [, string $charset = '' [, string $appname = '' [, bool $new = '']]]]]])","return":"<p class=\"para\">   Returns a positive Sybase link identifier on success, or <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_data_seek":{"id":"function.sybase-data-seek","purpose":"Moves internal row pointer","prototype":"bool sybase_data_seek(resource $result_identifier, int $row_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_deadlock_retry_count":{"id":"function.sybase-deadlock-retry-count","purpose":"Sets the deadlock retry count","prototype":"void sybase_deadlock_retry_count(int $retry_count)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"sybase_fetch_array":{"id":"function.sybase-fetch-array","purpose":"Fetch row as array","prototype":"array sybase_fetch_array(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    When selecting fields with identical names (for instance, in a join), the    associative indices will have a sequential number prepended. See the    example for details.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5"},"sybase_fetch_assoc":{"id":"function.sybase-fetch-assoc","purpose":"Fetch a result row as an associative array","prototype":"array sybase_fetch_assoc(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"sybase_fetch_field":{"id":"function.sybase-fetch-field","purpose":"Get field information from a result","prototype":"object sybase_fetch_field(resource $result [, int $field_offset = -1])","return":"<p class=\"para\">   Returns an object containing field information.  <\/p>  <p class=\"para\">   The properties of the object are:  <\/p>  <ul class=\"itemizedlist\">   <li class=\"listitem\">    <span class=\"simpara\">     name - column name.  if the column is a result of a function, this     property is set to computed#N, where #N is a serial number.    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     column_source - the table from which the column was taken    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     max_length - maximum length of the column    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     numeric - 1 if the column is numeric    <\/span>   <\/li>   <li class=\"listitem\">    <span class=\"simpara\">     type - datatype of the column    <\/span>   <\/li>  <\/ul>","versions":"PHP 4, PHP 5"},"sybase_fetch_object":{"id":"function.sybase-fetch-object","purpose":"Fetch a row as an object","prototype":"object sybase_fetch_object(resource $result [, mixed $object = ''])","return":"<p class=\"para\">   Returns an object with properties that correspond to the fetched row, or   <strong><code>FALSE<\/code><\/strong> if there are no more rows.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_fetch_row":{"id":"function.sybase-fetch-row","purpose":"Get a result row as an enumerated array","prototype":"array sybase_fetch_row(resource $result)","return":"<p class=\"para\">   Returns an array that corresponds to the fetched row, or <strong><code>FALSE<\/code><\/strong> if there   are no more rows. Each result column is stored in an array offset,   starting at offset 0.  <\/p>  <table class=\"doctable table\">   <caption><strong>Data types<\/strong><\/caption>       <thead>     <tr>      <th>PHP<\/th>      <th>Sybase<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>string<\/td>      <td>VARCHAR, TEXT, CHAR, IMAGE, BINARY, VARBINARY, DATETIME<\/td>     <\/tr>     <tr>      <td>int<\/td>      <td>NUMERIC (w\/o precision), DECIMAL (w\/o precision), INT, BIT, TINYINT, SMALLINT<\/td>     <\/tr>     <tr>      <td>float<\/td>      <td>NUMERIC (w\/ precision), DECIMAL (w\/ precision), REAL, FLOAT, MONEY<\/td>     <\/tr>     <tr>      <td><strong><code>NULL<\/code><\/strong><\/td>      <td>NULL<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PHP 4, PHP 5"},"sybase_field_seek":{"id":"function.sybase-field-seek","purpose":"Sets field offset","prototype":"bool sybase_field_seek(resource $result, int $field_offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_free_result":{"id":"function.sybase-free-result","purpose":"Frees result memory","prototype":"bool sybase_free_result(resource $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_get_last_message":{"id":"function.sybase-get-last-message","purpose":"Returns the last message from the server","prototype":"string sybase_get_last_message()","return":"<p class=\"para\">   Returns the message as a string.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_min_client_severity":{"id":"function.sybase-min-client-severity","purpose":"Sets minimum client severity","prototype":"void sybase_min_client_severity(int $severity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_min_error_severity":{"id":"function.sybase-min-error-severity","purpose":"Sets minimum error severity","prototype":"void sybase_min_error_severity(int $severity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_min_message_severity":{"id":"function.sybase-min-message-severity","purpose":"Sets minimum message severity","prototype":"void sybase_min_message_severity(int $severity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_min_server_severity":{"id":"function.sybase-min-server-severity","purpose":"Sets minimum server severity","prototype":"void sybase_min_server_severity(int $severity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_num_fields":{"id":"function.sybase-num-fields","purpose":"Gets the number of fields in a result set","prototype":"int sybase_num_fields(resource $result)","return":"<p class=\"para\">   Returns the number of fields as an integer.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_num_rows":{"id":"function.sybase-num-rows","purpose":"Get number of rows in a result set","prototype":"int sybase_num_rows(resource $result)","return":"<p class=\"para\">   Returns the number of rows as an integer.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_pconnect":{"id":"function.sybase-pconnect","purpose":"Open persistent Sybase connection","prototype":"resource sybase_pconnect([string $servername = '' [, string $username = '' [, string $password = '' [, string $charset = '' [, string $appname = '']]]]])","return":"<p class=\"para\">   Returns a positive Sybase persistent link identifier on success, or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_query":{"id":"function.sybase-query","purpose":"Sends a Sybase query","prototype":"mixed sybase_query(string $query [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns a positive Sybase result identifier on success, <strong><code>FALSE<\/code><\/strong> on error,   or <strong><code>TRUE<\/code><\/strong> if the query was successful but didn&#039;t return any columns.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_result":{"id":"function.sybase-result","purpose":"Get result data","prototype":"string sybase_result(resource $result, int $row, mixed $field)","return":"<p class=\"para\">   <span class=\"function\">sybase_result<\/span> returns the contents of one cell from a   Sybase result set.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_select_db":{"id":"function.sybase-select-db","purpose":"Selects a Sybase database","prototype":"bool sybase_select_db(string $database_name [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"sybase_set_message_handler":{"id":"function.sybase-set-message-handler","purpose":"Sets the handler called when a server message is raised","prototype":"bool sybase_set_message_handler(callable $handler [, resource $link_identifier = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"sybase_unbuffered_query":{"id":"function.sybase-unbuffered-query","purpose":"Send a Sybase query and do not block","prototype":"resource sybase_unbuffered_query(string $query, resource $link_identifier [, bool $store_result = ''])","return":"<p class=\"para\">   Returns a positive Sybase result identifier on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5"},"TokyoTyrant::add":{"id":"tokyotyrant.add","purpose":"Adds to a numeric key","prototype":"number TokyoTyrant::add(string $key, number $increment [, int $type = ''])","return":"<p class=\"para\">   Returns the new value on success  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::connect":{"id":"tokyotyrant.connect","purpose":"Connect to a database","prototype":"TokyoTyrant TokyoTyrant::connect(string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options = '']])","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::connectUri":{"id":"tokyotyrant.connecturi","purpose":"Connects to a database","prototype":"TokyoTyrant TokyoTyrant::connectUri(string $uri)","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::__construct":{"id":"tokyotyrant.construct","purpose":"Construct a new TokyoTyrant object","prototype":" TokyoTyrant::__construct([string $host = '' [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options = '']]])","return":"<p class=\"para\">   Throws TokyoTyrantException if connection to database fails  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::copy":{"id":"tokyotyrant.copy","purpose":"Copies the database","prototype":"TokyoTyrant TokyoTyrant::copy(string $path)","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::ext":{"id":"tokyotyrant.ext","purpose":"Execute a remote script","prototype":"string TokyoTyrant::ext(string $name, int $options, string $key, string $value)","return":"<p class=\"para\">   Returns the result of the script function  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::fwmKeys":{"id":"tokyotyrant.fwmkeys","purpose":"Returns the forward matching keys","prototype":"array TokyoTyrant::fwmKeys(string $prefix, int $max_recs)","return":"<p class=\"para\">   Returns an array of matching keys. The values are not returned  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::get":{"id":"tokyotyrant.get","purpose":"The get purpose","prototype":"array TokyoTyrant::get(mixed $keys)","return":"<p class=\"para\">   Returns a string or an array based on the given parameters. Throws a TokyoTyrantException   on error. If string is passed null is returned if the key is not found. In case an array   is given as an parameter only existing keys will be returned. It is not an error to pass    a key that does not exist.   <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::getIterator":{"id":"tokyotyrant.getiterator","purpose":"Get an iterator","prototype":"TokyoTyrantIterator TokyoTyrant::getIterator()","return":"<p class=\"para\">   This method returns TokyoTyrantIterator object and throws TokyoTyrantException on failure.  <\/p>","versions":""},"TokyoTyrant::num":{"id":"tokyotyrant.num","purpose":"Number of records in the database","prototype":"int TokyoTyrant::num()","return":"<p class=\"para\">   Returns number of records in the database  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::out":{"id":"tokyotyrant.out","purpose":"Removes records","prototype":"string TokyoTyrant::out(mixed $keys)","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::put":{"id":"tokyotyrant.put","purpose":"Puts values","prototype":"TokyoTyrant TokyoTyrant::put(mixed $keys [, string $value = null])","return":"<p class=\"para\">    This method returns a reference to the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::putCat":{"id":"tokyotyrant.putcat","purpose":"Concatenates to a record","prototype":"TokyoTyrant TokyoTyrant::putCat(mixed $keys [, string $value = ''])","return":"<p class=\"para\">   This method returns a reference to the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::putKeep":{"id":"tokyotyrant.putkeep","purpose":"Puts a record","prototype":"TokyoTyrant TokyoTyrant::putKeep(mixed $keys [, string $value = ''])","return":"<p class=\"para\">   This method returns a reference to the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::putNr":{"id":"tokyotyrant.putnr","purpose":"Puts value","prototype":"TokyoTyrant TokyoTyrant::putNr(mixed $keys [, string $value = null])","return":"<p class=\"para\">    This method returns a reference to the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::putShl":{"id":"tokyotyrant.putshl","purpose":"Concatenates to a record","prototype":"mixed TokyoTyrant::putShl(string $key, string $value, int $width)","return":"<p class=\"para\">   This method returns a reference to the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::restore":{"id":"tokyotyrant.restore","purpose":"Restore the database","prototype":"mixed TokyoTyrant::restore(string $log_dir, int $timestamp [, bool $check_consistency = ''])","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::setMaster":{"id":"tokyotyrant.setmaster","purpose":"Set the replication master","prototype":"mixed TokyoTyrant::setMaster(string $host, int $port, int $timestamp [, bool $check_consistency = ''])","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::size":{"id":"tokyotyrant.size","purpose":"Returns the size of the value","prototype":"int TokyoTyrant::size(string $key)","return":"<p class=\"para\">   Returns the size of the key or throw TokyoTyrantException on error  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::stat":{"id":"tokyotyrant.stat","purpose":"Get statistics","prototype":"array TokyoTyrant::stat()","return":"<p class=\"para\">   Returns an array of key value pairs describing the statistics  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::sync":{"id":"tokyotyrant.sync","purpose":"Synchronize the database","prototype":"mixed TokyoTyrant::sync()","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrant::tune":{"id":"tokyotyrant.tune","purpose":"Tunes connection values","prototype":"TokyoTyrant TokyoTyrant::tune(float $timeout [, int $options = TokyoTyrant::RDBT_RECON])","return":"<p class=\"para\">    This method returns a reference to the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"TokyoTyrant::vanish":{"id":"tokyotyrant.vanish","purpose":"Empties the database","prototype":"mixed TokyoTyrant::vanish()","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::add":{"id":"tokyotyranttable.add","purpose":"Adds a record","prototype":"void TokyoTyrantTable::add(string $key, mixed $increment [, string $type = ''])","return":"<p class=\"para\">   This method throws an TokyoTyrantException if used through this class.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::genUid":{"id":"tokyotyranttable.genuid","purpose":"Generate unique id","prototype":"int TokyoTyrantTable::genUid()","return":"<p class=\"para\">   Returns an unique id or throws TokyoTyrantException on error   <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::get":{"id":"tokyotyranttable.get","purpose":"Get a row","prototype":"array TokyoTyrantTable::get(mixed $keys)","return":"<p class=\"para\">   Returns the row as an array  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::getIterator":{"id":"tokyotyranttable.getiterator","purpose":"Get an iterator","prototype":"TokyoTyrantIterator TokyoTyrantTable::getIterator()","return":"<p class=\"para\">   This method returns TokyoTyrantIterator object and throws TokyoTyrantException on failure.  <\/p>","versions":""},"TokyoTyrantTable::getQuery":{"id":"tokyotyranttable.getquery","purpose":"Get a query object","prototype":"TokyoTyrantQuery TokyoTyrantTable::getQuery()","return":"<p class=\"para\">   Returns TokyoTyrantQuery on success and throws TokyoTyrantException on error  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::out":{"id":"tokyotyranttable.out","purpose":"Remove records","prototype":"void TokyoTyrantTable::out(mixed $keys)","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::put":{"id":"tokyotyranttable.put","purpose":"Store a row","prototype":"int TokyoTyrantTable::put(string $key, array $columns)","return":"<p class=\"para\">   Returns the primary key on success and throws TokyoTyrantException on error  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::putCat":{"id":"tokyotyranttable.putcat","purpose":"Concatenates to a row","prototype":"void TokyoTyrantTable::putCat(string $key, array $columns)","return":"<p class=\"para\">   Returns the primary key and throws TokyoTyrantException on error.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::putKeep":{"id":"tokyotyranttable.putkeep","purpose":"Put a new record","prototype":"void TokyoTyrantTable::putKeep(string $key, array $columns)","return":"<p class=\"para\">   Returns the primary key and throws TokyoTyrantException on error.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::putNr":{"id":"tokyotyranttable.putnr","purpose":"Puts value","prototype":"void TokyoTyrantTable::putNr(mixed $keys [, string $value = ''])","return":"<p class=\"para\">    This method is not supported on table databases. Calling this method through TokyoTyrantTable     is considered an error and an TokyoTyrantException will be thrown.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::putShl":{"id":"tokyotyranttable.putshl","purpose":"Concatenates to a record","prototype":"void TokyoTyrantTable::putShl(string $key, string $value, int $width)","return":"<p class=\"para\">   This method is not supported on table databases.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantTable::setIndex":{"id":"tokyotyranttable.setindex","purpose":"Sets index","prototype":"mixed TokyoTyrantTable::setIndex(string $column, int $type)","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::addCond":{"id":"tokyotyrantquery.addcond","purpose":"Adds a condition to the query","prototype":"mixed TokyoTyrantQuery::addCond(string $name, int $op, string $expr)","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::__construct":{"id":"tokyotyrantquery.construct","purpose":"Construct a new query","prototype":" TokyoTyrantQuery::__construct(TokyoTyrantTable $table)","return":"<p class=\"para\">   Returns a new TokyoTyrantQuery object and throws TokyoTyrantException on error  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::count":{"id":"tokyotyrantquery.count","purpose":"Counts records","prototype":"int TokyoTyrantQuery::count()","return":"<p class=\"para\">   Returns a count of matching rows and throws TokyoTyrantException on error  <\/p>","versions":""},"TokyoTyrantQuery::current":{"id":"tokyotyrantquery.current","purpose":"Returns the current element","prototype":"array TokyoTyrantQuery::current()","return":"<p class=\"para\">   Returns the current row  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::hint":{"id":"tokyotyrantquery.hint","purpose":"Get the hint string of the query","prototype":"string TokyoTyrantQuery::hint()","return":"<p class=\"para\">   This method always returns a string  <\/p>","versions":""},"TokyoTyrantQuery::key":{"id":"tokyotyrantquery.key","purpose":"Returns the current key","prototype":"string TokyoTyrantQuery::key()","return":"<p class=\"para\">   Returns the current key and throws TokyoTyrantException on error  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::metaSearch":{"id":"tokyotyrantquery.metasearch","purpose":"Retrieve records with multiple queries","prototype":"array TokyoTyrantQuery::metaSearch(array $queries, int $type)","return":"<p class=\"para\">   Returns the matching rows and throws TokyoTyrantException on error  <\/p>","versions":""},"TokyoTyrantQuery::next":{"id":"tokyotyrantquery.next","purpose":"Moves the iterator to next entry","prototype":"array TokyoTyrantQuery::next()","return":"<p class=\"para\">   Returns the next row and throws TokyoTyrantException on error.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::out":{"id":"tokyotyrantquery.out","purpose":"Removes records based on query","prototype":"TokyoTyrantQuery TokyoTyrantQuery::out()","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::rewind":{"id":"tokyotyrantquery.rewind","purpose":"Rewinds the iterator","prototype":"bool TokyoTyrantQuery::rewind()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::search":{"id":"tokyotyrantquery.search","purpose":"Searches records","prototype":"array TokyoTyrantQuery::search()","return":"<p class=\"para\">   Returns the matching rows and throws TokyoTyrantException on error  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::setLimit":{"id":"tokyotyrantquery.setlimit","purpose":"Limit results","prototype":"mixed TokyoTyrantQuery::setLimit([int $max = '' [, int $skip = '']])","return":"<p class=\"para\">   This method returns the current object and throws TokyoTyrantException on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::setOrder":{"id":"tokyotyrantquery.setorder","purpose":"Orders results","prototype":"mixed TokyoTyrantQuery::setOrder(string $name, int $type)","return":"<p class=\"para\">   This method returns the current object.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantQuery::valid":{"id":"tokyotyrantquery.valid","purpose":"Checks the validity of current item","prototype":"bool TokyoTyrantQuery::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current item is valid and <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PECL tokyo_tyrant >= 0.1.0"},"TokyoTyrantIterator::__construct":{"id":"tokyotyrantiterator.construct","purpose":"Construct an iterator","prototype":" TokyoTyrantIterator::__construct(mixed $object)","return":"<p class=\"para\">   Throws an exception if iterator initialization fails.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"TokyoTyrantIterator::current":{"id":"tokyotyrantiterator.current","purpose":"Get the current value","prototype":"mixed TokyoTyrantIterator::current()","return":"<p class=\"para\">   Returns the current value on success and false on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"TokyoTyrantIterator::key":{"id":"tokyotyrantiterator.key","purpose":"Returns the current key","prototype":"mixed TokyoTyrantIterator::key()","return":"<p class=\"para\">   Returns the current key on success and false on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"TokyoTyrantIterator::next":{"id":"tokyotyrantiterator.next","purpose":"Move to next key","prototype":"mixed TokyoTyrantIterator::next()","return":"<p class=\"para\">   Returns the next value on success and false on failure.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"TokyoTyrantIterator::rewind":{"id":"tokyotyrantiterator.rewind","purpose":"Rewinds the iterator","prototype":"void TokyoTyrantIterator::rewind()","return":"<p class=\"para\">   Throws TokyoTyrantException if iterator initialization fails.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"TokyoTyrantIterator::valid":{"id":"tokyotyrantiterator.valid","purpose":"Rewinds the iterator","prototype":"bool TokyoTyrantIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current item is valid and <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PECL tokyo_tyrant >= 0.2.0"},"cal_days_in_month":{"id":"function.cal-days-in-month","purpose":"Return the number of days in a month for a given year and calendar","prototype":"int cal_days_in_month(int $calendar, int $month, int $year)","return":"<p class=\"para\">   The length in days of the selected month in the given calendar  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"cal_from_jd":{"id":"function.cal-from-jd","purpose":"Converts from Julian Day Count to a supported calendar","prototype":"array cal_from_jd(int $jd, int $calendar)","return":"<p class=\"para\">   Returns an array containing calendar information like month, day, year,   day of week (<em>dow<\/em>), abbreviated and full names of weekday and month and the   date in string form &quot;month\/day\/year&quot;.   The day of week ranges from <em>0<\/em> (Sunday) to   <em>6<\/em> (Saturday).  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"cal_info":{"id":"function.cal-info","purpose":"Returns information about a particular calendar","prototype":"array cal_info([int $calendar = -1])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"cal_to_jd":{"id":"function.cal-to-jd","purpose":"Converts from a supported calendar to Julian Day Count","prototype":"int cal_to_jd(int $calendar, int $month, int $day, int $year)","return":"<p class=\"para\">   A Julian Day number.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"easter_date":{"id":"function.easter-date","purpose":"Get Unix timestamp for midnight on Easter of a given year","prototype":"int easter_date([int $year = date(\"Y\")])","return":"<p class=\"para\">   The easter date as a unix timestamp.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"easter_days":{"id":"function.easter-days","purpose":"Get number of days after March 21 on which Easter falls for a given year","prototype":"int easter_days([int $year = date(\"Y\") [, int $method = CAL_EASTER_DEFAULT]])","return":"<p class=\"para\">   The number of days after March 21st that the Easter Sunday   is in the given <code class=\"parameter\">year<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"frenchtojd":{"id":"function.frenchtojd","purpose":"Converts a date from the French Republican Calendar to a Julian Day Count","prototype":"int frenchtojd(int $month, int $day, int $year)","return":"<p class=\"para\">   The julian day for the given french revolution date as an integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gregoriantojd":{"id":"function.gregoriantojd","purpose":"Converts a Gregorian date to Julian Day Count","prototype":"int gregoriantojd(int $month, int $day, int $year)","return":"<p class=\"para\">   The julian day for the given gregorian date as an integer.   Dates outside the valid range return <em>0<\/em>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jddayofweek":{"id":"function.jddayofweek","purpose":"Returns the day of the week","prototype":"mixed jddayofweek(int $julianday [, int $mode = CAL_DOW_DAYNO])","return":"<p class=\"para\">   The gregorian weekday as either an integer or string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jdmonthname":{"id":"function.jdmonthname","purpose":"Returns a month name","prototype":"string jdmonthname(int $julianday, int $mode)","return":"<p class=\"para\">   The month name for the given Julian Day and <code class=\"parameter\">mode<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jdtofrench":{"id":"function.jdtofrench","purpose":"Converts a Julian Day Count to the French Republican Calendar","prototype":"string jdtofrench(int $juliandaycount)","return":"<p class=\"para\">   The french revolution date as a string in the form &quot;month\/day\/year&quot;  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jdtogregorian":{"id":"function.jdtogregorian","purpose":"Converts Julian Day Count to Gregorian date","prototype":"string jdtogregorian(int $julianday)","return":"<p class=\"para\">   The gregorian date as a string in the form &quot;month\/day\/year&quot;  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jdtojewish":{"id":"function.jdtojewish","purpose":"Converts a Julian day count to a Jewish calendar date","prototype":"string jdtojewish(int $juliandaycount [, bool $hebrew = '' [, int $fl = '']])","return":"<p class=\"para\">   The Jewish date as a string in the form &quot;month\/day\/year&quot;, or an ISO-8859-8   encoded Hebrew date string, according to the <code class=\"parameter\">hebrew<\/code>   parameter.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jdtojulian":{"id":"function.jdtojulian","purpose":"Converts a Julian Day Count to a Julian Calendar Date","prototype":"string jdtojulian(int $julianday)","return":"<p class=\"para\">   The julian date as a string in the form &quot;month\/day\/year&quot;  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jdtounix":{"id":"function.jdtounix","purpose":"Convert Julian Day to Unix timestamp","prototype":"int jdtounix(int $jday)","return":"<p class=\"para\">   The unix timestamp for the start (midnight, not noon) of the given Julian day.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jewishtojd":{"id":"function.jewishtojd","purpose":"Converts a date in the Jewish Calendar to Julian Day Count","prototype":"int jewishtojd(int $month, int $day, int $year)","return":"<p class=\"para\">   The julian day for the given jewish date as an integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"juliantojd":{"id":"function.juliantojd","purpose":"Converts a Julian Calendar date to Julian Day Count","prototype":"int juliantojd(int $month, int $day, int $year)","return":"<p class=\"para\">   The julian day for the given julian date as an integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"unixtojd":{"id":"function.unixtojd","purpose":"Convert Unix timestamp to Julian Day","prototype":"int unixtojd([int $timestamp = time()])","return":"<p class=\"para\">   A julian day number as integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"DateTime::add":{"id":"datetime.add","purpose":"Adds an amount of days, months, years, hours, minutes and seconds to a   DateTime object","prototype":"DateTime DateTime::add(DateInterval $interval, DateTime $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_add":{"id":"function.date-add","purpose":"Alias of DateTime::add","prototype":" date_add()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::__construct":{"id":"datetime.construct","purpose":"Returns new DateTime object","prototype":"DateTime DateTime::__construct([string $time = \"now\" [, DateTimeZone $timezone = '']])","return":"<p class=\"para\">   Returns a new DateTime instance.   Procedural style returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_create":{"id":"function.date-create","purpose":"Alias of DateTime::__construct","prototype":" date_create()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::createFromFormat":{"id":"datetime.createfromformat","purpose":"Parses a time string according to a specified format","prototype":"DateTime DateTime::createFromFormat(string $format, string $time [, DateTimeZone $timezone = ''])","return":"<p class=\"para\">   Returns a new DateTime instance or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_create_from_format":{"id":"function.date-create-from-format","purpose":"Alias of DateTime::createFromFormat","prototype":" date_create_from_format()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::getLastErrors":{"id":"datetime.getlasterrors","purpose":"Returns the warnings and errors","prototype":"array DateTime::getLastErrors()","return":"<p class=\"para\">   Returns array containing info about warnings and errors.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_get_last_errors":{"id":"function.date-get-last-errors","purpose":"Alias of DateTime::getLastErrors","prototype":" date_get_last_errors()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::modify":{"id":"datetime.modify","purpose":"Alters the timestamp","prototype":"DateTime DateTime::modify(string $modify, DateTime $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_modify":{"id":"function.date-modify","purpose":"Alias of DateTime::modify","prototype":" date_modify()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::__set_state":{"id":"datetime.set-state","purpose":"The __set_state handler","prototype":"DateTime DateTime::__set_state(array $array)","return":"<p class=\"para\">   Returns a new instance of a DateTime object.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::setDate":{"id":"datetime.setdate","purpose":"Sets the date","prototype":"DateTime DateTime::setDate(int $year, int $month, int $day, DateTime $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_date_set":{"id":"function.date-date-set","purpose":"Alias of DateTime::setDate","prototype":" date_date_set()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::setISODate":{"id":"datetime.setisodate","purpose":"Sets the ISO date","prototype":"DateTime DateTime::setISODate(int $year, int $week [, int $day = 1, DateTime $object])","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_isodate_set":{"id":"function.date-isodate-set","purpose":"Alias of DateTime::setISODate","prototype":" date_isodate_set()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::setTime":{"id":"datetime.settime","purpose":"Sets the time","prototype":"DateTime DateTime::setTime(int $hour, int $minute [, int $second = '' [, int $microseconds = '', DateTime $object]])","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_time_set":{"id":"function.date-time-set","purpose":"Alias of DateTime::setTime","prototype":" date_time_set()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::setTimestamp":{"id":"datetime.settimestamp","purpose":"Sets the date and time based on an Unix timestamp","prototype":"DateTime DateTime::setTimestamp(int $unixtimestamp, DateTime $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_timestamp_set":{"id":"function.date-timestamp-set","purpose":"Alias of DateTime::setTimestamp","prototype":" date_timestamp_set()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::setTimezone":{"id":"datetime.settimezone","purpose":"Sets the time zone for the DateTime object","prototype":"object DateTime::setTimezone(DateTimeZone $timezone, DateTime $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_timezone_set":{"id":"function.date-timezone-set","purpose":"Alias of DateTime::setTimezone","prototype":" date_timezone_set()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::sub":{"id":"datetime.sub","purpose":"Subtracts an amount of days, months, years, hours, minutes and seconds from   a DateTime object","prototype":"DateTime DateTime::sub(DateInterval $interval, DateTime $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DateTime<\/span> object for method chaining or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_sub":{"id":"function.date-sub","purpose":"Alias of DateTime::sub","prototype":" date_sub()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTimeImmutable::add":{"id":"datetimeimmutable.add","purpose":"Adds an amount of days, months, years, hours, minutes and seconds","prototype":"DateTimeImmutable DateTimeImmutable::add(DateInterval $interval)","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::__construct":{"id":"datetimeimmutable.construct","purpose":"Returns new DateTimeImmutable object","prototype":"DateTimeImmutable DateTimeImmutable::__construct([string $time = \"now\" [, DateTimeZone $timezone = '']])","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"date_create_immutable":{"id":"function.date-create-immutable","purpose":"Alias of DateTimeImmutable::__construct","prototype":" date_create_immutable()","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::createFromFormat":{"id":"datetimeimmutable.createfromformat","purpose":"Parses a time string according to a specified format","prototype":"DateTimeImmutable DateTimeImmutable::createFromFormat(string $format, string $time [, DateTimeZone $timezone = ''])","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"date_create_immutable_from_format":{"id":"function.date-create-immutable-from-format","purpose":"Alias of DateTimeImmutable::createFromFormat","prototype":" date_create_immutable_from_format()","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::createFromMutable":{"id":"datetimeimmutable.createfrommutable","purpose":"Returns new DateTimeImmutable object encapsulating the given DateTime object","prototype":"DateTimeImmutable DateTimeImmutable::createFromMutable(DateTime $datetime)","return":"<p class=\"para\">   Returns a new <span class=\"classname\">DateTimeImmutable<\/span> instance.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"DateTimeImmutable::getLastErrors":{"id":"datetimeimmutable.getlasterrors","purpose":"Returns the warnings and errors","prototype":"array DateTimeImmutable::getLastErrors()","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::modify":{"id":"datetimeimmutable.modify","purpose":"Creates a new object with modified timestamp","prototype":"DateTimeImmutable DateTimeImmutable::modify(string $modify)","return":"<p class=\"para\">   Returns the newly created object or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::__set_state":{"id":"datetimeimmutable.set-state","purpose":"The __set_state handler","prototype":"DateTimeImmutable DateTimeImmutable::__set_state(array $array)","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::setDate":{"id":"datetimeimmutable.setdate","purpose":"Sets the date","prototype":"DateTimeImmutable DateTimeImmutable::setDate(int $year, int $month, int $day)","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::setISODate":{"id":"datetimeimmutable.setisodate","purpose":"Sets the ISO date","prototype":"DateTimeImmutable DateTimeImmutable::setISODate(int $year, int $week [, int $day = 1])","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::setTime":{"id":"datetimeimmutable.settime","purpose":"Sets the time","prototype":"DateTimeImmutable DateTimeImmutable::setTime(int $hour, int $minute [, int $second = '' [, int $microseconds = '']])","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::setTimestamp":{"id":"datetimeimmutable.settimestamp","purpose":"Sets the date and time based on a Unix timestamp","prototype":"DateTimeImmutable DateTimeImmutable::setTimestamp(int $unixtimestamp)","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::setTimezone":{"id":"datetimeimmutable.settimezone","purpose":"Sets the time zone","prototype":"DateTimeImmutable DateTimeImmutable::setTimezone(DateTimeZone $timezone)","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTimeImmutable::sub":{"id":"datetimeimmutable.sub","purpose":"Subtracts an amount of days, months, years, hours, minutes and seconds","prototype":"DateTimeImmutable DateTimeImmutable::sub(DateInterval $interval)","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"DateTime::diff":{"id":"datetime.diff","purpose":"Returns the difference between two DateTime objects","prototype":"DateInterval DateTime::diff(DateTimeInterface $datetime2 [, bool $absolute = '', DateTimeInterface $datetime1])","return":"<p class=\"para\">   The <span class=\"classname\">DateInterval<\/span> object representing the   difference between the two dates or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0 < 5.5.0"},"DateTimeImmutable::diff":{"id":"datetime.diff","purpose":"Returns the difference between two DateTime objects","prototype":"DateInterval DateTimeImmutable::diff(DateTimeInterface $datetime2 [, bool $absolute = '', DateTimeInterface $datetime1])","return":"<p class=\"para\">   The <span class=\"classname\">DateInterval<\/span> object representing the   difference between the two dates or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0 < 5.5.0"},"DateTimeInterface::diff":{"id":"datetime.diff","purpose":"Returns the difference between two DateTime objects","prototype":"DateInterval DateTimeInterface::diff(DateTimeInterface $datetime2 [, bool $absolute = '', DateTimeInterface $datetime1])","return":"<p class=\"para\">   The <span class=\"classname\">DateInterval<\/span> object representing the   difference between the two dates or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0 < 5.5.0"},"date_diff":{"id":"function.date-diff","purpose":"Alias of DateTime::diff","prototype":" date_diff()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::format":{"id":"datetime.format","purpose":"Returns date formatted according to given format","prototype":"string DateTime::format(string $format, DateTimeInterface $object)","return":"<p class=\"para\">   Returns the formatted date string on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"DateTimeImmutable::format":{"id":"datetime.format","purpose":"Returns date formatted according to given format","prototype":"string DateTimeImmutable::format(string $format, DateTimeInterface $object)","return":"<p class=\"para\">   Returns the formatted date string on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"DateTimeInterface::format":{"id":"datetime.format","purpose":"Returns date formatted according to given format","prototype":"string DateTimeInterface::format(string $format, DateTimeInterface $object)","return":"<p class=\"para\">   Returns the formatted date string on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"date_format":{"id":"function.date-format","purpose":"Alias of DateTime::format","prototype":" date_format()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::getOffset":{"id":"datetime.getoffset","purpose":"Returns the timezone offset","prototype":"int DateTime::getOffset(DateTimeInterface $object)","return":"<p class=\"para\">   Returns the timezone offset in seconds from UTC on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"DateTimeImmutable::getOffset":{"id":"datetime.getoffset","purpose":"Returns the timezone offset","prototype":"int DateTimeImmutable::getOffset(DateTimeInterface $object)","return":"<p class=\"para\">   Returns the timezone offset in seconds from UTC on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"DateTimeInterface::getOffset":{"id":"datetime.getoffset","purpose":"Returns the timezone offset","prototype":"int DateTimeInterface::getOffset(DateTimeInterface $object)","return":"<p class=\"para\">   Returns the timezone offset in seconds from UTC on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"date_offset_get":{"id":"function.date-offset-get","purpose":"Alias of DateTime::getOffset","prototype":" date_offset_get()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::getTimestamp":{"id":"datetime.gettimestamp","purpose":"Gets the Unix timestamp","prototype":"int DateTime::getTimestamp(DateTimeInterface $object)","return":"<p class=\"para\">   Returns the Unix timestamp representing the date.  <\/p>","versions":"PHP 5 >= 5.3.0 < 5.5.0"},"DateTimeImmutable::getTimestamp":{"id":"datetime.gettimestamp","purpose":"Gets the Unix timestamp","prototype":"int DateTimeImmutable::getTimestamp(DateTimeInterface $object)","return":"<p class=\"para\">   Returns the Unix timestamp representing the date.  <\/p>","versions":"PHP 5 >= 5.3.0 < 5.5.0"},"DateTimeInterface::getTimestamp":{"id":"datetime.gettimestamp","purpose":"Gets the Unix timestamp","prototype":"int DateTimeInterface::getTimestamp(DateTimeInterface $object)","return":"<p class=\"para\">   Returns the Unix timestamp representing the date.  <\/p>","versions":"PHP 5 >= 5.3.0 < 5.5.0"},"date_timestamp_get":{"id":"function.date-timestamp-get","purpose":"Alias of DateTime::getTimestamp","prototype":" date_timestamp_get()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTime::getTimezone":{"id":"datetime.gettimezone","purpose":"Return time zone relative to given DateTime","prototype":"DateTimeZone DateTime::getTimezone(DateTimeInterface $object)","return":"<p class=\"para\">   Returns a <span class=\"classname\">DateTimeZone<\/span> object on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"DateTimeImmutable::getTimezone":{"id":"datetime.gettimezone","purpose":"Return time zone relative to given DateTime","prototype":"DateTimeZone DateTimeImmutable::getTimezone(DateTimeInterface $object)","return":"<p class=\"para\">   Returns a <span class=\"classname\">DateTimeZone<\/span> object on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"DateTimeInterface::getTimezone":{"id":"datetime.gettimezone","purpose":"Return time zone relative to given DateTime","prototype":"DateTimeZone DateTimeInterface::getTimezone(DateTimeInterface $object)","return":"<p class=\"para\">   Returns a <span class=\"classname\">DateTimeZone<\/span> object on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1 < 5.5.0"},"date_timezone_get":{"id":"function.date-timezone-get","purpose":"Alias of DateTime::getTimezone","prototype":" date_timezone_get()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTime::__wakeup":{"id":"datetime.wakeup","purpose":"The __wakeup handler","prototype":" DateTime::__wakeup()","return":"<p class=\"para\">   Initializes a DateTime object.  <\/p>","versions":"PHP 5 >= 5.3.0"},"DateTimeImmutable::__wakeup":{"id":"datetime.wakeup","purpose":"The __wakeup handler","prototype":" DateTimeImmutable::__wakeup()","return":"<p class=\"para\">   Initializes a DateTime object.  <\/p>","versions":"PHP 5 >= 5.3.0"},"DateTimeInterface::__wakeup":{"id":"datetime.wakeup","purpose":"The __wakeup handler","prototype":" DateTimeInterface::__wakeup()","return":"<p class=\"para\">   Initializes a DateTime object.  <\/p>","versions":"PHP 5 >= 5.3.0"},"DateTimeZone::__construct":{"id":"datetimezone.construct","purpose":"Creates new DateTimeZone object","prototype":"DateTimeZone DateTimeZone::__construct(string $timezone)","return":"<p class=\"para\">   Returns <span class=\"classname\">DateTimeZone<\/span> on success.   Procedural style returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"timezone_open":{"id":"function.timezone-open","purpose":"Alias of DateTimeZone::__construct","prototype":" timezone_open()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTimeZone::getLocation":{"id":"datetimezone.getlocation","purpose":"Returns location information for a timezone","prototype":"array DateTimeZone::getLocation(DateTimeZone $object)","return":"<p class=\"para\">   Array containing location information about timezone or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"timezone_location_get":{"id":"function.timezone-location-get","purpose":"Alias of DateTimeZone::getLocation","prototype":" timezone_location_get()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateTimeZone::getName":{"id":"datetimezone.getname","purpose":"Returns the name of the timezone","prototype":"string DateTimeZone::getName(DateTimeZone $object)","return":"<p class=\"para\">   One of the timezone names in the   <a href=\"timezones.html\" class=\"link\">list of timezones<\/a>.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"timezone_name_get":{"id":"function.timezone-name-get","purpose":"Alias of DateTimeZone::getName","prototype":" timezone_name_get()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTimeZone::getOffset":{"id":"datetimezone.getoffset","purpose":"Returns the timezone offset from GMT","prototype":"int DateTimeZone::getOffset(DateTime $datetime, DateTimeZone $object)","return":"<p class=\"para\">   Returns time zone offset in seconds on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"timezone_offset_get":{"id":"function.timezone-offset-get","purpose":"Alias of DateTimeZone::getOffset","prototype":" timezone_offset_get()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTimeZone::getTransitions":{"id":"datetimezone.gettransitions","purpose":"Returns all transitions for the timezone","prototype":"array DateTimeZone::getTransitions([int $timestamp_begin = '' [, int $timestamp_end = '', DateTimeZone $object]])","return":"<p class=\"para\">   Returns numerically indexed array containing associative array with all   transitions on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"timezone_transitions_get":{"id":"function.timezone-transitions-get","purpose":"Alias of DateTimeZone::getTransitions","prototype":" timezone_transitions_get()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTimeZone::listAbbreviations":{"id":"datetimezone.listabbreviations","purpose":"Returns associative array containing dst, offset and the timezone name","prototype":"array DateTimeZone::listAbbreviations()","return":"<p class=\"para\">   Returns array on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"timezone_abbreviations_list":{"id":"function.timezone-abbreviations-list","purpose":"Alias of DateTimeZone::listAbbreviations","prototype":" timezone_abbreviations_list()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateTimeZone::listIdentifiers":{"id":"datetimezone.listidentifiers","purpose":"Returns a numerically indexed array containing all defined timezone identifiers","prototype":"array DateTimeZone::listIdentifiers([int $what = DateTimeZone::ALL [, string $country = '']])","return":"<p class=\"para\">   Returns array on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"timezone_identifiers_list":{"id":"function.timezone-identifiers-list","purpose":"Alias of DateTimeZone::listIdentifiers","prototype":" timezone_identifiers_list()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"DateInterval::__construct":{"id":"dateinterval.construct","purpose":"Creates a new DateInterval object","prototype":" DateInterval::__construct(string $interval_spec)","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateInterval::createFromDateString":{"id":"dateinterval.createfromdatestring","purpose":"Sets up a DateInterval from the relative parts of the string","prototype":"DateInterval DateInterval::createFromDateString(string $time)","return":"<p class=\"para\">   Returns a new <span class=\"classname\">DateInterval<\/span> instance.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"DateInterval::format":{"id":"dateinterval.format","purpose":"Formats the interval","prototype":"string DateInterval::format(string $format)","return":"<p class=\"para\">   Returns the formatted interval.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"DatePeriod::__construct":{"id":"dateperiod.construct","purpose":"Creates a new DatePeriod object","prototype":" DatePeriod::__construct(DateTimeInterface $start, DateInterval $interval, int $recurrences [, int $options = '', DateTimeInterface $end, string $isostr])","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"DatePeriod::getDateInterval":{"id":"dateperiod.getdateinterval","purpose":"Gets the interval","prototype":"object DatePeriod::getDateInterval()","return":"<p class=\"para\">   Returns a <span class=\"classname\">DateInterval<\/span> <span class=\"type\">object<\/span>  <\/p>","versions":"PHP 5 >= 5.6.5, PHP 7"},"DatePeriod::getEndDate":{"id":"dateperiod.getenddate","purpose":"Gets the end date","prototype":"DateTimeInterface DatePeriod::getEndDate()","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if the <span class=\"classname\">DatePeriod<\/span> does   not have an end date. For example, when initialized with the   <code class=\"parameter\">recurrences<\/code> parameter, or the   <code class=\"parameter\">isostr<\/code> parameter without an   end date.  <\/p>  <p class=\"para\">   Returns a <span class=\"classname\">DateTimeImmutable<\/span> <span class=\"type\">object<\/span>   when the <span class=\"classname\">DatePeriod<\/span> is initialized with a   <span class=\"classname\">DateTimeImmutable<\/span> <span class=\"type\">object<\/span>   as the <code class=\"parameter\">end<\/code> parameter.  <\/p>  <p class=\"para\">   Returns a <span class=\"classname\">DateTime<\/span> <span class=\"type\">object<\/span>   otherwise.  <\/p>","versions":"PHP 5 >= 5.6.5, PHP 7"},"DatePeriod::getStartDate":{"id":"dateperiod.getstartdate","purpose":"Gets the start date","prototype":"DateTimeInterface DatePeriod::getStartDate()","return":"<p class=\"para\">   Returns a <span class=\"classname\">DateTimeImmutable<\/span> <span class=\"type\">object<\/span>   when the <span class=\"classname\">DatePeriod<\/span> is initialized with a   <span class=\"classname\">DateTimeImmutable<\/span> <span class=\"type\">object<\/span>   as the <code class=\"parameter\">start<\/code> parameter.  <\/p>  <p class=\"para\">   Returns a <span class=\"classname\">DateTime<\/span> <span class=\"type\">object<\/span>   otherwise.  <\/p>","versions":"PHP 5 >= 5.6.5, PHP 7"},"checkdate":{"id":"function.checkdate","purpose":"Validate a Gregorian date","prototype":"bool checkdate(int $month, int $day, int $year)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the date given is valid; otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"date_default_timezone_get":{"id":"function.date-default-timezone-get","purpose":"Gets the default timezone used by all date\/time functions in a script","prototype":"string date_default_timezone_get()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"date_default_timezone_set":{"id":"function.date-default-timezone-set","purpose":"Sets the default timezone used by all date\/time functions in a script","prototype":"bool date_default_timezone_set(string $timezone_identifier)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if the   <code class=\"parameter\">timezone_identifier<\/code> isn&#039;t valid, or <strong><code>TRUE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"date_interval_create_from_date_string":{"id":"function.date-interval-create-from-date-string","purpose":"Alias of DateInterval::createFromDateString","prototype":" date_interval_create_from_date_string()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_interval_format":{"id":"function.date-interval-format","purpose":"Alias of DateInterval::format","prototype":" date_interval_format()","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_parse_from_format":{"id":"function.date-parse-from-format","purpose":"Get info about given date formatted according to the specified format","prototype":"array date_parse_from_format(string $format, string $date)","return":"<p class=\"para\">   Returns associative array with detailed info about given date.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"date_parse":{"id":"function.date-parse","purpose":"Returns associative array with detailed info about given date","prototype":"array date_parse(string $date)","return":"<p class=\"para\">   Returns <span class=\"type\">array<\/span> with information about the parsed date   on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"date_sun_info":{"id":"function.date-sun-info","purpose":"Returns an array with information about sunset\/sunrise and twilight begin\/end","prototype":"array date_sun_info(int $time, float $latitude, float $longitude)","return":"<p class=\"para\">   Returns array on success or <strong><code>FALSE<\/code><\/strong> on failure.   The structure of the array is detailed in the following list:  <\/p>  <p class=\"para\">   <dl>         <dt><em>sunrise<\/em><\/dt>     <dd>      <span class=\"simpara\">       The time of the sunrise (zenith angle = 90\u00b035&#039;).      <\/span>     <\/dd>              <dt><em>sunset<\/em><\/dt>     <dd>      <span class=\"simpara\">       The time of the sunset (zenith angle = 90\u00b035&#039;).      <\/span>     <\/dd>              <dt><em>transit<\/em><\/dt>     <dd>      <span class=\"simpara\">       The time when the sun is at its zenith, i.e. has reached its topmost       point.      <\/span>     <\/dd>              <dt><em>civil_twilight_begin<\/em><\/dt>     <dd>      <span class=\"simpara\">       The start of the civil dawn (zenith angle = 96\u00b0). It ends at <em>sunrise<\/em>.      <\/span>     <\/dd>              <dt><em>civil_twilight_end<\/em><\/dt>     <dd>      <span class=\"simpara\">       The end of the civil dusk (zenith angle = 96\u00b0). It starts at <em>sunset<\/em>.      <\/span>     <\/dd>              <dt><em>nautical_twilight_begin<\/em><\/dt>     <dd>      <span class=\"simpara\">       The start of the nautical dawn (zenith angle = 102\u00b0). It ends at       <em>civil_twilight_begin<\/em>.      <\/span>     <\/dd>              <dt><em>nautical_twilight_end<\/em><\/dt>     <dd>      <span class=\"simpara\">       The end of the nautical dusk (zenith angle = 102\u00b0). It starts at       <em>civil_twilight_end<\/em>.      <\/span>     <\/dd>              <dt><em>astronomical_twilight_begin<\/em><\/dt>     <dd>      <span class=\"simpara\">       The start of the astronomical dawn (zenith angle = 108\u00b0). It ends at       <em>nautical_twilight_begin<\/em>.      <\/span>     <\/dd>              <dt><em>astronomical_twilight_end<\/em><\/dt>     <dd>      <span class=\"simpara\">       The end of the astronomical dusk (zenith angle = 108\u00b0). It starts at       <em>nautical_twilight_end<\/em>.      <\/span>     <\/dd>        <\/dl>  <\/p>  <p class=\"para\">    The values of the array elements are either UNIX timestamps, <strong><code>FALSE<\/code><\/strong> if the   sun is below the respective zenith for the whole day, or <strong><code>TRUE<\/code><\/strong> if the sun is   above the respective zenith for the whole day.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"date_sunrise":{"id":"function.date-sunrise","purpose":"Returns time of sunrise for a given day and location","prototype":"mixed date_sunrise(int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunrise_zenith\") [, float $gmt_offset = '']]]]])","return":"<p class=\"para\">   Returns the sunrise time in a specified <code class=\"parameter\">format<\/code> on   success or <strong><code>FALSE<\/code><\/strong> on failure. One potential reason for failure is that the   sun does not rise at all, which happens inside the polar circles for part of   the year.  <\/p>","versions":"PHP 5, PHP 7"},"date_sunset":{"id":"function.date-sunset","purpose":"Returns time of sunset for a given day and location","prototype":"mixed date_sunset(int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(\"date.default_latitude\") [, float $longitude = ini_get(\"date.default_longitude\") [, float $zenith = ini_get(\"date.sunset_zenith\") [, float $gmt_offset = '']]]]])","return":"<p class=\"para\">   Returns the sunset time in a specified <code class=\"parameter\">format<\/code> on   success or <strong><code>FALSE<\/code><\/strong> on failure. One potential reason for failure is that the   sun does not set at all, which happens inside the polar circles for part of   the year.  <\/p>","versions":"PHP 5, PHP 7"},"date":{"id":"function.date","purpose":"Format a local time\/date","prototype":"string date(string $format [, int $timestamp = time()])","return":"<p class=\"para\">   Returns a formatted date string. If a non-numeric value is used for    <code class=\"parameter\">timestamp<\/code>, <strong><code>FALSE<\/code><\/strong> is returned and an    <strong><code>E_WARNING<\/code><\/strong> level error is emitted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getdate":{"id":"function.getdate","purpose":"Get date\/time information","prototype":"array getdate([int $timestamp = time()])","return":"<p class=\"para\">   Returns an associative <span class=\"type\">array<\/span> of information related to   the <code class=\"parameter\">timestamp<\/code>. Elements from the returned    associative array are as follows:  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Key elements of the returned associative array<\/strong><\/caption>         <thead>      <tr>       <th>Key<\/th>       <th>Description<\/th>       <th>Example returned values<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><em>&quot;seconds&quot;<\/em><\/td>       <td>Numeric representation of seconds<\/td>       <td><em>0<\/em> to <em>59<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;minutes&quot;<\/em><\/td>       <td>Numeric representation of minutes<\/td>       <td><em>0<\/em> to <em>59<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;hours&quot;<\/em><\/td>       <td>Numeric representation of hours<\/td>       <td><em>0<\/em> to <em>23<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;mday&quot;<\/em><\/td>       <td>Numeric representation of the day of the month<\/td>       <td><em>1<\/em> to <em>31<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;wday&quot;<\/em><\/td>       <td>Numeric representation of the day of the week<\/td>       <td><em>0<\/em> (for Sunday) through <em>6<\/em> (for Saturday)<\/td>      <\/tr>      <tr>       <td><em>&quot;mon&quot;<\/em><\/td>       <td>Numeric representation of a month<\/td>       <td><em>1<\/em> through <em>12<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;year&quot;<\/em><\/td>       <td>A full numeric representation of a year, 4 digits<\/td>       <td>Examples: <em>1999<\/em> or <em>2003<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;yday&quot;<\/em><\/td>       <td>Numeric representation of the day of the year<\/td>       <td><em>0<\/em> through <em>365<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;weekday&quot;<\/em><\/td>       <td>A full textual representation of the day of the week<\/td>       <td><em>Sunday<\/em> through <em>Saturday<\/em><\/td>      <\/tr>      <tr>       <td><em>&quot;month&quot;<\/em><\/td>       <td>A full textual representation of a month, such as January or March<\/td>       <td><em>January<\/em> through <em>December<\/em><\/td>      <\/tr>      <tr>       <td><em>0<\/em><\/td>       <td>        Seconds since the Unix Epoch, similar to the values returned by        <span class=\"function\">time<\/span> and used by <span class=\"function\">date<\/span>.       <\/td>       <td>        System Dependent, typically <em>-2147483648<\/em> through        <em>2147483647<\/em>.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gettimeofday":{"id":"function.gettimeofday","purpose":"Get current time","prototype":"mixed gettimeofday([bool $return_float = ''])","return":"<p class=\"para\">   By default an <span class=\"type\">array<\/span> is returned. If <code class=\"parameter\">return_float<\/code>   is set, then a <span class=\"type\">float<\/span> is returned.  <\/p>  <p class=\"para\">   Array keys:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      &quot;sec&quot; - seconds since the Unix Epoch     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;usec&quot; - microseconds     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;minuteswest&quot; - minutes west of Greenwich     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;dsttime&quot; - type of dst correction     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gmdate":{"id":"function.gmdate","purpose":"Format a GMT\/UTC date\/time","prototype":"string gmdate(string $format [, int $timestamp = time()])","return":"<p class=\"para\">   Returns a formatted date string. If a non-numeric value is used for    <code class=\"parameter\">timestamp<\/code>, <strong><code>FALSE<\/code><\/strong> is returned and an    <strong><code>E_WARNING<\/code><\/strong> level error is emitted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gmmktime":{"id":"function.gmmktime","purpose":"Get Unix timestamp for a GMT date","prototype":"int gmmktime([int $hour = gmdate(\"H\") [, int $minute = gmdate(\"i\") [, int $second = gmdate(\"s\") [, int $month = gmdate(\"n\") [, int $day = gmdate(\"j\") [, int $year = gmdate(\"Y\") [, int $is_dst = -1]]]]]]])","return":"<p class=\"para\">   Returns a <span class=\"type\">integer<\/span> Unix timestamp.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gmstrftime":{"id":"function.gmstrftime","purpose":"Format a GMT\/UTC time\/date according to locale settings","prototype":"string gmstrftime(string $format [, int $timestamp = time()])","return":"<p class=\"para\">   Returns a string formatted according to the given format string   using the given <code class=\"parameter\">timestamp<\/code> or the current   local time if no timestamp is given.  Month and weekday names and   other language dependent strings respect the current locale set   with <span class=\"function\">setlocale<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"idate":{"id":"function.idate","purpose":"Format a local time\/date as integer","prototype":"int idate(string $format [, int $timestamp = time()])","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span>.  <\/p>  <p class=\"para\">   As <span class=\"function\">idate<\/span> always returns an <span class=\"type\">integer<\/span> and   as they can&#039;t start with a &quot;0&quot;, <span class=\"function\">idate<\/span> may return   fewer digits than you would expect. See the example below.  <\/p>","versions":"PHP 5, PHP 7"},"localtime":{"id":"function.localtime","purpose":"Get the local time","prototype":"array localtime([int $timestamp = time() [, bool $is_associative = '']])","return":"","versions":"PHP 4, PHP 5, PHP 7"},"microtime":{"id":"function.microtime","purpose":"Return current Unix timestamp with microseconds","prototype":"mixed microtime([bool $get_as_float = ''])","return":"<p class=\"para\">   By default, <span class=\"function\">microtime<\/span> returns a <span class=\"type\">string<\/span> in   the form &quot;msec sec&quot;, where <em>sec<\/em> is the number of seconds    since the Unix epoch (0:00:00 January 1,1970 GMT), and <em>msec<\/em>    measures microseconds that have elapsed since <em>sec<\/em>    and is also expressed in seconds.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">get_as_float<\/code> is set to <strong><code>TRUE<\/code><\/strong>, then   <span class=\"function\">microtime<\/span> returns a <span class=\"type\">float<\/span>, which   represents the current time in seconds since the Unix epoch accurate to the   nearest microsecond.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mktime":{"id":"function.mktime","purpose":"Get Unix timestamp for a date","prototype":"int mktime([int $hour = date(\"H\") [, int $minute = date(\"i\") [, int $second = date(\"s\") [, int $month = date(\"n\") [, int $day = date(\"j\") [, int $year = date(\"Y\") [, int $is_dst = -1]]]]]]])","return":"<p class=\"para\">   <span class=\"function\">mktime<\/span> returns the Unix timestamp of the arguments   given.   If the arguments are invalid, the function returns <strong><code>FALSE<\/code><\/strong> (before PHP 5.1   it returned <em>-1<\/em>).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strftime":{"id":"function.strftime","purpose":"Format a local time\/date according to locale settings","prototype":"string strftime(string $format [, int $timestamp = time()])","return":"<p class=\"para\">   Returns a string formatted according <code class=\"parameter\">format<\/code>   using the given <code class=\"parameter\">timestamp<\/code> or the current   local time if no timestamp is given.  Month and weekday names and   other language-dependent strings respect the current locale set   with <span class=\"function\">setlocale<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strptime":{"id":"function.strptime","purpose":"Parse a time\/date generated with strftime","prototype":"array strptime(string $date, string $format)","return":"<p class=\"para\">    Returns an array or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>    <p class=\"para\">     <table class=\"doctable table\">      <caption><strong>The following parameters are returned in the array<\/strong><\/caption>             <thead>        <tr>         <th>parameters<\/th>         <th>Description<\/th>        <\/tr>       <\/thead>       <tbody class=\"tbody\">        <tr>         <td><em>&quot;tm_sec&quot;<\/em><\/td>         <td>Seconds after the minute (0-61)<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_min&quot;<\/em><\/td>         <td>Minutes after the hour (0-59)<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_hour&quot;<\/em><\/td>         <td>Hour since midnight (0-23)<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_mday&quot;<\/em><\/td>         <td>Day of the month (1-31)<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_mon&quot;<\/em><\/td>         <td>Months since January (0-11)<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_year&quot;<\/em><\/td>         <td>Years since 1900<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_wday&quot;<\/em><\/td>         <td>Days since Sunday (0-6)<\/td>        <\/tr>        <tr>         <td><em>&quot;tm_yday&quot;<\/em><\/td>         <td>Days since January 1 (0-365)<\/td>        <\/tr>        <tr>         <td><em>&quot;unparsed&quot;<\/em><\/td>         <td>the <code class=\"parameter\">date<\/code> part which was not          recognized using the specified <code class=\"parameter\">format<\/code><\/td>        <\/tr>       <\/tbody>           <\/table>    <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"strtotime":{"id":"function.strtotime","purpose":"Parse about any English textual datetime description into a Unix timestamp","prototype":"int strtotime(string $time [, int $now = time()])","return":"<p class=\"para\">   Returns a timestamp on success, <strong><code>FALSE<\/code><\/strong> otherwise. Previous to PHP 5.1.0,   this function would return <em>-1<\/em> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"time":{"id":"function.time","purpose":"Return current Unix timestamp","prototype":"int time()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"timezone_name_from_abbr":{"id":"function.timezone-name-from-abbr","purpose":"Returns the timezone name from abbreviation","prototype":"string timezone_name_from_abbr(string $abbr [, int $gmtOffset = -1 [, int $isdst = -1]])","return":"<p class=\"para\">   Returns time zone name on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"timezone_version_get":{"id":"function.timezone-version-get","purpose":"Gets the version of the timezonedb","prototype":"string timezone_version_get()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"HRTime\\PerformanceCounter::getFrequency":{"id":"hrtime-performancecounter.getfrequency","purpose":"Timer frequency in ticks per second","prototype":"int HRTime\\PerformanceCounter::getFrequency()","return":"<p class=\"para\">  Returns <span class=\"type\">integer<\/span> indicating the timer frequency.   <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\PerformanceCounter::getTicks":{"id":"hrtime-performancecounter.getticks","purpose":"Current ticks from the system","prototype":"int HRTime\\PerformanceCounter::getTicks()","return":"<p class=\"para\">  Returns <span class=\"type\">integer<\/span> indicating the ticks count.  <\/p>","versions":"PECL hrtime >= 0.6.0"},"HRTime\\PerformanceCounter::getTicksSince":{"id":"hrtime-performancecounter.gettickssince","purpose":"Ticks elapsed since the given value","prototype":"int HRTime\\PerformanceCounter::getTicksSince(int $start)","return":"<p class=\"para\">  Returns <span class=\"type\">integer<\/span> indicating the ticks count.  <\/p>","versions":"PECL hrtime >= 0.6.0"},"HRTime\\StopWatch::getElapsedTicks":{"id":"hrtime-stopwatch.getelapsedticks","purpose":"Get elapsed ticks for all intervals","prototype":"int HRTime\\StopWatch::getElapsedTicks()","return":"<p class=\"para\">  Returns <span class=\"type\">integer<\/span> indicating elapsed ticks.   <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\StopWatch::getElapsedTime":{"id":"hrtime-stopwatch.getelapsedtime","purpose":"Get elapsed time for all intervals","prototype":"float HRTime\\StopWatch::getElapsedTime([int $unit = ''])","return":"<p class=\"para\">  Returns <span class=\"type\">float<\/span> indicating elapsed time.      <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\StopWatch::getLastElapsedTicks":{"id":"hrtime-stopwatch.getlastelapsedticks","purpose":"Get elapsed ticks for the last interval","prototype":"int HRTime\\StopWatch::getLastElapsedTicks()","return":"<p class=\"para\">  Returns <span class=\"type\">integer<\/span> indicating elapsed ticks.   <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\StopWatch::getLastElapsedTime":{"id":"hrtime-stopwatch.getlastelapsedtime","purpose":"Get elapsed time for the last interval","prototype":"float HRTime\\StopWatch::getLastElapsedTime([int $unit = ''])","return":"<p class=\"para\">  Returns <span class=\"type\">float<\/span> indicating elapsed time.    <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\StopWatch::isRunning":{"id":"hrtime-stopwatch.isrunning","purpose":"Whether the measurement is running","prototype":"bool HRTime\\StopWatch::isRunning()","return":"<p class=\"para\">  Returns <span class=\"type\">boolean<\/span> indicating whetehr the measurement is running.   <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\StopWatch::start":{"id":"hrtime-stopwatch.start","purpose":"Start time measurement","prototype":"void HRTime\\StopWatch::start()","return":"<p class=\"para\">  Returns void.   <\/p>","versions":"PECL hrtime >= 0.4.3"},"HRTime\\StopWatch::stop":{"id":"hrtime-stopwatch.stop","purpose":"Stop time measurement","prototype":"void HRTime\\StopWatch::stop()","return":"<p class=\"para\">  Returns void.   <\/p>","versions":"PECL hrtime >= 0.4.3"},"dio_close":{"id":"function.dio-close","purpose":"Closes the file descriptor given by fd","prototype":"void dio_close(resource $fd)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_fcntl":{"id":"function.dio-fcntl","purpose":"Performs a c library fcntl on fd","prototype":"mixed dio_fcntl(resource $fd, int $cmd [, mixed $args = ''])","return":"<p class=\"para\">   Returns the result of the C call.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_open":{"id":"function.dio-open","purpose":"Opens a file (creating it if necessary) at a lower level than the   C library input\/ouput stream functions allow","prototype":"resource dio_open(string $filename, int $flags [, int $mode = ''])","return":"<p class=\"para\">   A file descriptor or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_read":{"id":"function.dio-read","purpose":"Reads bytes from a file descriptor","prototype":"string dio_read(resource $fd [, int $len = 1024])","return":"<p class=\"para\">   The bytes read from <code class=\"parameter\">fd<\/code>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_seek":{"id":"function.dio-seek","purpose":"Seeks to pos on fd from whence","prototype":"int dio_seek(resource $fd, int $pos [, int $whence = SEEK_SET])","return":"<p class=\"para\">  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_stat":{"id":"function.dio-stat","purpose":"Gets stat information about the file descriptor fd","prototype":"array dio_stat(resource $fd)","return":"<p class=\"para\">   Returns an associative array with the following keys:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <p class=\"para\">      &quot;device&quot; - device     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;inode&quot; - inode     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;mode&quot; - mode     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;nlink&quot; - number of hard links     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;uid&quot; - user id     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;gid&quot; - group id     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;device_type&quot; - device type (if inode device)     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;size&quot; - total size in bytes     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;blocksize&quot; - blocksize     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;blocks&quot; - number of blocks allocated     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;atime&quot; - time of last access     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;mtime&quot; - time of last modification     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      &quot;ctime&quot; - time of last change     <\/p>    <\/li>   <\/ul>   On error <span class=\"function\">dio_stat<\/span> returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_tcsetattr":{"id":"function.dio-tcsetattr","purpose":"Sets terminal attributes and baud rate for a serial port","prototype":"bool dio_tcsetattr(resource $fd, array $options)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5 < 5.1.0"},"dio_truncate":{"id":"function.dio-truncate","purpose":"Truncates file descriptor fd to offset bytes","prototype":"bool dio_truncate(resource $fd, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"dio_write":{"id":"function.dio-write","purpose":"Writes data to fd with optional truncation at length","prototype":"int dio_write(resource $fd, string $data [, int $len = ''])","return":"<p class=\"para\">   Returns the number of bytes written to <code class=\"parameter\">fd<\/code>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0"},"Directory::close":{"id":"directory.close","purpose":"Close directory handle","prototype":"void Directory::close([resource $dir_handle = ''])","return":"","versions":"PHP 4, PHP 5, PHP 7"},"Directory::read":{"id":"directory.read","purpose":"Read entry from directory handle","prototype":"string Directory::read([resource $dir_handle = ''])","return":"","versions":"PHP 4, PHP 5, PHP 7"},"Directory::rewind":{"id":"directory.rewind","purpose":"Rewind directory handle","prototype":"void Directory::rewind([resource $dir_handle = ''])","return":"","versions":"PHP 4, PHP 5, PHP 7"},"chdir":{"id":"function.chdir","purpose":"Change directory","prototype":"bool chdir(string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"chroot":{"id":"function.chroot","purpose":"Change the root directory","prototype":"bool chroot(string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"closedir":{"id":"function.closedir","purpose":"Close directory handle","prototype":"void closedir([resource $dir_handle = ''])","return":"","versions":"PHP 4, PHP 5, PHP 7"},"dir":{"id":"function.dir","purpose":"Return an instance of the Directory class","prototype":"Directory dir(string $directory [, resource $context = ''])","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">Directory<\/span>, or <strong><code>NULL<\/code><\/strong> with   wrong parameters, or <strong><code>FALSE<\/code><\/strong> in case of another error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getcwd":{"id":"function.getcwd","purpose":"Gets the current working directory","prototype":"string getcwd()","return":"<p class=\"para\">   Returns the current working directory on success, or <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>   <p class=\"para\">   On some Unix variants, <span class=\"function\">getcwd<\/span> will return   <strong><code>FALSE<\/code><\/strong> if any one of the parent directories does not have the   readable or search mode set, even if the current directory   does. See <span class=\"function\">chmod<\/span> for more information on   modes and permissions.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"opendir":{"id":"function.opendir","purpose":"Open directory handle","prototype":"resource opendir(string $path [, resource $context = ''])","return":"<p class=\"para\">   Returns a directory handle <span class=\"type\">resource<\/span> on success, or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>   <p class=\"para\">   If <code class=\"parameter\">path<\/code> is not a valid directory or the   directory can not be opened due to permission restrictions or   filesystem errors, <span class=\"function\">opendir<\/span> returns <strong><code>FALSE<\/code><\/strong> and   generates a PHP error of level <a href=\"errorfunc.constants.html\" class=\"link\">   E_WARNING<\/a>.  You can suppress the error output of   <span class=\"function\">opendir<\/span> by prepending   &#039;<a href=\"language.operators.errorcontrol.html\" class=\"link\">@<\/a>&#039; to the   front of the function name.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readdir":{"id":"function.readdir","purpose":"Read entry from directory handle","prototype":"string readdir([resource $dir_handle = ''])","return":"<p class=\"para\">   Returns the entry name on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>   <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"rewinddir":{"id":"function.rewinddir","purpose":"Rewind directory handle","prototype":"void rewinddir([resource $dir_handle = ''])","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"scandir":{"id":"function.scandir","purpose":"List files and directories inside the specified path","prototype":"array scandir(string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context = '']])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> of filenames on success, or <strong><code>FALSE<\/code><\/strong> on    failure. If <code class=\"parameter\">directory<\/code> is not a directory, then    boolean <strong><code>FALSE<\/code><\/strong> is returned, and an error of level    <strong><code>E_WARNING<\/code><\/strong> is generated.  <\/p>","versions":"PHP 5, PHP 7"},"finfo_buffer":{"id":"function.finfo-buffer","purpose":"Return information about a string buffer","prototype":"string finfo_buffer(resource $finfo, string $string [, int $options = FILEINFO_NONE [, resource $context = '']])","return":"<p class=\"para\">   Returns a textual description of the <code class=\"parameter\">string<\/code>   argument, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL fileinfo >= 0.1.0"},"finfo::buffer":{"id":"finfo.buffer","purpose":"Alias of finfo_buffer()","prototype":"string finfo::buffer(string $string [, int $options = FILEINFO_NONE [, resource $context = '']])","return":"","versions":"PHP 5 >= 5.3.0, PHP 7, PECL fileinfo >= 0.1.0"},"finfo_close":{"id":"function.finfo-close","purpose":"Close fileinfo resource","prototype":"bool finfo_close(resource $finfo)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"finfo_file":{"id":"function.finfo-file","purpose":"Return information about a file","prototype":"string finfo_file(resource $finfo, string $file_name [, int $options = FILEINFO_NONE [, resource $context = '']])","return":"<p class=\"para\">   Returns a textual description of the contents of the   <code class=\"parameter\">file_name<\/code> argument, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"finfo::file":{"id":"finfo.file","purpose":"Alias of finfo_file()","prototype":"string finfo::file(string $file_name [, int $options = FILEINFO_NONE [, resource $context = '']])","return":"","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"finfo_open":{"id":"function.finfo-open","purpose":"Create a new fileinfo resource","prototype":"resource finfo_open([int $options = FILEINFO_NONE [, string $magic_file = '']])","return":"<p class=\"para\">   (Procedural style only)   Returns a magic database resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"finfo::__construct":{"id":"finfo.construct","purpose":"Alias of finfo_open","prototype":" finfo::__construct([int $options = FILEINFO_NONE [, string $magic_file = '']])","return":"","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"finfo_set_flags":{"id":"function.finfo-set-flags","purpose":"Set libmagic configuration options","prototype":"bool finfo_set_flags(resource $finfo, int $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"finfo::set_flags":{"id":"finfo.set-flags","purpose":"Alias of finfo_set_flags()","prototype":"bool finfo::set_flags(int $options)","return":"","versions":"PHP >= 5.3.0, PECL fileinfo >= 0.1.0"},"mime_content_type":{"id":"function.mime-content-type","purpose":"Detect MIME Content-type for a file","prototype":"string mime_content_type(string $filename)","return":"<p class=\"para\">   Returns the content type in MIME format, like    <em>text\/plain<\/em> or <em>application\/octet-stream<\/em>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"basename":{"id":"function.basename","purpose":"Returns trailing name component of path","prototype":"string basename(string $path [, string $suffix = ''])","return":"<p class=\"para\">   Returns the base name of the given <code class=\"parameter\">path<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"chgrp":{"id":"function.chgrp","purpose":"Changes file group","prototype":"bool chgrp(string $filename, mixed $group)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"chmod":{"id":"function.chmod","purpose":"Changes file mode","prototype":"bool chmod(string $filename, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"chown":{"id":"function.chown","purpose":"Changes file owner","prototype":"bool chown(string $filename, mixed $user)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"clearstatcache":{"id":"function.clearstatcache","purpose":"Clears file status cache","prototype":"void clearstatcache([bool $clear_realpath_cache = '' [, string $filename = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"copy":{"id":"function.copy","purpose":"Copies file","prototype":"bool copy(string $source, string $dest [, resource $context = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"delete":{"id":"function.delete","purpose":"See unlink or unset","prototype":" delete()","return":"","versions":"None"},"dirname":{"id":"function.dirname","purpose":"Returns a parent directory's path","prototype":"string dirname(string $path [, int $levels = 1])","return":"<p class=\"para\">   Returns the path of a parent directory. If there are no slashes in   <code class=\"parameter\">path<\/code>, a dot (&#039;<em>.<\/em>&#039;) is returned,   indicating the current directory. Otherwise, the returned string is   <code class=\"parameter\">path<\/code> with any trailing   <em>\/component<\/em> removed.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"disk_free_space":{"id":"function.disk-free-space","purpose":"Returns available space on filesystem or disk partition","prototype":"float disk_free_space(string $directory)","return":"<p class=\"para\">   Returns the number of available bytes as a float    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"disk_total_space":{"id":"function.disk-total-space","purpose":"Returns the total size of a filesystem or disk partition","prototype":"float disk_total_space(string $directory)","return":"<p class=\"para\">   Returns the total number of bytes as a float    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"diskfreespace":{"id":"function.diskfreespace","purpose":"Alias of disk_free_space","prototype":" diskfreespace()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"fclose":{"id":"function.fclose","purpose":"Closes an open file pointer","prototype":"bool fclose(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"feof":{"id":"function.feof","purpose":"Tests for end-of-file on a file pointer","prototype":"bool feof(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file pointer is at EOF or an error occurs   (including socket timeout); otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fflush":{"id":"function.fflush","purpose":"Flushes the output to a file","prototype":"bool fflush(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"fgetc":{"id":"function.fgetc","purpose":"Gets character from file pointer","prototype":"string fgetc(resource $handle)","return":"<p class=\"para\">   Returns a string containing a single character read from the file pointed   to by <code class=\"parameter\">handle<\/code>. Returns <strong><code>FALSE<\/code><\/strong> on EOF.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"fgetcsv":{"id":"function.fgetcsv","purpose":"Gets line from file pointer and parse for CSV fields","prototype":"array fgetcsv(resource $handle [, int $length = '' [, string $delimiter = \",\" [, string $enclosure = '\"' [, string $escape = \"\\\\\"]]]])","return":"<p class=\"para\">   Returns an indexed array containing the fields read.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    A blank line in a CSV file will be returned as an array    comprising a single <span class=\"type\">null<\/span> field, and will not be treated    as an error.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">If PHP is not properly recognizingthe line endings when reading files either on or created by a Macintoshcomputer, enabling the<a href=\"filesystem.configuration.html#ini.auto-detect-line-endings\" class=\"link\">auto_detect_line_endings<\/a>run-time configuration option may help resolve the problem.<\/span><\/p><\/blockquote>  <p class=\"para\">   <span class=\"function\">fgetcsv<\/span> returns <strong><code>NULL<\/code><\/strong> if an invalid   <code class=\"parameter\">handle<\/code> is supplied or <strong><code>FALSE<\/code><\/strong> on other errors,   including end of file.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fgets":{"id":"function.fgets","purpose":"Gets line from file pointer","prototype":"string fgets(resource $handle [, int $length = ''])","return":"<p class=\"para\">   Returns a string of up to <code class=\"parameter\">length<\/code> - 1 bytes read from   the file pointed to by <code class=\"parameter\">handle<\/code>. If there is no more data    to read in the file pointer, then <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>  <p class=\"para\">   If an error occurs, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fgetss":{"id":"function.fgetss","purpose":"Gets line from file pointer and strip HTML tags","prototype":"string fgetss(resource $handle [, int $length = '' [, string $allowable_tags = '']])","return":"<p class=\"para\">   Returns a string of up to <code class=\"parameter\">length<\/code> - 1 bytes read from   the file pointed to by <code class=\"parameter\">handle<\/code>, with all HTML and PHP   code stripped.  <\/p>  <p class=\"para\">   If an error occurs, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"file_exists":{"id":"function.file-exists","purpose":"Checks whether a file or directory exists","prototype":"bool file_exists(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file or directory specified by   <code class=\"parameter\">filename<\/code> exists; <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This function will return <strong><code>FALSE<\/code><\/strong> for symlinks pointing to non-existing    files.   <\/p>  <\/p><\/blockquote>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function returns <strong><code>FALSE<\/code><\/strong> for files inaccessible due to <a href=\"features.safe-mode.html\" class=\"link\">safe mode<\/a> restrictions. However these    files still can be <a href=\"function.include.html\" class=\"link\">included<\/a> if    they are located in <a href=\"ini.sect.safe-mode.html#ini.safe-mode-include-dir\" class=\"link\">safe_mode_include_dir<\/a>.   <\/p>  <\/div>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The check is done using the real UID\/GID instead of the effective one.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,    some filesystem functions may return unexpected results for files which    are larger than 2GB.   <\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"file_get_contents":{"id":"function.file-get-contents","purpose":"Reads entire file into a string","prototype":"string file_get_contents(string $filename [, bool $use_include_path = '' [, resource $context = '' [, int $offset = '' [, int $maxlen = '']]]])","return":"<p class=\"para\">   The function returns the read data  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"file_put_contents":{"id":"function.file-put-contents","purpose":"Write a string to a file","prototype":"int file_put_contents(string $filename, mixed $data [, int $flags = '' [, resource $context = '']])","return":"<p class=\"para\">   This function returns the number of bytes that were written to the file, or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"file":{"id":"function.file","purpose":"Reads entire file into an array","prototype":"array file(string $filename [, int $flags = '' [, resource $context = '']])","return":"<p class=\"para\">   Returns the file in an array. Each element of the array corresponds to a   line in the file, with the newline still attached. Upon failure,   <span class=\"function\">file<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Each line in the resulting array will include the line ending, unless    <strong><code>FILE_IGNORE_NEW_LINES<\/code><\/strong> is used, so you still need to    use <span class=\"function\">rtrim<\/span> if you do not want the line ending    present.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">If PHP is not properly recognizingthe line endings when reading files either on or created by a Macintoshcomputer, enabling the<a href=\"filesystem.configuration.html#ini.auto-detect-line-endings\" class=\"link\">auto_detect_line_endings<\/a>run-time configuration option may help resolve the problem.<\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"fileatime":{"id":"function.fileatime","purpose":"Gets last access time of file","prototype":"int fileatime(string $filename)","return":"<p class=\"para\">   Returns the time the file was last accessed,  or <strong><code>FALSE<\/code><\/strong> on failure.   The time is returned as a Unix timestamp.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"filectime":{"id":"function.filectime","purpose":"Gets inode change time of file","prototype":"int filectime(string $filename)","return":"<p class=\"para\">   Returns the time the file was last changed,  or <strong><code>FALSE<\/code><\/strong> on failure.   The time is returned as a Unix timestamp.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"filegroup":{"id":"function.filegroup","purpose":"Gets file group","prototype":"int filegroup(string $filename)","return":"<p class=\"para\">   Returns the group ID of the file, or <strong><code>FALSE<\/code><\/strong> if   an error occurs. The group ID is returned in numerical format, use   <span class=\"function\">posix_getgrgid<\/span> to resolve it to a group name.   Upon failure, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fileinode":{"id":"function.fileinode","purpose":"Gets file inode","prototype":"int fileinode(string $filename)","return":"<p class=\"para\">   Returns the inode number of the file,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"filemtime":{"id":"function.filemtime","purpose":"Gets file modification time","prototype":"int filemtime(string $filename)","return":"<p class=\"para\">   Returns the time the file was last modified,  or <strong><code>FALSE<\/code><\/strong> on failure.   The time is returned as a Unix timestamp, which is   suitable for the <span class=\"function\">date<\/span> function.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fileowner":{"id":"function.fileowner","purpose":"Gets file owner","prototype":"int fileowner(string $filename)","return":"<p class=\"para\">   Returns the user ID of the owner of the file,  or <strong><code>FALSE<\/code><\/strong> on failure.   The user ID is returned in numerical format, use   <span class=\"function\">posix_getpwuid<\/span> to resolve it to a username.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fileperms":{"id":"function.fileperms","purpose":"Gets file permissions","prototype":"int fileperms(string $filename)","return":"<p class=\"para\">   Returns the file&#039;s permissions as a numeric mode. Lower bits of this mode   are the same as the permissions expected by <span class=\"function\">chmod<\/span>,   however on most platforms the return value will also include information on   the type of file given as <code class=\"parameter\">filename<\/code>. The examples   below demonstrate how to test the return value for specific permissions and   file types on POSIX systems, including Linux and Mac OS X.  <\/p>  <p class=\"para\">   For local files, the specific return value is that of the   <em>st_mode<\/em> member of the structure returned by the C   library&#039;s <span class=\"function\">stat<\/span> function. Exactly which bits are set   can vary from platform to platform, and looking up your specific platform&#039;s   documentation is recommended if parsing the non-permission bits of the   return value is required.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"filesize":{"id":"function.filesize","purpose":"Gets file size","prototype":"int filesize(string $filename)","return":"<p class=\"para\">   Returns the size of the file in bytes, or <strong><code>FALSE<\/code><\/strong> (and generates an error   of level <strong><code>E_WARNING<\/code><\/strong>) in case of an error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,    some filesystem functions may return unexpected results for files which    are larger than 2GB.   <\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"filetype":{"id":"function.filetype","purpose":"Gets file type","prototype":"string filetype(string $filename)","return":"<p class=\"para\">   Returns the type of the file. Possible values are fifo, char,   dir, block, link, file, socket and unknown.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if an error occurs. <span class=\"function\">filetype<\/span> will also   produce an <strong><code>E_NOTICE<\/code><\/strong> message if the stat call fails   or if the file type is unknown.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"flock":{"id":"function.flock","purpose":"Portable advisory file locking","prototype":"bool flock(resource $handle, int $operation [, int $wouldblock = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fnmatch":{"id":"function.fnmatch","purpose":"Match filename against a pattern","prototype":"bool fnmatch(string $pattern, string $string [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there is a match, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fopen":{"id":"function.fopen","purpose":"Opens file or URL","prototype":"resource fopen(string $filename, string $mode [, bool $use_include_path = '' [, resource $context = '']])","return":"<p class=\"para\">   Returns a file pointer resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fpassthru":{"id":"function.fpassthru","purpose":"Output all remaining data on a file pointer","prototype":"int fpassthru(resource $handle)","return":"<p class=\"para\">   If an error occurs, <span class=\"function\">fpassthru<\/span> returns   <strong><code>FALSE<\/code><\/strong>.  Otherwise, <span class=\"function\">fpassthru<\/span> returns   the number of characters read from <code class=\"parameter\">handle<\/code>   and passed through to the output.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fputcsv":{"id":"function.fputcsv","purpose":"Format line as CSV and write to file pointer","prototype":"int fputcsv(resource $handle, array $fields [, string $delimiter = \",\" [, string $enclosure = '\"' [, string $escape_char = \"\\\\\"]]])","return":"<p class=\"para\">   Returns the length of the written string  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"fputs":{"id":"function.fputs","purpose":"Alias of fwrite","prototype":" fputs()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"fread":{"id":"function.fread","purpose":"Binary-safe file read","prototype":"string fread(resource $handle, int $length)","return":"<p class=\"para\">   Returns the read string  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fscanf":{"id":"function.fscanf","purpose":"Parses input from a file according to a format","prototype":"mixed fscanf(resource $handle, string $format [, mixed $... = ''])","return":"<p class=\"para\">   If only two parameters were passed to this function, the values parsed will be   returned as an array. Otherwise, if optional parameters are passed, the   function will return the number of assigned values. The optional   parameters must be passed by reference.   <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"fseek":{"id":"function.fseek","purpose":"Seeks on a file pointer","prototype":"int fseek(resource $handle, int $offset [, int $whence = SEEK_SET])","return":"<p class=\"para\">   Upon success, returns 0; otherwise, returns -1.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fstat":{"id":"function.fstat","purpose":"Gets information about a file using an open file pointer","prototype":"array fstat(resource $handle)","return":"<p class=\"para\">   Returns an array with the statistics of the file; the format of the array   is described in detail on the <span class=\"function\">stat<\/span> manual page.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftell":{"id":"function.ftell","purpose":"Returns the current position of the file read\/write pointer","prototype":"int ftell(resource $handle)","return":"<p class=\"para\">   Returns the position of the file pointer referenced by   <code class=\"parameter\">handle<\/code> as an integer; i.e., its offset into the file stream.  <\/p>  <p class=\"para\">   If an error occurs, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,    some filesystem functions may return unexpected results for files which    are larger than 2GB.   <\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"ftruncate":{"id":"function.ftruncate","purpose":"Truncates a file to a given length","prototype":"bool ftruncate(resource $handle, int $size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fwrite":{"id":"function.fwrite","purpose":"Binary-safe file write","prototype":"int fwrite(resource $handle, string $string [, int $length = ''])","return":"<p class=\"simpara\">   <span class=\"function\">fwrite<\/span> returns the number of bytes   written, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"glob":{"id":"function.glob","purpose":"Find pathnames matching a pattern","prototype":"array glob(string $pattern [, int $flags = ''])","return":"<p class=\"para\">   Returns an array containing the matched files\/directories, an empty array   if no file matched or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    On some systems it is impossible to distinguish between empty match and an    error.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"is_dir":{"id":"function.is-dir","purpose":"Tells whether the filename is a directory","prototype":"bool is_dir(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the filename exists and is a directory, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_executable":{"id":"function.is-executable","purpose":"Tells whether the filename is executable","prototype":"bool is_executable(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the filename exists and is executable, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_file":{"id":"function.is-file","purpose":"Tells whether the filename is a regular file","prototype":"bool is_file(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the filename exists and is a regular file, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,    some filesystem functions may return unexpected results for files which    are larger than 2GB.   <\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"is_link":{"id":"function.is-link","purpose":"Tells whether the filename is a symbolic link","prototype":"bool is_link(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the filename exists and is a symbolic link, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_readable":{"id":"function.is-readable","purpose":"Tells whether a file exists and is readable","prototype":"bool is_readable(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file or directory specified by   <code class=\"parameter\">filename<\/code> exists and is readable, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_uploaded_file":{"id":"function.is-uploaded-file","purpose":"Tells whether the file was uploaded via HTTP POST","prototype":"bool is_uploaded_file(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"is_writable":{"id":"function.is-writable","purpose":"Tells whether the filename is writable","prototype":"bool is_writable(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the <code class=\"parameter\">filename<\/code> exists and is   writable.    <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_writeable":{"id":"function.is-writeable","purpose":"Alias of is_writable","prototype":" is_writeable()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"lchgrp":{"id":"function.lchgrp","purpose":"Changes group ownership of symlink","prototype":"bool lchgrp(string $filename, mixed $group)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"lchown":{"id":"function.lchown","purpose":"Changes user ownership of symlink","prototype":"bool lchown(string $filename, mixed $user)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"link":{"id":"function.link","purpose":"Create a hard link","prototype":"bool link(string $target, string $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"linkinfo":{"id":"function.linkinfo","purpose":"Gets information about a link","prototype":"int linkinfo(string $path)","return":"<p class=\"para\">   <span class=\"function\">linkinfo<\/span> returns the <em>st_dev<\/em> field   of the Unix C stat structure returned by the <em>lstat<\/em>   system call. Returns 0 or <strong><code>FALSE<\/code><\/strong> in case of error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"lstat":{"id":"function.lstat","purpose":"Gives information about a file or symbolic link","prototype":"array lstat(string $filename)","return":"<p class=\"para\">   See the manual page for <span class=\"function\">stat<\/span> for information on   the structure of the array that <span class=\"function\">lstat<\/span> returns.   This function is identical to the <span class=\"function\">stat<\/span> function   except that if the <code class=\"parameter\">filename<\/code> parameter is a symbolic   link, the status of the symbolic link is returned, not the status of the   file pointed to by the symbolic link.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mkdir":{"id":"function.mkdir","purpose":"Makes directory","prototype":"bool mkdir(string $pathname [, int $mode = 0777 [, bool $recursive = '' [, resource $context = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"move_uploaded_file":{"id":"function.move-uploaded-file","purpose":"Moves an uploaded file to a new location","prototype":"bool move_uploaded_file(string $filename, string $destination)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">filename<\/code> is not a valid upload file,   then no action will occur, and   <span class=\"function\">move_uploaded_file<\/span> will return   <strong><code>FALSE<\/code><\/strong>.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">filename<\/code> is a valid upload file, but   cannot be moved for some reason, no action will occur, and   <span class=\"function\">move_uploaded_file<\/span> will return   <strong><code>FALSE<\/code><\/strong>. Additionally, a warning will be issued.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"parse_ini_file":{"id":"function.parse-ini-file","purpose":"Parse a configuration file","prototype":"array parse_ini_file(string $filename [, bool $process_sections = '' [, int $scanner_mode = INI_SCANNER_NORMAL]])","return":"<p class=\"para\">   The settings are returned as an associative <span class=\"type\">array<\/span> on success,   and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"parse_ini_string":{"id":"function.parse-ini-string","purpose":"Parse a configuration string","prototype":"array parse_ini_string(string $ini [, bool $process_sections = '' [, int $scanner_mode = INI_SCANNER_NORMAL]])","return":"<p class=\"para\">   The settings are returned as an associative <span class=\"type\">array<\/span> on success,   and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"pathinfo":{"id":"function.pathinfo","purpose":"Returns information about a file path","prototype":"mixed pathinfo(string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME])","return":"<p class=\"para\">   If the <code class=\"parameter\">options<\/code> parameter is not passed, an   associative <span class=\"type\">array<\/span> containing the following elements is   returned:   <em>dirname<\/em>, <em>basename<\/em>,   <em>extension<\/em> (if any), and <em>filename<\/em>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the <code class=\"parameter\">path<\/code> has more than one extension,    <strong><code>PATHINFO_EXTENSION<\/code><\/strong> returns only the last one and    <strong><code>PATHINFO_FILENAME<\/code><\/strong> only strips the last one.    (see first example below).   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the <code class=\"parameter\">path<\/code> does not have an extension, no    <em>extension<\/em> element will be returned    (see second example below).   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the <em>basename<\/em> of the <code class=\"parameter\">path<\/code> starts    with a dot, the following characters are interpreted as    <em>extension<\/em>, and the <em>filename<\/em> is empty    (see third example below).   <\/p>  <\/p><\/blockquote>  <p class=\"para\">   If <code class=\"parameter\">options<\/code> is present, returns a   <span class=\"type\">string<\/span> containing the requested element.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"pclose":{"id":"function.pclose","purpose":"Closes process file pointer","prototype":"int pclose(resource $handle)","return":"<p class=\"para\">   Returns the termination status of the process that was run. In case of    an error then <em>-1<\/em> is returned.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:  <p class=\"para\">  If PHP has been compiled with --enable-sigchild, the return value of this function is undefined. <\/p><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"popen":{"id":"function.popen","purpose":"Opens process file pointer","prototype":"resource popen(string $command, string $mode)","return":"<p class=\"para\">   Returns a file pointer identical to that returned by   <span class=\"function\">fopen<\/span>, except that it is unidirectional (may   only be used for reading or writing) and must be closed with   <span class=\"function\">pclose<\/span>. This pointer may be used with   <span class=\"function\">fgets<\/span>, <span class=\"function\">fgetss<\/span>, and   <span class=\"function\">fwrite<\/span>. When the mode is &#039;r&#039;, the returned   file pointer equals to the STDOUT of the command, when the mode   is &#039;w&#039;, the returned file pointer equals to the STDIN of the   command.  <\/p>  <p class=\"para\">   If an error occurs, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readfile":{"id":"function.readfile","purpose":"Outputs a file","prototype":"int readfile(string $filename [, bool $use_include_path = '' [, resource $context = '']])","return":"<p class=\"para\">   Returns the number of bytes read from the file. If an error   occurs, <strong><code>FALSE<\/code><\/strong> is returned and unless the function was called as   @<span class=\"function\">readfile<\/span>, an error message is printed.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"readlink":{"id":"function.readlink","purpose":"Returns the target of a symbolic link","prototype":"string readlink(string $path)","return":"<p class=\"para\">   Returns the contents of the symbolic link path or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"realpath_cache_get":{"id":"function.realpath-cache-get","purpose":"Get realpath cache entries","prototype":"array realpath_cache_get()","return":"<p class=\"para\">   Returns an array of realpath cache entries. The keys are original path   entries, and the values are arrays of data items, containing the resolved   path, expiration date, and other options kept in the cache.   <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7"},"realpath_cache_size":{"id":"function.realpath-cache-size","purpose":"Get realpath cache size","prototype":"int realpath_cache_size()","return":"<p class=\"para\">   Returns how much memory realpath cache is using.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7"},"realpath":{"id":"function.realpath","purpose":"Returns canonicalized absolute pathname","prototype":"string realpath(string $path)","return":"<p class=\"para\">   Returns the canonicalized absolute pathname on success. The resulting path    will have no symbolic link, <em>\/.\/<\/em> or <em>\/..\/<\/em> components. Trailing delimiters,   such as <em>\\<\/em> and <em>\/<\/em>, are also removed.  <\/p>  <p class=\"para\">   <span class=\"function\">realpath<\/span> returns <strong><code>FALSE<\/code><\/strong> on failure, e.g. if   the file does not exist.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The running script must have executable permissions on all directories in    the hierarchy, otherwise <span class=\"function\">realpath<\/span> will return    <strong><code>FALSE<\/code><\/strong>.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    For case-insensitive filesystems <span class=\"function\">realpath<\/span> may or may    not normalize the character case.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The function <span class=\"function\">realpath<\/span> will not work for a file which    is inside a Phar as such path would be a virtual path, not a real one.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,    some filesystem functions may return unexpected results for files which    are larger than 2GB.   <\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"rename":{"id":"function.rename","purpose":"Renames a file or directory","prototype":"bool rename(string $oldname, string $newname [, resource $context = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rewind":{"id":"function.rewind","purpose":"Rewind the position of a file pointer","prototype":"bool rewind(resource $handle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rmdir":{"id":"function.rmdir","purpose":"Removes directory","prototype":"bool rmdir(string $dirname [, resource $context = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"set_file_buffer":{"id":"function.set-file-buffer","purpose":"Alias of stream_set_write_buffer","prototype":" set_file_buffer()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"stat":{"id":"function.stat","purpose":"Gives information about a file","prototype":"array stat(string $filename)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong><span class=\"function\">stat<\/span> and <span class=\"function\">fstat<\/span> result     format<\/strong><\/caption>         <thead>      <tr>       <th>Numeric<\/th>       <th>Associative<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>dev<\/td>       <td>device number<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>ino<\/td>       <td>inode number *<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>mode<\/td>       <td>inode protection mode<\/td>      <\/tr>      <tr>       <td>3<\/td>       <td>nlink<\/td>       <td>number of links<\/td>      <\/tr>      <tr>       <td>4<\/td>       <td>uid<\/td>       <td>userid of owner *<\/td>      <\/tr>      <tr>       <td>5<\/td>       <td>gid<\/td>       <td>groupid of owner *<\/td>      <\/tr>      <tr>       <td>6<\/td>       <td>rdev<\/td>       <td>device type, if inode device<\/td>      <\/tr>      <tr>       <td>7<\/td>       <td>size<\/td>       <td>size in bytes<\/td>      <\/tr>      <tr>       <td>8<\/td>       <td>atime<\/td>       <td>time of last access (Unix timestamp)<\/td>      <\/tr>      <tr>       <td>9<\/td>       <td>mtime<\/td>       <td>time of last modification (Unix timestamp)<\/td>      <\/tr>      <tr>       <td>10<\/td>       <td>ctime<\/td>       <td>time of last inode change (Unix timestamp)<\/td>      <\/tr>      <tr>       <td>11<\/td>       <td>blksize<\/td>       <td>blocksize of filesystem IO **<\/td>      <\/tr>      <tr>       <td>12<\/td>       <td>blocks<\/td>       <td>number of 512-byte blocks allocated **<\/td>      <\/tr>     <\/tbody>       <\/table>   * On Windows this will always be 0.  <\/p>  <p class=\"para\">   ** Only valid on systems supporting the st_blksize type - other   systems (e.g. Windows) return -1.  <\/p>  <p class=\"para\">   In case of error, <span class=\"function\">stat<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <span class=\"simpara\">    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,    some filesystem functions may return unexpected results for files which    are larger than 2GB.   <\/span><\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"symlink":{"id":"function.symlink","purpose":"Creates a symbolic link","prototype":"bool symlink(string $target, string $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"tempnam":{"id":"function.tempnam","purpose":"Create file with unique file name","prototype":"string tempnam(string $dir, string $prefix)","return":"<p class=\"para\">   Returns the new temporary filename (with path), or <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"tmpfile":{"id":"function.tmpfile","purpose":"Creates a temporary file","prototype":"resource tmpfile()","return":"<p class=\"para\">   Returns a file handle, similar to the one returned by   <span class=\"function\">fopen<\/span>, for the new file or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"touch":{"id":"function.touch","purpose":"Sets access and modification time of file","prototype":"bool touch(string $filename [, int $time = time() [, int $atime = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"umask":{"id":"function.umask","purpose":"Changes the current umask","prototype":"int umask([int $mask = ''])","return":"<p class=\"para\">   <span class=\"function\">umask<\/span> without arguments simply returns the   current umask otherwise the old umask is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"unlink":{"id":"function.unlink","purpose":"Deletes a file","prototype":"bool unlink(string $filename [, resource $context = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"inotify_add_watch":{"id":"function.inotify-add-watch","purpose":"Add a watch to an initialized inotify instance","prototype":"int inotify_add_watch(resource $inotify_instance, string $pathname, int $mask)","return":"<p class=\"para\">   The return value is a unique (inotify instance wide) watch descriptor.  <\/p>","versions":"PECL inotify >= 0.1.2"},"inotify_init":{"id":"function.inotify-init","purpose":"Initialize an inotify instance","prototype":"resource inotify_init()","return":"<p class=\"para\">   A stream resource or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL inotify >= 0.1.2"},"inotify_queue_len":{"id":"function.inotify-queue-len","purpose":"Return a number upper than zero if there are pending events","prototype":"int inotify_queue_len(resource $inotify_instance)","return":"<p class=\"para\">   Returns a number upper than zero if there are pending events.   <\/p>","versions":"PECL inotify >= 0.1.2"},"inotify_read":{"id":"function.inotify-read","purpose":"Read events from an inotify instance","prototype":"array inotify_read(resource $inotify_instance)","return":"<p class=\"para\">   An array of inotify events or <strong><code>FALSE<\/code><\/strong> if no events was pending and   <code class=\"parameter\">inotify_instance<\/code> is non-blocking. Each event is an array with the following keys:   <ul class=\"simplelist\">    <li class=\"member\">wd is a watch descriptor returned by     <span class=\"function\">inotify_add_watch<\/span><\/li>    <li class=\"member\">mask is a bit mask of <a href=\"inotify.constants.html\" class=\"link\">events<\/a><\/li>    <li class=\"member\">cookie is a unique id to connect related events (e.g. <strong><code>IN_MOVE_FROM<\/code><\/strong>     and <strong><code>IN_MOVE_TO<\/code><\/strong>)<\/li>    <li class=\"member\">name is the name of a file (e.g. if a file was modified in a     watched directory)<\/li>   <\/ul>  <\/p>","versions":"PECL inotify >= 0.1.2"},"inotify_rm_watch":{"id":"function.inotify-rm-watch","purpose":"Remove an existing watch from an inotify instance","prototype":"bool inotify_rm_watch(resource $inotify_instance, int $watch_descriptor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL inotify >= 0.1.2"},"phdfs::connect":{"id":"phdfs.connect","purpose":"Description","prototype":"bool phdfs::connect()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::__construct":{"id":"phdfs.construct","purpose":"Description","prototype":" phdfs::__construct(string $ip, string $port)","return":"<p class=\"para\">     <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::copy":{"id":"phdfs.copy","purpose":"Description","prototype":"bool phdfs::copy(string $source_file, string $destination_file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::create_directory":{"id":"phdfs.create-directory","purpose":"Description","prototype":"bool phdfs::create_directory(string $path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::delete":{"id":"phdfs.delete","purpose":"Description","prototype":"bool phdfs::delete(string $path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::__destruct":{"id":"phdfs.destruct","purpose":"Description","prototype":"void phdfs::__destruct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::disconnect":{"id":"phdfs.disconnect","purpose":"Description","prototype":"bool phdfs::disconnect()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::exists":{"id":"phdfs.exists","purpose":"Description","prototype":"bool phdfs::exists(string $path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs>= 0.1.0"},"phdfs::file_info":{"id":"phdfs.file-info","purpose":"Description","prototype":"array phdfs::file_info(string $path)","return":"<p class=\"para\">   Returns array on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::list_directory":{"id":"phdfs.list-directory","purpose":"Description","prototype":"array phdfs::list_directory(string $path [, int $level = ''])","return":"<p class=\"para\">   Returns array on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::read":{"id":"phdfs.read","purpose":"Description","prototype":"string phdfs::read(string $path [, int $length = ''])","return":"<p class=\"para\">     <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::rename":{"id":"phdfs.rename","purpose":"Description","prototype":"bool phdfs::rename(string $old_path, string $new_path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::tell":{"id":"phdfs.tell","purpose":"Description","prototype":"int phdfs::tell(string $path [, int $read_length = 1024])","return":"<p class=\"para\">     <\/p>","versions":"phdfs >= 0.1.0"},"phdfs::write":{"id":"phdfs.write","purpose":"Description","prototype":"bool phdfs::write(string $path, string $buffer [, int $mode = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"phdfs >= 0.1.0"},"setproctitle":{"id":"function.setproctitle","purpose":"Set the process title","prototype":"void setproctitle(string $title)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL proctitle >= 0.1.0"},"setthreadtitle":{"id":"function.setthreadtitle","purpose":"Set the thread title","prototype":"bool setthreadtitle(string $title)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL proctitle >= 0.1.2"},"xattr_get":{"id":"function.xattr-get","purpose":"Get an extended attribute","prototype":"string xattr_get(string $filename, string $name [, int $flags = ''])","return":"<p class=\"para\">   Returns a string containing the value or <strong><code>FALSE<\/code><\/strong> if the attribute doesn&#039;t    exist.   <\/p>","versions":"PECL xattr >= 0.9.0"},"xattr_list":{"id":"function.xattr-list","purpose":"Get a list of extended attributes","prototype":"array xattr_list(string $filename [, int $flags = ''])","return":"<p class=\"para\">   This function returns an array with names of extended attributes.   <\/p>","versions":"PECL xattr >= 0.9.0"},"xattr_remove":{"id":"function.xattr-remove","purpose":"Remove an extended attribute","prototype":"bool xattr_remove(string $filename, string $name [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xattr >= 0.9.0"},"xattr_set":{"id":"function.xattr-set","purpose":"Set an extended attribute","prototype":"bool xattr_set(string $filename, string $name, string $value [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xattr >= 0.9.0"},"xattr_supported":{"id":"function.xattr-supported","purpose":"Check if filesystem supports extended attributes","prototype":"bool xattr_supported(string $filename [, int $flags = ''])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if filesystem supports extended attributes,   <strong><code>FALSE<\/code><\/strong> if it doesn&#039;t and <strong><code>NULL<\/code><\/strong> if it can&#039;t be determined (for example   wrong path or lack of permissions to file).  <\/p>","versions":"PECL xattr >= 1.0.0"},"xdiff_file_bdiff_size":{"id":"function.xdiff-file-bdiff-size","purpose":"Read a size of file created by applying a binary diff","prototype":"int xdiff_file_bdiff_size(string $file)","return":"<p class=\"para\">   Returns the size of file that would be created.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_file_bdiff":{"id":"function.xdiff-file-bdiff","purpose":"Make binary diff of two files","prototype":"bool xdiff_file_bdiff(string $old_file, string $new_file, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_file_bpatch":{"id":"function.xdiff-file-bpatch","purpose":"Patch a file with a binary diff","prototype":"bool xdiff_file_bpatch(string $file, string $patch, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_file_diff_binary":{"id":"function.xdiff-file-diff-binary","purpose":"Alias of xdiff_file_bdiff","prototype":"bool xdiff_file_diff_binary(string $old_file, string $new_file, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_file_diff":{"id":"function.xdiff-file-diff","purpose":"Make unified diff of two files","prototype":"bool xdiff_file_diff(string $old_file, string $new_file, string $dest [, int $context = 3 [, bool $minimal = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_file_merge3":{"id":"function.xdiff-file-merge3","purpose":"Merge 3 files into one","prototype":"mixed xdiff_file_merge3(string $old_file, string $new_file1, string $new_file2, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if merge was successful, string with rejected chunks if   it was not or <strong><code>FALSE<\/code><\/strong> if an internal error happened.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_file_patch_binary":{"id":"function.xdiff-file-patch-binary","purpose":"Alias of xdiff_file_bpatch","prototype":"bool xdiff_file_patch_binary(string $file, string $patch, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_file_patch":{"id":"function.xdiff-file-patch","purpose":"Patch a file with an unified diff","prototype":"mixed xdiff_file_patch(string $file, string $patch, string $dest [, int $flags = DIFF_PATCH_NORMAL])","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if an internal error happened, string with rejected   chunks if patch couldn&#039;t be applied or <strong><code>TRUE<\/code><\/strong> if patch has been successfully applied.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_file_rabdiff":{"id":"function.xdiff-file-rabdiff","purpose":"Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm","prototype":"bool xdiff_file_rabdiff(string $old_file, string $new_file, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_string_bdiff_size":{"id":"function.xdiff-string-bdiff-size","purpose":"Read a size of file created by applying a binary diff","prototype":"int xdiff_string_bdiff_size(string $patch)","return":"<p class=\"para\">   Returns the size of file that would be created.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_string_bdiff":{"id":"function.xdiff-string-bdiff","purpose":"Make binary diff of two strings","prototype":"string xdiff_string_bdiff(string $old_data, string $new_data)","return":"<p class=\"para\">   Returns string with binary diff containing differences between &quot;old&quot; and &quot;new&quot;   data or <strong><code>FALSE<\/code><\/strong> if an internal error occurred.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_string_bpatch":{"id":"function.xdiff-string-bpatch","purpose":"Patch a string with a binary diff","prototype":"string xdiff_string_bpatch(string $str, string $patch)","return":"<p class=\"para\">   Returns the patched string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"xdiff_string_diff_binary":{"id":"function.xdiff-string-diff-binary","purpose":"Alias of xdiff_string_bdiff","prototype":"string xdiff_string_diff_binary(string $old_data, string $new_data)","return":"<p class=\"para\">   Returns string with result or <strong><code>FALSE<\/code><\/strong> if an internal error happened.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_string_diff":{"id":"function.xdiff-string-diff","purpose":"Make unified diff of two strings","prototype":"string xdiff_string_diff(string $old_data, string $new_data [, int $context = 3 [, bool $minimal = '']])","return":"<p class=\"para\">   Returns string with resulting diff or <strong><code>FALSE<\/code><\/strong> if an internal error happened.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_string_merge3":{"id":"function.xdiff-string-merge3","purpose":"Merge 3 strings into one","prototype":"mixed xdiff_string_merge3(string $old_data, string $new_data1, string $new_data2 [, string $error = ''])","return":"<p class=\"para\">   Returns the merged string, <strong><code>FALSE<\/code><\/strong> if an internal error happened, or <strong><code>TRUE<\/code><\/strong>   if merged string is empty.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_string_patch_binary":{"id":"function.xdiff-string-patch-binary","purpose":"Alias of xdiff_string_bpatch","prototype":"string xdiff_string_patch_binary(string $str, string $patch)","return":"<p class=\"para\">   Returns the patched string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_string_patch":{"id":"function.xdiff-string-patch","purpose":"Patch a string with an unified diff","prototype":"string xdiff_string_patch(string $str, string $patch [, int $flags = '' [, string $error = '']])","return":"<p class=\"para\">   Returns the patched string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL xdiff >= 0.2.0"},"xdiff_string_rabdiff":{"id":"function.xdiff-string-rabdiff","purpose":"Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm","prototype":"string xdiff_string_rabdiff(string $old_data, string $new_data)","return":"<p class=\"para\">   Returns string with binary diff containing differences between &quot;old&quot; and &quot;new&quot;   data or <strong><code>FALSE<\/code><\/strong> if an internal error occurred.  <\/p>","versions":"PECL xdiff >= 1.5.0"},"enchant_broker_describe":{"id":"function.enchant-broker-describe","purpose":"Enumerates the Enchant providers","prototype":"array enchant_broker_describe(resource $broker)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0"},"enchant_broker_dict_exists":{"id":"function.enchant-broker-dict-exists","purpose":"Whether a dictionary exists or not. Using non-empty tag","prototype":"bool enchant_broker_dict_exists(resource $broker, string $tag)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> when the tag exist or <strong><code>FALSE<\/code><\/strong> when not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_free_dict":{"id":"function.enchant-broker-free-dict","purpose":"Free a dictionary resource","prototype":"bool enchant_broker_free_dict(resource $dict)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_free":{"id":"function.enchant-broker-free","purpose":"Free the broker resource and its dictionnaries","prototype":"bool enchant_broker_free(resource $broker)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_get_dict_path":{"id":"function.enchant-broker-get-dict-path","purpose":"Get the directory path for a given backend","prototype":"bool enchant_broker_get_dict_path(resource $broker, int $dict_type)","return":"<p class=\"para\">   Returns the path of the dictionary directory on   success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.1, PHP 7, PECL enchant >= 1.0.1"},"enchant_broker_get_error":{"id":"function.enchant-broker-get-error","purpose":"Returns the last error of the broker","prototype":"string enchant_broker_get_error(resource $broker)","return":"<p class=\"para\">   Return the msg string if an error was found or <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_init":{"id":"function.enchant-broker-init","purpose":"Create a new broker object capable of requesting","prototype":"resource enchant_broker_init()","return":"<p class=\"para\">   Returns a broker resource on success or <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_list_dicts":{"id":"function.enchant-broker-list-dicts","purpose":"Returns a list of available dictionaries","prototype":"mixed enchant_broker_list_dicts(resource $broker)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 1.0.1"},"enchant_broker_request_dict":{"id":"function.enchant-broker-request-dict","purpose":"Create a new dictionary using a tag","prototype":"resource enchant_broker_request_dict(resource $broker, string $tag)","return":"<p class=\"para\">   Returns a dictionary resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_request_pwl_dict":{"id":"function.enchant-broker-request-pwl-dict","purpose":"Creates a dictionary using a PWL file","prototype":"resource enchant_broker_request_pwl_dict(resource $broker, string $filename)","return":"<p class=\"para\">   Returns a dictionary resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_broker_set_dict_path":{"id":"function.enchant-broker-set-dict-path","purpose":"Set the directory path for a given backend","prototype":"bool enchant_broker_set_dict_path(resource $broker, int $dict_type, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.1, PHP 7, PECL enchant >= 1.0.1"},"enchant_broker_set_ordering":{"id":"function.enchant-broker-set-ordering","purpose":"Declares a preference of dictionaries to use for the language","prototype":"bool enchant_broker_set_ordering(resource $broker, string $tag, string $ordering)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_add_to_personal":{"id":"function.enchant-dict-add-to-personal","purpose":"Add a word to personal word list","prototype":"void enchant_dict_add_to_personal(resource $dict, string $word)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_add_to_session":{"id":"function.enchant-dict-add-to-session","purpose":"Add 'word' to this spell-checking session","prototype":"void enchant_dict_add_to_session(resource $dict, string $word)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_check":{"id":"function.enchant-dict-check","purpose":"Check whether a word is correctly spelled or not","prototype":"bool enchant_dict_check(resource $dict, string $word)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the word is spelled correctly, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_describe":{"id":"function.enchant-dict-describe","purpose":"Describes an individual dictionary","prototype":"mixed enchant_dict_describe(resource $dict)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_get_error":{"id":"function.enchant-dict-get-error","purpose":"Returns the last error of the current spelling-session","prototype":"string enchant_dict_get_error(resource $dict)","return":"<p class=\"para\">   Returns the error message as string or <strong><code>FALSE<\/code><\/strong> if no error occurred.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_is_in_session":{"id":"function.enchant-dict-is-in-session","purpose":"Whether or not 'word' exists in this spelling-session","prototype":"bool enchant_dict_is_in_session(resource $dict, string $word)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the word exists or <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_quick_check":{"id":"function.enchant-dict-quick-check","purpose":"Check the word is correctly spelled and provide suggestions","prototype":"bool enchant_dict_quick_check(resource $dict, string $word [, array $suggestions = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the word is correctly spelled or <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant:0.2.0-1.0.1"},"enchant_dict_store_replacement":{"id":"function.enchant-dict-store-replacement","purpose":"Add a correction for a word","prototype":"void enchant_dict_store_replacement(resource $dict, string $mis, string $cor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"enchant_dict_suggest":{"id":"function.enchant-dict-suggest","purpose":"Will return a list of values if any of those pre-conditions are not met","prototype":"array enchant_dict_suggest(resource $dict, string $word)","return":"<p class=\"para\">   Will returns an array of suggestions if the word is bad spelled.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL enchant >= 0.1.0 "},"fribidi_log2vis":{"id":"function.fribidi-log2vis","purpose":"Convert a logical string to a visual one","prototype":"string fribidi_log2vis(string $str, string $direction, int $charset)","return":"<p class=\"para\">   Returns the visual string on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4 and PHP 4 <= 4.1.0, PECL fribidi >= 1.0"},"Gender\\Gender::connect":{"id":"gender-gender.connect","purpose":"Connect to an external name dictionary","prototype":"bool Gender\\Gender::connect(string $dsn)","return":"<p class=\"para\">    Boolean as success of failure.  <\/p>","versions":"PECL gender >= 0.6.0"},"Gender\\Gender::__construct":{"id":"gender-gender.construct","purpose":"Construct the Gender object","prototype":" Gender\\Gender::__construct([string $dsn = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL gender >= 0.6.0"},"Gender\\Gender::country":{"id":"gender-gender.country","purpose":"Get textual country representation","prototype":"array Gender\\Gender::country(int $country)","return":"<p class=\"para\">    Returns an array with the short and full names of the country on success     or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PECL gender >= 0.8.0"},"Gender\\Gender::get":{"id":"gender-gender.get","purpose":"Get gender of a name","prototype":"int Gender\\Gender::get(string $name [, int $country = ''])","return":"<p class=\"para\">    Returns gender of the name.  <\/p>","versions":"PECL gender >= 0.6.0"},"Gender\\Gender::isNick":{"id":"gender-gender.isnick","purpose":"Check if the name0 is an alias of the name1","prototype":"array Gender\\Gender::isNick(string $name0, string $name1 [, int $country = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gender >= 0.9.0"},"Gender\\Gender::similarNames":{"id":"gender-gender.similarnames","purpose":"Get similar names","prototype":"array Gender\\Gender::similarNames(string $name [, int $country = ''])","return":"<p class=\"para\">    Returns an array with the similar names found.  <\/p>","versions":"PECL gender >= 0.9.0"},"bind_textdomain_codeset":{"id":"function.bind-textdomain-codeset","purpose":"Specify the character encoding in which the messages from the DOMAIN message catalog will be returned","prototype":"string bind_textdomain_codeset(string $domain, string $codeset)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> on success.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"bindtextdomain":{"id":"function.bindtextdomain","purpose":"Sets the path for a domain","prototype":"string bindtextdomain(string $domain, string $directory)","return":"<p class=\"para\">   The full pathname for the <code class=\"parameter\">domain<\/code> currently being set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dcgettext":{"id":"function.dcgettext","purpose":"Overrides the domain for a single lookup","prototype":"string dcgettext(string $domain, string $message, int $category)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> on success.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dcngettext":{"id":"function.dcngettext","purpose":"Plural version of dcgettext","prototype":"string dcngettext(string $domain, string $msgid1, string $msgid2, int $n, int $category)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> on success.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"dgettext":{"id":"function.dgettext","purpose":"Override the current domain","prototype":"string dgettext(string $domain, string $message)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> on success.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dngettext":{"id":"function.dngettext","purpose":"Plural version of dgettext","prototype":"string dngettext(string $domain, string $msgid1, string $msgid2, int $n)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> on success.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"gettext":{"id":"function.gettext","purpose":"Lookup a message in the current domain","prototype":"string gettext(string $message)","return":"<p class=\"para\">   Returns a translated <span class=\"type\">string<\/span> if one is found in the    translation table, or the submitted message if not found.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ngettext":{"id":"function.ngettext","purpose":"Plural version of gettext","prototype":"string ngettext(string $msgid1, string $msgid2, int $n)","return":"<p class=\"para\">   Returns correct plural form of message identified by    <code class=\"parameter\">msgid1<\/code> and <code class=\"parameter\">msgid2<\/code>   for count <code class=\"parameter\">n<\/code>.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"textdomain":{"id":"function.textdomain","purpose":"Sets the default domain","prototype":"string textdomain(string $text_domain)","return":"<p class=\"para\">   If successful, this function returns the current message   domain, after possibly changing it.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"iconv_get_encoding":{"id":"function.iconv-get-encoding","purpose":"Retrieve internal configuration variables of iconv extension","prototype":"mixed iconv_get_encoding([string $type = \"all\"])","return":"<p class=\"para\">   Returns the current value of the internal configuration variable if   successful or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">type<\/code> is omitted or set to &quot;all&quot;,   <span class=\"function\">iconv_get_encoding<\/span> returns an array that   stores all these variables.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"iconv_mime_decode_headers":{"id":"function.iconv-mime-decode-headers","purpose":"Decodes multiple MIME header fields at once","prototype":"array iconv_mime_decode_headers(string $encoded_headers [, int $mode = '' [, string $charset = ini_get(\"iconv.internal_encoding\")]])","return":"<p class=\"para\">   Returns an associative array that holds a whole set of   <em>MIME<\/em> header fields specified by   <code class=\"parameter\">encoded_headers<\/code> on success, or <strong><code>FALSE<\/code><\/strong>   if an error occurs during the decoding.  <\/p>  <p class=\"para\">   Each key of the return value represents an individual   field name and the corresponding element represents a field value.   If more than one field of the same name are present,   <span class=\"function\">iconv_mime_decode_headers<\/span> automatically incorporates   them into a numerically indexed array in the order of occurrence.  <\/p>","versions":"PHP 5, PHP 7"},"iconv_mime_decode":{"id":"function.iconv-mime-decode","purpose":"Decodes a MIME header field","prototype":"string iconv_mime_decode(string $encoded_header [, int $mode = '' [, string $charset = ini_get(\"iconv.internal_encoding\")]])","return":"<p class=\"para\">   Returns a decoded <em>MIME<\/em> field on success,   or <strong><code>FALSE<\/code><\/strong> if an error occurs during the decoding.  <\/p>","versions":"PHP 5, PHP 7"},"iconv_mime_encode":{"id":"function.iconv-mime-encode","purpose":"Composes a MIME header field","prototype":"string iconv_mime_encode(string $field_name, string $field_value [, array $preferences = ''])","return":"<p class=\"para\">   Returns an encoded <em>MIME<\/em> field on success,   or <strong><code>FALSE<\/code><\/strong> if an error occurs during the encoding.  <\/p>","versions":"PHP 5, PHP 7"},"iconv_set_encoding":{"id":"function.iconv-set-encoding","purpose":"Set current setting for character encoding conversion","prototype":"bool iconv_set_encoding(string $type, string $charset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"iconv_strlen":{"id":"function.iconv-strlen","purpose":"Returns the character count of string","prototype":"int iconv_strlen(string $str [, string $charset = ini_get(\"iconv.internal_encoding\")])","return":"<p class=\"para\">   Returns the character count of <code class=\"parameter\">str<\/code>, as an integer.  <\/p>","versions":"PHP 5, PHP 7"},"iconv_strpos":{"id":"function.iconv-strpos","purpose":"Finds position of first occurrence of a needle within a haystack","prototype":"int iconv_strpos(string $haystack, string $needle [, int $offset = '' [, string $charset = ini_get(\"iconv.internal_encoding\")]])","return":"<p class=\"para\">   Returns the numeric position of the first occurrence of   <code class=\"parameter\">needle<\/code> in <code class=\"parameter\">haystack<\/code>.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">needle<\/code> is not found,   <span class=\"function\">iconv_strpos<\/span> will return <strong><code>FALSE<\/code><\/strong>.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"iconv_strrpos":{"id":"function.iconv-strrpos","purpose":"Finds the last occurrence of a needle within a haystack","prototype":"int iconv_strrpos(string $haystack, string $needle [, string $charset = ini_get(\"iconv.internal_encoding\")])","return":"<p class=\"para\">   Returns the numeric position of the last occurrence of   <code class=\"parameter\">needle<\/code> in <code class=\"parameter\">haystack<\/code>.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">needle<\/code> is not found,   <span class=\"function\">iconv_strrpos<\/span> will return <strong><code>FALSE<\/code><\/strong>.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"iconv_substr":{"id":"function.iconv-substr","purpose":"Cut out part of a string","prototype":"string iconv_substr(string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get(\"iconv.internal_encoding\")]])","return":"<p class=\"para\">   Returns the portion of <code class=\"parameter\">str<\/code> specified by the   <code class=\"parameter\">offset<\/code> and <code class=\"parameter\">length<\/code> parameters.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">str<\/code> is shorter than <code class=\"parameter\">offset<\/code>   characters long, <strong><code>FALSE<\/code><\/strong> will be returned.   If <code class=\"parameter\">str<\/code> is exactly <code class=\"parameter\">offset<\/code>   characters long, an empty string will be returned.  <\/p>","versions":"PHP 5, PHP 7"},"iconv":{"id":"function.iconv","purpose":"Convert string to requested character encoding","prototype":"string iconv(string $in_charset, string $out_charset, string $str)","return":"<p class=\"para\">   Returns the converted string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ob_iconv_handler":{"id":"function.ob-iconv-handler","purpose":"Convert character encoding as output buffer handler","prototype":"string ob_iconv_handler(string $contents, int $status)","return":"<p class=\"para\">   See <span class=\"function\">ob_start<\/span> for information about this handler   return values.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"Collator::asort":{"id":"collator.asort","purpose":"Sort array maintaining index association","prototype":"bool Collator::asort(array $arr [, int $sort_flag = '', Collator $coll])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_asort":{"id":"collator.asort","purpose":"Sort array maintaining index association","prototype":"bool collator_asort(array $arr [, int $sort_flag = '', Collator $coll])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::compare":{"id":"collator.compare","purpose":"Compare two Unicode strings","prototype":"int Collator::compare(string $str1, string $str2, Collator $coll)","return":"<p class=\"para\">Return comparison result:<\/p>  <p class=\"para\">   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <p class=\"para\">      1 if <code class=\"parameter\">str1<\/code> is <em class=\"emphasis\">greater<\/em> than       <code class=\"parameter\">str2<\/code> ;     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      0 if <code class=\"parameter\">str1<\/code> is <em class=\"emphasis\">equal<\/em> to       <code class=\"parameter\">str2<\/code>;     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      -1 if <code class=\"parameter\">str1<\/code> is <em class=\"emphasis\">less<\/em> than       <code class=\"parameter\">str2<\/code> .     <\/p>    <\/li>   <\/ul>   On error   <span class=\"type\">boolean<\/span>   <strong><code>FALSE<\/code><\/strong>   is returned.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_compare":{"id":"collator.compare","purpose":"Compare two Unicode strings","prototype":"int collator_compare(string $str1, string $str2, Collator $coll)","return":"<p class=\"para\">Return comparison result:<\/p>  <p class=\"para\">   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <p class=\"para\">      1 if <code class=\"parameter\">str1<\/code> is <em class=\"emphasis\">greater<\/em> than       <code class=\"parameter\">str2<\/code> ;     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      0 if <code class=\"parameter\">str1<\/code> is <em class=\"emphasis\">equal<\/em> to       <code class=\"parameter\">str2<\/code>;     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      -1 if <code class=\"parameter\">str1<\/code> is <em class=\"emphasis\">less<\/em> than       <code class=\"parameter\">str2<\/code> .     <\/p>    <\/li>   <\/ul>   On error   <span class=\"type\">boolean<\/span>   <strong><code>FALSE<\/code><\/strong>   is returned.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::__construct":{"id":"collator.construct","purpose":"Create a collator","prototype":" Collator::__construct(string $locale)","return":"<p class=\"para\">   Returns Collator instance.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::create":{"id":"collator.create","purpose":"Create a collator","prototype":"Collator Collator::create(string $locale)","return":"<p class=\"para\">   Return new instance of <span class=\"classname\">Collator<\/span> object, or <strong><code>NULL<\/code><\/strong>   on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_create":{"id":"collator.create","purpose":"Create a collator","prototype":"Collator collator_create(string $locale)","return":"<p class=\"para\">   Return new instance of <span class=\"classname\">Collator<\/span> object, or <strong><code>NULL<\/code><\/strong>   on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::getAttribute":{"id":"collator.getattribute","purpose":"Get collation attribute value","prototype":"int Collator::getAttribute(int $attr, Collator $coll)","return":"<p class=\"para\">   Attribute value, or <span class=\"type\">boolean<\/span> <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_get_attribute":{"id":"collator.getattribute","purpose":"Get collation attribute value","prototype":"int collator_get_attribute(int $attr, Collator $coll)","return":"<p class=\"para\">   Attribute value, or <span class=\"type\">boolean<\/span> <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::getErrorCode":{"id":"collator.geterrorcode","purpose":"Get collator's last error code","prototype":"int Collator::getErrorCode(Collator $coll)","return":"<p class=\"para\">   Error code returned by the last Collator <acronym class=\"acronym\">API<\/acronym> function call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_get_error_code":{"id":"collator.geterrorcode","purpose":"Get collator's last error code","prototype":"int collator_get_error_code(Collator $coll)","return":"<p class=\"para\">   Error code returned by the last Collator <acronym class=\"acronym\">API<\/acronym> function call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::getErrorMessage":{"id":"collator.geterrormessage","purpose":"Get text for collator's last error code","prototype":"string Collator::getErrorMessage(Collator $coll)","return":"<p class=\"para\">   Description of an error occurred in the last Collator <acronym class=\"acronym\">API<\/acronym> function call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_get_error_message":{"id":"collator.geterrormessage","purpose":"Get text for collator's last error code","prototype":"string collator_get_error_message(Collator $coll)","return":"<p class=\"para\">   Description of an error occurred in the last Collator <acronym class=\"acronym\">API<\/acronym> function call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::getLocale":{"id":"collator.getlocale","purpose":"Get the locale name of the collator","prototype":"string Collator::getLocale(int $type, Collator $coll)","return":"<p class=\"para\">   Real locale name from which the collation data comes. If the collator was   instantiated from rules or an error occurred, returns   <span class=\"type\">boolean<\/span> <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_get_locale":{"id":"collator.getlocale","purpose":"Get the locale name of the collator","prototype":"string collator_get_locale(int $type, Collator $coll)","return":"<p class=\"para\">   Real locale name from which the collation data comes. If the collator was   instantiated from rules or an error occurred, returns   <span class=\"type\">boolean<\/span> <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::getSortKey":{"id":"collator.getsortkey","purpose":"Get sorting key for a string","prototype":"string Collator::getSortKey(string $str, Collator $coll)","return":"<p class=\"para\">Returns the collation key for the string. Collation keys can be compared directly instead of strings.<\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5 >= 5.3.11, PHP 7, PECL intl >= 1.0.3"},"collator_get_sort_key":{"id":"collator.getsortkey","purpose":"Get sorting key for a string","prototype":"string collator_get_sort_key(string $str, Collator $coll)","return":"<p class=\"para\">Returns the collation key for the string. Collation keys can be compared directly instead of strings.<\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5 >= 5.3.11, PHP 7, PECL intl >= 1.0.3"},"Collator::getStrength":{"id":"collator.getstrength","purpose":"Get current collation strength","prototype":"int Collator::getStrength(Collator $coll)","return":"<p class=\"para\">   Returns current collation strength, or <span class=\"type\">boolean<\/span> <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_get_strength":{"id":"collator.getstrength","purpose":"Get current collation strength","prototype":"int collator_get_strength(Collator $coll)","return":"<p class=\"para\">   Returns current collation strength, or <span class=\"type\">boolean<\/span> <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::setAttribute":{"id":"collator.setattribute","purpose":"Set collation attribute","prototype":"bool Collator::setAttribute(int $attr, int $val, Collator $coll)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_set_attribute":{"id":"collator.setattribute","purpose":"Set collation attribute","prototype":"bool collator_set_attribute(int $attr, int $val, Collator $coll)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::setStrength":{"id":"collator.setstrength","purpose":"Set collation strength","prototype":"bool Collator::setStrength(int $strength, Collator $coll)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_set_strength":{"id":"collator.setstrength","purpose":"Set collation strength","prototype":"bool collator_set_strength(int $strength, Collator $coll)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::sortWithSortKeys":{"id":"collator.sortwithsortkeys","purpose":"Sort array using specified collator and sort keys","prototype":"bool Collator::sortWithSortKeys(array $arr, Collator $coll)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_sort_with_sort_keys":{"id":"collator.sortwithsortkeys","purpose":"Sort array using specified collator and sort keys","prototype":"bool collator_sort_with_sort_keys(array $arr, Collator $coll)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Collator::sort":{"id":"collator.sort","purpose":"Sort array using specified collator","prototype":"bool Collator::sort(array $arr [, int $sort_flag = '', Collator $coll])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"collator_sort":{"id":"collator.sort","purpose":"Sort array using specified collator","prototype":"bool collator_sort(array $arr [, int $sort_flag = '', Collator $coll])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::create":{"id":"numberformatter.create","purpose":"Create a number formatter","prototype":"NumberFormatter NumberFormatter::create(string $locale, int $style [, string $pattern = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">NumberFormatter<\/span> object or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_create":{"id":"numberformatter.create","purpose":"Create a number formatter","prototype":"NumberFormatter numfmt_create(string $locale, int $style [, string $pattern = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">NumberFormatter<\/span> object or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::__construct":{"id":"numberformatter.create","purpose":"Create a number formatter","prototype":"NumberFormatter NumberFormatter::__construct(string $locale, int $style [, string $pattern = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">NumberFormatter<\/span> object or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::formatCurrency":{"id":"numberformatter.formatcurrency","purpose":"Format a currency value","prototype":"string NumberFormatter::formatCurrency(float $value, string $currency, NumberFormatter $fmt)","return":"<p class=\"para\">   String representing the formatted currency value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_format_currency":{"id":"numberformatter.formatcurrency","purpose":"Format a currency value","prototype":"string numfmt_format_currency(float $value, string $currency, NumberFormatter $fmt)","return":"<p class=\"para\">   String representing the formatted currency value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::format":{"id":"numberformatter.format","purpose":"Format a number","prototype":"string NumberFormatter::format(number $value [, int $type = '', NumberFormatter $fmt])","return":"<p class=\"para\">   Returns the string containing formatted value, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_format":{"id":"numberformatter.format","purpose":"Format a number","prototype":"string numfmt_format(number $value [, int $type = '', NumberFormatter $fmt])","return":"<p class=\"para\">   Returns the string containing formatted value, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getAttribute":{"id":"numberformatter.getattribute","purpose":"Get an attribute","prototype":"int NumberFormatter::getAttribute(int $attr, NumberFormatter $fmt)","return":"<p class=\"para\">   Return attribute value on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_attribute":{"id":"numberformatter.getattribute","purpose":"Get an attribute","prototype":"int numfmt_get_attribute(int $attr, NumberFormatter $fmt)","return":"<p class=\"para\">   Return attribute value on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getErrorCode":{"id":"numberformatter.geterrorcode","purpose":"Get formatter's last error code","prototype":"int NumberFormatter::getErrorCode(NumberFormatter $fmt)","return":"<p class=\"para\">   Returns error code from last formatter call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_error_code":{"id":"numberformatter.geterrorcode","purpose":"Get formatter's last error code","prototype":"int numfmt_get_error_code(NumberFormatter $fmt)","return":"<p class=\"para\">   Returns error code from last formatter call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getErrorMessage":{"id":"numberformatter.geterrormessage","purpose":"Get formatter's last error message","prototype":"string NumberFormatter::getErrorMessage(NumberFormatter $fmt)","return":"<p class=\"para\">   Returns error message from last formatter call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_error_message":{"id":"numberformatter.geterrormessage","purpose":"Get formatter's last error message","prototype":"string numfmt_get_error_message(NumberFormatter $fmt)","return":"<p class=\"para\">   Returns error message from last formatter call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getLocale":{"id":"numberformatter.getlocale","purpose":"Get formatter locale","prototype":"string NumberFormatter::getLocale([int $type = '', NumberFormatter $fmt])","return":"<p class=\"para\">   The locale name used to create the formatter.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_locale":{"id":"numberformatter.getlocale","purpose":"Get formatter locale","prototype":"string numfmt_get_locale([int $type = '', NumberFormatter $fmt])","return":"<p class=\"para\">   The locale name used to create the formatter.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getPattern":{"id":"numberformatter.getpattern","purpose":"Get formatter pattern","prototype":"string NumberFormatter::getPattern(NumberFormatter $fmt)","return":"<p class=\"para\">   Pattern <span class=\"type\">string<\/span> that is used by the formatter, or <strong><code>FALSE<\/code><\/strong> if an error happens.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_pattern":{"id":"numberformatter.getpattern","purpose":"Get formatter pattern","prototype":"string numfmt_get_pattern(NumberFormatter $fmt)","return":"<p class=\"para\">   Pattern <span class=\"type\">string<\/span> that is used by the formatter, or <strong><code>FALSE<\/code><\/strong> if an error happens.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getSymbol":{"id":"numberformatter.getsymbol","purpose":"Get a symbol value","prototype":"string NumberFormatter::getSymbol(int $attr, NumberFormatter $fmt)","return":"<p class=\"para\">   The symbol string or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_symbol":{"id":"numberformatter.getsymbol","purpose":"Get a symbol value","prototype":"string numfmt_get_symbol(int $attr, NumberFormatter $fmt)","return":"<p class=\"para\">   The symbol string or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::getTextAttribute":{"id":"numberformatter.gettextattribute","purpose":"Get a text attribute","prototype":"string NumberFormatter::getTextAttribute(int $attr, NumberFormatter $fmt)","return":"<p class=\"para\">   Return attribute value on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_get_text_attribute":{"id":"numberformatter.gettextattribute","purpose":"Get a text attribute","prototype":"string numfmt_get_text_attribute(int $attr, NumberFormatter $fmt)","return":"<p class=\"para\">   Return attribute value on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::parseCurrency":{"id":"numberformatter.parsecurrency","purpose":"Parse a currency number","prototype":"float NumberFormatter::parseCurrency(string $value, string $currency [, int $position = '', NumberFormatter $fmt])","return":"<p class=\"para\">   The parsed numeric value or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_parse_currency":{"id":"numberformatter.parsecurrency","purpose":"Parse a currency number","prototype":"float numfmt_parse_currency(string $value, string $currency [, int $position = '', NumberFormatter $fmt])","return":"<p class=\"para\">   The parsed numeric value or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::parse":{"id":"numberformatter.parse","purpose":"Parse a number","prototype":"mixed NumberFormatter::parse(string $value [, int $type = '' [, int $position = '', NumberFormatter $fmt]])","return":"<p class=\"para\">   The value of the parsed number or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_parse":{"id":"numberformatter.parse","purpose":"Parse a number","prototype":"mixed numfmt_parse(string $value [, int $type = '' [, int $position = '', NumberFormatter $fmt]])","return":"<p class=\"para\">   The value of the parsed number or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::setAttribute":{"id":"numberformatter.setattribute","purpose":"Set an attribute","prototype":"bool NumberFormatter::setAttribute(int $attr, int $value, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_set_attribute":{"id":"numberformatter.setattribute","purpose":"Set an attribute","prototype":"bool numfmt_set_attribute(int $attr, int $value, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::setPattern":{"id":"numberformatter.setpattern","purpose":"Set formatter pattern","prototype":"bool NumberFormatter::setPattern(string $pattern, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_set_pattern":{"id":"numberformatter.setpattern","purpose":"Set formatter pattern","prototype":"bool numfmt_set_pattern(string $pattern, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::setSymbol":{"id":"numberformatter.setsymbol","purpose":"Set a symbol value","prototype":"bool NumberFormatter::setSymbol(int $attr, string $value, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_set_symbol":{"id":"numberformatter.setsymbol","purpose":"Set a symbol value","prototype":"bool numfmt_set_symbol(int $attr, string $value, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"NumberFormatter::setTextAttribute":{"id":"numberformatter.settextattribute","purpose":"Set a text attribute","prototype":"bool NumberFormatter::setTextAttribute(int $attr, string $value, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"numfmt_set_text_attribute":{"id":"numberformatter.settextattribute","purpose":"Set a text attribute","prototype":"bool numfmt_set_text_attribute(int $attr, string $value, NumberFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::acceptFromHttp":{"id":"locale.acceptfromhttp","purpose":"Tries to find out best available locale based on HTTP \"Accept-Language\" header","prototype":"string Locale::acceptFromHttp(string $header)","return":"<p class=\"para\">   The corresponding locale identifier.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_accept_from_http":{"id":"locale.acceptfromhttp","purpose":"Tries to find out best available locale based on HTTP \"Accept-Language\" header","prototype":"string locale_accept_from_http(string $header)","return":"<p class=\"para\">   The corresponding locale identifier.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::canonicalize":{"id":"locale.canonicalize","purpose":"Canonicalize the locale string","prototype":"string Locale::canonicalize(string $locale)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_canonicalize":{"id":"locale.canonicalize","purpose":"Canonicalize the locale string","prototype":"string locale_canonicalize(string $locale)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::composeLocale":{"id":"locale.composelocale","purpose":"Returns a correctly ordered and delimited locale ID","prototype":"string Locale::composeLocale(array $subtags)","return":"<p class=\"para\">   The corresponding locale identifier.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_compose":{"id":"locale.composelocale","purpose":"Returns a correctly ordered and delimited locale ID","prototype":"string locale_compose(array $subtags)","return":"<p class=\"para\">   The corresponding locale identifier.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::filterMatches":{"id":"locale.filtermatches","purpose":"Checks if a language tag filter matches with locale","prototype":"bool Locale::filterMatches(string $langtag, string $locale [, bool $canonicalize = ''])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if $locale matches $langtag <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_filter_matches":{"id":"locale.filtermatches","purpose":"Checks if a language tag filter matches with locale","prototype":"bool locale_filter_matches(string $langtag, string $locale [, bool $canonicalize = ''])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if $locale matches $langtag <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getAllVariants":{"id":"locale.getallvariants","purpose":"Gets the variants for the input locale","prototype":"array Locale::getAllVariants(string $locale)","return":"<p class=\"para\">   The <span class=\"type\">array<\/span> containing the list of all variants subtag for the locale    or <strong><code>NULL<\/code><\/strong> if not present  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_all_variants":{"id":"locale.getallvariants","purpose":"Gets the variants for the input locale","prototype":"array locale_get_all_variants(string $locale)","return":"<p class=\"para\">   The <span class=\"type\">array<\/span> containing the list of all variants subtag for the locale    or <strong><code>NULL<\/code><\/strong> if not present  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getDefault":{"id":"locale.getdefault","purpose":"Gets the default locale value from the INTL global 'default_locale'","prototype":"string Locale::getDefault()","return":"<p class=\"para\">   The current runtime locale  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_default":{"id":"locale.getdefault","purpose":"Gets the default locale value from the INTL global 'default_locale'","prototype":"string locale_get_default()","return":"<p class=\"para\">   The current runtime locale  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getDisplayLanguage":{"id":"locale.getdisplaylanguage","purpose":"Returns an appropriately localized display name for language of the inputlocale","prototype":"string Locale::getDisplayLanguage(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   display name of the language for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_display_language":{"id":"locale.getdisplaylanguage","purpose":"Returns an appropriately localized display name for language of the inputlocale","prototype":"string locale_get_display_language(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   display name of the language for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getDisplayName":{"id":"locale.getdisplayname","purpose":"Returns an appropriately localized display name for the input locale","prototype":"string Locale::getDisplayName(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   Display name of the locale in the format appropriate for $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_display_name":{"id":"locale.getdisplayname","purpose":"Returns an appropriately localized display name for the input locale","prototype":"string locale_get_display_name(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   Display name of the locale in the format appropriate for $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getDisplayRegion":{"id":"locale.getdisplayregion","purpose":"Returns an appropriately localized display name for region of the input locale","prototype":"string Locale::getDisplayRegion(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   display name of the region for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_display_region":{"id":"locale.getdisplayregion","purpose":"Returns an appropriately localized display name for region of the input locale","prototype":"string locale_get_display_region(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   display name of the region for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getDisplayScript":{"id":"locale.getdisplayscript","purpose":"Returns an appropriately localized display name for script of the input locale","prototype":"string Locale::getDisplayScript(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   Display name of the script for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_display_script":{"id":"locale.getdisplayscript","purpose":"Returns an appropriately localized display name for script of the input locale","prototype":"string locale_get_display_script(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   Display name of the script for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getDisplayVariant":{"id":"locale.getdisplayvariant","purpose":"Returns an appropriately localized display name for variants of the input locale","prototype":"string Locale::getDisplayVariant(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   Display name of the variant for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_display_variant":{"id":"locale.getdisplayvariant","purpose":"Returns an appropriately localized display name for variants of the input locale","prototype":"string locale_get_display_variant(string $locale [, string $in_locale = ''])","return":"<p class=\"para\">   Display name of the variant for the $locale in the format appropriate for   $in_locale.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getKeywords":{"id":"locale.getkeywords","purpose":"Gets the keywords for the input locale","prototype":"array Locale::getKeywords(string $locale)","return":"<p class=\"para\">   Associative <span class=\"type\">array<\/span> containing the keyword-value pairs for this locale  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_keywords":{"id":"locale.getkeywords","purpose":"Gets the keywords for the input locale","prototype":"array locale_get_keywords(string $locale)","return":"<p class=\"para\">   Associative <span class=\"type\">array<\/span> containing the keyword-value pairs for this locale  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getPrimaryLanguage":{"id":"locale.getprimarylanguage","purpose":"Gets the primary language for the input locale","prototype":"string Locale::getPrimaryLanguage(string $locale)","return":"<p class=\"para\">   The language code associated with the language or <strong><code>NULL<\/code><\/strong> in case of error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_primary_language":{"id":"locale.getprimarylanguage","purpose":"Gets the primary language for the input locale","prototype":"string locale_get_primary_language(string $locale)","return":"<p class=\"para\">   The language code associated with the language or <strong><code>NULL<\/code><\/strong> in case of error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getRegion":{"id":"locale.getregion","purpose":"Gets the region for the input locale","prototype":"string Locale::getRegion(string $locale)","return":"<p class=\"para\">   The region subtag for the locale or <strong><code>NULL<\/code><\/strong> if not present  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_region":{"id":"locale.getregion","purpose":"Gets the region for the input locale","prototype":"string locale_get_region(string $locale)","return":"<p class=\"para\">   The region subtag for the locale or <strong><code>NULL<\/code><\/strong> if not present  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::getScript":{"id":"locale.getscript","purpose":"Gets the script for the input locale","prototype":"string Locale::getScript(string $locale)","return":"<p class=\"para\">   The script subtag for the locale or <strong><code>NULL<\/code><\/strong> if not present  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_get_script":{"id":"locale.getscript","purpose":"Gets the script for the input locale","prototype":"string locale_get_script(string $locale)","return":"<p class=\"para\">   The script subtag for the locale or <strong><code>NULL<\/code><\/strong> if not present  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::lookup":{"id":"locale.lookup","purpose":"Searches the language tag list for the best match to the language","prototype":"string Locale::lookup(array $langtag, string $locale [, bool $canonicalize = '' [, string $default = '']])","return":"<p class=\"para\">   The closest matching language tag or default value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_lookup":{"id":"locale.lookup","purpose":"Searches the language tag list for the best match to the language","prototype":"string locale_lookup(array $langtag, string $locale [, bool $canonicalize = '' [, string $default = '']])","return":"<p class=\"para\">   The closest matching language tag or default value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::parseLocale":{"id":"locale.parselocale","purpose":"Returns a key-value array of locale ID subtag elements","prototype":"array Locale::parseLocale(string $locale)","return":"<p class=\"para\">   Returns an array containing a list of key-value pairs, where the keys   identify the particular locale ID subtags, and the values are the   associated subtag values. The array will be ordered as the locale id   subtags e.g. in the locale id if variants are &#039;-varX-varY-varZ&#039; then the   returned array will have variant0=&gt;varX , variant1=&gt;varY ,   variant2=&gt;varZ  <\/p>  <p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> when the length of <code class=\"parameter\">locale<\/code> exceeds   <strong><code>INTL_MAX_LOCALE_LEN<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_parse":{"id":"locale.parselocale","purpose":"Returns a key-value array of locale ID subtag elements","prototype":"array locale_parse(string $locale)","return":"<p class=\"para\">   Returns an array containing a list of key-value pairs, where the keys   identify the particular locale ID subtags, and the values are the   associated subtag values. The array will be ordered as the locale id   subtags e.g. in the locale id if variants are &#039;-varX-varY-varZ&#039; then the   returned array will have variant0=&gt;varX , variant1=&gt;varY ,   variant2=&gt;varZ  <\/p>  <p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> when the length of <code class=\"parameter\">locale<\/code> exceeds   <strong><code>INTL_MAX_LOCALE_LEN<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Locale::setDefault":{"id":"locale.setdefault","purpose":"Sets the default runtime locale","prototype":"bool Locale::setDefault(string $locale)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"locale_set_default":{"id":"locale.setdefault","purpose":"Sets the default runtime locale","prototype":"bool locale_set_default(string $locale)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Normalizer::getRawDecomposition":{"id":"normalizer.getrawdecomposition","purpose":"Gets the Decomposition_Mapping property for the given UTF-8 encoded code point","prototype":"string Normalizer::getRawDecomposition(string $input)","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> containing the Decomposition_Mapping property, if present in the UCD.  <\/p>  <p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if there is no Decomposition_Mapping property for the character.  <\/p>","versions":"PHP 7 >= 7.3"},"normalizer_get_raw_decomposition":{"id":"normalizer.getrawdecomposition","purpose":"Gets the Decomposition_Mapping property for the given UTF-8 encoded code point","prototype":"string normalizer_get_raw_decomposition(string $input)","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> containing the Decomposition_Mapping property, if present in the UCD.  <\/p>  <p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if there is no Decomposition_Mapping property for the character.  <\/p>","versions":"PHP 7 >= 7.3"},"Normalizer::isNormalized":{"id":"normalizer.isnormalized","purpose":"Checks if the provided string is already in the specified normalization   form","prototype":"bool Normalizer::isNormalized(string $input [, int $form = Normalizer::FORM_C])","return":"<p class=\"para\"><strong><code>TRUE<\/code><\/strong> if normalized, <strong><code>FALSE<\/code><\/strong> otherwise or if there an error<\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"normalizer_is_normalized":{"id":"normalizer.isnormalized","purpose":"Checks if the provided string is already in the specified normalization   form","prototype":"bool normalizer_is_normalized(string $input [, int $form = Normalizer::FORM_C])","return":"<p class=\"para\"><strong><code>TRUE<\/code><\/strong> if normalized, <strong><code>FALSE<\/code><\/strong> otherwise or if there an error<\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"Normalizer::normalize":{"id":"normalizer.normalize","purpose":"Normalizes the input provided and returns the normalized string","prototype":"string Normalizer::normalize(string $input [, int $form = Normalizer::FORM_C])","return":"<p class=\"para\">The normalized string or <strong><code>FALSE<\/code><\/strong> if an error occurred.<\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"normalizer_normalize":{"id":"normalizer.normalize","purpose":"Normalizes the input provided and returns the normalized string","prototype":"string normalizer_normalize(string $input [, int $form = Normalizer::FORM_C])","return":"<p class=\"para\">The normalized string or <strong><code>FALSE<\/code><\/strong> if an error occurred.<\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::create":{"id":"messageformatter.create","purpose":"Constructs a new Message Formatter","prototype":"MessageFormatter MessageFormatter::create(string $locale, string $pattern)","return":"<p class=\"para\">   The formatter <span class=\"type\">object<\/span>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::__construct":{"id":"messageformatter.create","purpose":"Constructs a new Message Formatter","prototype":"MessageFormatter MessageFormatter::__construct(string $locale, string $pattern)","return":"<p class=\"para\">   The formatter <span class=\"type\">object<\/span>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_create":{"id":"messageformatter.create","purpose":"Constructs a new Message Formatter","prototype":"MessageFormatter msgfmt_create(string $locale, string $pattern)","return":"<p class=\"para\">   The formatter <span class=\"type\">object<\/span>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::formatMessage":{"id":"messageformatter.formatmessage","purpose":"Quick format message","prototype":"string MessageFormatter::formatMessage(string $locale, string $pattern, array $args)","return":"<p class=\"para\">   The formatted pattern string or <strong><code>FALSE<\/code><\/strong> if an error occurred  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_format_message":{"id":"messageformatter.formatmessage","purpose":"Quick format message","prototype":"string msgfmt_format_message(string $locale, string $pattern, array $args)","return":"<p class=\"para\">   The formatted pattern string or <strong><code>FALSE<\/code><\/strong> if an error occurred  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::format":{"id":"messageformatter.format","purpose":"Format the message","prototype":"string MessageFormatter::format(array $args, MessageFormatter $fmt)","return":"<p class=\"para\">   The formatted string, or <strong><code>FALSE<\/code><\/strong> if an error occurred  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_format":{"id":"messageformatter.format","purpose":"Format the message","prototype":"string msgfmt_format(array $args, MessageFormatter $fmt)","return":"<p class=\"para\">   The formatted string, or <strong><code>FALSE<\/code><\/strong> if an error occurred  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::getErrorCode":{"id":"messageformatter.geterrorcode","purpose":"Get the error code from last operation","prototype":"int MessageFormatter::getErrorCode(MessageFormatter $fmt)","return":"<p class=\"para\">   The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_get_error_code":{"id":"messageformatter.geterrorcode","purpose":"Get the error code from last operation","prototype":"int msgfmt_get_error_code(MessageFormatter $fmt)","return":"<p class=\"para\">   The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::getErrorMessage":{"id":"messageformatter.geterrormessage","purpose":"Get the error text from the last operation","prototype":"string MessageFormatter::getErrorMessage(MessageFormatter $fmt)","return":"<p class=\"para\">   Description of the last error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_get_error_message":{"id":"messageformatter.geterrormessage","purpose":"Get the error text from the last operation","prototype":"string msgfmt_get_error_message(MessageFormatter $fmt)","return":"<p class=\"para\">   Description of the last error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::getLocale":{"id":"messageformatter.getlocale","purpose":"Get the locale for which the formatter was created","prototype":"string MessageFormatter::getLocale(NumberFormatter $formatter)","return":"<p class=\"para\">   The locale name  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_get_locale":{"id":"messageformatter.getlocale","purpose":"Get the locale for which the formatter was created","prototype":"string msgfmt_get_locale(NumberFormatter $formatter)","return":"<p class=\"para\">   The locale name  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::getPattern":{"id":"messageformatter.getpattern","purpose":"Get the pattern used by the formatter","prototype":"string MessageFormatter::getPattern(MessageFormatter $fmt)","return":"<p class=\"para\">   The pattern <span class=\"type\">string<\/span> for this message formatter  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_get_pattern":{"id":"messageformatter.getpattern","purpose":"Get the pattern used by the formatter","prototype":"string msgfmt_get_pattern(MessageFormatter $fmt)","return":"<p class=\"para\">   The pattern <span class=\"type\">string<\/span> for this message formatter  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::parseMessage":{"id":"messageformatter.parsemessage","purpose":"Quick parse input string","prototype":"array MessageFormatter::parseMessage(string $locale, string $pattern, string $source, string $value)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing items extracted, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_parse_message":{"id":"messageformatter.parsemessage","purpose":"Quick parse input string","prototype":"array msgfmt_parse_message(string $locale, string $pattern, string $source, string $value)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing items extracted, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::parse":{"id":"messageformatter.parse","purpose":"Parse input string according to pattern","prototype":"array MessageFormatter::parse(string $value, MessageFormatter $fmt)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing the items extracted, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_parse":{"id":"messageformatter.parse","purpose":"Parse input string according to pattern","prototype":"array msgfmt_parse(string $value, MessageFormatter $fmt)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing the items extracted, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"MessageFormatter::setPattern":{"id":"messageformatter.setpattern","purpose":"Set the pattern used by the formatter","prototype":"bool MessageFormatter::setPattern(string $pattern, MessageFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"msgfmt_set_pattern":{"id":"messageformatter.setpattern","purpose":"Set the pattern used by the formatter","prototype":"bool msgfmt_set_pattern(string $pattern, MessageFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlCalendar::add":{"id":"intlcalendar.add","purpose":"Add a (signed) amount of time to a field","prototype":"bool IntlCalendar::add(int $field, int $amount, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::after":{"id":"intlcalendar.after","purpose":"Whether this object\u02bcs time is after that of the passed object","prototype":"bool IntlCalendar::after(IntlCalendar $other, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this object\u02bcs current time is after that of the   <code class=\"parameter\">calendar<\/code> argument\u02bcs time. Returns <strong><code>FALSE<\/code><\/strong> otherwise.   Also returns <strong><code>FALSE<\/code><\/strong> on failure. You can use <a href=\"intl.configuration.html#ini.intl.use-exceptions\" class=\"link\">exceptions<\/a> or   <span class=\"function\">intl_get_error_code<\/span> to detect error conditions.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::before":{"id":"intlcalendar.before","purpose":"Whether this object\u02bcs time is before that of the passed object","prototype":"bool IntlCalendar::before(IntlCalendar $other, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this object\u02bcs current time is before that of the   <code class=\"parameter\">calendar<\/code> argument\u02bcs time. Returns <strong><code>FALSE<\/code><\/strong> otherwise.   Also returns <strong><code>FALSE<\/code><\/strong> on failure. You can use <a href=\"intl.configuration.html#ini.intl.use-exceptions\" class=\"link\">exceptions<\/a> or   <span class=\"function\">intl_get_error_code<\/span> to detect error conditions.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::clear":{"id":"intlcalendar.clear","purpose":"Clear a field or all fields","prototype":"bool IntlCalendar::clear([int $field = null, IntlCalendar $cal])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. Failure can only occur is   invalid arguments are provided.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::__construct":{"id":"intlcalendar.construct","purpose":"Private constructor for disallowing instantiation","prototype":" IntlCalendar::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::createInstance":{"id":"intlcalendar.createinstance","purpose":"Create a new IntlCalendar","prototype":"IntlCalendar IntlCalendar::createInstance([mixed $timeZone = null [, string $locale = \"\"]])","return":"<p class=\"para\">   The created <span class=\"classname\">IntlCalendar<\/span> instance or <strong><code>NULL<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::equals":{"id":"intlcalendar.equals","purpose":"Compare time of two IntlCalendar objects for equality","prototype":"bool IntlCalendar::equals(IntlCalendar $other, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current time of both this and the passed in   <span class=\"classname\">IntlCalendar<\/span> object are the same, or <strong><code>FALSE<\/code><\/strong>   otherwise. The value <strong><code>FALSE<\/code><\/strong> can also be returned on failure. This can only   happen if bad arguments are passed in. In any case, the two cases can be   distinguished by calling <span class=\"function\">intl_get_error_code<\/span>.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::fieldDifference":{"id":"intlcalendar.fielddifference","purpose":"Calculate difference between given time and this object\u02bcs time","prototype":"int IntlCalendar::fieldDifference(float $when, int $field, IntlCalendar $cal)","return":"<p class=\"para\">   Returns a (signed) difference of time in the unit associated with the   specified field or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::fromDateTime":{"id":"intlcalendar.fromdatetime","purpose":"Create an IntlCalendar from a DateTime object or string","prototype":"IntlCalendar IntlCalendar::fromDateTime(mixed $dateTime)","return":"<p class=\"para\">   The created <span class=\"classname\">IntlCalendar<\/span> object or <strong><code>NULL<\/code><\/strong> in case of   failure. If a <span class=\"type\">string<\/span> is passed, any exception that occurs   inside the <span class=\"classname\">DateTime<\/span> constructor is propagated.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a2"},"IntlCalendar::get":{"id":"intlcalendar.get","purpose":"Get the value for a field","prototype":"int IntlCalendar::get(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An integer with the value of the time field.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getActualMaximum":{"id":"intlcalendar.getactualmaximum","purpose":"The maximum value for a field, considering the object\u02bcs current time","prototype":"int IntlCalendar::getActualMaximum(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing the maximum value in the units associated   with the given <code class=\"parameter\">field<\/code> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getActualMinimum":{"id":"intlcalendar.getactualminimum","purpose":"The minimum value for a field, considering the object\u02bcs current time","prototype":"int IntlCalendar::getActualMinimum(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing the minimum value in the field\u02bcs   unit or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getAvailableLocales":{"id":"intlcalendar.getavailablelocales","purpose":"Get array of locales for which there is data","prototype":"array IntlCalendar::getAvailableLocales()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of <span class=\"type\">string<\/span>s, one for which locale.   <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getDayOfWeekType":{"id":"intlcalendar.getdayofweektype","purpose":"Tell whether a day is a weekday, weekend or a day that has a transition between the two","prototype":"int IntlCalendar::getDayOfWeekType(int $dayOfWeek, IntlCalendar $cal)","return":"<p class=\"para\">   Returns one of the constants    <strong><code>IntlCalendar::DOW_TYPE_WEEKDAY<\/code><\/strong>,   <strong><code>IntlCalendar::DOW_TYPE_WEEKEND<\/code><\/strong>,   <strong><code>IntlCalendar::DOW_TYPE_WEEKEND_OFFSET<\/code><\/strong> or   <strong><code>IntlCalendar::DOW_TYPE_WEEKEND_CEASE<\/code><\/strong> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getErrorCode":{"id":"intlcalendar.geterrorcode","purpose":"Get last error code on the object","prototype":"int IntlCalendar::getErrorCode(IntlCalendar $calendar)","return":"<p class=\"para\">   An ICU error code indicating either success, failure or a warning.   <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"intlcal_get_error_code":{"id":"intlcalendar.geterrorcode","purpose":"Get last error code on the object","prototype":"int intlcal_get_error_code(IntlCalendar $calendar)","return":"<p class=\"para\">   An ICU error code indicating either success, failure or a warning.   <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getErrorMessage":{"id":"intlcalendar.geterrormessage","purpose":"Get last error message on the object","prototype":"string IntlCalendar::getErrorMessage(IntlCalendar $calendar)","return":"<p class=\"para\">   The error message associated with last error that occurred in a function call   on this object, or a string indicating the non-existance of an error.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"intlcal_get_error_message":{"id":"intlcalendar.geterrormessage","purpose":"Get last error message on the object","prototype":"string intlcal_get_error_message(IntlCalendar $calendar)","return":"<p class=\"para\">   The error message associated with last error that occurred in a function call   on this object, or a string indicating the non-existance of an error.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getFirstDayOfWeek":{"id":"intlcalendar.getfirstdayofweek","purpose":"Get the first day of the week for the calendar\u02bcs locale","prototype":"int IntlCalendar::getFirstDayOfWeek(IntlCalendar $cal)","return":"<p class=\"para\">   One of the constants <strong><code>IntlCalendar::DOW_SUNDAY<\/code><\/strong>,   <strong><code>IntlCalendar::DOW_MONDAY<\/code><\/strong>, \u2026,   <strong><code>IntlCalendar::DOW_SATURDAY<\/code><\/strong> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getGreatestMinimum":{"id":"intlcalendar.getgreatestminimum","purpose":"Get the largest local minimum value for a field","prototype":"int IntlCalendar::getGreatestMinimum(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing a field value, in the field\u02bcs   unit, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getKeywordValuesForLocale":{"id":"intlcalendar.getkeywordvaluesforlocale","purpose":"Get set of locale keyword values","prototype":"Iterator IntlCalendar::getKeywordValuesForLocale(string $key, string $locale, bool $commonlyUsed)","return":"<p class=\"para\">   An iterator that yields strings with the locale keyword   values or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getLeastMaximum":{"id":"intlcalendar.getleastmaximum","purpose":"Get the smallest local maximum for a field","prototype":"int IntlCalendar::getLeastMaximum(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing a field value in the field\u02bcs   unit or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getLocale":{"id":"intlcalendar.getlocale","purpose":"Get the locale associated with the object","prototype":"string IntlCalendar::getLocale(int $localeType, IntlCalendar $cal)","return":"<p class=\"para\">   A locale string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getMaximum":{"id":"intlcalendar.getmaximum","purpose":"Get the global maximum value for a field","prototype":"int IntlCalendar::getMaximum(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing a field value in the field\u02bcs   unit or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getMinimalDaysInFirstWeek":{"id":"intlcalendar.getminimaldaysinfirstweek","purpose":"Get minimal number of days the first week in a year or month can have","prototype":"int IntlCalendar::getMinimalDaysInFirstWeek(IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing a number of days or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getMinimum":{"id":"intlcalendar.getminimum","purpose":"Get the global minimum value for a field","prototype":"int IntlCalendar::getMinimum(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"type\">int<\/span> representing a value for the given   field in the field\u02bcs unit or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getNow":{"id":"intlcalendar.getnow","purpose":"Get number representing the current time","prototype":"float IntlCalendar::getNow()","return":"<p class=\"para\">   A <span class=\"type\">float<\/span> representing a number of milliseconds since the epoch,   not counting leap seconds.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getRepeatedWallTimeOption":{"id":"intlcalendar.getrepeatedwalltimeoption","purpose":"Get behavior for handling repeating wall time","prototype":"int IntlCalendar::getRepeatedWallTimeOption(IntlCalendar $cal)","return":"<p class=\"para\">   One of the constants <strong><code>IntlCalendar::WALLTIME_FIRST<\/code><\/strong> or   <strong><code>IntlCalendar::WALLTIME_LAST<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getSkippedWallTimeOption":{"id":"intlcalendar.getskippedwalltimeoption","purpose":"Get behavior for handling skipped wall time","prototype":"int IntlCalendar::getSkippedWallTimeOption(IntlCalendar $cal)","return":"<p class=\"para\">   One of the constants <strong><code>IntlCalendar::WALLTIME_FIRST<\/code><\/strong>,   <strong><code>IntlCalendar::WALLTIME_LAST<\/code><\/strong> or   <strong><code>IntlCalendar::WALLTIME_NEXT_VALID<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getTime":{"id":"intlcalendar.gettime","purpose":"Get time currently represented by the object","prototype":"float IntlCalendar::getTime(IntlCalendar $cal)","return":"<p class=\"para\">   A <span class=\"type\">float<\/span> representing the number of milliseconds elapsed since the   reference time (1 Jan 1970 00:00:00 UTC).  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getTimeZone":{"id":"intlcalendar.gettimezone","purpose":"Get the object\u02bcs timezone","prototype":"IntlTimeZone IntlCalendar::getTimeZone(IntlCalendar $cal)","return":"<p class=\"para\">   An <span class=\"classname\">IntlTimeZone<\/span> object corresponding to the one used   internally in this object.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getType":{"id":"intlcalendar.gettype","purpose":"Get the calendar type","prototype":"string IntlCalendar::getType(IntlCalendar $cal)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> representing the calendar type, such as   <em>&#039;gregorian&#039;<\/em>, <em>&#039;islamic&#039;<\/em>, etc.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::getWeekendTransition":{"id":"intlcalendar.getweekendtransition","purpose":"Get time of the day at which weekend begins or ends","prototype":"int IntlCalendar::getWeekendTransition(string $dayOfWeek, IntlCalendar $cal)","return":"<p class=\"para\">   The number of milliseconds into the day at which the weekend begins or   ends or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::inDaylightTime":{"id":"intlcalendar.indaylighttime","purpose":"Whether the object\u02bcs time is in Daylight Savings Time","prototype":"bool IntlCalendar::inDaylightTime(IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the date is in Daylight Savings Time, <strong><code>FALSE<\/code><\/strong> otherwise.   The value <strong><code>FALSE<\/code><\/strong> may also be returned on failure, for instance after   specifying invalid field values on non-lenient mode; use <a href=\"intl.configuration.html#ini.intl.use-exceptions\" class=\"link\">exceptions<\/a> or query   <span class=\"function\">intl_get_error_code<\/span> to disambiguate.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::isEquivalentTo":{"id":"intlcalendar.isequivalentto","purpose":"Whether another calendar is equal but for a different time","prototype":"bool IntlCalendar::isEquivalentTo(IntlCalendar $other, IntlCalendar $cal)","return":"<p class=\"para\">   Assuming there are no argument errors, returns <strong><code>TRUE<\/code><\/strong> iif the calendars are   equivalent except possibly for their set time.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::isLenient":{"id":"intlcalendar.islenient","purpose":"Whether date\/time interpretation is in lenient mode","prototype":"bool IntlCalendar::isLenient(IntlCalendar $cal)","return":"<p class=\"para\">   A <span class=\"type\">bool<\/span> representing whether the calendar is set to lenient mode.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::isSet":{"id":"intlcalendar.isset","purpose":"Whether a field is set","prototype":"bool IntlCalendar::isSet(int $field, IntlCalendar $cal)","return":"<p class=\"para\">   Assuming there are no argument errors, returns <strong><code>TRUE<\/code><\/strong> iif the field is set.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::isWeekend":{"id":"intlcalendar.isweekend","purpose":"Whether a certain date\/time is in the weekend","prototype":"bool IntlCalendar::isWeekend([float $date = null, IntlCalendar $cal])","return":"<p class=\"para\">   A <span class=\"type\">bool<\/span> indicating whether the given or this object\u02bcs time occurs   in a weekend.  <\/p>  <p class=\"para\">   The value <strong><code>FALSE<\/code><\/strong> may also be returned on failure, for instance after giving   a date out of bounds on non-lenient mode; use <a href=\"intl.configuration.html#ini.intl.use-exceptions\" class=\"link\">exceptions<\/a> or query   <span class=\"function\">intl_get_error_code<\/span> to disambiguate.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::roll":{"id":"intlcalendar.roll","purpose":"Add value to field without carrying into more significant fields","prototype":"bool IntlCalendar::roll(int $field, mixed $amountOrUpOrDown, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::set":{"id":"intlcalendar.set","purpose":"Set a time field or several common fields at once","prototype":"bool IntlCalendar::set(int $field, int $value, int $year, int $month [, int $dayOfMonth = null [, int $hour = null [, int $minute = null [, int $second = null, IntlCalendar $cal]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::setFirstDayOfWeek":{"id":"intlcalendar.setfirstdayofweek","purpose":"Set the day on which the week is deemed to start","prototype":"bool IntlCalendar::setFirstDayOfWeek(int $dayOfWeek, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Failure can only happen due to invalid parameters.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::setLenient":{"id":"intlcalendar.setlenient","purpose":"Set whether date\/time interpretation is to be lenient","prototype":"bool IntlCalendar::setLenient(bool $isLenient, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Failure can only happen due to invalid parameters.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::setMinimalDaysInFirstWeek":{"id":"intlcalendar.setminimaldaysinfirstweek","purpose":"Set minimal number of days the first week in a year or month can have","prototype":"bool IntlCalendar::setMinimalDaysInFirstWeek(int $minimalDays, IntlCalendar $cal)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.1, PHP 7"},"IntlCalendar::setRepeatedWallTimeOption":{"id":"intlcalendar.setrepeatedwalltimeoption","purpose":"Set behavior for handling repeating wall times at negative timezone offset transitions","prototype":"bool IntlCalendar::setRepeatedWallTimeOption(int $wallTimeOption, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Failure can only happen due to invalid parameters.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::setSkippedWallTimeOption":{"id":"intlcalendar.setskippedwalltimeoption","purpose":"Set behavior for handling skipped wall times at positive timezone offset transitions","prototype":"bool IntlCalendar::setSkippedWallTimeOption(int $wallTimeOption, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Failure can only happen due to invalid parameters.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::setTime":{"id":"intlcalendar.settime","purpose":"Set the calendar time in milliseconds since the epoch","prototype":"float IntlCalendar::setTime(float $date, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::setTimeZone":{"id":"intlcalendar.settimezone","purpose":"Set the timezone used by this calendar","prototype":"bool IntlCalendar::setTimeZone(mixed $timeZone, IntlCalendar $cal)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlCalendar::toDateTime":{"id":"intlcalendar.todatetime","purpose":"Convert an IntlCalendar into a DateTime object","prototype":"DateTime IntlCalendar::toDateTime(IntlCalendar $cal)","return":"<p class=\"para\">   A <span class=\"classname\">DateTime<\/span> object with the same timezone as this   object (though using PHP\u02bcs database instead of ICU\u02bcs) and the same time,   except for the smaller precision (second precision instead of millisecond).   Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a2"},"IntlGregorianCalendar::__construct":{"id":"intlgregoriancalendar.construct","purpose":"Create the Gregorian Calendar class","prototype":" IntlGregorianCalendar::__construct([IntlTimeZone $tz = '' [, string $locale = '', int $timeZoneOrYear, int $localeOrMonth, int $dayOfMonth, int $hour, int $minute [, int $second = '']]])","return":"","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlGregorianCalendar::getGregorianChange":{"id":"intlgregoriancalendar.getgregorianchange","purpose":"Get the Gregorian Calendar change date","prototype":"float IntlGregorianCalendar::getGregorianChange()","return":"<p class=\"para\">   Returns the change date or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlGregorianCalendar::isLeapYear":{"id":"intlgregoriancalendar.isleapyear","purpose":"Determine if the given year is a leap year","prototype":"bool IntlGregorianCalendar::isLeapYear(int $year)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> for leap years, <strong><code>FALSE<\/code><\/strong> otherwise and on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlGregorianCalendar::setGregorianChange":{"id":"intlgregoriancalendar.setgregorianchange","purpose":"Set the Gregorian Calendar the change date","prototype":"bool IntlGregorianCalendar::setGregorianChange(float $date)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlTimeZone::countEquivalentIDs":{"id":"intltimezone.countequivalentids","purpose":"Get the number of IDs in the equivalency group that includes the given ID","prototype":"int IntlTimeZone::countEquivalentIDs(string $zoneId)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::createDefault":{"id":"intltimezone.createdefault","purpose":"Create a new copy of the default timezone for this host","prototype":"IntlTimeZone IntlTimeZone::createDefault()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::createEnumeration":{"id":"intltimezone.createenumeration","purpose":"Get an enumeration over time zone IDs associated with the  given country or offset","prototype":"IntlIterator IntlTimeZone::createEnumeration([mixed $countryOrRawOffset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::createTimeZone":{"id":"intltimezone.createtimezone","purpose":"Create a timezone object for the given ID","prototype":"IntlTimeZone IntlTimeZone::createTimeZone(string $zoneId)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::createTimeZoneIDEnumeration":{"id":"intltimezone.createtimezoneidenumeration","purpose":"Get an enumeration over system time zone IDs with the given filter conditions","prototype":"IntlIterator IntlTimeZone::createTimeZoneIDEnumeration(int $zoneType [, string $region = '' [, int $rawOffset = '']])","return":"<p class=\"para\">   Returns <span class=\"classname\">IntlIterator<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlTimeZone::fromDateTimeZone":{"id":"intltimezone.fromdatetimezone","purpose":"Create a timezone object from DateTimeZone","prototype":"IntlTimeZone IntlTimeZone::fromDateTimeZone(DateTimeZone $zoneId)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getCanonicalID":{"id":"intltimezone.getcanonicalid","purpose":"Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID","prototype":"string IntlTimeZone::getCanonicalID(string $zoneId [, bool $isSystemID = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getDisplayName":{"id":"intltimezone.getdisplayname","purpose":"Get a name of this time zone suitable for presentation to the user","prototype":"string IntlTimeZone::getDisplayName([bool $isDaylight = '' [, int $style = '' [, string $locale = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getDSTSavings":{"id":"intltimezone.getdstsavings","purpose":"Get the amount of time to be added to local standard time to get local wall clock time","prototype":"int IntlTimeZone::getDSTSavings()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getEquivalentID":{"id":"intltimezone.getequivalentid","purpose":"Get an ID in the equivalency group that includes the given ID","prototype":"string IntlTimeZone::getEquivalentID(string $zoneId, int $index)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getErrorCode":{"id":"intltimezone.geterrorcode","purpose":"Get last error code on the object","prototype":"int IntlTimeZone::getErrorCode()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"intltz_get_error_code":{"id":"intltimezone.geterrorcode","purpose":"Get last error code on the object","prototype":"int intltz_get_error_code()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getErrorMessage":{"id":"intltimezone.geterrormessage","purpose":"Get last error message on the object","prototype":"string IntlTimeZone::getErrorMessage()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"intltz_get_error_message":{"id":"intltimezone.geterrormessage","purpose":"Get last error message on the object","prototype":"string intltz_get_error_message()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getGMT":{"id":"intltimezone.getgmt","purpose":"Create GMT (UTC) timezone","prototype":"IntlTimeZone IntlTimeZone::getGMT()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getID":{"id":"intltimezone.getid","purpose":"Get timezone ID","prototype":"string IntlTimeZone::getID()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getIDForWindowsID":{"id":"intltimezone.getidforwindowsid","purpose":"Translate a Windows timezone into a system timezone","prototype":"string IntlTimeZone::getIDForWindowsID(string $timezone [, string $region = ''])","return":"<p class=\"para\">   Returns the system timezone or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.0"},"IntlTimeZone::getOffset":{"id":"intltimezone.getoffset","purpose":"Get the time zone raw and GMT offset for the given moment in time","prototype":"int IntlTimeZone::getOffset(float $date, bool $local, int $rawOffset, int $dstOffset)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getRawOffset":{"id":"intltimezone.getrawoffset","purpose":"Get the raw GMT offset (before taking daylight savings time into account","prototype":"int IntlTimeZone::getRawOffset()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getRegion":{"id":"intltimezone.getregion","purpose":"Get the region code associated with the given system time zone ID","prototype":"string IntlTimeZone::getRegion(string $zoneId)","return":"<p class=\"para\">   Return region or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlTimeZone::getTZDataVersion":{"id":"intltimezone.gettzdataversion","purpose":"Get the timezone data version currently used by ICU","prototype":"string IntlTimeZone::getTZDataVersion()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::getUnknown":{"id":"intltimezone.getunknown","purpose":"Get the \"unknown\" time zone","prototype":"IntlTimeZone IntlTimeZone::getUnknown()","return":"<p class=\"para\">   Returns <span class=\"classname\">IntlTimeZone<\/span> or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlTimeZone::getWindowsID":{"id":"intltimezone.getwindowsid","purpose":"Translate a system timezone into a Windows timezone","prototype":"string IntlTimeZone::getWindowsID(string $timezone)","return":"<p class=\"para\">   Returns the Windows timezone or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.0"},"IntlTimeZone::hasSameRules":{"id":"intltimezone.hassamerules","purpose":"Check if this zone has the same rules and offset as another zone","prototype":"bool IntlTimeZone::hasSameRules(IntlTimeZone $otherTimeZone)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::toDateTimeZone":{"id":"intltimezone.todatetimezone","purpose":"Convert to DateTimeZone object","prototype":"DateTimeZone IntlTimeZone::toDateTimeZone()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlTimeZone::useDaylightTime":{"id":"intltimezone.usedaylighttime","purpose":"Check if this time zone uses daylight savings time","prototype":"bool IntlTimeZone::useDaylightTime()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"IntlDateFormatter::create":{"id":"intldateformatter.create","purpose":"Create a date formatter","prototype":"IntlDateFormatter IntlDateFormatter::create(string $locale, int $datetype, int $timetype [, mixed $timezone = null [, mixed $calendar = null [, string $pattern = \"\"]]])","return":"<p class=\"para\">   The created <span class=\"classname\">IntlDateFormatter<\/span> or <strong><code>FALSE<\/code><\/strong> in case of   failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_create":{"id":"intldateformatter.create","purpose":"Create a date formatter","prototype":"IntlDateFormatter datefmt_create(string $locale, int $datetype, int $timetype [, mixed $timezone = null [, mixed $calendar = null [, string $pattern = \"\"]]])","return":"<p class=\"para\">   The created <span class=\"classname\">IntlDateFormatter<\/span> or <strong><code>FALSE<\/code><\/strong> in case of   failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::__construct":{"id":"intldateformatter.create","purpose":"Create a date formatter","prototype":"IntlDateFormatter IntlDateFormatter::__construct(string $locale, int $datetype, int $timetype [, mixed $timezone = null [, mixed $calendar = null [, string $pattern = \"\"]]])","return":"<p class=\"para\">   The created <span class=\"classname\">IntlDateFormatter<\/span> or <strong><code>FALSE<\/code><\/strong> in case of   failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::format":{"id":"intldateformatter.format","purpose":"Format the date\/time value as a string","prototype":"string IntlDateFormatter::format(mixed $value, IntlDateFormatter $fmt)","return":"<p class=\"para\">   The formatted string or, if an error occurred, <strong><code>FALSE<\/code><\/strong>.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_format":{"id":"intldateformatter.format","purpose":"Format the date\/time value as a string","prototype":"string datefmt_format(mixed $value, IntlDateFormatter $fmt)","return":"<p class=\"para\">   The formatted string or, if an error occurred, <strong><code>FALSE<\/code><\/strong>.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::formatObject":{"id":"intldateformatter.formatobject","purpose":"Formats an object","prototype":"string IntlDateFormatter::formatObject(object $object [, mixed $format = null [, string $locale = null]])","return":"<p class=\"para\">   A string with result or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"datefmt_format_object":{"id":"intldateformatter.formatobject","purpose":"Formats an object","prototype":"string datefmt_format_object(object $object [, mixed $format = null [, string $locale = null]])","return":"<p class=\"para\">   A string with result or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"IntlDateFormatter::getCalendar":{"id":"intldateformatter.getcalendar","purpose":"Get the calendar type used for the IntlDateFormatter","prototype":"int IntlDateFormatter::getCalendar(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The <a href=\"class.intldateformatter.html#intl.intldateformatter-constants.calendartypes\" class=\"link\">calendar   type<\/a> being used by the formatter. Either   <strong><code>IntlDateFormatter::TRADITIONAL<\/code><\/strong> or   <strong><code>IntlDateFormatter::GREGORIAN<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_calendar":{"id":"intldateformatter.getcalendar","purpose":"Get the calendar type used for the IntlDateFormatter","prototype":"int datefmt_get_calendar(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The <a href=\"class.intldateformatter.html#intl.intldateformatter-constants.calendartypes\" class=\"link\">calendar   type<\/a> being used by the formatter. Either   <strong><code>IntlDateFormatter::TRADITIONAL<\/code><\/strong> or   <strong><code>IntlDateFormatter::GREGORIAN<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getDateType":{"id":"intldateformatter.getdatetype","purpose":"Get the datetype used for the IntlDateFormatter","prototype":"int IntlDateFormatter::getDateType(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The current <a href=\"class.intldateformatter.html#intl.intldateformatter-constants\" class=\"link\">date type<\/a> value of the formatter.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_datetype":{"id":"intldateformatter.getdatetype","purpose":"Get the datetype used for the IntlDateFormatter","prototype":"int datefmt_get_datetype(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The current <a href=\"class.intldateformatter.html#intl.intldateformatter-constants\" class=\"link\">date type<\/a> value of the formatter.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getErrorCode":{"id":"intldateformatter.geterrorcode","purpose":"Get the error code from last operation","prototype":"int IntlDateFormatter::getErrorCode(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_error_code":{"id":"intldateformatter.geterrorcode","purpose":"Get the error code from last operation","prototype":"int datefmt_get_error_code(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The error code, one of UErrorCode values. Initial value is U_ZERO_ERROR.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getErrorMessage":{"id":"intldateformatter.geterrormessage","purpose":"Get the error text from the last operation","prototype":"string IntlDateFormatter::getErrorMessage(IntlDateFormatter $fmt)","return":"<p class=\"para\">   Description of the last error.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_error_message":{"id":"intldateformatter.geterrormessage","purpose":"Get the error text from the last operation","prototype":"string datefmt_get_error_message(IntlDateFormatter $fmt)","return":"<p class=\"para\">   Description of the last error.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getLocale":{"id":"intldateformatter.getlocale","purpose":"Get the locale used by formatter","prototype":"string IntlDateFormatter::getLocale([int $which = '', IntlDateFormatter $fmt])","return":"<p class=\"para\">   the locale of this formatter  or &#039;false&#039; if error    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_locale":{"id":"intldateformatter.getlocale","purpose":"Get the locale used by formatter","prototype":"string datefmt_get_locale([int $which = '', IntlDateFormatter $fmt])","return":"<p class=\"para\">   the locale of this formatter  or &#039;false&#039; if error    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getPattern":{"id":"intldateformatter.getpattern","purpose":"Get the pattern used for the IntlDateFormatter","prototype":"string IntlDateFormatter::getPattern(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The pattern string being used to format\/parse.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_pattern":{"id":"intldateformatter.getpattern","purpose":"Get the pattern used for the IntlDateFormatter","prototype":"string datefmt_get_pattern(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The pattern string being used to format\/parse.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getTimeType":{"id":"intldateformatter.gettimetype","purpose":"Get the timetype used for the IntlDateFormatter","prototype":"int IntlDateFormatter::getTimeType(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The current <a href=\"class.intldateformatter.html#intl.intldateformatter-constants\" class=\"link\">date type<\/a> value of the formatter.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_timetype":{"id":"intldateformatter.gettimetype","purpose":"Get the timetype used for the IntlDateFormatter","prototype":"int datefmt_get_timetype(IntlDateFormatter $fmt)","return":"<p class=\"para\">   The current <a href=\"class.intldateformatter.html#intl.intldateformatter-constants\" class=\"link\">date type<\/a> value of the formatter.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getTimeZoneId":{"id":"intldateformatter.gettimezoneid","purpose":"Get the timezone-id used for the IntlDateFormatter","prototype":"string IntlDateFormatter::getTimeZoneId(IntlDateFormatter $fmt)","return":"<p class=\"para\">   ID string for the time zone used by this formatter.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_get_timezone_id":{"id":"intldateformatter.gettimezoneid","purpose":"Get the timezone-id used for the IntlDateFormatter","prototype":"string datefmt_get_timezone_id(IntlDateFormatter $fmt)","return":"<p class=\"para\">   ID string for the time zone used by this formatter.    <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::getCalendarObject":{"id":"intldateformatter.getcalendarobject","purpose":"Get copy of formatter\u02bcs calendar object","prototype":"IntlCalendar IntlDateFormatter::getCalendarObject()","return":"<p class=\"para\">   A copy of the internal calendar object used by this formatter.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"datefmt_get_calendar_object":{"id":"intldateformatter.getcalendarobject","purpose":"Get copy of formatter\u02bcs calendar object","prototype":"IntlCalendar datefmt_get_calendar_object()","return":"<p class=\"para\">   A copy of the internal calendar object used by this formatter.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"IntlDateFormatter::getTimeZone":{"id":"intldateformatter.gettimezone","purpose":"Get formatter\u02bcs timezone","prototype":"IntlTimeZone IntlDateFormatter::getTimeZone()","return":"<p class=\"para\">   The associated <span class=\"classname\">IntlTimeZone<\/span>   object or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"datefmt_get_timezone":{"id":"intldateformatter.gettimezone","purpose":"Get formatter\u02bcs timezone","prototype":"IntlTimeZone datefmt_get_timezone()","return":"<p class=\"para\">   The associated <span class=\"classname\">IntlTimeZone<\/span>   object or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"IntlDateFormatter::isLenient":{"id":"intldateformatter.islenient","purpose":"Get the lenient used for the IntlDateFormatter","prototype":"bool IntlDateFormatter::isLenient(IntlDateFormatter $fmt)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if parser is lenient, <strong><code>FALSE<\/code><\/strong> if parser is strict. By default the parser is lenient.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_is_lenient":{"id":"intldateformatter.islenient","purpose":"Get the lenient used for the IntlDateFormatter","prototype":"bool datefmt_is_lenient(IntlDateFormatter $fmt)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if parser is lenient, <strong><code>FALSE<\/code><\/strong> if parser is strict. By default the parser is lenient.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::localtime":{"id":"intldateformatter.localtime","purpose":"Parse string to a field-based time value","prototype":"array IntlDateFormatter::localtime(string $value [, int $position = '', IntlDateFormatter $fmt])","return":"<p class=\"para\">   Localtime compatible array of integers  : contains 24 hour clock value in tm_hour field   <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_localtime":{"id":"intldateformatter.localtime","purpose":"Parse string to a field-based time value","prototype":"array datefmt_localtime(string $value [, int $position = '', IntlDateFormatter $fmt])","return":"<p class=\"para\">   Localtime compatible array of integers  : contains 24 hour clock value in tm_hour field   <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::parse":{"id":"intldateformatter.parse","purpose":"Parse string to a timestamp value","prototype":"int IntlDateFormatter::parse(string $value [, int $position = '', IntlDateFormatter $fmt])","return":"<p class=\"para\">   timestamp parsed value, or <strong><code>FALSE<\/code><\/strong> if value can&#039;t be parsed.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_parse":{"id":"intldateformatter.parse","purpose":"Parse string to a timestamp value","prototype":"int datefmt_parse(string $value [, int $position = '', IntlDateFormatter $fmt])","return":"<p class=\"para\">   timestamp parsed value, or <strong><code>FALSE<\/code><\/strong> if value can&#039;t be parsed.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::setCalendar":{"id":"intldateformatter.setcalendar","purpose":"Sets the calendar type used by the formatter","prototype":"bool IntlDateFormatter::setCalendar(mixed $which, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_set_calendar":{"id":"intldateformatter.setcalendar","purpose":"Sets the calendar type used by the formatter","prototype":"bool datefmt_set_calendar(mixed $which, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::setLenient":{"id":"intldateformatter.setlenient","purpose":"Set the leniency of the parser","prototype":"bool IntlDateFormatter::setLenient(bool $lenient, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_set_lenient":{"id":"intldateformatter.setlenient","purpose":"Set the leniency of the parser","prototype":"bool datefmt_set_lenient(bool $lenient, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::setPattern":{"id":"intldateformatter.setpattern","purpose":"Set the pattern used for the IntlDateFormatter","prototype":"bool IntlDateFormatter::setPattern(string $pattern, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Bad formatstrings are usually the cause of the failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"datefmt_set_pattern":{"id":"intldateformatter.setpattern","purpose":"Set the pattern used for the IntlDateFormatter","prototype":"bool datefmt_set_pattern(string $pattern, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Bad formatstrings are usually the cause of the failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlDateFormatter::setTimeZoneId":{"id":"intldateformatter.settimezoneid","purpose":"Sets the time zone to use","prototype":"bool IntlDateFormatter::setTimeZoneId(string $zone, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PECL intl >= 1.0.0"},"datefmt_set_timezone_id":{"id":"intldateformatter.settimezoneid","purpose":"Sets the time zone to use","prototype":"bool datefmt_set_timezone_id(string $zone, IntlDateFormatter $fmt)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PECL intl >= 1.0.0"},"IntlDateFormatter::setTimeZone":{"id":"intldateformatter.settimezone","purpose":"Sets formatter\u02bcs timezone","prototype":"bool IntlDateFormatter::setTimeZone(mixed $zone)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"datefmt_set_timezone":{"id":"intldateformatter.settimezone","purpose":"Sets formatter\u02bcs timezone","prototype":"bool datefmt_set_timezone(mixed $zone)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL intl >= 3.0.0"},"ResourceBundle::count":{"id":"resourcebundle.count","purpose":"Get number of elements in the bundle","prototype":"int ResourceBundle::count(ResourceBundle $r)","return":"<p class=\"para\">   Returns number of elements in the bundle.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"resourcebundle_count":{"id":"resourcebundle.count","purpose":"Get number of elements in the bundle","prototype":"int resourcebundle_count(ResourceBundle $r)","return":"<p class=\"para\">   Returns number of elements in the bundle.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"ResourceBundle::create":{"id":"resourcebundle.create","purpose":"Create a resource bundle","prototype":"ResourceBundle ResourceBundle::create(string $locale, string $bundlename [, bool $fallback = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">ResourceBundle<\/span> object or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"resourcebundle_create":{"id":"resourcebundle.create","purpose":"Create a resource bundle","prototype":"ResourceBundle resourcebundle_create(string $locale, string $bundlename [, bool $fallback = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">ResourceBundle<\/span> object or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"ResourceBundle::__construct":{"id":"resourcebundle.create","purpose":"Create a resource bundle","prototype":"ResourceBundle ResourceBundle::__construct(string $locale, string $bundlename [, bool $fallback = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">ResourceBundle<\/span> object or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"ResourceBundle::getErrorCode":{"id":"resourcebundle.geterrorcode","purpose":"Get bundle's last error code","prototype":"int ResourceBundle::getErrorCode(ResourceBundle $r)","return":"<p class=\"para\">   Returns error code from last bundle object call.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"resourcebundle_get_error_code":{"id":"resourcebundle.geterrorcode","purpose":"Get bundle's last error code","prototype":"int resourcebundle_get_error_code(ResourceBundle $r)","return":"<p class=\"para\">   Returns error code from last bundle object call.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"ResourceBundle::getErrorMessage":{"id":"resourcebundle.geterrormessage","purpose":"Get bundle's last error message","prototype":"string ResourceBundle::getErrorMessage(ResourceBundle $r)","return":"<p class=\"para\">   Returns error message from last bundle object&#039;s call.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"resourcebundle_get_error_message":{"id":"resourcebundle.geterrormessage","purpose":"Get bundle's last error message","prototype":"string resourcebundle_get_error_message(ResourceBundle $r)","return":"<p class=\"para\">   Returns error message from last bundle object&#039;s call.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"ResourceBundle::get":{"id":"resourcebundle.get","purpose":"Get data from the bundle","prototype":"mixed ResourceBundle::get(string|int $index [, bool $fallback = '', ResourceBundle $r])","return":"<p class=\"para\">   Returns the data located at the index or <strong><code>NULL<\/code><\/strong> on error. Strings, integers and binary data strings   are returned as corresponding PHP types, integer array is returned as PHP array. Complex types are   returned as <span class=\"classname\">ResourceBundle<\/span> object.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"resourcebundle_get":{"id":"resourcebundle.get","purpose":"Get data from the bundle","prototype":"mixed resourcebundle_get(string|int $index [, bool $fallback = '', ResourceBundle $r])","return":"<p class=\"para\">   Returns the data located at the index or <strong><code>NULL<\/code><\/strong> on error. Strings, integers and binary data strings   are returned as corresponding PHP types, integer array is returned as PHP array. Complex types are   returned as <span class=\"classname\">ResourceBundle<\/span> object.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"ResourceBundle::getLocales":{"id":"resourcebundle.locales","purpose":"Get supported locales","prototype":"array ResourceBundle::getLocales(string $bundlename)","return":"<p class=\"para\">   Returns the list of locales supported by the bundle.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"resourcebundle_locales":{"id":"resourcebundle.locales","purpose":"Get supported locales","prototype":"array resourcebundle_locales(string $bundlename)","return":"<p class=\"para\">   Returns the list of locales supported by the bundle.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7, PECL intl >= 2.0.0"},"Spoofchecker::areConfusable":{"id":"spoofchecker.areconfusable","purpose":"Checks if given strings can be confused","prototype":"bool Spoofchecker::areConfusable(string $str1, string $str2 [, string $error = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if two given strings can be confused, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Spoofchecker::__construct":{"id":"spoofchecker.construct","purpose":"Constructor","prototype":" Spoofchecker::__construct()","return":"<p class=\"para\">   Returns Spoofchecker instance.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Spoofchecker::isSuspicious":{"id":"spoofchecker.issuspicious","purpose":"Checks if a given text contains any suspicious characters","prototype":"bool Spoofchecker::isSuspicious(string $text [, string $error = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if there are suspicious characters, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Spoofchecker::setAllowedLocales":{"id":"spoofchecker.setallowedlocales","purpose":"Locales to use when running checks","prototype":"void Spoofchecker::setAllowedLocales(string $locale_list)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Spoofchecker::setChecks":{"id":"spoofchecker.setchecks","purpose":"Set the checks to run","prototype":"void Spoofchecker::setChecks(int $checks)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::__construct":{"id":"transliterator.construct","purpose":"Private constructor to deny instantiation","prototype":" Transliterator::__construct()","return":"<p class=\"para\">   This method should not be executed. If it is (e.g. through reflection), then   its return value is unspecified.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::create":{"id":"transliterator.create","purpose":"Create a transliterator","prototype":"Transliterator Transliterator::create(string $id [, int $direction = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">Transliterator<\/span> object on success,   or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_create":{"id":"transliterator.create","purpose":"Create a transliterator","prototype":"Transliterator transliterator_create(string $id [, int $direction = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">Transliterator<\/span> object on success,   or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::createFromRules":{"id":"transliterator.createfromrules","purpose":"Create transliterator from rules","prototype":"Transliterator Transliterator::createFromRules(string $rules [, int $direction = '', string $id])","return":"<p class=\"para\">   Returns a <span class=\"classname\">Transliterator<\/span> object on success,   or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_create_from_rules":{"id":"transliterator.createfromrules","purpose":"Create transliterator from rules","prototype":"Transliterator transliterator_create_from_rules(string $rules [, int $direction = '', string $id])","return":"<p class=\"para\">   Returns a <span class=\"classname\">Transliterator<\/span> object on success,   or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::createInverse":{"id":"transliterator.createinverse","purpose":"Create an inverse transliterator","prototype":"Transliterator Transliterator::createInverse()","return":"<p class=\"para\">   Returns a <span class=\"classname\">Transliterator<\/span> object on success,   or <strong><code>NULL<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_create_inverse":{"id":"transliterator.createinverse","purpose":"Create an inverse transliterator","prototype":"Transliterator transliterator_create_inverse()","return":"<p class=\"para\">   Returns a <span class=\"classname\">Transliterator<\/span> object on success,   or <strong><code>NULL<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::getErrorCode":{"id":"transliterator.geterrorcode","purpose":"Get last error code","prototype":"int Transliterator::getErrorCode()","return":"<p class=\"para\">   The error code on success,   or <strong><code>FALSE<\/code><\/strong> if none exists, or on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_get_error_code":{"id":"transliterator.geterrorcode","purpose":"Get last error code","prototype":"int transliterator_get_error_code()","return":"<p class=\"para\">   The error code on success,   or <strong><code>FALSE<\/code><\/strong> if none exists, or on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::getErrorMessage":{"id":"transliterator.geterrormessage","purpose":"Get last error message","prototype":"string Transliterator::getErrorMessage()","return":"<p class=\"para\">   The error message on success,   or <strong><code>FALSE<\/code><\/strong> if none exists, or on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_get_error_message":{"id":"transliterator.geterrormessage","purpose":"Get last error message","prototype":"string transliterator_get_error_message()","return":"<p class=\"para\">   The error message on success,   or <strong><code>FALSE<\/code><\/strong> if none exists, or on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::listIDs":{"id":"transliterator.listids","purpose":"Get transliterator IDs","prototype":"array Transliterator::listIDs()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of registered transliterator IDs on success,    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_list_ids":{"id":"transliterator.listids","purpose":"Get transliterator IDs","prototype":"array transliterator_list_ids()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of registered transliterator IDs on success,    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"Transliterator::transliterate":{"id":"transliterator.transliterate","purpose":"Transliterate a string","prototype":"string Transliterator::transliterate(string $subject [, int $start = '' [, int $end = '', mixed $transliterator]])","return":"<p class=\"para\">   The transfomed string on success,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"transliterator_transliterate":{"id":"transliterator.transliterate","purpose":"Transliterate a string","prototype":"string transliterator_transliterate(string $subject [, int $start = '' [, int $end = '', mixed $transliterator]])","return":"<p class=\"para\">   The transfomed string on success,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7, PECL intl >= 2.0.0"},"IntlBreakIterator::__construct":{"id":"intlbreakiterator.construct","purpose":"Private constructor for disallowing instantiation","prototype":" IntlBreakIterator::__construct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::createCharacterInstance":{"id":"intlbreakiterator.createcharacterinstance","purpose":"Create break iterator for boundaries of combining character sequences","prototype":"IntlBreakIterator IntlBreakIterator::createCharacterInstance([string $locale = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::createCodePointInstance":{"id":"intlbreakiterator.createcodepointinstance","purpose":"Create break iterator for boundaries of code points","prototype":"IntlBreakIterator IntlBreakIterator::createCodePointInstance()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::createLineInstance":{"id":"intlbreakiterator.createlineinstance","purpose":"Create break iterator for logically possible line breaks","prototype":"IntlBreakIterator IntlBreakIterator::createLineInstance([string $locale = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::createSentenceInstance":{"id":"intlbreakiterator.createsentenceinstance","purpose":"Create break iterator for sentence breaks","prototype":"IntlBreakIterator IntlBreakIterator::createSentenceInstance([string $locale = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::createTitleInstance":{"id":"intlbreakiterator.createtitleinstance","purpose":"Create break iterator for title-casing breaks","prototype":"IntlBreakIterator IntlBreakIterator::createTitleInstance([string $locale = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::createWordInstance":{"id":"intlbreakiterator.createwordinstance","purpose":"Create break iterator for word breaks","prototype":"IntlBreakIterator IntlBreakIterator::createWordInstance([string $locale = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::current":{"id":"intlbreakiterator.current","purpose":"Get index of current position","prototype":"int IntlBreakIterator::current()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::first":{"id":"intlbreakiterator.first","purpose":"Set position to the first character in the text","prototype":"int IntlBreakIterator::first()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::following":{"id":"intlbreakiterator.following","purpose":"Advance the iterator to the first boundary following specified offset","prototype":"int IntlBreakIterator::following(int $offset)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::getErrorCode":{"id":"intlbreakiterator.geterrorcode","purpose":"Get last error code on the object","prototype":"int IntlBreakIterator::getErrorCode()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"intl_get_error_code":{"id":"function.intl-get-error-code","purpose":"Get the last error code","prototype":"int intl_get_error_code()","return":"<p class=\"para\">   Error code returned by the last API function call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlBreakIterator::getErrorMessage":{"id":"intlbreakiterator.geterrormessage","purpose":"Get last error message on the object","prototype":"string IntlBreakIterator::getErrorMessage()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"intl_get_error_message":{"id":"function.intl-get-error-message","purpose":"Get description of the last error","prototype":"string intl_get_error_message()","return":"<p class=\"para\">   Description of an error occurred in the last API function call.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"IntlBreakIterator::getLocale":{"id":"intlbreakiterator.getlocale","purpose":"Get the locale associated with the object","prototype":"string IntlBreakIterator::getLocale(string $locale_type)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::getPartsIterator":{"id":"intlbreakiterator.getpartsiterator","purpose":"Create iterator for navigating fragments between boundaries","prototype":"IntlPartsIterator IntlBreakIterator::getPartsIterator([string $key_type = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::getText":{"id":"intlbreakiterator.gettext","purpose":"Get the text being scanned","prototype":"string IntlBreakIterator::getText()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::isBoundary":{"id":"intlbreakiterator.isboundary","purpose":"Tell whether an offset is a boundary\u02bcs offset","prototype":"bool IntlBreakIterator::isBoundary(int $offset)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::last":{"id":"intlbreakiterator.last","purpose":"Set the iterator position to index beyond the last character","prototype":"int IntlBreakIterator::last()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::next":{"id":"intlbreakiterator.next","purpose":"Advance the iterator the next boundary","prototype":"int IntlBreakIterator::next([int $offset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::preceding":{"id":"intlbreakiterator.preceding","purpose":"Set the iterator position to the first boundary before an offset","prototype":"int IntlBreakIterator::preceding(int $offset)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::previous":{"id":"intlbreakiterator.previous","purpose":"Set the iterator position to the boundary immediately before the current","prototype":"int IntlBreakIterator::previous()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlBreakIterator::setText":{"id":"intlbreakiterator.settext","purpose":"Set the text being scanned","prototype":"bool IntlBreakIterator::setText(string $text)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlRuleBasedBreakIterator::__construct":{"id":"intlrulebasedbreakiterator.construct","purpose":"Create iterator from ruleset","prototype":" IntlRuleBasedBreakIterator::__construct(string $rules [, string $areCompiled = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlRuleBasedBreakIterator::getBinaryRules":{"id":"intlrulebasedbreakiterator.getbinaryrules","purpose":"Get the binary form of compiled rules","prototype":"string IntlRuleBasedBreakIterator::getBinaryRules()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlRuleBasedBreakIterator::getRules":{"id":"intlrulebasedbreakiterator.getrules","purpose":"Get the rule set used to create this object","prototype":"string IntlRuleBasedBreakIterator::getRules()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlRuleBasedBreakIterator::getRuleStatus":{"id":"intlrulebasedbreakiterator.getrulestatus","purpose":"Get the largest status value from the break rules that determined the current break position","prototype":"int IntlRuleBasedBreakIterator::getRuleStatus()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlRuleBasedBreakIterator::getRuleStatusVec":{"id":"intlrulebasedbreakiterator.getrulestatusvec","purpose":"Get the status values from the break rules that determined the current break position","prototype":"array IntlRuleBasedBreakIterator::getRuleStatusVec()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlCodePointBreakIterator::getLastCodePoint":{"id":"intlcodepointbreakiterator.getlastcodepoint","purpose":"Get last code point passed over after advancing or receding the iterator","prototype":"int IntlCodePointBreakIterator::getLastCodePoint()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlPartsIterator::getBreakIterator":{"id":"intlpartsiterator.getbreakiterator","purpose":"Get IntlBreakIterator backing this parts iterator","prototype":"IntlBreakIterator IntlPartsIterator::getBreakIterator()","return":"<p class=\"para\">     <\/p>","versions":""},"UConverter::__construct":{"id":"uconverter.construct","purpose":"Create UConverter object","prototype":" UConverter::__construct([string $destination_encoding = '' [, string $source_encoding = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::convert":{"id":"uconverter.convert","purpose":"Convert string from one charset to another","prototype":"string UConverter::convert(string $str [, bool $reverse = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::fromUCallback":{"id":"uconverter.fromucallback","purpose":"Default \"from\" callback function","prototype":"mixed UConverter::fromUCallback(int $reason, string $source, string $codePoint, int $error)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getAliases":{"id":"uconverter.getaliases","purpose":"Get the aliases of the given name","prototype":"array UConverter::getAliases(string $name)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getAvailable":{"id":"uconverter.getavailable","purpose":"Get the available canonical converter names","prototype":"array UConverter::getAvailable()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getDestinationEncoding":{"id":"uconverter.getdestinationencoding","purpose":"Get the destination encoding","prototype":"string UConverter::getDestinationEncoding()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getDestinationType":{"id":"uconverter.getdestinationtype","purpose":"Get the destination converter type","prototype":"int UConverter::getDestinationType()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getErrorCode":{"id":"uconverter.geterrorcode","purpose":"Get last error code on the object","prototype":"int UConverter::getErrorCode()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getErrorMessage":{"id":"uconverter.geterrormessage","purpose":"Get last error message on the object","prototype":"string UConverter::getErrorMessage()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getSourceEncoding":{"id":"uconverter.getsourceencoding","purpose":"Get the source encoding","prototype":"string UConverter::getSourceEncoding()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getSourceType":{"id":"uconverter.getsourcetype","purpose":"Get the source convertor type","prototype":"int UConverter::getSourceType()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getStandards":{"id":"uconverter.getstandards","purpose":"Get standards associated to converter names","prototype":"array UConverter::getStandards()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::getSubstChars":{"id":"uconverter.getsubstchars","purpose":"Get substitution chars","prototype":"string UConverter::getSubstChars()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::reasonText":{"id":"uconverter.reasontext","purpose":"Get string representation of the callback reason","prototype":"string UConverter::reasonText([int $reason = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::setDestinationEncoding":{"id":"uconverter.setdestinationencoding","purpose":"Set the destination encoding","prototype":"void UConverter::setDestinationEncoding(string $encoding)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::setSourceEncoding":{"id":"uconverter.setsourceencoding","purpose":"Set the source encoding","prototype":"void UConverter::setSourceEncoding(string $encoding)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::setSubstChars":{"id":"uconverter.setsubstchars","purpose":"Set the substitution chars","prototype":"void UConverter::setSubstChars(string $chars)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::toUCallback":{"id":"uconverter.toucallback","purpose":"Default \"to\" callback function","prototype":"mixed UConverter::toUCallback(int $reason, string $source, string $codeUnits, int $error)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"UConverter::transcode":{"id":"uconverter.transcode","purpose":"Convert string from one charset to another","prototype":"string UConverter::transcode(string $str, string $toEncoding, string $fromEncoding [, array $options = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7, PECL >= 3.0.0a1"},"grapheme_extract":{"id":"function.grapheme-extract","purpose":"Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8","prototype":"string grapheme_extract(string $haystack, int $size [, int $extract_type = '' [, int $start = '' [, int $next = '']]])","return":"<p class=\"para\">   A string starting at offset $start and ending on a default grapheme cluster   boundary that conforms to the $size and $extract_type specified.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_stripos":{"id":"function.grapheme-stripos","purpose":"Find position (in grapheme units) of first occurrence of a case-insensitive string","prototype":"int grapheme_stripos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position as an integer. If needle is not found, grapheme_stripos() will return boolean FALSE.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_stristr":{"id":"function.grapheme-stristr","purpose":"Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack","prototype":"string grapheme_stristr(string $haystack, string $needle [, bool $before_needle = ''])","return":"<p class=\"para\">   Returns the portion of $haystack, or FALSE if $needle is not found.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_strlen":{"id":"function.grapheme-strlen","purpose":"Get string length in grapheme units","prototype":"int grapheme_strlen(string $input)","return":"<p class=\"para\">   The length of the string on success, and 0 if the string is empty.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_strpos":{"id":"function.grapheme-strpos","purpose":"Find position (in grapheme units) of first occurrence of a string","prototype":"int grapheme_strpos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position as an integer. If needle is not found, grapheme_strpos() will return boolean FALSE.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_strripos":{"id":"function.grapheme-strripos","purpose":"Find position (in grapheme units) of last occurrence of a case-insensitive string","prototype":"int grapheme_strripos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position as an integer. If needle is not found, grapheme_strripos() will return boolean FALSE.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_strrpos":{"id":"function.grapheme-strrpos","purpose":"Find position (in grapheme units) of last occurrence of a string","prototype":"int grapheme_strrpos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position as an integer. If needle is not found, grapheme_strrpos() will return boolean FALSE.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_strstr":{"id":"function.grapheme-strstr","purpose":"Returns part of haystack string from the first occurrence of needle to the end of haystack","prototype":"string grapheme_strstr(string $haystack, string $needle [, bool $before_needle = ''])","return":"<p class=\"para\">   Returns the portion of string, or FALSE if needle is not found.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"grapheme_substr":{"id":"function.grapheme-substr","purpose":"Return part of a string","prototype":"string grapheme_substr(string $string, int $start [, int $length = ''])","return":"<p class=\"para\">   Returns the extracted part of $string.     <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"idn_to_ascii":{"id":"function.idn-to-ascii","purpose":"Convert domain name to IDNA ASCII form","prototype":"string idn_to_ascii(string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_2003 [, array $idna_info = '']]])","return":"<p class=\"para\">   The domain name encoded in ASCII-compatible form,  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.2, PECL idn >= 0.1"},"idn_to_utf8":{"id":"function.idn-to-utf8","purpose":"Convert domain name from IDNA ASCII to Unicode","prototype":"string idn_to_utf8(string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_2003 [, array $idna_info = '']]])","return":"<p class=\"para\">   The domain name in Unicode, encoded in UTF-8,  or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.2, PECL idn >= 0.1"},"IntlChar::charAge":{"id":"intlchar.charage","purpose":"Get the \"age\" of the code point","prototype":"array IntlChar::charAge(mixed $codepoint)","return":"<p class=\"para\">   The Unicode version number, as an <span class=\"type\">array<\/span>.   For example, version <em class=\"emphasis\">1.3.31.2<\/em> would be represented as <em>[1, 3, 31, 2]<\/em>.  <\/p>","versions":"PHP 7"},"IntlChar::charDigitValue":{"id":"intlchar.chardigitvalue","purpose":"Get the decimal digit value of a decimal digit character","prototype":"int IntlChar::charDigitValue(mixed $codepoint)","return":"<p class=\"para\">   The decimal digit value of <code class=\"parameter\">codepoint<\/code>,   or <em>-1<\/em> if it is not a decimal digit character.  <\/p>","versions":"PHP 7"},"IntlChar::charDirection":{"id":"intlchar.chardirection","purpose":"Get bidirectional category value for a code point","prototype":"int IntlChar::charDirection(mixed $codepoint)","return":"<p class=\"para\">   The bidirectional category value; one of the following constants:   <ul class=\"simplelist\">    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_TERMINATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_ARABIC_NUMBER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_BLOCK_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_SEGMENT_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_WHITE_SPACE_NEUTRAL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_OTHER_NEUTRAL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_EMBEDDING<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_OVERRIDE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_ARABIC<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_EMBEDDING<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_OVERRIDE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_POP_DIRECTIONAL_FORMAT<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_DIR_NON_SPACING_MARK<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_BOUNDARY_NEUTRAL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_FIRST_STRONG_ISOLATE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_ISOLATE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_ISOLATE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_POP_DIRECTIONAL_ISOLATE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_DIRECTION_CHAR_DIRECTION_COUNT<\/code><\/strong><\/li>   <\/ul>  <\/p>","versions":"PHP 7"},"IntlChar::charFromName":{"id":"intlchar.charfromname","purpose":"Find Unicode character by name and return its code point value","prototype":"int IntlChar::charFromName(string $characterName [, int $nameChoice = ''])","return":"<p class=\"para\">   The Unicode value of the code point with the given name (as an <span class=\"type\">integer<\/span>), or <strong><code>FALSE<\/code><\/strong> if there is no such code point.  <\/p>","versions":"PHP 7"},"IntlChar::charMirror":{"id":"intlchar.charmirror","purpose":"Get the \"mirror-image\" character for a code point","prototype":"mixed IntlChar::charMirror(mixed $codepoint)","return":"<p class=\"para\">   Returns another Unicode code point that may serve as a mirror-image substitute, or <code class=\"parameter\">codepoint<\/code>   itself if there is no such mapping or <code class=\"parameter\">codepoint<\/code> does not have the   <em class=\"emphasis\">Bidi_Mirrored<\/em> property.  <\/p>  <p class=\"para\">The return type will be <span class=\"type\">integer<\/span> unless the code point was passed as a UTF-8 <span class=\"type\">string<\/span>, in which case a <span class=\"type\">string<\/span> will be returned.<\/p>","versions":"PHP 7"},"IntlChar::charName":{"id":"intlchar.charname","purpose":"Retrieve the name of a Unicode character","prototype":"string IntlChar::charName(mixed $codepoint [, int $nameChoice = ''])","return":"<p class=\"para\">   The corresponding name, or an empty string if there is no name for this character.  <\/p>","versions":"PHP 7"},"IntlChar::charType":{"id":"intlchar.chartype","purpose":"Get the general category value for a code point","prototype":"int IntlChar::charType(mixed $codepoint)","return":"<p class=\"para\">   Returns the general category type, which may be one of the following constants:   <ul class=\"simplelist\">    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_UNASSIGNED<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_GENERAL_OTHER_TYPES<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_UPPERCASE_LETTER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_LOWERCASE_LETTER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_TITLECASE_LETTER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_MODIFIER_LETTER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_OTHER_LETTER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_NON_SPACING_MARK<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_ENCLOSING_MARK<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_COMBINING_SPACING_MARK<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_DECIMAL_DIGIT_NUMBER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_LETTER_NUMBER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_OTHER_NUMBER<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_SPACE_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_LINE_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_PARAGRAPH_SEPARATOR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_CONTROL_CHAR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_FORMAT_CHAR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_PRIVATE_USE_CHAR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_SURROGATE<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_DASH_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_START_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_END_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_CONNECTOR_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_OTHER_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_MATH_SYMBOL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_CURRENCY_SYMBOL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_MODIFIER_SYMBOL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_OTHER_SYMBOL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_INITIAL_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_FINAL_PUNCTUATION<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>IntlChar::CHAR_CATEGORY_CHAR_CATEGORY_COUNT<\/code><\/strong><\/li>   <\/ul>  <\/p>","versions":"PHP 7"},"IntlChar::chr":{"id":"intlchar.chr","purpose":"Return Unicode character by code point value","prototype":"string IntlChar::chr(mixed $codepoint)","return":"<p class=\"para\">   A string containing the single character specified by the Unicode code point value.  <\/p>","versions":"PHP 7"},"IntlChar::digit":{"id":"intlchar.digit","purpose":"Get the decimal digit value of a code point for a given radix","prototype":"int IntlChar::digit(string $codepoint [, int $radix = 10])","return":"<p class=\"para\">   Returns the numeric value represented by the character in the specified radix,   or <strong><code>FALSE<\/code><\/strong> if there is no value or if the value exceeds the radix.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 7"},"IntlChar::enumCharNames":{"id":"intlchar.enumcharnames","purpose":"Enumerate all assigned Unicode characters within a range","prototype":"void IntlChar::enumCharNames(mixed $start, mixed $limit, callable $callback [, int $nameChoice = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 7"},"IntlChar::enumCharTypes":{"id":"intlchar.enumchartypes","purpose":"Enumerate all code points with their Unicode general categories","prototype":"void IntlChar::enumCharTypes(callable $callback)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 7"},"IntlChar::foldCase":{"id":"intlchar.foldcase","purpose":"Perform case folding on a code point","prototype":"mixed IntlChar::foldCase(mixed $codepoint [, int $options = ''])","return":"<p class=\"para\">   Returns the <em class=\"emphasis\">Simple_Case_Folding<\/em> of the code point, if any; otherwise the code point itself.  <\/p>","versions":"PHP 7"},"IntlChar::forDigit":{"id":"intlchar.fordigit","purpose":"Get character representation for a given digit and radix","prototype":"int IntlChar::forDigit(int $digit [, int $radix = 10])","return":"<p class=\"para\">   The character representation (as a <span class=\"type\">string<\/span>) of the specified digit in the specified radix.  <\/p>","versions":"PHP 7"},"IntlChar::getBidiPairedBracket":{"id":"intlchar.getbidipairedbracket","purpose":"Get the paired bracket character for a code point","prototype":"mixed IntlChar::getBidiPairedBracket(mixed $codepoint)","return":"<p class=\"para\">   Returns the paired bracket code point, or <code class=\"parameter\">codepoint<\/code> itself if there is no such mapping.  <\/p>  <p class=\"para\">The return type will be <span class=\"type\">integer<\/span> unless the code point was passed as a UTF-8 <span class=\"type\">string<\/span>, in which case a <span class=\"type\">string<\/span> will be returned.<\/p>","versions":"PHP 7"},"IntlChar::getBlockCode":{"id":"intlchar.getblockcode","purpose":"Get the Unicode allocation block containing a code point","prototype":"int IntlChar::getBlockCode(mixed $codepoint)","return":"<p class=\"para\">   Returns the block value for <code class=\"parameter\">codepoint<\/code>.   See the <em>IntlChar::BLOCK_CODE_*<\/em> constants for possible return values.  <\/p>","versions":"PHP 7"},"IntlChar::getCombiningClass":{"id":"intlchar.getcombiningclass","purpose":"Get the combining class of a code point","prototype":"int IntlChar::getCombiningClass(mixed $codepoint)","return":"<p class=\"para\">   Returns the combining class of the character.  <\/p>","versions":"PHP 7"},"IntlChar::getFC_NFKC_Closure":{"id":"intlchar.getfc-nfkc-closure","purpose":"Get the FC_NFKC_Closure property for a code point","prototype":"string IntlChar::getFC_NFKC_Closure(mixed $codepoint)","return":"<p class=\"para\">   Returns the FC_NFKC_Closure property string for the <code class=\"parameter\">codepoint<\/code>, or an empty string if there is none.  <\/p>","versions":"PHP 7"},"IntlChar::getIntPropertyMaxValue":{"id":"intlchar.getintpropertymaxvalue","purpose":"Get the max value for a Unicode property","prototype":"int IntlChar::getIntPropertyMaxValue(int $property)","return":"<p class=\"para\">   The maximum value returned by <span class=\"function\">IntlChar::getIntPropertyValue<\/span> for a Unicode property.   <em>&lt;=0<\/em> if the property selector is out of range.  <\/p>","versions":"PHP 7"},"IntlChar::getIntPropertyMinValue":{"id":"intlchar.getintpropertyminvalue","purpose":"Get the min value for a Unicode property","prototype":"int IntlChar::getIntPropertyMinValue(int $property)","return":"<p class=\"para\">   The minimum value returned by <span class=\"function\">IntlChar::getIntPropertyValue<\/span> for a Unicode property.   <em>0<\/em> if the property selector is out of range.  <\/p>","versions":"PHP 7"},"IntlChar::getIntPropertyValue":{"id":"intlchar.getintpropertyvalue","purpose":"Get the value for a Unicode property for a code point","prototype":"int IntlChar::getIntPropertyValue(mixed $codepoint, int $property)","return":"<p class=\"para\">   Returns the numeric value that is directly the property value or, for enumerated properties, corresponds to the   numeric value of the enumerated constant of the respective property value enumeration type.  <\/p>  <p class=\"para\">   Returns <em>0<\/em> or <em>1<\/em> (for <strong><code>FALSE<\/code><\/strong>\/<strong><code>TRUE<\/code><\/strong>) for binary Unicode properties.  <\/p>  <p class=\"para\">   Returns a bit-mask for mask properties.  <\/p>  <p class=\"para\">   Returns <em>0<\/em> if <code class=\"parameter\">property<\/code> is out of bounds or if the Unicode version does not   have data for the property at all, or not for this code point.  <\/p>","versions":"PHP 7"},"IntlChar::getNumericValue":{"id":"intlchar.getnumericvalue","purpose":"Get the numeric value for a Unicode code point","prototype":"float IntlChar::getNumericValue(mixed $codepoint)","return":"<p class=\"para\">   Numeric value of <code class=\"parameter\">codepoint<\/code>,   or <strong><code>IntlChar::NO_NUMERIC_VALUE<\/code><\/strong> if none is defined. This   constant was added in PHP 7.0.6, prior to this version the literal value   (<span class=\"type\">float<\/span>)<em>-123456789<\/em> may be used instead.  <\/p>","versions":"PHP 7"},"IntlChar::getPropertyEnum":{"id":"intlchar.getpropertyenum","purpose":"Get the property constant value for a given property name","prototype":"int IntlChar::getPropertyEnum(string $alias)","return":"<p class=\"para\">   Returns an <em>IntlChar::PROPERTY_<\/em> constant value,   or <strong><code>IntlChar::PROPERTY_INVALID_CODE<\/code><\/strong> if the given name does not match any property.  <\/p>","versions":"PHP 7"},"IntlChar::getPropertyName":{"id":"intlchar.getpropertyname","purpose":"Get the Unicode name for a property","prototype":"string IntlChar::getPropertyName(int $property [, int $nameChoice = ''])","return":"<p class=\"para\">   Returns the name, or <strong><code>FALSE<\/code><\/strong> if either the <code class=\"parameter\">property<\/code> or the <code class=\"parameter\">nameChoice<\/code>   is out of range.  <\/p>  <p class=\"para\">   If a given <code class=\"parameter\">nameChoice<\/code> returns <strong><code>FALSE<\/code><\/strong>, then all larger values of   <code class=\"parameter\">nameChoice<\/code> will return <strong><code>FALSE<\/code><\/strong>, with one exception: if <strong><code>FALSE<\/code><\/strong> is returned for   <strong><code>IntlChar::SHORT_PROPERTY_NAME<\/code><\/strong>, then <strong><code>IntlChar::LONG_PROPERTY_NAME<\/code><\/strong>   (and higher) may still return a non-<strong><code>FALSE<\/code><\/strong> value.  <\/p>","versions":"PHP 7"},"IntlChar::getPropertyValueEnum":{"id":"intlchar.getpropertyvalueenum","purpose":"Get the property value for a given value name","prototype":"int IntlChar::getPropertyValueEnum(int $property, string $name)","return":"<p class=\"para\">   Returns the corresponding value integer, or <strong><code>IntlChar::PROPERTY_INVALID_CODE<\/code><\/strong> if the given name   does not match any value of the given property, or if the property is invalid.  <\/p>","versions":"PHP 7"},"IntlChar::getPropertyValueName":{"id":"intlchar.getpropertyvaluename","purpose":"Get the Unicode name for a property value","prototype":"string IntlChar::getPropertyValueName(int $property, int $value [, int $nameChoice = ''])","return":"<p class=\"para\">   Returns the name, or <strong><code>FALSE<\/code><\/strong> if either the <code class=\"parameter\">property<\/code> or the <code class=\"parameter\">nameChoice<\/code>   is out of range.  <\/p>  <p class=\"para\">   If a given <code class=\"parameter\">nameChoice<\/code> returns <strong><code>FALSE<\/code><\/strong>, then all larger values of <code class=\"parameter\">nameChoice<\/code>   will return <strong><code>FALSE<\/code><\/strong>, with one exception: if <strong><code>FALSE<\/code><\/strong> is returned for <strong><code>IntlChar::SHORT_PROPERTY_NAME<\/code><\/strong>,   then <strong><code>IntlChar::LONG_PROPERTY_NAME<\/code><\/strong> (and higher) may still return a non-<strong><code>FALSE<\/code><\/strong> value.  <\/p>","versions":"PHP 7"},"IntlChar::getUnicodeVersion":{"id":"intlchar.getunicodeversion","purpose":"Get the Unicode version","prototype":"array IntlChar::getUnicodeVersion()","return":"<p class=\"para\">   An array containing the Unicode version number.  <\/p>","versions":"PHP 7"},"IntlChar::hasBinaryProperty":{"id":"intlchar.hasbinaryproperty","purpose":"Check a binary Unicode property for a code point","prototype":"bool IntlChar::hasBinaryProperty(mixed $codepoint, int $property)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> or <strong><code>FALSE<\/code><\/strong> according to the binary Unicode property value for <code class=\"parameter\">codepoint<\/code>.   Also <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">property<\/code> is out of bounds or if the Unicode version does not have data for   the property at all, or not for this code point.  <\/p>","versions":"PHP 7"},"IntlChar::isalnum":{"id":"intlchar.isalnum","purpose":"Check if code point is an alphanumeric character","prototype":"bool IntlChar::isalnum(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is an alphanumeric character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isalpha":{"id":"intlchar.isalpha","purpose":"Check if code point is a letter character","prototype":"bool IntlChar::isalpha(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a letter character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isbase":{"id":"intlchar.isbase","purpose":"Check if code point is a base character","prototype":"bool IntlChar::isbase(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a base character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isblank":{"id":"intlchar.isblank","purpose":"Check if code point is a \"blank\" or \"horizontal space\" character","prototype":"bool IntlChar::isblank(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is either a &quot;blank&quot; or &quot;horizontal space&quot; character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::iscntrl":{"id":"intlchar.iscntrl","purpose":"Check if code point is a control character","prototype":"bool IntlChar::iscntrl(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a control character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isdefined":{"id":"intlchar.isdefined","purpose":"Check whether the code point is defined","prototype":"bool IntlChar::isdefined(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a defined character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isdigit":{"id":"intlchar.isdigit","purpose":"Check if code point is a digit character","prototype":"bool IntlChar::isdigit(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a digit character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isgraph":{"id":"intlchar.isgraph","purpose":"Check if code point is a graphic character","prototype":"bool IntlChar::isgraph(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a &quot;graphic&quot; character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isIDIgnorable":{"id":"intlchar.isidignorable","purpose":"Check if code point is an ignorable character","prototype":"bool IntlChar::isIDIgnorable(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is ignorable in identifiers, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isIDPart":{"id":"intlchar.isidpart","purpose":"Check if code point is permissible in an identifier","prototype":"bool IntlChar::isIDPart(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is the code point may occur in an identifier, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isIDStart":{"id":"intlchar.isidstart","purpose":"Check if code point is permissible as the first character in an identifier","prototype":"bool IntlChar::isIDStart(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> may start an identifier, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isISOControl":{"id":"intlchar.isisocontrol","purpose":"Check if code point is an ISO control code","prototype":"bool IntlChar::isISOControl(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is an ISO control code, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isJavaIDPart":{"id":"intlchar.isjavaidpart","purpose":"Check if code point is permissible in a Java identifier","prototype":"bool IntlChar::isJavaIDPart(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> may occur in a Java identifier, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isJavaIDStart":{"id":"intlchar.isjavaidstart","purpose":"Check if code point is permissible as the first character in a Java identifier","prototype":"bool IntlChar::isJavaIDStart(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> may start a Java identifier, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isJavaSpaceChar":{"id":"intlchar.isjavaspacechar","purpose":"Check if code point is a space character according to Java","prototype":"bool IntlChar::isJavaSpaceChar(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a space character according to Java, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::islower":{"id":"intlchar.islower","purpose":"Check if code point is a lowercase letter","prototype":"bool IntlChar::islower(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is an Ll lowercase letter, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isMirrored":{"id":"intlchar.ismirrored","purpose":"Check if code point has the Bidi_Mirrored property","prototype":"bool IntlChar::isMirrored(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> has the Bidi_Mirrored property, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isprint":{"id":"intlchar.isprint","purpose":"Check if code point is a printable character","prototype":"bool IntlChar::isprint(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a printable character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::ispunct":{"id":"intlchar.ispunct","purpose":"Check if code point is punctuation character","prototype":"bool IntlChar::ispunct(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a punctuation character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isspace":{"id":"intlchar.isspace","purpose":"Check if code point is a space character","prototype":"bool IntlChar::isspace(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a space character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::istitle":{"id":"intlchar.istitle","purpose":"Check if code point is a titlecase letter","prototype":"bool IntlChar::istitle(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a titlecase letter, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isUAlphabetic":{"id":"intlchar.isualphabetic","purpose":"Check if code point has the Alphabetic Unicode property","prototype":"bool IntlChar::isUAlphabetic(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> has the Alphabetic Unicode property, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isULowercase":{"id":"intlchar.isulowercase","purpose":"Check if code point has the Lowercase Unicode property","prototype":"bool IntlChar::isULowercase(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> has the Lowercase Unicode property, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isupper":{"id":"intlchar.isupper","purpose":"Check if code point has the general category \"Lu\" (uppercase letter)","prototype":"bool IntlChar::isupper(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is an Lu uppercase letter, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isUUppercase":{"id":"intlchar.isuuppercase","purpose":"Check if code point has the Uppercase Unicode property","prototype":"bool IntlChar::isUUppercase(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> has the Uppercase Unicode property, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isUWhiteSpace":{"id":"intlchar.isuwhitespace","purpose":"Check if code point has the White_Space Unicode property","prototype":"bool IntlChar::isUWhiteSpace(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> has the White_Space Unicode property, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isWhitespace":{"id":"intlchar.iswhitespace","purpose":"Check if code point is a whitespace character according to ICU","prototype":"bool IntlChar::isWhitespace(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a whitespace character according to ICU, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::isxdigit":{"id":"intlchar.isxdigit","purpose":"Check if code point is a hexadecimal digit","prototype":"bool IntlChar::isxdigit(mixed $codepoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">codepoint<\/code> is a hexadecimal character, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 7"},"IntlChar::ord":{"id":"intlchar.ord","purpose":"Return Unicode code point value of character","prototype":"int IntlChar::ord(mixed $character)","return":"<p class=\"para\">   Returns the Unicode code point value as an integer.  <\/p>","versions":"PHP 7"},"IntlChar::tolower":{"id":"intlchar.tolower","purpose":"Make Unicode character lowercase","prototype":"mixed IntlChar::tolower(mixed $codepoint)","return":"<p class=\"para\">   Returns the Simple_Lowercase_Mapping of the code point, if any;   otherwise the code point itself.  <\/p>  <p class=\"para\">The return type will be <span class=\"type\">integer<\/span> unless the code point was passed as a UTF-8 <span class=\"type\">string<\/span>, in which case a <span class=\"type\">string<\/span> will be returned.<\/p>","versions":"PHP 7"},"IntlChar::totitle":{"id":"intlchar.totitle","purpose":"Make Unicode character titlecase","prototype":"mixed IntlChar::totitle(mixed $codepoint)","return":"<p class=\"para\">   Returns the Simple_Titlecase_Mapping of the code point, if any;   otherwise the code point itself.  <\/p>  <p class=\"para\">The return type will be <span class=\"type\">integer<\/span> unless the code point was passed as a UTF-8 <span class=\"type\">string<\/span>, in which case a <span class=\"type\">string<\/span> will be returned.<\/p>","versions":"PHP 7"},"IntlChar::toupper":{"id":"intlchar.toupper","purpose":"Make Unicode character uppercase","prototype":"mixed IntlChar::toupper(mixed $codepoint)","return":"<p class=\"para\">   Returns the Simple_Uppercase_Mapping of the code point, if any;   otherwise the code point itself.  <\/p>  <p class=\"para\">The return type will be <span class=\"type\">integer<\/span> unless the code point was passed as a UTF-8 <span class=\"type\">string<\/span>, in which case a <span class=\"type\">string<\/span> will be returned.<\/p>","versions":"PHP 7"},"IntlIterator::current":{"id":"intliterator.current","purpose":"Get the current element","prototype":"mixed IntlIterator::current()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlIterator::key":{"id":"intliterator.key","purpose":"Get the current key","prototype":"string IntlIterator::key()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlIterator::next":{"id":"intliterator.next","purpose":"Move forward to the next element","prototype":"void IntlIterator::next()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlIterator::rewind":{"id":"intliterator.rewind","purpose":"Rewind the iterator to the first element","prototype":"void IntlIterator::rewind()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"IntlIterator::valid":{"id":"intliterator.valid","purpose":"Check if current position is valid","prototype":"bool IntlIterator::valid()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"intl_error_name":{"id":"function.intl-error-name","purpose":"Get symbolic name for a given error code","prototype":"string intl_error_name(int $error_code)","return":"<p class=\"para\">   The returned string will be the same as the name of the error code   constant.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"intl_is_failure":{"id":"function.intl-is-failure","purpose":"Check whether the given error code indicates failure","prototype":"bool intl_is_failure(int $error_code)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it the code indicates some failure, and <strong><code>FALSE<\/code><\/strong>   in case of success or a warning.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7, PECL intl >= 1.0.0"},"mb_check_encoding":{"id":"function.mb-check-encoding","purpose":"Check if the string is valid for the specified encoding","prototype":"bool mb_check_encoding([string $var = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.4.3, PHP 5 >= 5.1.3, PHP 7"},"mb_chr":{"id":"function.mb-chr","purpose":"Get a specific character","prototype":"string mb_chr(int $cp [, string $encoding = ''])","return":"<p class=\"para\">   Returns a specific character or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"mb_convert_case":{"id":"function.mb-convert-case","purpose":"Perform case folding on a string","prototype":"string mb_convert_case(string $str, int $mode [, string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   A case folded version of <code class=\"parameter\">string<\/code> converted in the   way specified by <code class=\"parameter\">mode<\/code>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"mb_convert_encoding":{"id":"function.mb-convert-encoding","purpose":"Convert character encoding","prototype":"string mb_convert_encoding(string $str, string $to_encoding [, mixed $from_encoding = mb_internal_encoding()])","return":"<p class=\"para\">   The encoded <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_convert_kana":{"id":"function.mb-convert-kana","purpose":"Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)","prototype":"string mb_convert_kana(string $str [, string $option = \"KV\" [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   The converted <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_convert_variables":{"id":"function.mb-convert-variables","purpose":"Convert character code in variable(s)","prototype":"string mb_convert_variables(string $to_encoding, mixed $from_encoding, mixed $vars [, mixed $... = ''])","return":"<p class=\"para\">   The character encoding before conversion for success,    or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_decode_mimeheader":{"id":"function.mb-decode-mimeheader","purpose":"Decode string in MIME header field","prototype":"string mb_decode_mimeheader(string $str)","return":"<p class=\"para\">   The decoded <span class=\"type\">string<\/span> in internal character encoding.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_decode_numericentity":{"id":"function.mb-decode-numericentity","purpose":"Decode HTML numeric string reference to character","prototype":"string mb_decode_numericentity(string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = '']])","return":"<p class=\"para\">   The converted <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_detect_encoding":{"id":"function.mb-detect-encoding","purpose":"Detect character encoding","prototype":"string mb_detect_encoding(string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = '']])","return":"<p class=\"para\">   The detected character encoding or <strong><code>FALSE<\/code><\/strong> if the encoding cannot be   detected from the given string.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_detect_order":{"id":"function.mb-detect-order","purpose":"Set\/Get character encoding detection order","prototype":"mixed mb_detect_order([mixed $encoding_list = mb_detect_order()])","return":"<p class=\"para\">   When setting the encoding detection order, <strong><code>TRUE<\/code><\/strong> is returned on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   When getting the encoding detection order, an ordered array of the encodings is returned.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_encode_mimeheader":{"id":"function.mb-encode-mimeheader","purpose":"Encode string for MIME header","prototype":"string mb_encode_mimeheader(string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = \"B\" [, string $linefeed = \"\\r\\n\" [, int $indent = '']]]])","return":"<p class=\"para\">   A converted version of the <span class=\"type\">string<\/span> represented in ASCII.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_encode_numericentity":{"id":"function.mb-encode-numericentity","purpose":"Encode character to HTML numeric string reference","prototype":"string mb_encode_numericentity(string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = '']])","return":"<p class=\"para\">   The converted <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_encoding_aliases":{"id":"function.mb-encoding-aliases","purpose":"Get aliases of a known encoding type","prototype":"array mb_encoding_aliases(string $encoding)","return":"<p class=\"para\">   Returns a numerically indexed array of encoding aliases on success,    or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"mb_ereg_match":{"id":"function.mb-ereg-match","purpose":"Regular expression match for multibyte string","prototype":"bool mb_ereg_match(string $pattern, string $string [, string $option = \"msr\"])","return":"<p class=\"simpara\">   Returns <strong><code>TRUE<\/code><\/strong> if   <code class=\"parameter\">string<\/code> matches the regular expression   <code class=\"parameter\">pattern<\/code>, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_replace_callback":{"id":"function.mb-ereg-replace-callback","purpose":"Perform a regular expresssion seach and replace with multibyte support using a callback","prototype":"string mb_ereg_replace_callback(string $pattern, callable $callback, string $string [, string $option = \"msr\"])","return":"<p class=\"para\">   The resultant <span class=\"type\">string<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.4.1, PHP 7"},"mb_ereg_replace":{"id":"function.mb-ereg-replace","purpose":"Replace regular expression with multibyte support","prototype":"string mb_ereg_replace(string $pattern, string $replacement, string $string [, string $option = \"msr\"])","return":"<p class=\"para\">   The resultant <span class=\"type\">string<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search_getpos":{"id":"function.mb-ereg-search-getpos","purpose":"Returns start point for next regular expression match","prototype":"int mb_ereg_search_getpos()","return":"<p class=\"simpara\">   <span class=\"function\">mb_ereg_search_getpos<\/span> returns   the point to start regular expression match for   <span class=\"function\">mb_ereg_search<\/span>,   <span class=\"function\">mb_ereg_search_pos<\/span>,   <span class=\"function\">mb_ereg_search_regs<\/span>. The position is   represented by bytes from the head of string.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search_getregs":{"id":"function.mb-ereg-search-getregs","purpose":"Retrieve the result from the last multibyte regular expression match","prototype":"array mb_ereg_search_getregs()","return":"<p class=\"simpara\">   An <span class=\"type\">array<\/span>   including the sub-string of matched part by last   <span class=\"function\">mb_ereg_search<\/span>,   <span class=\"function\">mb_ereg_search_pos<\/span>,   <span class=\"function\">mb_ereg_search_regs<\/span>. If there are some   matches, the first element will have the matched sub-string, the   second element will have the first part grouped with brackets,    the third element will have the second part grouped with   brackets, and so on. It returns <strong><code>FALSE<\/code><\/strong> on error;  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search_init":{"id":"function.mb-ereg-search-init","purpose":"Setup string and regular expression for a multibyte regular expression match","prototype":"bool mb_ereg_search_init(string $string [, string $pattern = '' [, string $option = \"msr\"]])","return":"<p class=\"simpara\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search_pos":{"id":"function.mb-ereg-search-pos","purpose":"Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string","prototype":"array mb_ereg_search_pos([string $pattern = '' [, string $option = \"ms\"]])","return":"<p class=\"simpara\">   An <span class=\"type\">array<\/span> containing two elements. The first element is the   offset, in bytes, where the match begins relative to the start of the   search string, and the second element is the length in bytes of the match.  <\/p>  <p class=\"simpara\">   If an error occurs, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search_regs":{"id":"function.mb-ereg-search-regs","purpose":"Returns the matched part of a multibyte regular expression","prototype":"array mb_ereg_search_regs([string $pattern = '' [, string $option = \"ms\"]])","return":"<p class=\"simpara\">   <span class=\"function\">mb_ereg_search_regs<\/span> executes the multibyte   regular expression match, and if there are some matched part, it   returns an <span class=\"type\">array<\/span> including substring of matched part as first   element, the first grouped part with brackets as second element,   the second grouped part as third element, and so on.    It returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search_setpos":{"id":"function.mb-ereg-search-setpos","purpose":"Set start point of next regular expression match","prototype":"bool mb_ereg_search_setpos(int $position)","return":"<p class=\"simpara\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg_search":{"id":"function.mb-ereg-search","purpose":"Multibyte regular expression match for predefined multibyte string","prototype":"bool mb_ereg_search([string $pattern = '' [, string $option = \"ms\"]])","return":"<p class=\"simpara\">   <span class=\"function\">mb_ereg_search<\/span> returns <strong><code>TRUE<\/code><\/strong> if the   multibyte string matches with the regular expression, or <strong><code>FALSE<\/code><\/strong>   otherwise. The <span class=\"type\">string<\/span> for matching is set by    <span class=\"function\">mb_ereg_search_init<\/span>. If   <code class=\"parameter\">pattern<\/code> is not specified, the previous one   is used.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_ereg":{"id":"function.mb-ereg","purpose":"Regular expression match with multibyte support","prototype":"int mb_ereg(string $pattern, string $string [, array $regs = ''])","return":"<p class=\"para\">   Returns the byte length of the matched string if a match for   <code class=\"parameter\">pattern<\/code> was found in <code class=\"parameter\">string<\/code>,   or <strong><code>FALSE<\/code><\/strong> if no matches were found or an error occurred.  <\/p>  <p class=\"para\">   If the optional parameter <code class=\"parameter\">regs<\/code> was not passed or   the length of the matched string is <em>0<\/em>, this function returns <em>1<\/em>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_eregi_replace":{"id":"function.mb-eregi-replace","purpose":"Replace regular expression with multibyte support ignoring case","prototype":"string mb_eregi_replace(string $pattern, string $replace, string $string [, string $option = \"msri\"])","return":"<p class=\"para\">   The resultant <span class=\"type\">string<\/span> or <strong><code>FALSE<\/code><\/strong> on error.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_eregi":{"id":"function.mb-eregi","purpose":"Regular expression match ignoring case with multibyte support","prototype":"int mb_eregi(string $pattern, string $string [, array $regs = ''])","return":"<p class=\"para\">   Returns the byte length of the matched string if a match for   <code class=\"parameter\">pattern<\/code> was found in <code class=\"parameter\">string<\/code>,   or <strong><code>FALSE<\/code><\/strong> if no matches were found or an error occurred.  <\/p>  <p class=\"para\">   If the optional parameter <code class=\"parameter\">regs<\/code> was not passed or   the length of the matched string is <em>0<\/em>, this function returns <em>1<\/em>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_get_info":{"id":"function.mb-get-info","purpose":"Get internal settings of mbstring","prototype":"mixed mb_get_info([string $type = \"all\"])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of type information if <code class=\"parameter\">type<\/code>    is not specified, otherwise a specific <code class=\"parameter\">type<\/code>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_http_input":{"id":"function.mb-http-input","purpose":"Detect HTTP input character encoding","prototype":"mixed mb_http_input([string $type = \"\"])","return":"<p class=\"para\">   The character encoding name, as per the <code class=\"parameter\">type<\/code>.   If <span class=\"function\">mb_http_input<\/span> does not process specified   HTTP input, it returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_http_output":{"id":"function.mb-http-output","purpose":"Set\/Get HTTP output character encoding","prototype":"mixed mb_http_output([string $encoding = mb_http_output()])","return":"<p class=\"para\">   If <code class=\"parameter\">encoding<\/code> is omitted,   <span class=\"function\">mb_http_output<\/span> returns the current HTTP output   character encoding. Otherwise,    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_internal_encoding":{"id":"function.mb-internal-encoding","purpose":"Set\/Get internal character encoding","prototype":"mixed mb_internal_encoding([string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   If <code class=\"parameter\">encoding<\/code> is set, then    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   In this case, the character encoding for multibyte regex is NOT changed.   If <code class=\"parameter\">encoding<\/code> is omitted, then    the current character encoding name is returned.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_language":{"id":"function.mb-language","purpose":"Set\/Get current language","prototype":"mixed mb_language([string $language = mb_language()])","return":"<p class=\"para\">   If <code class=\"parameter\">language<\/code> is set and   <code class=\"parameter\">language<\/code> is valid, it returns   <strong><code>TRUE<\/code><\/strong>. Otherwise, it returns <strong><code>FALSE<\/code><\/strong>.    When <code class=\"parameter\">language<\/code> is omitted, it returns the language   name as a <span class=\"type\">string<\/span>. If no language is set previously, it then returns   <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_list_encodings":{"id":"function.mb-list-encodings","purpose":"Returns an array of all supported encodings","prototype":"array mb_list_encodings()","return":"<p class=\"para\">   Returns a numerically indexed array.  <\/p>","versions":"PHP 5, PHP 7"},"mb_ord":{"id":"function.mb-ord","purpose":"Get code point of character","prototype":"int mb_ord(string $str [, string $encoding = ''])","return":"<p class=\"para\">   Returns a code point of character or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"mb_output_handler":{"id":"function.mb-output-handler","purpose":"Callback function converts character encoding in output buffer","prototype":"string mb_output_handler(string $contents, int $status)","return":"<p class=\"para\">   The converted <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_parse_str":{"id":"function.mb-parse-str","purpose":"Parse GET\/POST\/COOKIE data and set global variable","prototype":"array mb_parse_str(string $encoded_string [, array $result = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_preferred_mime_name":{"id":"function.mb-preferred-mime-name","purpose":"Get MIME charset string","prototype":"string mb_preferred_mime_name(string $encoding)","return":"<p class=\"para\">   The MIME <em>charset<\/em> <span class=\"type\">string<\/span> for character encoding   <code class=\"parameter\">encoding<\/code>.   <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_regex_encoding":{"id":"function.mb-regex-encoding","purpose":"Set\/Get character encoding for multibyte regex","prototype":"mixed mb_regex_encoding([string $encoding = mb_regex_encoding()])","return":"<p class=\"simpara\">   If <code class=\"parameter\">encoding<\/code> is set, then    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.    In this case, the internal character encoding is NOT changed.   If <code class=\"parameter\">encoding<\/code> is omitted, then    the current character encoding name for a multibyte regex is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_regex_set_options":{"id":"function.mb-regex-set-options","purpose":"Set\/Get the default options for mbregex functions","prototype":"string mb_regex_set_options([string $options = mb_regex_set_options()])","return":"<p class=\"para\">   The previous options. If <code class=\"parameter\">options<\/code> is omitted,    it returns the <span class=\"type\">string<\/span> that describes the current options.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"mb_scrub":{"id":"function.mb-scrub","purpose":"Description","prototype":"string mb_scrub(string $str [, string $encoding = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"mb_send_mail":{"id":"function.mb-send-mail","purpose":"Send encoded mail","prototype":"bool mb_send_mail(string $to, string $subject, string $message [, mixed $additional_headers = '' [, string $additional_parameter = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_split":{"id":"function.mb-split","purpose":"Split multibyte string using regular expression","prototype":"array mb_split(string $pattern, string $string [, int $limit = -1])","return":"<p class=\"para\">   The result as an <span class=\"type\">array<\/span>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"mb_strcut":{"id":"function.mb-strcut","purpose":"Get part of string","prototype":"string mb_strcut(string $str, int $start [, int $length = null [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   <span class=\"function\">mb_strcut<\/span> returns the portion of   <code class=\"parameter\">str<\/code> specified by the   <code class=\"parameter\">start<\/code> and   <code class=\"parameter\">length<\/code> parameters.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_strimwidth":{"id":"function.mb-strimwidth","purpose":"Get truncated string with specified width","prototype":"string mb_strimwidth(string $str, int $start, int $width [, string $trimmarker = \"\" [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   The truncated <span class=\"type\">string<\/span>. If <code class=\"parameter\">trimmarker<\/code> is set,   <code class=\"parameter\">trimmarker<\/code> replaces the last chars to match the <code class=\"parameter\">width<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_stripos":{"id":"function.mb-stripos","purpose":"Finds position of first occurrence of a string within another, case insensitive","prototype":"int mb_stripos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Return the numeric position of the first occurrence of   <code class=\"parameter\">needle<\/code> in the <code class=\"parameter\">haystack<\/code>   string, or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"mb_stristr":{"id":"function.mb-stristr","purpose":"Finds first occurrence of a string within another, case insensitive","prototype":"string mb_stristr(string $haystack, string $needle [, bool $before_needle = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns the portion of <code class=\"parameter\">haystack<\/code>,   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"mb_strlen":{"id":"function.mb-strlen","purpose":"Get string length","prototype":"string mb_strlen(string $str [, string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   Returns the number of characters in   <span class=\"type\">string<\/span> <code class=\"parameter\">str<\/code> having character encoding   <code class=\"parameter\">encoding<\/code>. A multi-byte character is   counted as 1.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the given <code class=\"parameter\">encoding<\/code> is invalid.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_strpos":{"id":"function.mb-strpos","purpose":"Find position of first occurrence of string in a string","prototype":"string mb_strpos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns the numeric position of   the first occurrence of <code class=\"parameter\">needle<\/code> in the   <code class=\"parameter\">haystack<\/code> <span class=\"type\">string<\/span>. If   <code class=\"parameter\">needle<\/code> is not found, it returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_strrchr":{"id":"function.mb-strrchr","purpose":"Finds the last occurrence of a character in a string within another","prototype":"string mb_strrchr(string $haystack, string $needle [, bool $part = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns the portion of <code class=\"parameter\">haystack<\/code>.   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"mb_strrichr":{"id":"function.mb-strrichr","purpose":"Finds the last occurrence of a character in a string within another, case insensitive","prototype":"string mb_strrichr(string $haystack, string $needle [, bool $part = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns the portion of <code class=\"parameter\">haystack<\/code>.   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"mb_strripos":{"id":"function.mb-strripos","purpose":"Finds position of last occurrence of a string within another, case insensitive","prototype":"int mb_strripos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Return the numeric position of   the last occurrence of <code class=\"parameter\">needle<\/code> in the   <code class=\"parameter\">haystack<\/code> string, or <strong><code>FALSE<\/code><\/strong>   if <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"mb_strrpos":{"id":"function.mb-strrpos","purpose":"Find position of last occurrence of a string in a string","prototype":"int mb_strrpos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns the numeric position of   the last occurrence of <code class=\"parameter\">needle<\/code> in the   <code class=\"parameter\">haystack<\/code> <span class=\"type\">string<\/span>. If   <code class=\"parameter\">needle<\/code> is not found, it returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_strstr":{"id":"function.mb-strstr","purpose":"Finds first occurrence of a string within another","prototype":"string mb_strstr(string $haystack, string $needle [, bool $before_needle = '' [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   Returns the portion of <code class=\"parameter\">haystack<\/code>,   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"mb_strtolower":{"id":"function.mb-strtolower","purpose":"Make a string lowercase","prototype":"string mb_strtolower(string $str [, string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   <code class=\"parameter\">str<\/code> with all alphabetic characters converted to lowercase.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"mb_strtoupper":{"id":"function.mb-strtoupper","purpose":"Make a string uppercase","prototype":"string mb_strtoupper(string $str [, string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   <code class=\"parameter\">str<\/code> with all alphabetic characters converted to uppercase.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"mb_strwidth":{"id":"function.mb-strwidth","purpose":"Return width of string","prototype":"string mb_strwidth(string $str [, string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   The width of <span class=\"type\">string<\/span> <code class=\"parameter\">str<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_substitute_character":{"id":"function.mb-substitute-character","purpose":"Set\/Get substitution character","prototype":"integer mb_substitute_character([mixed $substchar = mb_substitute_character()])","return":"<p class=\"para\">   If <code class=\"parameter\">substchar<\/code> is set, it returns <strong><code>TRUE<\/code><\/strong> for success,   otherwise returns <strong><code>FALSE<\/code><\/strong>.    If <code class=\"parameter\">substchar<\/code> is not set, it returns the current   setting.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"mb_substr_count":{"id":"function.mb-substr-count","purpose":"Count the number of substring occurrences","prototype":"string mb_substr_count(string $haystack, string $needle [, string $encoding = mb_internal_encoding()])","return":"<p class=\"para\">   The number of times the   <code class=\"parameter\">needle<\/code> substring occurs in the   <code class=\"parameter\">haystack<\/code> <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"mb_substr":{"id":"function.mb-substr","purpose":"Get part of string","prototype":"string mb_substr(string $str, int $start [, int $length = null [, string $encoding = mb_internal_encoding()]])","return":"<p class=\"para\">   <span class=\"function\">mb_substr<\/span> returns the portion of   <code class=\"parameter\">str<\/code> specified by the   <code class=\"parameter\">start<\/code> and   <code class=\"parameter\">length<\/code> parameters.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"pspell_add_to_personal":{"id":"function.pspell-add-to-personal","purpose":"Add the word to a personal wordlist","prototype":"bool pspell_add_to_personal(int $dictionary_link, string $word)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_add_to_session":{"id":"function.pspell-add-to-session","purpose":"Add the word to the wordlist in the current session","prototype":"bool pspell_add_to_session(int $dictionary_link, string $word)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_check":{"id":"function.pspell-check","purpose":"Check a word","prototype":"bool pspell_check(int $dictionary_link, string $word)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the spelling is correct, <strong><code>FALSE<\/code><\/strong> if not.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_clear_session":{"id":"function.pspell-clear-session","purpose":"Clear the current session","prototype":"bool pspell_clear_session(int $dictionary_link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_create":{"id":"function.pspell-config-create","purpose":"Create a config used to open a dictionary","prototype":"int pspell_config_create(string $language [, string $spelling = '' [, string $jargon = '' [, string $encoding = '']]])","return":"<p class=\"para\">   Retuns a pspell config identifier, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_data_dir":{"id":"function.pspell-config-data-dir","purpose":"Location of language data files","prototype":"bool pspell_config_data_dir(int $conf, string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"pspell_config_dict_dir":{"id":"function.pspell-config-dict-dir","purpose":"Location of the main word list","prototype":"bool pspell_config_dict_dir(int $conf, string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"pspell_config_ignore":{"id":"function.pspell-config-ignore","purpose":"Ignore words less than N characters long","prototype":"bool pspell_config_ignore(int $dictionary_link, int $n)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_mode":{"id":"function.pspell-config-mode","purpose":"Change the mode number of suggestions returned","prototype":"bool pspell_config_mode(int $dictionary_link, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_personal":{"id":"function.pspell-config-personal","purpose":"Set a file that contains personal wordlist","prototype":"bool pspell_config_personal(int $dictionary_link, string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_repl":{"id":"function.pspell-config-repl","purpose":"Set a file that contains replacement pairs","prototype":"bool pspell_config_repl(int $dictionary_link, string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_runtogether":{"id":"function.pspell-config-runtogether","purpose":"Consider run-together words as valid compounds","prototype":"bool pspell_config_runtogether(int $dictionary_link, bool $flag)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_config_save_repl":{"id":"function.pspell-config-save-repl","purpose":"Determine whether to save a replacement pairs list  along with the wordlist","prototype":"bool pspell_config_save_repl(int $dictionary_link, bool $flag)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_new_config":{"id":"function.pspell-new-config","purpose":"Load a new dictionary with settings based on a given config","prototype":"int pspell_new_config(int $config)","return":"<p class=\"para\">   Returns a dictionary link identifier on success.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_new_personal":{"id":"function.pspell-new-personal","purpose":"Load a new dictionary with personal wordlist","prototype":"int pspell_new_personal(string $personal, string $language [, string $spelling = '' [, string $jargon = '' [, string $encoding = '' [, int $mode = '']]]])","return":"<p class=\"para\">   Returns the dictionary link identifier for use in other pspell functions.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_new":{"id":"function.pspell-new","purpose":"Load a new dictionary","prototype":"int pspell_new(string $language [, string $spelling = '' [, string $jargon = '' [, string $encoding = '' [, int $mode = '']]]])","return":"<p class=\"para\">   Returns the dictionary link identifier on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_save_wordlist":{"id":"function.pspell-save-wordlist","purpose":"Save the personal wordlist to a file","prototype":"bool pspell_save_wordlist(int $dictionary_link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_store_replacement":{"id":"function.pspell-store-replacement","purpose":"Store a replacement pair for a word","prototype":"bool pspell_store_replacement(int $dictionary_link, string $misspelled, string $correct)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"pspell_suggest":{"id":"function.pspell-suggest","purpose":"Suggest spellings of a word","prototype":"array pspell_suggest(int $dictionary_link, string $word)","return":"<p class=\"para\">   Returns an array of possible spellings.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"recode_file":{"id":"function.recode-file","purpose":"Recode from file to file according to recode request","prototype":"bool recode_file(string $request, resource $input, resource $output)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong>, if unable to comply, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"recode_string":{"id":"function.recode-string","purpose":"Recode a string according to a recode request","prototype":"string recode_string(string $request, string $string)","return":"<p class=\"para\">   Returns the recoded <span class=\"type\">string<\/span> or <strong><code>FALSE<\/code><\/strong>, if unable to    perform the recode request.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"recode":{"id":"function.recode","purpose":"Alias of recode_string","prototype":" recode()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"cairo_create":{"id":"function.cairo-create","purpose":"Returns a new CairoContext object on the requested surface","prototype":"CairoContext cairo_create(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_create":{"id":"function.cairo-font-options-create","purpose":"Description","prototype":"CairoFontOptions cairo_font_options_create()","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_equal":{"id":"function.cairo-font-options-equal","purpose":"Description","prototype":"bool cairo_font_options_equal(CairoFontOptions $options, CairoFontOptions $other)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_get_antialias":{"id":"function.cairo-font-options-get-antialias","purpose":"Description","prototype":"int cairo_font_options_get_antialias(CairoFontOptions $options)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_get_hint_metrics":{"id":"function.cairo-font-options-get-hint-metrics","purpose":"Description","prototype":"int cairo_font_options_get_hint_metrics(CairoFontOptions $options)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_get_hint_style":{"id":"function.cairo-font-options-get-hint-style","purpose":"Description","prototype":"int cairo_font_options_get_hint_style(CairoFontOptions $options)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_get_subpixel_order":{"id":"function.cairo-font-options-get-subpixel-order","purpose":"Description","prototype":"int cairo_font_options_get_subpixel_order(CairoFontOptions $options)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_hash":{"id":"function.cairo-font-options-hash","purpose":"Description","prototype":"int cairo_font_options_hash(CairoFontOptions $options)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_merge":{"id":"function.cairo-font-options-merge","purpose":"Description","prototype":"void cairo_font_options_merge(CairoFontOptions $options, CairoFontOptions $other)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_set_antialias":{"id":"function.cairo-font-options-set-antialias","purpose":"Description","prototype":"void cairo_font_options_set_antialias(CairoFontOptions $options, int $antialias)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_set_hint_metrics":{"id":"function.cairo-font-options-set-hint-metrics","purpose":"Description","prototype":"void cairo_font_options_set_hint_metrics(CairoFontOptions $options, int $hint_metrics)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_set_hint_style":{"id":"function.cairo-font-options-set-hint-style","purpose":"Description","prototype":"void cairo_font_options_set_hint_style(CairoFontOptions $options, int $hint_style)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_set_subpixel_order":{"id":"function.cairo-font-options-set-subpixel-order","purpose":"Description","prototype":"void cairo_font_options_set_subpixel_order(CairoFontOptions $options, int $subpixel_order)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_options_status":{"id":"function.cairo-font-options-status","purpose":"Description","prototype":"int cairo_font_options_status(CairoFontOptions $options)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_format_stride_for_width":{"id":"function.cairo-format-stride-for-width","purpose":"Description","prototype":"int cairo_format_stride_for_width(int $format, int $width)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_create_for_data":{"id":"function.cairo-image-surface-create-for-data","purpose":"Description","prototype":"CairoImageSurface cairo_image_surface_create_for_data(string $data, int $format, int $width, int $height [, int $stride = -1])","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_create_from_png":{"id":"function.cairo-image-surface-create-from-png","purpose":"Description","prototype":"CairoImageSurface cairo_image_surface_create_from_png(mixed $file)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_create":{"id":"function.cairo-image-surface-create","purpose":"Description","prototype":"CairoImageSurface cairo_image_surface_create(int $format, int $width, int $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_get_data":{"id":"function.cairo-image-surface-get-data","purpose":"Description","prototype":"string cairo_image_surface_get_data(CairoImageSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_get_format":{"id":"function.cairo-image-surface-get-format","purpose":"Description","prototype":"int cairo_image_surface_get_format(CairoImageSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_get_height":{"id":"function.cairo-image-surface-get-height","purpose":"Description","prototype":"int cairo_image_surface_get_height(CairoImageSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_get_stride":{"id":"function.cairo-image-surface-get-stride","purpose":"Description","prototype":"int cairo_image_surface_get_stride(CairoImageSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_image_surface_get_width":{"id":"function.cairo-image-surface-get-width","purpose":"Description","prototype":"int cairo_image_surface_get_width(CairoImageSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_create_scale":{"id":"function.cairo-matrix-create-scale","purpose":"Alias of CairoMatrix::initScale","prototype":" cairo_matrix_create_scale()","return":"","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_create_translate":{"id":"function.cairo-matrix-create-translate","purpose":"Alias of CairoMatrix::initTranslate","prototype":" cairo_matrix_create_translate()","return":"","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_invert":{"id":"function.cairo-matrix-invert","purpose":"Description","prototype":"void cairo_matrix_invert(CairoMatrix $matrix)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_multiply":{"id":"function.cairo-matrix-multiply","purpose":"Description","prototype":"CairoMatrix cairo_matrix_multiply(CairoMatrix $matrix1, CairoMatrix $matrix2)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_transform_distance":{"id":"function.cairo-matrix-transform-distance","purpose":"Description","prototype":"array cairo_matrix_transform_distance(CairoMatrix $matrix, float $dx, float $dy)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_transform_point":{"id":"function.cairo-matrix-transform-point","purpose":"Description","prototype":"array cairo_matrix_transform_point(CairoMatrix $matrix, float $dx, float $dy)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_translate":{"id":"function.cairo-matrix-translate","purpose":"Description","prototype":"void cairo_matrix_translate(CairoMatrix $matrix, float $tx, float $ty)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_add_color_stop_rgb":{"id":"function.cairo-pattern-add-color-stop-rgb","purpose":"Description","prototype":"void cairo_pattern_add_color_stop_rgb(CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_add_color_stop_rgba":{"id":"function.cairo-pattern-add-color-stop-rgba","purpose":"Description","prototype":"void cairo_pattern_add_color_stop_rgba(CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue, float $alpha)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_create_for_surface":{"id":"function.cairo-pattern-create-for-surface","purpose":"Description","prototype":"CairoPattern cairo_pattern_create_for_surface(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_create_linear":{"id":"function.cairo-pattern-create-linear","purpose":"Description","prototype":"CairoPattern cairo_pattern_create_linear(float $x0, float $y0, float $x1, float $y1)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_create_radial":{"id":"function.cairo-pattern-create-radial","purpose":"Description","prototype":"CairoPattern cairo_pattern_create_radial(float $x0, float $y0, float $r0, float $x1, float $y1, float $r1)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_create_rgb":{"id":"function.cairo-pattern-create-rgb","purpose":"Description","prototype":"CairoPattern cairo_pattern_create_rgb(float $red, float $green, float $blue)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_create_rgba":{"id":"function.cairo-pattern-create-rgba","purpose":"Description","prototype":"CairoPattern cairo_pattern_create_rgba(float $red, float $green, float $blue, float $alpha)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_color_stop_count":{"id":"function.cairo-pattern-get-color-stop-count","purpose":"Description","prototype":"int cairo_pattern_get_color_stop_count(CairoGradientPattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_color_stop_rgba":{"id":"function.cairo-pattern-get-color-stop-rgba","purpose":"Description","prototype":"array cairo_pattern_get_color_stop_rgba(CairoGradientPattern $pattern, int $index)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_extend":{"id":"function.cairo-pattern-get-extend","purpose":"Description","prototype":"int cairo_pattern_get_extend(string $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_filter":{"id":"function.cairo-pattern-get-filter","purpose":"Description","prototype":"int cairo_pattern_get_filter(CairoSurfacePattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_linear_points":{"id":"function.cairo-pattern-get-linear-points","purpose":"Description","prototype":"array cairo_pattern_get_linear_points(CairoLinearGradient $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_matrix":{"id":"function.cairo-pattern-get-matrix","purpose":"Description","prototype":"CairoMatrix cairo_pattern_get_matrix(CairoPattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_radial_circles":{"id":"function.cairo-pattern-get-radial-circles","purpose":"Description","prototype":"array cairo_pattern_get_radial_circles(CairoRadialGradient $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_rgba":{"id":"function.cairo-pattern-get-rgba","purpose":"Description","prototype":"array cairo_pattern_get_rgba(CairoSolidPattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_surface":{"id":"function.cairo-pattern-get-surface","purpose":"Description","prototype":"CairoSurface cairo_pattern_get_surface(CairoSurfacePattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_get_type":{"id":"function.cairo-pattern-get-type","purpose":"Description","prototype":"int cairo_pattern_get_type(CairoPattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_set_extend":{"id":"function.cairo-pattern-set-extend","purpose":"Description","prototype":"void cairo_pattern_set_extend(string $pattern, string $extend)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_set_filter":{"id":"function.cairo-pattern-set-filter","purpose":"Description","prototype":"void cairo_pattern_set_filter(CairoSurfacePattern $pattern, int $filter)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_set_matrix":{"id":"function.cairo-pattern-set-matrix","purpose":"Description","prototype":"void cairo_pattern_set_matrix(CairoPattern $pattern, CairoMatrix $matrix)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pattern_status":{"id":"function.cairo-pattern-status","purpose":"Description","prototype":"int cairo_pattern_status(CairoPattern $pattern)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pdf_surface_create":{"id":"function.cairo-pdf-surface-create","purpose":"Description","prototype":"CairoPdfSurface cairo_pdf_surface_create(string $file, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pdf_surface_set_size":{"id":"function.cairo-pdf-surface-set-size","purpose":"Description","prototype":"void cairo_pdf_surface_set_size(CairoPdfSurface $surface, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_get_levels":{"id":"function.cairo-ps-get-levels","purpose":"Description","prototype":"array cairo_ps_get_levels()","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_level_to_string":{"id":"function.cairo-ps-level-to-string","purpose":"Description","prototype":"string cairo_ps_level_to_string(int $level)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_create":{"id":"function.cairo-ps-surface-create","purpose":"Description","prototype":"CairoPsSurface cairo_ps_surface_create(string $file, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_dsc_begin_page_setup":{"id":"function.cairo-ps-surface-dsc-begin-page-setup","purpose":"Description","prototype":"void cairo_ps_surface_dsc_begin_page_setup(CairoPsSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_dsc_begin_setup":{"id":"function.cairo-ps-surface-dsc-begin-setup","purpose":"Description","prototype":"void cairo_ps_surface_dsc_begin_setup(CairoPsSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_dsc_comment":{"id":"function.cairo-ps-surface-dsc-comment","purpose":"Description","prototype":"void cairo_ps_surface_dsc_comment(CairoPsSurface $surface, string $comment)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_get_eps":{"id":"function.cairo-ps-surface-get-eps","purpose":"Description","prototype":"bool cairo_ps_surface_get_eps(CairoPsSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_restrict_to_level":{"id":"function.cairo-ps-surface-restrict-to-level","purpose":"Description","prototype":"void cairo_ps_surface_restrict_to_level(CairoPsSurface $surface, int $level)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_set_eps":{"id":"function.cairo-ps-surface-set-eps","purpose":"Description","prototype":"void cairo_ps_surface_set_eps(CairoPsSurface $surface, bool $level)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_ps_surface_set_size":{"id":"function.cairo-ps-surface-set-size","purpose":"Description","prototype":"void cairo_ps_surface_set_size(CairoPsSurface $surface, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_create":{"id":"function.cairo-scaled-font-create","purpose":"Description","prototype":"CairoScaledFont cairo_scaled_font_create(CairoFontFace $fontface, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_extents":{"id":"function.cairo-scaled-font-extents","purpose":"Description","prototype":"array cairo_scaled_font_extents(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_get_ctm":{"id":"function.cairo-scaled-font-get-ctm","purpose":"Description","prototype":"CairoMatrix cairo_scaled_font_get_ctm(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_get_font_face":{"id":"function.cairo-scaled-font-get-font-face","purpose":"Description","prototype":"CairoFontFace cairo_scaled_font_get_font_face(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_get_font_matrix":{"id":"function.cairo-scaled-font-get-font-matrix","purpose":"Description","prototype":"CairoFontOptions cairo_scaled_font_get_font_matrix(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_get_font_options":{"id":"function.cairo-scaled-font-get-font-options","purpose":"Description","prototype":"CairoFontOptions cairo_scaled_font_get_font_options(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_get_scale_matrix":{"id":"function.cairo-scaled-font-get-scale-matrix","purpose":"Description","prototype":"CairoMatrix cairo_scaled_font_get_scale_matrix(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_get_type":{"id":"function.cairo-scaled-font-get-type","purpose":"Description","prototype":"int cairo_scaled_font_get_type(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_glyph_extents":{"id":"function.cairo-scaled-font-glyph-extents","purpose":"Description","prototype":"array cairo_scaled_font_glyph_extents(CairoScaledFont $scaledfont, array $glyphs)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_status":{"id":"function.cairo-scaled-font-status","purpose":"Description","prototype":"int cairo_scaled_font_status(CairoScaledFont $scaledfont)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scaled_font_text_extents":{"id":"function.cairo-scaled-font-text-extents","purpose":"Description","prototype":"array cairo_scaled_font_text_extents(CairoScaledFont $scaledfont, string $text)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_copy_page":{"id":"function.cairo-surface-copy-page","purpose":"Description","prototype":"void cairo_surface_copy_page(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_create_similar":{"id":"function.cairo-surface-create-similar","purpose":"Description","prototype":"CairoSurface cairo_surface_create_similar(CairoSurface $surface, int $content, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_finish":{"id":"function.cairo-surface-finish","purpose":"Description","prototype":"void cairo_surface_finish(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_flush":{"id":"function.cairo-surface-flush","purpose":"Description","prototype":"void cairo_surface_flush(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_get_content":{"id":"function.cairo-surface-get-content","purpose":"Description","prototype":"int cairo_surface_get_content(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_get_device_offset":{"id":"function.cairo-surface-get-device-offset","purpose":"Description","prototype":"array cairo_surface_get_device_offset(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_get_font_options":{"id":"function.cairo-surface-get-font-options","purpose":"Description","prototype":"CairoFontOptions cairo_surface_get_font_options(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_get_type":{"id":"function.cairo-surface-get-type","purpose":"Description","prototype":"int cairo_surface_get_type(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_mark_dirty_rectangle":{"id":"function.cairo-surface-mark-dirty-rectangle","purpose":"Description","prototype":"void cairo_surface_mark_dirty_rectangle(CairoSurface $surface, float $x, float $y, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_mark_dirty":{"id":"function.cairo-surface-mark-dirty","purpose":"Description","prototype":"void cairo_surface_mark_dirty(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_set_device_offset":{"id":"function.cairo-surface-set-device-offset","purpose":"Description","prototype":"void cairo_surface_set_device_offset(CairoSurface $surface, float $x, float $y)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_set_fallback_resolution":{"id":"function.cairo-surface-set-fallback-resolution","purpose":"Description","prototype":"void cairo_surface_set_fallback_resolution(CairoSurface $surface, float $x, float $y)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_show_page":{"id":"function.cairo-surface-show-page","purpose":"Description","prototype":"void cairo_surface_show_page(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_status":{"id":"function.cairo-surface-status","purpose":"Description","prototype":"int cairo_surface_status(CairoSurface $surface)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_surface_write_to_png":{"id":"function.cairo-surface-write-to-png","purpose":"Description","prototype":"void cairo_surface_write_to_png(CairoSurface $surface, resource $stream)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_svg_surface_create":{"id":"function.cairo-svg-surface-create","purpose":"Description","prototype":"CairoSvgSurface cairo_svg_surface_create(string $file, float $width, float $height)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_svg_surface_restrict_to_version":{"id":"function.cairo-svg-surface-restrict-to-version","purpose":"Description","prototype":"void cairo_svg_surface_restrict_to_version(CairoSvgSurface $surface, int $version)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_svg_version_to_string":{"id":"function.cairo-svg-version-to-string","purpose":"Description","prototype":"string cairo_svg_version_to_string(int $version)","return":"<p class=\"para\">   What is returned on success and failure  <\/p>","versions":"PECL cairo >= 0.1.0"},"Cairo::availableFonts":{"id":"cairo.availablefonts","purpose":"Retrieves the availables font types","prototype":"array Cairo::availableFonts()","return":"<p class=\"para\">   A list-type array with all available font backends.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_available_fonts":{"id":"cairo.availablefonts","purpose":"Retrieves the availables font types","prototype":"array cairo_available_fonts()","return":"<p class=\"para\">   A list-type array with all available font backends.  <\/p>","versions":"PECL cairo >= 0.1.0"},"Cairo::availableSurfaces":{"id":"cairo.availablesurfaces","purpose":"Retrieves all available surfaces","prototype":"array Cairo::availableSurfaces()","return":"<p class=\"para\">   A list-type array with all available surface backends.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_available_surfaces":{"id":"cairo.availablesurfaces","purpose":"Retrieves all available surfaces","prototype":"array cairo_available_surfaces()","return":"<p class=\"para\">   A list-type array with all available surface backends.  <\/p>","versions":"PECL cairo >= 0.1.0"},"Cairo::statusToString":{"id":"cairo.statustostring","purpose":"Retrieves the current status as string","prototype":"string Cairo::statusToString(int $status)","return":"<p class=\"para\">   A string containing the current status of a <span class=\"classname\">CairoContext<\/span> object  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_status_to_string":{"id":"cairo.statustostring","purpose":"Retrieves the current status as string","prototype":"string cairo_status_to_string(int $status)","return":"<p class=\"para\">   A string containing the current status of a <span class=\"classname\">CairoContext<\/span> object  <\/p>","versions":"PECL cairo >= 0.1.0"},"Cairo::version":{"id":"cairo.version","purpose":"Retrives cairo's library version","prototype":"int Cairo::version()","return":"<p class=\"para\">   Current Cairo library version integer  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_version":{"id":"cairo.version","purpose":"Retrives cairo's library version","prototype":"int cairo_version()","return":"<p class=\"para\">   Current Cairo library version integer  <\/p>","versions":"PECL cairo >= 0.1.0"},"Cairo::versionString":{"id":"cairo.versionstring","purpose":"Retrieves cairo version as string","prototype":"string Cairo::versionString()","return":"<p class=\"para\">   Current Cairo library version string  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_version_string":{"id":"cairo.versionstring","purpose":"Retrieves cairo version as string","prototype":"string cairo_version_string()","return":"<p class=\"para\">   Current Cairo library version string  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::appendPath":{"id":"cairocontext.appendpath","purpose":"Appends a path to current path","prototype":"void CairoContext::appendPath(CairoPath $path, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_append_path":{"id":"cairocontext.appendpath","purpose":"Appends a path to current path","prototype":"void cairo_append_path(CairoPath $path, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::arc":{"id":"cairocontext.arc","purpose":"Adds a circular arc","prototype":"void CairoContext::arc(float $x, float $y, float $radius, float $angle1, float $angle2, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_arc":{"id":"cairocontext.arc","purpose":"Adds a circular arc","prototype":"void cairo_arc(float $x, float $y, float $radius, float $angle1, float $angle2, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::arcNegative":{"id":"cairocontext.arcnegative","purpose":"Adds a negative arc","prototype":"void CairoContext::arcNegative(float $x, float $y, float $radius, float $angle1, float $angle2, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_arc_negative":{"id":"cairocontext.arcnegative","purpose":"Adds a negative arc","prototype":"void cairo_arc_negative(float $x, float $y, float $radius, float $angle1, float $angle2, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::clip":{"id":"cairocontext.clip","purpose":"Establishes a new clip region","prototype":"void CairoContext::clip(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_clip":{"id":"cairocontext.clip","purpose":"Establishes a new clip region","prototype":"void cairo_clip(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::clipExtents":{"id":"cairocontext.clipextents","purpose":"Computes the area inside the current clip","prototype":"array CairoContext::clipExtents(CairoContext $context)","return":"<p class=\"para\">   An array containing the (float)x1, (float)y1, (float)x2, (float)y2, coordinates covering the area inside the current clip  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_clip_extents":{"id":"cairocontext.clipextents","purpose":"Computes the area inside the current clip","prototype":"array cairo_clip_extents(CairoContext $context)","return":"<p class=\"para\">   An array containing the (float)x1, (float)y1, (float)x2, (float)y2, coordinates covering the area inside the current clip  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::clipPreserve":{"id":"cairocontext.clippreserve","purpose":"Establishes a new clip region from the current clip","prototype":"void CairoContext::clipPreserve(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_clip_preserve":{"id":"cairocontext.clippreserve","purpose":"Establishes a new clip region from the current clip","prototype":"void cairo_clip_preserve(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::clipRectangleList":{"id":"cairocontext.cliprectanglelist","purpose":"Retrieves the current clip as a list of rectangles","prototype":"array CairoContext::clipRectangleList(CairoContext $context)","return":"<p class=\"para\">   An array of user-space represented rectangles for the current clip  <\/p>  <p class=\"para\">   (The status in the list may be CAIRO_STATUS_CLIP_NOT_REPRESENTABLE to indicate that the clip   region cannot be represented as a list of user-space rectangles.   The status may have other values to indicate other errors.)  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_clip_rectangle_list":{"id":"cairocontext.cliprectanglelist","purpose":"Retrieves the current clip as a list of rectangles","prototype":"array cairo_clip_rectangle_list(CairoContext $context)","return":"<p class=\"para\">   An array of user-space represented rectangles for the current clip  <\/p>  <p class=\"para\">   (The status in the list may be CAIRO_STATUS_CLIP_NOT_REPRESENTABLE to indicate that the clip   region cannot be represented as a list of user-space rectangles.   The status may have other values to indicate other errors.)  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::closePath":{"id":"cairocontext.closepath","purpose":"Closes the current path","prototype":"void CairoContext::closePath(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_close_path":{"id":"cairocontext.closepath","purpose":"Closes the current path","prototype":"void cairo_close_path(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::__construct":{"id":"cairocontext.construct","purpose":"Creates a new CairoContext","prototype":" CairoContext::__construct(CairoSurface $surface)","return":"<p class=\"para\">   A <span class=\"classname\">CairoContext<\/span>  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::copyPage":{"id":"cairocontext.copypage","purpose":"Emits the current page","prototype":"void CairoContext::copyPage(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_copy_page":{"id":"cairosurface.copypage","purpose":"The copyPage purpose","prototype":"void cairo_copy_page(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::copyPath":{"id":"cairocontext.copypath","purpose":"Creates a copy of the current path","prototype":"CairoPath CairoContext::copyPath(CairoContext $context)","return":"<p class=\"para\">   A copy of the current <span class=\"classname\">CairoPath<\/span> in the context  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_copy_path":{"id":"cairocontext.copypath","purpose":"Creates a copy of the current path","prototype":"CairoPath cairo_copy_path(CairoContext $context)","return":"<p class=\"para\">   A copy of the current <span class=\"classname\">CairoPath<\/span> in the context  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::copyPathFlat":{"id":"cairocontext.copypathflat","purpose":"Gets a flattened copy of the current path","prototype":"CairoPath CairoContext::copyPathFlat(CairoContext $context)","return":"<p class=\"para\">   A copy of the current path  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_copy_path_flat":{"id":"cairocontext.copypathflat","purpose":"Gets a flattened copy of the current path","prototype":"CairoPath cairo_copy_path_flat(CairoContext $context)","return":"<p class=\"para\">   A copy of the current path  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::curveTo":{"id":"cairocontext.curveto","purpose":"Adds a curve","prototype":"void CairoContext::curveTo(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_curve_to":{"id":"cairocontext.curveto","purpose":"Adds a curve","prototype":"void cairo_curve_to(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::deviceToUser":{"id":"cairocontext.devicetouser","purpose":"Transform a coordinate","prototype":"array CairoContext::deviceToUser(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   An array containing the x and y coordinates in the user-space  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_device_to_user":{"id":"cairocontext.devicetouser","purpose":"Transform a coordinate","prototype":"array cairo_device_to_user(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   An array containing the x and y coordinates in the user-space  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::deviceToUserDistance":{"id":"cairocontext.devicetouserdistance","purpose":"Transform a distance","prototype":"array CairoContext::deviceToUserDistance(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Returns an array with the x and y values of a distance vector in the user-space  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_device_to_user_distance":{"id":"cairocontext.devicetouserdistance","purpose":"Transform a distance","prototype":"array cairo_device_to_user_distance(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Returns an array with the x and y values of a distance vector in the user-space  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::fill":{"id":"cairocontext.fill","purpose":"Fills the current path","prototype":"void CairoContext::fill(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_fill":{"id":"cairocontext.fill","purpose":"Fills the current path","prototype":"void cairo_fill(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::fillExtents":{"id":"cairocontext.fillextents","purpose":"Computes the filled area","prototype":"array CairoContext::fillExtents(CairoContext $context)","return":"<p class=\"para\">   An array with the coordinates of the afected area  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_fill_extents":{"id":"cairocontext.fillextents","purpose":"Computes the filled area","prototype":"array cairo_fill_extents(CairoContext $context)","return":"<p class=\"para\">   An array with the coordinates of the afected area  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::fillPreserve":{"id":"cairocontext.fillpreserve","purpose":"Fills and preserve the current path","prototype":"void CairoContext::fillPreserve(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_fill_preserve":{"id":"cairocontext.fillpreserve","purpose":"Fills and preserve the current path","prototype":"void cairo_fill_preserve(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::fontExtents":{"id":"cairocontext.fontextents","purpose":"Get the font extents","prototype":"array CairoContext::fontExtents(CairoContext $context)","return":"<p class=\"para\">   An array containing the font extents for the current font.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_extents":{"id":"cairocontext.fontextents","purpose":"Get the font extents","prototype":"array cairo_font_extents(CairoContext $context)","return":"<p class=\"para\">   An array containing the font extents for the current font.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getAntialias":{"id":"cairocontext.getantialias","purpose":"Retrives the current antialias mode","prototype":"int CairoContext::getAntialias(CairoContext $context)","return":"<p class=\"para\">   The current <span class=\"classname\">CairoAntialias<\/span> mode.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_antialias":{"id":"cairofontoptions.getantialias","purpose":"The getAntialias purpose","prototype":"int cairo_get_antialias(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getCurrentPoint":{"id":"cairocontext.getcurrentpoint","purpose":"The getCurrentPoint purpose","prototype":"array CairoContext::getCurrentPoint(CairoContext $context)","return":"<p class=\"para\">   An array containing the x (index 0) and y (index 1) coordinates of the current point.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_current_point":{"id":"cairocontext.getcurrentpoint","purpose":"The getCurrentPoint purpose","prototype":"array cairo_get_current_point(CairoContext $context)","return":"<p class=\"para\">   An array containing the x (index 0) and y (index 1) coordinates of the current point.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getDash":{"id":"cairocontext.getdash","purpose":"The getDash purpose","prototype":"array CairoContext::getDash(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_dash":{"id":"cairocontext.getdash","purpose":"The getDash purpose","prototype":"array cairo_get_dash(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getDashCount":{"id":"cairocontext.getdashcount","purpose":"The getDashCount purpose","prototype":"int CairoContext::getDashCount(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_dash_count":{"id":"cairocontext.getdashcount","purpose":"The getDashCount purpose","prototype":"int cairo_get_dash_count(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getFillRule":{"id":"cairocontext.getfillrule","purpose":"The getFillRule purpose","prototype":"int CairoContext::getFillRule(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_fill_rule":{"id":"cairocontext.getfillrule","purpose":"The getFillRule purpose","prototype":"int cairo_get_fill_rule(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getFontFace":{"id":"cairocontext.getfontface","purpose":"The getFontFace purpose","prototype":"void CairoContext::getFontFace(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_font_face":{"id":"cairoscaledfont.getfontface","purpose":"The getFontFace purpose","prototype":"void cairo_get_font_face(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getFontMatrix":{"id":"cairocontext.getfontmatrix","purpose":"The getFontMatrix purpose","prototype":"void CairoContext::getFontMatrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_font_matrix":{"id":"cairoscaledfont.getfontmatrix","purpose":"The getFontMatrix purpose","prototype":"void cairo_get_font_matrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getFontOptions":{"id":"cairocontext.getfontoptions","purpose":"The getFontOptions purpose","prototype":"void CairoContext::getFontOptions(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_font_options":{"id":"cairoscaledfont.getfontoptions","purpose":"The getFontOptions purpose","prototype":"void cairo_get_font_options(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getGroupTarget":{"id":"cairocontext.getgrouptarget","purpose":"The getGroupTarget purpose","prototype":"void CairoContext::getGroupTarget(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_group_target":{"id":"cairocontext.getgrouptarget","purpose":"The getGroupTarget purpose","prototype":"void cairo_get_group_target(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getLineCap":{"id":"cairocontext.getlinecap","purpose":"The getLineCap purpose","prototype":"int CairoContext::getLineCap(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_line_cap":{"id":"cairocontext.getlinecap","purpose":"The getLineCap purpose","prototype":"int cairo_get_line_cap(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getLineJoin":{"id":"cairocontext.getlinejoin","purpose":"The getLineJoin purpose","prototype":"int CairoContext::getLineJoin(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_line_join":{"id":"cairocontext.getlinejoin","purpose":"The getLineJoin purpose","prototype":"int cairo_get_line_join(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getLineWidth":{"id":"cairocontext.getlinewidth","purpose":"The getLineWidth purpose","prototype":"float CairoContext::getLineWidth(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_line_width":{"id":"cairocontext.getlinewidth","purpose":"The getLineWidth purpose","prototype":"float cairo_get_line_width(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getMatrix":{"id":"cairocontext.getmatrix","purpose":"The getMatrix purpose","prototype":"void CairoContext::getMatrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_matrix":{"id":"cairopattern.getmatrix","purpose":"The getMatrix purpose","prototype":"void cairo_get_matrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getMiterLimit":{"id":"cairocontext.getmiterlimit","purpose":"The getMiterLimit purpose","prototype":"float CairoContext::getMiterLimit(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_miter_limit":{"id":"cairocontext.getmiterlimit","purpose":"The getMiterLimit purpose","prototype":"float cairo_get_miter_limit(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getOperator":{"id":"cairocontext.getoperator","purpose":"The getOperator purpose","prototype":"int CairoContext::getOperator(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_operator":{"id":"cairocontext.getoperator","purpose":"The getOperator purpose","prototype":"int cairo_get_operator(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getScaledFont":{"id":"cairocontext.getscaledfont","purpose":"The getScaledFont purpose","prototype":"void CairoContext::getScaledFont(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_scaled_font":{"id":"cairocontext.getscaledfont","purpose":"The getScaledFont purpose","prototype":"void cairo_get_scaled_font(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getSource":{"id":"cairocontext.getsource","purpose":"The getSource purpose","prototype":"void CairoContext::getSource(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_source":{"id":"cairocontext.getsource","purpose":"The getSource purpose","prototype":"void cairo_get_source(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getTarget":{"id":"cairocontext.gettarget","purpose":"The getTarget purpose","prototype":"void CairoContext::getTarget(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_target":{"id":"cairocontext.gettarget","purpose":"The getTarget purpose","prototype":"void cairo_get_target(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::getTolerance":{"id":"cairocontext.gettolerance","purpose":"The getTolerance purpose","prototype":"float CairoContext::getTolerance(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_get_tolerance":{"id":"cairocontext.gettolerance","purpose":"The getTolerance purpose","prototype":"float cairo_get_tolerance(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::glyphPath":{"id":"cairocontext.glyphpath","purpose":"The glyphPath purpose","prototype":"void CairoContext::glyphPath(array $glyphs, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_glyph_path":{"id":"cairocontext.glyphpath","purpose":"The glyphPath purpose","prototype":"void cairo_glyph_path(array $glyphs, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::hasCurrentPoint":{"id":"cairocontext.hascurrentpoint","purpose":"The hasCurrentPoint purpose","prototype":"bool CairoContext::hasCurrentPoint(CairoContext $context)","return":"<p class=\"para\">   Whether a current point is defined  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_has_current_point":{"id":"cairocontext.hascurrentpoint","purpose":"The hasCurrentPoint purpose","prototype":"bool cairo_has_current_point(CairoContext $context)","return":"<p class=\"para\">   Whether a current point is defined  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::identityMatrix":{"id":"cairocontext.identitymatrix","purpose":"The identityMatrix purpose","prototype":"void CairoContext::identityMatrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_identity_matrix":{"id":"cairocontext.identitymatrix","purpose":"The identityMatrix purpose","prototype":"void cairo_identity_matrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::inFill":{"id":"cairocontext.infill","purpose":"The inFill purpose","prototype":"bool CairoContext::inFill(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_in_fill":{"id":"cairocontext.infill","purpose":"The inFill purpose","prototype":"bool cairo_in_fill(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::inStroke":{"id":"cairocontext.instroke","purpose":"The inStroke purpose","prototype":"bool CairoContext::inStroke(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_in_stroke":{"id":"cairocontext.instroke","purpose":"The inStroke purpose","prototype":"bool cairo_in_stroke(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::lineTo":{"id":"cairocontext.lineto","purpose":"The lineTo purpose","prototype":"void CairoContext::lineTo(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_line_to":{"id":"cairocontext.lineto","purpose":"The lineTo purpose","prototype":"void cairo_line_to(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::mask":{"id":"cairocontext.mask","purpose":"The mask purpose","prototype":"void CairoContext::mask(CairoPattern $pattern, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_mask":{"id":"cairocontext.mask","purpose":"The mask purpose","prototype":"void cairo_mask(CairoPattern $pattern, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::maskSurface":{"id":"cairocontext.masksurface","purpose":"The maskSurface purpose","prototype":"void CairoContext::maskSurface(CairoSurface $surface [, float $x = '' [, float $y = '', CairoContext $context]])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_mask_surface":{"id":"cairocontext.masksurface","purpose":"The maskSurface purpose","prototype":"void cairo_mask_surface(CairoSurface $surface [, float $x = '' [, float $y = '', CairoContext $context]])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::moveTo":{"id":"cairocontext.moveto","purpose":"The moveTo purpose","prototype":"void CairoContext::moveTo(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_move_to":{"id":"cairocontext.moveto","purpose":"The moveTo purpose","prototype":"void cairo_move_to(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::newPath":{"id":"cairocontext.newpath","purpose":"The newPath purpose","prototype":"void CairoContext::newPath(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_new_path":{"id":"cairocontext.newpath","purpose":"The newPath purpose","prototype":"void cairo_new_path(CairoContext $context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::newSubPath":{"id":"cairocontext.newsubpath","purpose":"The newSubPath purpose","prototype":"void CairoContext::newSubPath(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_new_sub_path":{"id":"cairocontext.newsubpath","purpose":"The newSubPath purpose","prototype":"void cairo_new_sub_path(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::paint":{"id":"cairocontext.paint","purpose":"The paint purpose","prototype":"void CairoContext::paint(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_paint":{"id":"cairocontext.paint","purpose":"The paint purpose","prototype":"void cairo_paint(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::paintWithAlpha":{"id":"cairocontext.paintwithalpha","purpose":"The paintWithAlpha purpose","prototype":"void CairoContext::paintWithAlpha(float $alpha, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_paint_with_alpha":{"id":"cairocontext.paintwithalpha","purpose":"The paintWithAlpha purpose","prototype":"void cairo_paint_with_alpha(float $alpha, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::pathExtents":{"id":"cairocontext.pathextents","purpose":"The pathExtents purpose","prototype":"array CairoContext::pathExtents(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_path_extents":{"id":"cairocontext.pathextents","purpose":"The pathExtents purpose","prototype":"array cairo_path_extents(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::popGroup":{"id":"cairocontext.popgroup","purpose":"The popGroup purpose","prototype":"void CairoContext::popGroup(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pop_group":{"id":"cairocontext.popgroup","purpose":"The popGroup purpose","prototype":"void cairo_pop_group(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::popGroupToSource":{"id":"cairocontext.popgrouptosource","purpose":"The popGroupToSource purpose","prototype":"void CairoContext::popGroupToSource(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_pop_group_to_source":{"id":"cairocontext.popgrouptosource","purpose":"The popGroupToSource purpose","prototype":"void cairo_pop_group_to_source(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::pushGroup":{"id":"cairocontext.pushgroup","purpose":"The pushGroup purpose","prototype":"void CairoContext::pushGroup(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_push_group":{"id":"cairocontext.pushgroup","purpose":"The pushGroup purpose","prototype":"void cairo_push_group(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::pushGroupWithContent":{"id":"cairocontext.pushgroupwithcontent","purpose":"The pushGroupWithContent purpose","prototype":"void CairoContext::pushGroupWithContent(int $content, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_push_group_with_content":{"id":"cairocontext.pushgroupwithcontent","purpose":"The pushGroupWithContent purpose","prototype":"void cairo_push_group_with_content(int $content, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::rectangle":{"id":"cairocontext.rectangle","purpose":"The rectangle purpose","prototype":"void CairoContext::rectangle(float $x, float $y, float $width, float $height, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_rectangle":{"id":"cairocontext.rectangle","purpose":"The rectangle purpose","prototype":"void cairo_rectangle(float $x, float $y, float $width, float $height, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::relCurveTo":{"id":"cairocontext.relcurveto","purpose":"The relCurveTo purpose","prototype":"void CairoContext::relCurveTo(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_rel_curve_to":{"id":"cairocontext.relcurveto","purpose":"The relCurveTo purpose","prototype":"void cairo_rel_curve_to(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::relLineTo":{"id":"cairocontext.rellineto","purpose":"The relLineTo purpose","prototype":"void CairoContext::relLineTo(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_rel_line_to":{"id":"cairocontext.rellineto","purpose":"The relLineTo purpose","prototype":"void cairo_rel_line_to(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::relMoveTo":{"id":"cairocontext.relmoveto","purpose":"The relMoveTo purpose","prototype":"void CairoContext::relMoveTo(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_rel_move_to":{"id":"cairocontext.relmoveto","purpose":"The relMoveTo purpose","prototype":"void cairo_rel_move_to(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::resetClip":{"id":"cairocontext.resetclip","purpose":"The resetClip purpose","prototype":"void CairoContext::resetClip(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_reset_clip":{"id":"cairocontext.resetclip","purpose":"The resetClip purpose","prototype":"void cairo_reset_clip(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::restore":{"id":"cairocontext.restore","purpose":"The restore purpose","prototype":"void CairoContext::restore(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_restore":{"id":"cairocontext.restore","purpose":"The restore purpose","prototype":"void cairo_restore(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::rotate":{"id":"cairocontext.rotate","purpose":"The rotate purpose","prototype":"void CairoContext::rotate(float $angle, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_rotate":{"id":"cairocontext.rotate","purpose":"The rotate purpose","prototype":"void cairo_rotate(float $angle, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::save":{"id":"cairocontext.save","purpose":"The save purpose","prototype":"void CairoContext::save(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_save":{"id":"cairocontext.save","purpose":"The save purpose","prototype":"void cairo_save(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::scale":{"id":"cairocontext.scale","purpose":"The scale purpose","prototype":"void CairoContext::scale(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_scale":{"id":"cairocontext.scale","purpose":"The scale purpose","prototype":"void cairo_scale(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::selectFontFace":{"id":"cairocontext.selectfontface","purpose":"The selectFontFace purpose","prototype":"void CairoContext::selectFontFace(string $family [, int $slant = '' [, int $weight = '', CairoContext $context]])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_select_font_face":{"id":"cairocontext.selectfontface","purpose":"The selectFontFace purpose","prototype":"void cairo_select_font_face(string $family [, int $slant = '' [, int $weight = '', CairoContext $context]])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setAntialias":{"id":"cairocontext.setantialias","purpose":"The setAntialias purpose","prototype":"void CairoContext::setAntialias([int $antialias = '', CairoContext $context])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_antialias":{"id":"cairofontoptions.setantialias","purpose":"The setAntialias purpose","prototype":"void cairo_set_antialias([int $antialias = '', CairoContext $context])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setDash":{"id":"cairocontext.setdash","purpose":"The setDash purpose","prototype":"void CairoContext::setDash(array $dashes [, float $offset = '', CairoContext $context])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_dash":{"id":"cairocontext.setdash","purpose":"The setDash purpose","prototype":"void cairo_set_dash(array $dashes [, float $offset = '', CairoContext $context])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setFillRule":{"id":"cairocontext.setfillrule","purpose":"The setFillRule purpose","prototype":"void CairoContext::setFillRule(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_fill_rule":{"id":"cairocontext.setfillrule","purpose":"The setFillRule purpose","prototype":"void cairo_set_fill_rule(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setFontFace":{"id":"cairocontext.setfontface","purpose":"The setFontFace purpose","prototype":"void CairoContext::setFontFace(CairoFontFace $fontface, CairoContext $context)","return":"<p class=\"para\">   No value is returned  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_font_face":{"id":"cairocontext.setfontface","purpose":"The setFontFace purpose","prototype":"void cairo_set_font_face(CairoFontFace $fontface, CairoContext $context)","return":"<p class=\"para\">   No value is returned  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setFontMatrix":{"id":"cairocontext.setfontmatrix","purpose":"The setFontMatrix purpose","prototype":"void CairoContext::setFontMatrix(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_font_matrix":{"id":"cairocontext.setfontmatrix","purpose":"The setFontMatrix purpose","prototype":"void cairo_set_font_matrix(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setFontOptions":{"id":"cairocontext.setfontoptions","purpose":"The setFontOptions purpose","prototype":"void CairoContext::setFontOptions(CairoFontOptions $fontoptions, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_font_options":{"id":"cairocontext.setfontoptions","purpose":"The setFontOptions purpose","prototype":"void cairo_set_font_options(CairoFontOptions $fontoptions, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setFontSize":{"id":"cairocontext.setfontsize","purpose":"The setFontSize purpose","prototype":"void CairoContext::setFontSize(float $size, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_font_size":{"id":"cairocontext.setfontsize","purpose":"The setFontSize purpose","prototype":"void cairo_set_font_size(float $size, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setLineCap":{"id":"cairocontext.setlinecap","purpose":"The setLineCap purpose","prototype":"void CairoContext::setLineCap(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_line_cap":{"id":"cairocontext.setlinecap","purpose":"The setLineCap purpose","prototype":"void cairo_set_line_cap(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setLineJoin":{"id":"cairocontext.setlinejoin","purpose":"The setLineJoin purpose","prototype":"void CairoContext::setLineJoin(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_line_join":{"id":"cairocontext.setlinejoin","purpose":"The setLineJoin purpose","prototype":"void cairo_set_line_join(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setLineWidth":{"id":"cairocontext.setlinewidth","purpose":"The setLineWidth purpose","prototype":"void CairoContext::setLineWidth(float $width, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_line_width":{"id":"cairocontext.setlinewidth","purpose":"The setLineWidth purpose","prototype":"void cairo_set_line_width(float $width, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setMatrix":{"id":"cairocontext.setmatrix","purpose":"The setMatrix purpose","prototype":"void CairoContext::setMatrix(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_matrix":{"id":"cairopattern.setmatrix","purpose":"The setMatrix purpose","prototype":"void cairo_set_matrix(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setMiterLimit":{"id":"cairocontext.setmiterlimit","purpose":"The setMiterLimit purpose","prototype":"void CairoContext::setMiterLimit(float $limit, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_miter_limit":{"id":"cairocontext.setmiterlimit","purpose":"The setMiterLimit purpose","prototype":"void cairo_set_miter_limit(float $limit, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setOperator":{"id":"cairocontext.setoperator","purpose":"The setOperator purpose","prototype":"void CairoContext::setOperator(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_operator":{"id":"cairocontext.setoperator","purpose":"The setOperator purpose","prototype":"void cairo_set_operator(int $setting, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setScaledFont":{"id":"cairocontext.setscaledfont","purpose":"The setScaledFont purpose","prototype":"void CairoContext::setScaledFont(CairoScaledFont $scaledfont, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_scaled_font":{"id":"cairocontext.setscaledfont","purpose":"The setScaledFont purpose","prototype":"void cairo_set_scaled_font(CairoScaledFont $scaledfont, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setSource":{"id":"cairocontext.setsource","purpose":"The setSource purpose","prototype":"void CairoContext::setSource(CairoPattern $pattern, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_source":{"id":"cairocontext.setsourcergba","purpose":"The setSourceRGBA purpose","prototype":"void cairo_set_source(float $red, float $green, float $blue, float $alpha, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setSourceRGB":{"id":"cairocontext.setsourcergb","purpose":"The setSourceRGB purpose","prototype":"void CairoContext::setSourceRGB(float $red, float $green, float $blue, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setSourceRGBA":{"id":"cairocontext.setsourcergba","purpose":"The setSourceRGBA purpose","prototype":"void CairoContext::setSourceRGBA(float $red, float $green, float $blue, float $alpha, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setSourceSurface":{"id":"cairocontext.setsourcesurface","purpose":"The setSourceSurface purpose","prototype":"void CairoContext::setSourceSurface(CairoSurface $surface [, float $x = '' [, float $y = '', CairoContext $context]])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_source_surface":{"id":"cairocontext.setsourcesurface","purpose":"The setSourceSurface purpose","prototype":"void cairo_set_source_surface(CairoSurface $surface [, float $x = '' [, float $y = '', CairoContext $context]])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::setTolerance":{"id":"cairocontext.settolerance","purpose":"The setTolerance purpose","prototype":"void CairoContext::setTolerance(float $tolerance, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_set_tolerance":{"id":"cairocontext.settolerance","purpose":"The setTolerance purpose","prototype":"void cairo_set_tolerance(float $tolerance, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::showPage":{"id":"cairocontext.showpage","purpose":"The showPage purpose","prototype":"void CairoContext::showPage(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_show_page":{"id":"cairosurface.showpage","purpose":"The showPage purpose","prototype":"void cairo_show_page(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::showText":{"id":"cairocontext.showtext","purpose":"The showText purpose","prototype":"void CairoContext::showText(string $text, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_show_text":{"id":"cairocontext.showtext","purpose":"The showText purpose","prototype":"void cairo_show_text(string $text, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::status":{"id":"cairocontext.status","purpose":"The status purpose","prototype":"int CairoContext::status(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_status":{"id":"cairopattern.status","purpose":"The status purpose","prototype":"int cairo_status(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::stroke":{"id":"cairocontext.stroke","purpose":"The stroke purpose","prototype":"void CairoContext::stroke(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_stroke":{"id":"cairocontext.stroke","purpose":"The stroke purpose","prototype":"void cairo_stroke(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::strokeExtents":{"id":"cairocontext.strokeextents","purpose":"The strokeExtents purpose","prototype":"array CairoContext::strokeExtents(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_stroke_extents":{"id":"cairocontext.strokeextents","purpose":"The strokeExtents purpose","prototype":"array cairo_stroke_extents(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::strokePreserve":{"id":"cairocontext.strokepreserve","purpose":"The strokePreserve purpose","prototype":"void CairoContext::strokePreserve(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_stroke_preserve":{"id":"cairocontext.strokepreserve","purpose":"The strokePreserve purpose","prototype":"void cairo_stroke_preserve(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::textExtents":{"id":"cairocontext.textextents","purpose":"The textExtents purpose","prototype":"array CairoContext::textExtents(string $text, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_text_extents":{"id":"cairoscaledfont.textextents","purpose":"The textExtents purpose","prototype":"array cairo_text_extents(string $text, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::textPath":{"id":"cairocontext.textpath","purpose":"The textPath purpose","prototype":"void CairoContext::textPath(string $string, CairoContext $context, string $text)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_text_path":{"id":"cairocontext.textpath","purpose":"The textPath purpose","prototype":"void cairo_text_path(string $string, CairoContext $context, string $text)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::transform":{"id":"cairocontext.transform","purpose":"The transform purpose","prototype":"void CairoContext::transform(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_transform":{"id":"cairocontext.transform","purpose":"The transform purpose","prototype":"void cairo_transform(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::translate":{"id":"cairocontext.translate","purpose":"The translate purpose","prototype":"void CairoContext::translate(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_translate":{"id":"cairomatrix.translate","purpose":"The translate purpose","prototype":"void cairo_translate(float $tx, float $ty, CairoContext $context, float $x, float $y)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::userToDevice":{"id":"cairocontext.usertodevice","purpose":"The userToDevice purpose","prototype":"array CairoContext::userToDevice(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_user_to_device":{"id":"cairocontext.usertodevice","purpose":"The userToDevice purpose","prototype":"array cairo_user_to_device(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoContext::userToDeviceDistance":{"id":"cairocontext.usertodevicedistance","purpose":"The userToDeviceDistance purpose","prototype":"array CairoContext::userToDeviceDistance(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_user_to_device_distance":{"id":"cairocontext.usertodevicedistance","purpose":"The userToDeviceDistance purpose","prototype":"array cairo_user_to_device_distance(float $x, float $y, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::__construct":{"id":"cairosurface.construct","purpose":"The __construct purpose","prototype":" CairoSurface::__construct()","return":"<p class=\"para\">   No return value  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::copyPage":{"id":"cairosurface.copypage","purpose":"The copyPage purpose","prototype":"void CairoSurface::copyPage(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::createSimilar":{"id":"cairosurface.createsimilar","purpose":"The createSimilar purpose","prototype":"void CairoSurface::createSimilar(CairoSurface $other, int $content, string $width, string $height)","return":"<p class=\"para\">   A new CairoSurface  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::finish":{"id":"cairosurface.finish","purpose":"The finish purpose","prototype":"void CairoSurface::finish()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::flush":{"id":"cairosurface.flush","purpose":"The flush purpose","prototype":"void CairoSurface::flush()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::getContent":{"id":"cairosurface.getcontent","purpose":"The getContent purpose","prototype":"int CairoSurface::getContent()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::getDeviceOffset":{"id":"cairosurface.getdeviceoffset","purpose":"The getDeviceOffset purpose","prototype":"array CairoSurface::getDeviceOffset()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::getFontOptions":{"id":"cairosurface.getfontoptions","purpose":"The getFontOptions purpose","prototype":"void CairoSurface::getFontOptions(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::getType":{"id":"cairosurface.gettype","purpose":"The getType purpose","prototype":"int CairoSurface::getType()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::markDirty":{"id":"cairosurface.markdirty","purpose":"The markDirty purpose","prototype":"void CairoSurface::markDirty()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::markDirtyRectangle":{"id":"cairosurface.markdirtyrectangle","purpose":"The markDirtyRectangle purpose","prototype":"void CairoSurface::markDirtyRectangle(float $x, float $y, float $width, float $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::setDeviceOffset":{"id":"cairosurface.setdeviceoffset","purpose":"The setDeviceOffset purpose","prototype":"void CairoSurface::setDeviceOffset(float $x, float $y)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::setFallbackResolution":{"id":"cairosurface.setfallbackresolution","purpose":"The setFallbackResolution purpose","prototype":"void CairoSurface::setFallbackResolution(float $x, float $y)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::showPage":{"id":"cairosurface.showpage","purpose":"The showPage purpose","prototype":"void CairoSurface::showPage(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::status":{"id":"cairosurface.status","purpose":"The status purpose","prototype":"int CairoSurface::status(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurface::writeToPng":{"id":"cairosurface.writetopng","purpose":"The writeToPng purpose","prototype":"void CairoSurface::writeToPng(string $file)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSvgSurface::__construct":{"id":"cairosvgsurface.construct","purpose":"The __construct purpose","prototype":" CairoSvgSurface::__construct(string $file, float $width, float $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSvgSurface::getVersions":{"id":"cairosvgsurface.getversions","purpose":"Used to retrieve a list of supported SVG versions","prototype":"array CairoSvgSurface::getVersions()","return":"<p class=\"para\">   Returns a numerically indexed array of integer values.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_svg_surface_get_versions":{"id":"cairosvgsurface.getversions","purpose":"Used to retrieve a list of supported SVG versions","prototype":"array cairo_svg_surface_get_versions()","return":"<p class=\"para\">   Returns a numerically indexed array of integer values.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSvgSurface::restrictToVersion":{"id":"cairosvgsurface.restricttoversion","purpose":"The restrictToVersion purpose","prototype":"void CairoSvgSurface::restrictToVersion(int $version)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSvgSurface::versionToString":{"id":"cairosvgsurface.versiontostring","purpose":"The versionToString purpose","prototype":"string CairoSvgSurface::versionToString(int $version)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::__construct":{"id":"cairoimagesurface.construct","purpose":"Creates a new CairoImageSurface","prototype":" CairoImageSurface::__construct(int $format, int $width, int $height)","return":"<p class=\"para\">   A new CairoImageSurface  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::createForData":{"id":"cairoimagesurface.createfordata","purpose":"The createForData purpose","prototype":"void CairoImageSurface::createForData(string $data, int $format, int $width, int $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::createFromPng":{"id":"cairoimagesurface.createfrompng","purpose":"Creates a new CairoImageSurface form a png image file","prototype":"CairoImageSurface CairoImageSurface::createFromPng(string $file)","return":"<p class=\"para\">   <span class=\"classname\">CairoImageSurface<\/span> object  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::getData":{"id":"cairoimagesurface.getdata","purpose":"Gets the image data as string","prototype":"string CairoImageSurface::getData()","return":"<p class=\"para\">   The image data as string  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::getFormat":{"id":"cairoimagesurface.getformat","purpose":"Get the image format","prototype":"int CairoImageSurface::getFormat()","return":"<p class=\"para\">   One of the <span class=\"classname\">CairoFormat<\/span> enums  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::getHeight":{"id":"cairoimagesurface.getheight","purpose":"Retrieves the height of the CairoImageSurface","prototype":"int CairoImageSurface::getHeight()","return":"<p class=\"para\">   CairoImageSurface object height  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::getStride":{"id":"cairoimagesurface.getstride","purpose":"The getStride purpose","prototype":"int CairoImageSurface::getStride()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoImageSurface::getWidth":{"id":"cairoimagesurface.getwidth","purpose":"Retrieves the width of the CairoImageSurface","prototype":"int CairoImageSurface::getWidth()","return":"<p class=\"para\">   Returns the width of the CairoImageSurface object  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPdfSurface::__construct":{"id":"cairopdfsurface.construct","purpose":"The __construct purpose","prototype":" CairoPdfSurface::__construct(string $file, float $width, float $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPdfSurface::setSize":{"id":"cairopdfsurface.setsize","purpose":"The setSize purpose","prototype":"void CairoPdfSurface::setSize(float $width, float $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::__construct":{"id":"cairopssurface.construct","purpose":"The __construct purpose","prototype":" CairoPsSurface::__construct(string $file, float $width, float $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::dscBeginPageSetup":{"id":"cairopssurface.dscbeginpagesetup","purpose":"The dscBeginPageSetup purpose","prototype":"void CairoPsSurface::dscBeginPageSetup()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::dscBeginSetup":{"id":"cairopssurface.dscbeginsetup","purpose":"The dscBeginSetup purpose","prototype":"void CairoPsSurface::dscBeginSetup()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::dscComment":{"id":"cairopssurface.dsccomment","purpose":"The dscComment purpose","prototype":"void CairoPsSurface::dscComment(string $comment)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::getEps":{"id":"cairopssurface.geteps","purpose":"The getEps purpose","prototype":"bool CairoPsSurface::getEps()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::getLevels":{"id":"cairopssurface.getlevels","purpose":"The getLevels purpose","prototype":"array CairoPsSurface::getLevels()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::levelToString":{"id":"cairopssurface.leveltostring","purpose":"The levelToString purpose","prototype":"string CairoPsSurface::levelToString(int $level)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::restrictToLevel":{"id":"cairopssurface.restricttolevel","purpose":"The restrictToLevel purpose","prototype":"void CairoPsSurface::restrictToLevel(int $level)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::setEps":{"id":"cairopssurface.seteps","purpose":"The setEps purpose","prototype":"void CairoPsSurface::setEps(bool $level)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPsSurface::setSize":{"id":"cairopssurface.setsize","purpose":"The setSize purpose","prototype":"void CairoPsSurface::setSize(float $width, float $height)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontFace::__construct":{"id":"cairofontface.construct","purpose":"Creates a new CairoFontFace object","prototype":" CairoFontFace::__construct()","return":"<p class=\"para\">   <span class=\"classname\">CairoFontFace<\/span>  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontFace::getType":{"id":"cairofontface.gettype","purpose":"Retrieves the font face type","prototype":"int CairoFontFace::getType(CairoFontFace $fontface)","return":"<p class=\"para\">   A font type that can be any one defined in <span class=\"classname\">CairoFontType<\/span>  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_face_get_type":{"id":"cairofontface.gettype","purpose":"Retrieves the font face type","prototype":"int cairo_font_face_get_type(CairoFontFace $fontface)","return":"<p class=\"para\">   A font type that can be any one defined in <span class=\"classname\">CairoFontType<\/span>  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontFace::status":{"id":"cairofontface.status","purpose":"Check for CairoFontFace errors","prototype":"int CairoFontFace::status(CairoFontFace $fontface)","return":"<p class=\"para\">   CAIRO_STATUS_SUCCESS or another error such as CAIRO_STATUS_NO_MEMORY.   <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_font_face_status":{"id":"cairofontface.status","purpose":"Check for CairoFontFace errors","prototype":"int cairo_font_face_status(CairoFontFace $fontface)","return":"<p class=\"para\">   CAIRO_STATUS_SUCCESS or another error such as CAIRO_STATUS_NO_MEMORY.   <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::__construct":{"id":"cairofontoptions.construct","purpose":"The __construct purpose","prototype":" CairoFontOptions::__construct()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::equal":{"id":"cairofontoptions.equal","purpose":"The equal purpose","prototype":"bool CairoFontOptions::equal(CairoFontOptions $other)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::getAntialias":{"id":"cairofontoptions.getantialias","purpose":"The getAntialias purpose","prototype":"int CairoFontOptions::getAntialias(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::getHintMetrics":{"id":"cairofontoptions.gethintmetrics","purpose":"The getHintMetrics purpose","prototype":"int CairoFontOptions::getHintMetrics()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::getHintStyle":{"id":"cairofontoptions.gethintstyle","purpose":"The getHintStyle purpose","prototype":"int CairoFontOptions::getHintStyle()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::getSubpixelOrder":{"id":"cairofontoptions.getsubpixelorder","purpose":"The getSubpixelOrder purpose","prototype":"int CairoFontOptions::getSubpixelOrder()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::hash":{"id":"cairofontoptions.hash","purpose":"The hash purpose","prototype":"int CairoFontOptions::hash()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::merge":{"id":"cairofontoptions.merge","purpose":"The merge purpose","prototype":"void CairoFontOptions::merge(CairoFontOptions $other)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::setAntialias":{"id":"cairofontoptions.setantialias","purpose":"The setAntialias purpose","prototype":"void CairoFontOptions::setAntialias([int $antialias = '', CairoContext $context])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::setHintMetrics":{"id":"cairofontoptions.sethintmetrics","purpose":"The setHintMetrics purpose","prototype":"void CairoFontOptions::setHintMetrics(int $hint_metrics)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::setHintStyle":{"id":"cairofontoptions.sethintstyle","purpose":"The setHintStyle purpose","prototype":"void CairoFontOptions::setHintStyle(int $hint_style)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::setSubpixelOrder":{"id":"cairofontoptions.setsubpixelorder","purpose":"The setSubpixelOrder purpose","prototype":"void CairoFontOptions::setSubpixelOrder(int $subpixel_order)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFontOptions::status":{"id":"cairofontoptions.status","purpose":"The status purpose","prototype":"int CairoFontOptions::status(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::__construct":{"id":"cairoscaledfont.construct","purpose":"The __construct purpose","prototype":" CairoScaledFont::__construct(CairoFontFace $font_face, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $options)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::extents":{"id":"cairoscaledfont.extents","purpose":"The extents purpose","prototype":"array CairoScaledFont::extents()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::getCtm":{"id":"cairoscaledfont.getctm","purpose":"The getCtm purpose","prototype":"CairoMatrix CairoScaledFont::getCtm()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::getFontFace":{"id":"cairoscaledfont.getfontface","purpose":"The getFontFace purpose","prototype":"void CairoScaledFont::getFontFace(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::getFontMatrix":{"id":"cairoscaledfont.getfontmatrix","purpose":"The getFontMatrix purpose","prototype":"void CairoScaledFont::getFontMatrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::getFontOptions":{"id":"cairoscaledfont.getfontoptions","purpose":"The getFontOptions purpose","prototype":"void CairoScaledFont::getFontOptions(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::getScaleMatrix":{"id":"cairoscaledfont.getscalematrix","purpose":"The getScaleMatrix purpose","prototype":"void CairoScaledFont::getScaleMatrix()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::getType":{"id":"cairoscaledfont.gettype","purpose":"The getType purpose","prototype":"int CairoScaledFont::getType()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::glyphExtents":{"id":"cairoscaledfont.glyphextents","purpose":"The glyphExtents purpose","prototype":"array CairoScaledFont::glyphExtents(array $glyphs)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::status":{"id":"cairoscaledfont.status","purpose":"The status purpose","prototype":"int CairoScaledFont::status(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoScaledFont::textExtents":{"id":"cairoscaledfont.textextents","purpose":"The textExtents purpose","prototype":"array CairoScaledFont::textExtents(string $text, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPattern::__construct":{"id":"cairopattern.construct","purpose":"The __construct purpose","prototype":" CairoPattern::__construct()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPattern::getMatrix":{"id":"cairopattern.getmatrix","purpose":"The getMatrix purpose","prototype":"void CairoPattern::getMatrix(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPattern::getType":{"id":"cairopattern.gettype","purpose":"The getType purpose","prototype":"int CairoPattern::getType()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPattern::setMatrix":{"id":"cairopattern.setmatrix","purpose":"The setMatrix purpose","prototype":"void CairoPattern::setMatrix(CairoMatrix $matrix, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoPattern::status":{"id":"cairopattern.status","purpose":"The status purpose","prototype":"int CairoPattern::status(CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoGradientPattern::addColorStopRgb":{"id":"cairogradientpattern.addcolorstoprgb","purpose":"The addColorStopRgb purpose","prototype":"void CairoGradientPattern::addColorStopRgb(float $offset, float $red, float $green, float $blue)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoGradientPattern::addColorStopRgba":{"id":"cairogradientpattern.addcolorstoprgba","purpose":"The addColorStopRgba purpose","prototype":"void CairoGradientPattern::addColorStopRgba(float $offset, float $red, float $green, float $blue, float $alpha)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoGradientPattern::getColorStopCount":{"id":"cairogradientpattern.getcolorstopcount","purpose":"The getColorStopCount purpose","prototype":"int CairoGradientPattern::getColorStopCount()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoGradientPattern::getColorStopRgba":{"id":"cairogradientpattern.getcolorstoprgba","purpose":"The getColorStopRgba purpose","prototype":"array CairoGradientPattern::getColorStopRgba(int $index)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoGradientPattern::getExtend":{"id":"cairogradientpattern.getextend","purpose":"The getExtend purpose","prototype":"int CairoGradientPattern::getExtend()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoGradientPattern::setExtend":{"id":"cairogradientpattern.setextend","purpose":"The setExtend purpose","prototype":"void CairoGradientPattern::setExtend(int $extend)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSolidPattern::__construct":{"id":"cairosolidpattern.construct","purpose":"The __construct purpose","prototype":" CairoSolidPattern::__construct(float $red, float $green, float $blue [, float $alpha = ''])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSolidPattern::getRgba":{"id":"cairosolidpattern.getrgba","purpose":"The getRgba purpose","prototype":"array CairoSolidPattern::getRgba()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurfacePattern::__construct":{"id":"cairosurfacepattern.construct","purpose":"The __construct purpose","prototype":" CairoSurfacePattern::__construct(CairoSurface $surface)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurfacePattern::getExtend":{"id":"cairosurfacepattern.getextend","purpose":"The getExtend purpose","prototype":"int CairoSurfacePattern::getExtend()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurfacePattern::getFilter":{"id":"cairosurfacepattern.getfilter","purpose":"The getFilter purpose","prototype":"int CairoSurfacePattern::getFilter()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurfacePattern::getSurface":{"id":"cairosurfacepattern.getsurface","purpose":"The getSurface purpose","prototype":"void CairoSurfacePattern::getSurface()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurfacePattern::setExtend":{"id":"cairosurfacepattern.setextend","purpose":"The setExtend purpose","prototype":"void CairoSurfacePattern::setExtend(int $extend)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoSurfacePattern::setFilter":{"id":"cairosurfacepattern.setfilter","purpose":"The setFilter purpose","prototype":"void CairoSurfacePattern::setFilter(int $filter)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoLinearGradient::__construct":{"id":"cairolineargradient.construct","purpose":"The __construct purpose","prototype":" CairoLinearGradient::__construct(float $x0, float $y0, float $x1, float $y1)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoLinearGradient::getPoints":{"id":"cairolineargradient.getpoints","purpose":"The getPoints purpose","prototype":"array CairoLinearGradient::getPoints()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoRadialGradient::__construct":{"id":"cairoradialgradient.construct","purpose":"The __construct purpose","prototype":"CairoPattern CairoRadialGradient::__construct(float $x0, float $y0, float $r0, float $x1, float $y1, float $r1)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoRadialGradient::getCircles":{"id":"cairoradialgradient.getcircles","purpose":"The getCircles purpose","prototype":"array CairoRadialGradient::getCircles()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoFormat::strideForWidth":{"id":"cairoformat.strideforwidth","purpose":"Provides an appropiate stride to use","prototype":"int CairoFormat::strideForWidth(int $format, int $width)","return":"<p class=\"para\">  The appropriate stride to use given the desired format and width,  or -1 if either the format is invalid or the width too large.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::__construct":{"id":"cairomatrix.construct","purpose":"Creates a new CairoMatrix object","prototype":"object CairoMatrix::__construct([float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]])","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_init":{"id":"cairomatrix.construct","purpose":"Creates a new CairoMatrix object","prototype":"object cairo_matrix_init([float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]])","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::initIdentity":{"id":"cairomatrix.initidentity","purpose":"Creates a new identity matrix","prototype":"object CairoMatrix::initIdentity()","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_init_identity":{"id":"cairomatrix.initidentity","purpose":"Creates a new identity matrix","prototype":"object cairo_matrix_init_identity()","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::initRotate":{"id":"cairomatrix.initrotate","purpose":"Creates a new rotated matrix","prototype":"object CairoMatrix::initRotate(float $radians)","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_init_rotate":{"id":"cairomatrix.initrotate","purpose":"Creates a new rotated matrix","prototype":"object cairo_matrix_init_rotate(float $radians)","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::initScale":{"id":"cairomatrix.initscale","purpose":"Creates a new scaling matrix","prototype":"object CairoMatrix::initScale(float $sx, float $sy)","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_init_scale":{"id":"cairomatrix.initscale","purpose":"Creates a new scaling matrix","prototype":"object cairo_matrix_init_scale(float $sx, float $sy)","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::initTranslate":{"id":"cairomatrix.inittranslate","purpose":"Creates a new translation matrix","prototype":"object CairoMatrix::initTranslate(float $tx, float $ty)","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_init_translate":{"id":"cairomatrix.inittranslate","purpose":"Creates a new translation matrix","prototype":"object cairo_matrix_init_translate(float $tx, float $ty)","return":"<p class=\"para\">   Returns a new CairoMatrix object that can be used with surfaces, contexts, and patterns.  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::invert":{"id":"cairomatrix.invert","purpose":"The invert purpose","prototype":"void CairoMatrix::invert()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::multiply":{"id":"cairomatrix.multiply","purpose":"The multiply purpose","prototype":"CairoMatrix CairoMatrix::multiply(CairoMatrix $matrix1, CairoMatrix $matrix2)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::rotate":{"id":"cairomatrix.rotate","purpose":"The rotate purpose","prototype":"void CairoMatrix::rotate(string $radians, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_rotate":{"id":"cairomatrix.rotate","purpose":"The rotate purpose","prototype":"void cairo_matrix_rotate(string $radians, CairoContext $context)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::scale":{"id":"cairomatrix.scale","purpose":"Applies scaling to a matrix","prototype":"void CairoMatrix::scale(float $sx, float $sy, CairoContext $context)","return":"","versions":"PECL cairo >= 0.1.0"},"cairo_matrix_scale":{"id":"cairomatrix.scale","purpose":"Applies scaling to a matrix","prototype":"void cairo_matrix_scale(float $sx, float $sy, CairoContext $context)","return":"","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::transformDistance":{"id":"cairomatrix.transformdistance","purpose":"The transformDistance purpose","prototype":"array CairoMatrix::transformDistance(float $dx, float $dy)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::transformPoint":{"id":"cairomatrix.transformpoint","purpose":"The transformPoint purpose","prototype":"array CairoMatrix::transformPoint(float $dx, float $dy)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"CairoMatrix::translate":{"id":"cairomatrix.translate","purpose":"The translate purpose","prototype":"void CairoMatrix::translate(float $tx, float $ty, CairoContext $context, float $x, float $y)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL cairo >= 0.1.0"},"exif_imagetype":{"id":"function.exif-imagetype","purpose":"Determine the type of an image","prototype":"int exif_imagetype(string $filename)","return":"<p class=\"para\">    When a correct signature is found, the appropriate constant value will be    returned otherwise the return value is <strong><code>FALSE<\/code><\/strong>. The return value is the    same value that <span class=\"function\">getimagesize<\/span> returns in index 2 but    <span class=\"function\">exif_imagetype<\/span> is much faster.   <\/p>   <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">     <span class=\"function\">exif_imagetype<\/span> will emit an <strong><code>E_NOTICE<\/code><\/strong>     and return <strong><code>FALSE<\/code><\/strong> if it is unable to read enough bytes from the file to     determine the image type.         <\/p>   <\/p><\/blockquote>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"exif_read_data":{"id":"function.exif-read-data","purpose":"Reads the EXIF headers from an image file","prototype":"array exif_read_data(mixed $stream [, string $sections = '' [, bool $arrays = '' [, bool $thumbnail = '']]])","return":"<p class=\"para\">   It returns an associative <span class=\"type\">array<\/span> where the array indexes are    the header names and the array values are the values associated with    those headers. If no data can be returned,    <span class=\"function\">exif_read_data<\/span> will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"exif_tagname":{"id":"function.exif-tagname","purpose":"Get the header name for an index","prototype":"string exif_tagname(int $index)","return":"<p class=\"para\">   Returns the header name, or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">index<\/code> is   not a defined EXIF tag id.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"exif_thumbnail":{"id":"function.exif-thumbnail","purpose":"Retrieve the embedded thumbnail of an image","prototype":"string exif_thumbnail(mixed $stream [, int $width = '' [, int $height = '' [, int $imagetype = '']]])","return":"<p class=\"para\">   Returns the embedded thumbnail, or <strong><code>FALSE<\/code><\/strong> if the image contains no    thumbnail.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"read_exif_data":{"id":"function.read-exif-data","purpose":"Alias of exif_read_data","prototype":" read_exif_data()","return":"","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"gd_info":{"id":"function.gd-info","purpose":"Retrieve information about the currently installed GD library","prototype":"array gd_info()","return":"<p class=\"para\">   Returns an associative array.  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Elements of array returned by <span class=\"function\">gd_info<\/span><\/strong><\/caption>         <thead>      <tr>       <th>Attribute<\/th>       <th>Meaning<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>GD Version<\/td>       <td><span class=\"type\">string<\/span> value describing the installed        <em>libgd<\/em> version.<\/td>      <\/tr>      <tr>       <td>FreeType Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if FreeType Support is installed.<\/td>      <\/tr>      <tr>       <td>FreeType Linkage<\/td>       <td><span class=\"type\">string<\/span> value describing the way in which        FreeType was linked. Expected values are: &#039;with freetype&#039;,        &#039;with TTF library&#039;, and &#039;with unknown library&#039;.  This element will        only be defined if <em>FreeType Support<\/em> evaluated to        <strong><code>TRUE<\/code><\/strong>.<\/td>      <\/tr>      <tr>       <td>T1Lib Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if <em>T1Lib<\/em> support is included.<\/td>      <\/tr>      <tr>       <td>GIF Read Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if support for <em class=\"emphasis\">reading<\/em> <em>GIF<\/em>        images is included.<\/td>      <\/tr>      <tr>       <td>GIF Create Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if support for <em class=\"emphasis\">creating<\/em> <em>GIF<\/em>        images is included.<\/td>      <\/tr>      <tr>       <td>JPEG Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if <em>JPEG<\/em> support is included.<\/td>      <\/tr>      <tr>       <td>PNG Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if <em>PNG<\/em> support is included.<\/td>      <\/tr>      <tr>       <td>WBMP Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if <em>WBMP<\/em> support is included.<\/td>      <\/tr>      <tr>       <td>XBM Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if <em>XBM<\/em> support is included.<\/td>      <\/tr>      <tr>       <td>WebP Support<\/td>       <td><span class=\"type\">boolean<\/span> value.  <strong><code>TRUE<\/code><\/strong>        if <em>WebP<\/em> support is included.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Previous to PHP 5.3.0, the <em>JPEG Support<\/em> attribute was named    <em>JPG Support<\/em>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"getimagesize":{"id":"function.getimagesize","purpose":"Get the size of an image","prototype":"array getimagesize(string $filename [, array $imageinfo = ''])","return":"<p class=\"para\">   Returns an array with up to 7 elements. Not all image types will include   the <em>channels<\/em> and <em>bits<\/em> elements.  <\/p>  <p class=\"para\">   Index 0 and 1 contains respectively the width and the height of the image.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Some formats may contain no image or may contain multiple images. In these    cases, <span class=\"function\">getimagesize<\/span> might not be able to properly    determine the image size. <span class=\"function\">getimagesize<\/span> will return    zero for width and height in these cases.   <\/p>  <\/p><\/blockquote>  <p class=\"para\">   Index 2 is one of the <a href=\"image.constants.html\" class=\"link\">IMAGETYPE_XXX constants<\/a> indicating    the type of the image.  <\/p>  <p class=\"para\">   Index 3 is a text string with the correct    <em>height=&quot;yyy&quot; width=&quot;xxx&quot;<\/em> string that can be used   directly in an <acronym class=\"acronym\">IMG<\/acronym> tag.  <\/p>  <p class=\"para\">   <em>mime<\/em> is the correspondant MIME type of the image.   This information can be used to deliver images with the correct HTTP    <em>Content-type<\/em> header:   <div class=\"example\" id=\"install.unix.nginx.build.php\">    <p><strong>Example # <span class=\"function\">getimagesize<\/span> and MIME types<\/strong><\/p>    <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$size&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">getimagesize<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$filename<\/span><span style=\"color: #007700\">);<br \/><\/span><span style=\"color: #0000BB\">$fp&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">fopen<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$filename<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #DD0000\">\"rb\"<\/span><span style=\"color: #007700\">);<br \/>if&nbsp;(<\/span><span style=\"color: #0000BB\">$size&nbsp;<\/span><span style=\"color: #007700\">&amp;&amp;&nbsp;<\/span><span style=\"color: #0000BB\">$fp<\/span><span style=\"color: #007700\">)&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">header<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #DD0000\">\"Content-type:&nbsp;<\/span><span style=\"color: #007700\">{<\/span><span style=\"color: #0000BB\">$size<\/span><span style=\"color: #007700\">[<\/span><span style=\"color: #DD0000\">'mime'<\/span><span style=\"color: #007700\">]}<\/span><span style=\"color: #DD0000\">\"<\/span><span style=\"color: #007700\">);<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">fpassthru<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$fp<\/span><span style=\"color: #007700\">);<br \/>&nbsp;&nbsp;&nbsp;&nbsp;exit;<br \/>}&nbsp;else&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;error<br \/><\/span><span style=\"color: #007700\">}<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>    <\/div>   <\/div>  <\/p>  <p class=\"para\">   <em>channels<\/em> will be 3 for RGB pictures and 4 for CMYK   pictures.  <\/p>  <p class=\"para\">   <em>bits<\/em> is the number of bits for each color.  <\/p>  <p class=\"para\">   For some image types, the presence of <em>channels<\/em> and   <em>bits<\/em> values can be a bit   confusing. As an example, <acronym class=\"acronym\">GIF<\/acronym> always uses 3 channels   per pixel, but the number of bits per pixel cannot be calculated for an   animated <acronym class=\"acronym\">GIF<\/acronym> with a global color table.  <\/p>  <p class=\"para\">   On failure, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getimagesizefromstring":{"id":"function.getimagesizefromstring","purpose":"Get the size of an image from a string","prototype":"array getimagesizefromstring(string $imagedata [, array $imageinfo = ''])","return":"<p class=\"para\">   See <span class=\"function\">getimagesize<\/span>.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"image_type_to_extension":{"id":"function.image-type-to-extension","purpose":"Get file extension for image type","prototype":"string image_type_to_extension(int $imagetype [, bool $include_dot = ''])","return":"<p class=\"para\">   A string with the extension corresponding to the given image type.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"image_type_to_mime_type":{"id":"function.image-type-to-mime-type","purpose":"Get Mime-Type for image-type returned by getimagesize,   exif_read_data, exif_thumbnail, exif_imagetype","prototype":"string image_type_to_mime_type(int $imagetype)","return":"<p class=\"para\">   The returned values are as follows   <table class=\"doctable table\">   <caption><strong>Returned values Constants<\/strong><\/caption>         <thead>      <tr>       <th><code class=\"parameter\">imagetype<\/code><\/th>       <th>Returned value<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><strong><code>IMAGETYPE_GIF<\/code><\/strong><\/td>       <td><em>image\/gif<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_JPEG<\/code><\/strong><\/td>       <td><em>image\/jpeg<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_PNG<\/code><\/strong><\/td>       <td><em>image\/png<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_SWF<\/code><\/strong><\/td>       <td><em>application\/x-shockwave-flash<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_PSD<\/code><\/strong><\/td>       <td><em>image\/psd<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_BMP<\/code><\/strong><\/td>       <td><em>image\/bmp<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_TIFF_II<\/code><\/strong> (intel byte order)<\/td>       <td><em>image\/tiff<\/em><\/td>      <\/tr>      <tr>       <td>        <strong><code>IMAGETYPE_TIFF_MM<\/code><\/strong> (motorola byte order)       <\/td>       <td><em>image\/tiff<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_JPC<\/code><\/strong><\/td>       <td><em>application\/octet-stream<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_JP2<\/code><\/strong><\/td>       <td><em>image\/jp2<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_JPX<\/code><\/strong><\/td>       <td><em>application\/octet-stream<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_JB2<\/code><\/strong><\/td>       <td><em>application\/octet-stream<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_SWC<\/code><\/strong><\/td>       <td><em>application\/x-shockwave-flash<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_IFF<\/code><\/strong><\/td>       <td><em>image\/iff<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_WBMP<\/code><\/strong><\/td>       <td><em>image\/vnd.wap.wbmp<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_XBM<\/code><\/strong><\/td>       <td><em>image\/xbm<\/em><\/td>      <\/tr>      <tr>       <td><strong><code>IMAGETYPE_ICO<\/code><\/strong><\/td>       <td><em>image\/vnd.microsoft.icon<\/em><\/td>      <\/tr>       <tr>       <td><strong><code>IMAGETYPE_WEBP<\/code><\/strong><\/td>       <td><em>image\/webp<\/em><\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"image2wbmp":{"id":"function.image2wbmp","purpose":"Output image to browser or file","prototype":"bool image2wbmp(resource $image [, string $filename = '' [, int $threshold = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"imageaffine":{"id":"function.imageaffine","purpose":"Return an image containing the affine transformed src image, using an optional clipping area","prototype":"resource imageaffine(resource $image, array $affine [, array $clip = ''])","return":"<p class=\"para\">   Return affined image resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imageaffinematrixconcat":{"id":"function.imageaffinematrixconcat","purpose":"Concatenate two affine transformation matrices","prototype":"array imageaffinematrixconcat(array $m1, array $m2)","return":"<p class=\"para\">   An affine transformation matrix (an array with keys   <em>0<\/em> to <em>5<\/em> and float values)    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imageaffinematrixget":{"id":"function.imageaffinematrixget","purpose":"Get an affine transformation matrix","prototype":"array imageaffinematrixget(int $type [, mixed $options = ''])","return":"<p class=\"para\">   An affine transformation matrix (an array with keys   <em>0<\/em> to <em>5<\/em> and float values)    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagealphablending":{"id":"function.imagealphablending","purpose":"Set the blending mode for an image","prototype":"bool imagealphablending(resource $image, bool $blendmode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imageantialias":{"id":"function.imageantialias","purpose":"Should antialias functions be used or not","prototype":"bool imageantialias(resource $image, bool $enabled)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"imagearc":{"id":"function.imagearc","purpose":"Draws an arc","prototype":"bool imagearc(resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagebmp":{"id":"function.imagebmp","purpose":"Output a BMP image to browser or file","prototype":"bool imagebmp(resource $image [, mixed $to = '' [, bool $compressed = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 7 >= 7.2.0"},"imagechar":{"id":"function.imagechar","purpose":"Draw a character horizontally","prototype":"bool imagechar(resource $image, int $font, int $x, int $y, string $c, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecharup":{"id":"function.imagecharup","purpose":"Draw a character vertically","prototype":"bool imagecharup(resource $image, int $font, int $x, int $y, string $c, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorallocate":{"id":"function.imagecolorallocate","purpose":"Allocate a color for an image","prototype":"int imagecolorallocate(resource $image, int $red, int $green, int $blue)","return":"<p class=\"para\">   A color identifier or <strong><code>FALSE<\/code><\/strong> if the allocation failed.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorallocatealpha":{"id":"function.imagecolorallocatealpha","purpose":"Allocate a color for an image","prototype":"int imagecolorallocatealpha(resource $image, int $red, int $green, int $blue, int $alpha)","return":"<p class=\"para\">   A color identifier or <strong><code>FALSE<\/code><\/strong> if the allocation failed.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"imagecolorat":{"id":"function.imagecolorat","purpose":"Get the index of the color of a pixel","prototype":"int imagecolorat(resource $image, int $x, int $y)","return":"<p class=\"para\">   Returns the index of the color  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorclosest":{"id":"function.imagecolorclosest","purpose":"Get the index of the closest color to the specified color","prototype":"int imagecolorclosest(resource $image, int $red, int $green, int $blue)","return":"<p class=\"para\">   Returns the index of the closest color, in the palette of the image, to   the specified one  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorclosestalpha":{"id":"function.imagecolorclosestalpha","purpose":"Get the index of the closest color to the specified color + alpha","prototype":"int imagecolorclosestalpha(resource $image, int $red, int $green, int $blue, int $alpha)","return":"<p class=\"para\">   Returns the index of the closest color in the palette.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagecolorclosesthwb":{"id":"function.imagecolorclosesthwb","purpose":"Get the index of the color which has the hue, white and blackness","prototype":"int imagecolorclosesthwb(resource $image, int $red, int $green, int $blue)","return":"<p class=\"para\">   Returns an integer with the index of the color which has    the hue, white and blackness nearest the given color.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagecolordeallocate":{"id":"function.imagecolordeallocate","purpose":"De-allocate a color for an image","prototype":"bool imagecolordeallocate(resource $image, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorexact":{"id":"function.imagecolorexact","purpose":"Get the index of the specified color","prototype":"int imagecolorexact(resource $image, int $red, int $green, int $blue)","return":"<p class=\"para\">   Returns the index of the specified color in the palette, or -1 if the   color does not exist.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorexactalpha":{"id":"function.imagecolorexactalpha","purpose":"Get the index of the specified color + alpha","prototype":"int imagecolorexactalpha(resource $image, int $red, int $green, int $blue, int $alpha)","return":"<p class=\"para\">   Returns the index of the specified color+alpha in the palette of the   image, or -1 if the color does not exist in the image&#039;s palette.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagecolormatch":{"id":"function.imagecolormatch","purpose":"Makes the colors of the palette version of an image more closely match the true color version","prototype":"bool imagecolormatch(resource $image1, resource $image2)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"imagecolorresolve":{"id":"function.imagecolorresolve","purpose":"Get the index of the specified color or its closest possible alternative","prototype":"int imagecolorresolve(resource $image, int $red, int $green, int $blue)","return":"<p class=\"para\">   Returns a color index.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorresolvealpha":{"id":"function.imagecolorresolvealpha","purpose":"Get the index of the specified color + alpha or its closest possible alternative","prototype":"int imagecolorresolvealpha(resource $image, int $red, int $green, int $blue, int $alpha)","return":"<p class=\"para\">   Returns a color index.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagecolorset":{"id":"function.imagecolorset","purpose":"Set the color for the specified palette index","prototype":"void imagecolorset(resource $image, int $index, int $red, int $green, int $blue [, int $alpha = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorsforindex":{"id":"function.imagecolorsforindex","purpose":"Get the colors for an index","prototype":"array imagecolorsforindex(resource $image, int $index)","return":"<p class=\"para\">   Returns an associative array with red, green, blue and alpha keys that   contain the appropriate values for the specified color index.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolorstotal":{"id":"function.imagecolorstotal","purpose":"Find out the number of colors in an image's palette","prototype":"int imagecolorstotal(resource $image)","return":"<p class=\"para\">   Returns the number of colors in the specified image&#039;s palette or 0 for   truecolor images.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecolortransparent":{"id":"function.imagecolortransparent","purpose":"Define a color as transparent","prototype":"int imagecolortransparent(resource $image [, int $color = ''])","return":"<p class=\"para\">   The identifier of the new (or current, if none is specified)   transparent color is returned. If <code class=\"parameter\">color<\/code>   is not specified, and the image has no transparent color, the   returned identifier will be -1.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageconvolution":{"id":"function.imageconvolution","purpose":"Apply a 3x3 convolution matrix, using coefficient and offset","prototype":"bool imageconvolution(resource $image, array $matrix, float $div, float $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"imagecopy":{"id":"function.imagecopy","purpose":"Copy part of an image","prototype":"bool imagecopy(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecopymerge":{"id":"function.imagecopymerge","purpose":"Copy and merge part of an image","prototype":"bool imagecopymerge(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagecopymergegray":{"id":"function.imagecopymergegray","purpose":"Copy and merge part of an image with gray scale","prototype":"bool imagecopymergegray(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagecopyresampled":{"id":"function.imagecopyresampled","purpose":"Copy and resize part of an image with resampling","prototype":"bool imagecopyresampled(resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagecopyresized":{"id":"function.imagecopyresized","purpose":"Copy and resize part of an image","prototype":"bool imagecopyresized(resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecreate":{"id":"function.imagecreate","purpose":"Create a new palette based image","prototype":"resource imagecreate(int $width, int $height)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecreatefrombmp":{"id":"function.imagecreatefrombmp","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefrombmp(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 7 >= 7.2.0"},"imagecreatefromgd2":{"id":"function.imagecreatefromgd2","purpose":"Create a new image from GD2 file or URL","prototype":"resource imagecreatefromgd2(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagecreatefromgd2part":{"id":"function.imagecreatefromgd2part","purpose":"Create a new image from a given part of GD2 file or URL","prototype":"resource imagecreatefromgd2part(string $filename, int $srcX, int $srcY, int $width, int $height)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagecreatefromgd":{"id":"function.imagecreatefromgd","purpose":"Create a new image from GD file or URL","prototype":"resource imagecreatefromgd(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagecreatefromgif":{"id":"function.imagecreatefromgif","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefromgif(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecreatefromjpeg":{"id":"function.imagecreatefromjpeg","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefromjpeg(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecreatefrompng":{"id":"function.imagecreatefrompng","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefrompng(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagecreatefromstring":{"id":"function.imagecreatefromstring","purpose":"Create a new image from the image stream in the string","prototype":"resource imagecreatefromstring(string $image)","return":"<p class=\"para\">   An image resource will be returned on success. <strong><code>FALSE<\/code><\/strong> is returned if   the image type is unsupported, the data is not in a recognised format,   or the image is corrupt and cannot be loaded.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"imagecreatefromwbmp":{"id":"function.imagecreatefromwbmp","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefromwbmp(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagecreatefromwebp":{"id":"function.imagecreatefromwebp","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefromwebp(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"imagecreatefromxbm":{"id":"function.imagecreatefromxbm","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefromxbm(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagecreatefromxpm":{"id":"function.imagecreatefromxpm","purpose":"Create a new image from file or URL","prototype":"resource imagecreatefromxpm(string $filename)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagecreatetruecolor":{"id":"function.imagecreatetruecolor","purpose":"Create a new true color image","prototype":"resource imagecreatetruecolor(int $width, int $height)","return":"<p class=\"para\">Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on errors.<\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagecrop":{"id":"function.imagecrop","purpose":"Crop an image to the given rectangle","prototype":"resource imagecrop(resource $image, array $rect)","return":"<p class=\"para\">   Return cropped image resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagecropauto":{"id":"function.imagecropauto","purpose":"Crop an image automatically using one of the available modes","prototype":"resource imagecropauto(resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1]]])","return":"<p class=\"para\">   Returns a cropped image resource on success or <strong><code>FALSE<\/code><\/strong> on failure.   If no cropping would occur, or the complete image would be cropped, that is   treated as failure, i.e. <span class=\"function\">imagecrop<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagedashedline":{"id":"function.imagedashedline","purpose":"Draw a dashed line","prototype":"bool imagedashedline(resource $image, int $x1, int $y1, int $x2, int $y2, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagedestroy":{"id":"function.imagedestroy","purpose":"Destroy an image","prototype":"bool imagedestroy(resource $image)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageellipse":{"id":"function.imageellipse","purpose":"Draw an ellipse","prototype":"bool imageellipse(resource $image, int $cx, int $cy, int $width, int $height, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagefill":{"id":"function.imagefill","purpose":"Flood fill","prototype":"bool imagefill(resource $image, int $x, int $y, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagefilledarc":{"id":"function.imagefilledarc","purpose":"Draw a partial arc and fill it","prototype":"bool imagefilledarc(resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagefilledellipse":{"id":"function.imagefilledellipse","purpose":"Draw a filled ellipse","prototype":"bool imagefilledellipse(resource $image, int $cx, int $cy, int $width, int $height, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagefilledpolygon":{"id":"function.imagefilledpolygon","purpose":"Draw a filled polygon","prototype":"bool imagefilledpolygon(resource $image, array $points, int $num_points, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagefilledrectangle":{"id":"function.imagefilledrectangle","purpose":"Draw a filled rectangle","prototype":"bool imagefilledrectangle(resource $image, int $x1, int $y1, int $x2, int $y2, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagefilltoborder":{"id":"function.imagefilltoborder","purpose":"Flood fill to specific color","prototype":"bool imagefilltoborder(resource $image, int $x, int $y, int $border, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagefilter":{"id":"function.imagefilter","purpose":"Applies a filter to an image","prototype":"bool imagefilter(resource $image, int $filtertype [, int $arg1 = '' [, int $arg2 = '' [, int $arg3 = '' [, int $arg4 = '']]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"imageflip":{"id":"function.imageflip","purpose":"Flips an image using a given mode","prototype":"bool imageflip(resource $image, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagefontheight":{"id":"function.imagefontheight","purpose":"Get font height","prototype":"int imagefontheight(int $font)","return":"<p class=\"para\">   Returns the pixel height of the font.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagefontwidth":{"id":"function.imagefontwidth","purpose":"Get font width","prototype":"int imagefontwidth(int $font)","return":"<p class=\"para\">   Returns the pixel width of the font.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageftbbox":{"id":"function.imageftbbox","purpose":"Give the bounding box of a text using fonts via freetype2","prototype":"array imageftbbox(float $size, float $angle, string $fontfile, string $text [, array $extrainfo = ''])","return":"<p class=\"para\">   <span class=\"function\">imageftbbox<\/span> returns an array with 8   elements representing four points making the bounding box of the   text:   <table class=\"doctable informaltable\">         <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>lower left corner, X position<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>lower left corner, Y position<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>lower right corner, X position<\/td>      <\/tr>      <tr>       <td>3<\/td>       <td>lower right corner, Y position<\/td>      <\/tr>      <tr>       <td>4<\/td>       <td>upper right corner, X position<\/td>      <\/tr>      <tr>       <td>5<\/td>       <td>upper right corner, Y position<\/td>      <\/tr>      <tr>       <td>6<\/td>       <td>upper left corner, X position<\/td>      <\/tr>      <tr>       <td>7<\/td>       <td>upper left corner, Y position<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   The points are relative to the <em class=\"emphasis\">text<\/em> regardless of the   <code class=\"parameter\">angle<\/code>, so &quot;upper left&quot; means in the top left-hand    corner seeing the text horizontally.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagefttext":{"id":"function.imagefttext","purpose":"Write text to the image using fonts using FreeType 2","prototype":"array imagefttext(resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo = ''])","return":"<p class=\"para\">   This function returns an array defining the four points of the box, starting in the lower left and moving counter-clockwise:   <table class=\"doctable informaltable\">         <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>lower left x-coordinate<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>lower left y-coordinate<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>lower right x-coordinate<\/td>      <\/tr>      <tr>       <td>3<\/td>       <td>lower right y-coordinate<\/td>      <\/tr>      <tr>       <td>4<\/td>       <td>upper right x-coordinate<\/td>      <\/tr>      <tr>       <td>5<\/td>       <td>upper right y-coordinate<\/td>      <\/tr>      <tr>       <td>6<\/td>       <td>upper left x-coordinate<\/td>      <\/tr>      <tr>       <td>7<\/td>       <td>upper left y-coordinate<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagegammacorrect":{"id":"function.imagegammacorrect","purpose":"Apply a gamma correction to a GD image","prototype":"bool imagegammacorrect(resource $image, float $inputgamma, float $outputgamma)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagegd2":{"id":"function.imagegd2","purpose":"Output GD2 image to browser or file","prototype":"bool imagegd2(resource $image [, mixed $to = null [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagegd":{"id":"function.imagegd","purpose":"Output GD image to browser or file","prototype":"bool imagegd(resource $image [, mixed $to = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imagegetclip":{"id":"function.imagegetclip","purpose":"Get the clipping rectangle","prototype":"array imagegetclip(resource $im)","return":"<p class=\"para\">   The function returns an indexed array with the coordinates of the clipping   rectangle which has the following entries:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">x-coordinate of the upper left corner<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">y-coordinate of the upper left corner<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">x-coordinate of the lower right corner<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">y-coordinate of the lower right corner<\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 7 >= 7.2.0"},"imagegif":{"id":"function.imagegif","purpose":"Output image to browser or file","prototype":"bool imagegif(resource $image [, mixed $to = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"imagegrabscreen":{"id":"function.imagegrabscreen","purpose":"Captures the whole screen","prototype":"resource imagegrabscreen()","return":"<p class=\"para\">   Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"imagegrabwindow":{"id":"function.imagegrabwindow","purpose":"Captures a window","prototype":"resource imagegrabwindow(int $window_handle [, int $client_area = ''])","return":"<p class=\"para\">   Returns an image resource identifier on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"imageinterlace":{"id":"function.imageinterlace","purpose":"Enable or disable interlace","prototype":"int imageinterlace(resource $image [, int $interlace = ''])","return":"<p class=\"para\">   Returns 1 if the interlace bit is set for the image, 0 otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageistruecolor":{"id":"function.imageistruecolor","purpose":"Finds whether an image is a truecolor image","prototype":"bool imageistruecolor(resource $image)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the <code class=\"parameter\">image<\/code> is truecolor, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"imagejpeg":{"id":"function.imagejpeg","purpose":"Output image to browser or file","prototype":"bool imagejpeg(resource $image [, mixed $to = '' [, int $quality = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"imagelayereffect":{"id":"function.imagelayereffect","purpose":"Set the alpha blending flag to use layering effects","prototype":"bool imagelayereffect(resource $image, int $effect)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"imageline":{"id":"function.imageline","purpose":"Draw a line","prototype":"bool imageline(resource $image, int $x1, int $y1, int $x2, int $y2, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageloadfont":{"id":"function.imageloadfont","purpose":"Load a new font","prototype":"int imageloadfont(string $file)","return":"<p class=\"para\">   The font identifier which is always bigger than 5 to avoid conflicts with   built-in fonts or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageopenpolygon":{"id":"function.imageopenpolygon","purpose":"Draws an open polygon","prototype":"bool imageopenpolygon(resource $image, array $points, int $num_points, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"imagepalettecopy":{"id":"function.imagepalettecopy","purpose":"Copy the palette from one image to another","prototype":"void imagepalettecopy(resource $destination, resource $source)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagepalettetotruecolor":{"id":"function.imagepalettetotruecolor","purpose":"Converts a palette based image to true color","prototype":"bool imagepalettetotruecolor(resource $src)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the convertion was complete, or if the source image already    is a true color image, otherwise <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagepng":{"id":"function.imagepng","purpose":"Output a PNG image to either the browser or a file","prototype":"bool imagepng(resource $image [, mixed $to = '' [, int $quality = '' [, int $filters = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"imagepolygon":{"id":"function.imagepolygon","purpose":"Draws a polygon","prototype":"bool imagepolygon(resource $image, array $points, int $num_points, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagepsbbox":{"id":"function.imagepsbbox","purpose":"Give the bounding box of a text rectangle using PostScript Type1 fonts","prototype":"array imagepsbbox(string $text, resource $font, int $size, int $space, int $tightness, float $angle)","return":"<p class=\"para\">   Returns an array containing the following elements:   <table class=\"doctable informaltable\">         <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>left x-coordinate<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>upper y-coordinate<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>right x-coordinate<\/td>      <\/tr>      <tr>       <td>3<\/td>       <td>lower y-coordinate<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5"},"imagepsencodefont":{"id":"function.imagepsencodefont","purpose":"Change the character encoding vector of a font","prototype":"bool imagepsencodefont(resource $font_index, string $encodingfile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"imagepsextendfont":{"id":"function.imagepsextendfont","purpose":"Extend or condense a font","prototype":"bool imagepsextendfont(resource $font_index, float $extend)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"imagepsfreefont":{"id":"function.imagepsfreefont","purpose":"Free memory used by a PostScript Type 1 font","prototype":"bool imagepsfreefont(resource $font_index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"imagepsloadfont":{"id":"function.imagepsloadfont","purpose":"Load a PostScript Type 1 font from file","prototype":"resource imagepsloadfont(string $filename)","return":"<p class=\"para\">   In the case everything went right, a valid font index will be returned and   can be used for further purposes. Otherwise the function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5"},"imagepsslantfont":{"id":"function.imagepsslantfont","purpose":"Slant a font","prototype":"bool imagepsslantfont(resource $font_index, float $slant)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5"},"imagepstext":{"id":"function.imagepstext","purpose":"Draws a text over an image using PostScript Type1 fonts","prototype":"array imagepstext(resource $image, string $text, resource $font_index, int $size, int $foreground, int $background, int $x, int $y [, int $space = '' [, int $tightness = '' [, float $angle = 0.0 [, int $antialias_steps = 4]]]])","return":"<p class=\"para\">   This function returns an array containing the following elements:   <table class=\"doctable informaltable\">         <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>lower left x-coordinate<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>lower left y-coordinate<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>upper right x-coordinate<\/td>      <\/tr>      <tr>       <td>3<\/td>       <td>upper right y-coordinate<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5"},"imagerectangle":{"id":"function.imagerectangle","purpose":"Draw a rectangle","prototype":"bool imagerectangle(resource $image, int $x1, int $y1, int $x2, int $y2, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imageresolution":{"id":"function.imageresolution","purpose":"Get or set the resolution of the image","prototype":"mixed imageresolution(resource $image [, int $res_x = '' [, int $res_y = '']])","return":"<p class=\"para\">   When used as getter (that is without the optional parameters), it returns   <strong><code>TRUE<\/code><\/strong> on success,  or <strong><code>FALSE<\/code><\/strong> on failure.   When used as setter (that is with one or both optional parameters given),   it returns an indexed array of the horizontal and vertical resolution on   success,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"imagerotate":{"id":"function.imagerotate","purpose":"Rotate an image with a given angle","prototype":"resource imagerotate(resource $image, float $angle, int $bgd_color [, int $ignore_transparent = ''])","return":"<p class=\"para\">   Returns an image resource for the rotated image,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"imagesavealpha":{"id":"function.imagesavealpha","purpose":"Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images","prototype":"bool imagesavealpha(resource $image, bool $saveflag)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"imagescale":{"id":"function.imagescale","purpose":"Scale an image using the given new width and height","prototype":"resource imagescale(resource $image, int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED]])","return":"<p class=\"para\">   Return the scaled image resource on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagesetbrush":{"id":"function.imagesetbrush","purpose":"Set the brush image for line drawing","prototype":"bool imagesetbrush(resource $image, resource $brush)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagesetclip":{"id":"function.imagesetclip","purpose":"Set the clipping rectangle","prototype":"bool imagesetclip(resource $im, int $x1, int $y1, int $x2, int $y2)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"imagesetinterpolation":{"id":"function.imagesetinterpolation","purpose":"Set the interpolation method","prototype":"bool imagesetinterpolation(resource $image [, int $method = IMG_BILINEAR_FIXED])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"imagesetpixel":{"id":"function.imagesetpixel","purpose":"Set a single pixel","prototype":"bool imagesetpixel(resource $image, int $x, int $y, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagesetstyle":{"id":"function.imagesetstyle","purpose":"Set the style for line drawing","prototype":"bool imagesetstyle(resource $image, array $style)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagesetthickness":{"id":"function.imagesetthickness","purpose":"Set the thickness for line drawing","prototype":"bool imagesetthickness(resource $image, int $thickness)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagesettile":{"id":"function.imagesettile","purpose":"Set the tile image for filling","prototype":"bool imagesettile(resource $image, resource $tile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagestring":{"id":"function.imagestring","purpose":"Draw a string horizontally","prototype":"bool imagestring(resource $image, int $font, int $x, int $y, string $string, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagestringup":{"id":"function.imagestringup","purpose":"Draw a string vertically","prototype":"bool imagestringup(resource $image, int $font, int $x, int $y, string $string, int $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagesx":{"id":"function.imagesx","purpose":"Get image width","prototype":"int imagesx(resource $image)","return":"<p class=\"para\">   Return the width of the <code class=\"parameter\">image<\/code> or <strong><code>FALSE<\/code><\/strong> on    errors.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagesy":{"id":"function.imagesy","purpose":"Get image height","prototype":"int imagesy(resource $image)","return":"<p class=\"para\">   Return the height of the <code class=\"parameter\">image<\/code> or <strong><code>FALSE<\/code><\/strong> on    errors.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagetruecolortopalette":{"id":"function.imagetruecolortopalette","purpose":"Convert a true color image to a palette image","prototype":"bool imagetruecolortopalette(resource $image, bool $dither, int $ncolors)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"imagettfbbox":{"id":"function.imagettfbbox","purpose":"Give the bounding box of a text using TrueType fonts","prototype":"array imagettfbbox(float $size, float $angle, string $fontfile, string $text)","return":"<p class=\"para\">   <span class=\"function\">imagettfbbox<\/span> returns an array with 8   elements representing four points making the bounding box of the   text on success and <strong><code>FALSE<\/code><\/strong> on error.   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>key<\/th>       <th>contents<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>0<\/td>       <td>lower left corner, X position<\/td>      <\/tr>      <tr>       <td>1<\/td>       <td>lower left corner, Y position<\/td>      <\/tr>      <tr>       <td>2<\/td>       <td>lower right corner, X position<\/td>      <\/tr>      <tr>       <td>3<\/td>       <td>lower right corner, Y position<\/td>      <\/tr>      <tr>       <td>4<\/td>       <td>upper right corner, X position<\/td>      <\/tr>      <tr>       <td>5<\/td>       <td>upper right corner, Y position<\/td>      <\/tr>      <tr>       <td>6<\/td>       <td>upper left corner, X position<\/td>      <\/tr>      <tr>       <td>7<\/td>       <td>upper left corner, Y position<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   The points are relative to the <em class=\"emphasis\">text<\/em> regardless of the   <code class=\"parameter\">angle<\/code>, so &quot;upper left&quot; means in the top left-hand    corner seeing the text horizontally.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagettftext":{"id":"function.imagettftext","purpose":"Write text to the image using TrueType fonts","prototype":"array imagettftext(resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text)","return":"<p class=\"para\">   Returns an array with 8 elements representing four points making the   bounding box of the text. The order of the points is lower left, lower    right, upper right, upper left. The points are relative to the text   regardless of the angle, so &quot;upper left&quot; means in the top left-hand    corner when you see the text horizontally.   Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imagetypes":{"id":"function.imagetypes","purpose":"Return the image types supported by this PHP build","prototype":"int imagetypes()","return":"<p class=\"para\">   Returns a bit-field corresponding to the image formats supported by the   version of GD linked into PHP.  The following bits are returned,   <strong><code>IMG_BMP<\/code><\/strong> |   <strong><code>IMG_GIF<\/code><\/strong> | <strong><code>IMG_JPG<\/code><\/strong> |   <strong><code>IMG_PNG<\/code><\/strong> | <strong><code>IMG_WBMP<\/code><\/strong> |    <strong><code>IMG_XPM<\/code><\/strong> | <strong><code>IMG_WEBP<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"imagewbmp":{"id":"function.imagewbmp","purpose":"Output image to browser or file","prototype":"bool imagewbmp(resource $image [, mixed $to = '' [, int $foreground = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"imagewebp":{"id":"function.imagewebp","purpose":"Output a WebP image to browser or file","prototype":"bool imagewebp(resource $image [, mixed $to = '' [, int $quality = 80]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 5 >= 5.4.0, PHP 7"},"imagexbm":{"id":"function.imagexbm","purpose":"Output an XBM image to browser or file","prototype":"bool imagexbm(resource $image, string $filename [, int $foreground = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 5, PHP 7"},"iptcembed":{"id":"function.iptcembed","purpose":"Embeds binary IPTC data into a JPEG image","prototype":"mixed iptcembed(string $iptcdata, string $jpeg_file_name [, int $spool = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">spool<\/code> is less than 2, the JPEG will be returned,    or <strong><code>FALSE<\/code><\/strong> on failure. Otherwise returns <strong><code>TRUE<\/code><\/strong> on success    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"iptcparse":{"id":"function.iptcparse","purpose":"Parse a binary IPTC block into single tags","prototype":"array iptcparse(string $iptcblock)","return":"<p class=\"para\">   Returns an array using the tagmarker as an index and the value as the   value. It returns <strong><code>FALSE<\/code><\/strong> on error or if no IPTC data was found.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"jpeg2wbmp":{"id":"function.jpeg2wbmp","purpose":"Convert JPEG image file to WBMP image file","prototype":"bool jpeg2wbmp(string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"png2wbmp":{"id":"function.png2wbmp","purpose":"Convert PNG image file to WBMP image file","prototype":"bool png2wbmp(string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong><p class=\"simpara\">However, if libgd fails to output the image, this function returns <strong><code>TRUE<\/code><\/strong>.<\/p><\/div>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"Gmagick::addimage":{"id":"gmagick.addimage","purpose":"Adds new image to Gmagick object image list","prototype":"Gmagick Gmagick::addimage(Gmagick $source)","return":"<p class=\"para\">   The Gmagick object with image added  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::addnoiseimage":{"id":"gmagick.addnoiseimage","purpose":"Adds random noise to the image","prototype":"Gmagick Gmagick::addnoiseimage(int $noise_type)","return":"<p class=\"para\">   The Gmagick object with noise added.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::annotateimage":{"id":"gmagick.annotateimage","purpose":"Annotates an image with text","prototype":"Gmagick Gmagick::annotateimage(GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text)","return":"<p class=\"para\">   The Gmagick object with annotation made.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::blurimage":{"id":"gmagick.blurimage","purpose":"Adds blur filter to image","prototype":"Gmagick Gmagick::blurimage(float $radius, float $sigma [, int $channel = ''])","return":"<p class=\"para\">   The blurred Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::borderimage":{"id":"gmagick.borderimage","purpose":"Surrounds the image with a border","prototype":"Gmagick Gmagick::borderimage(GmagickPixel $color, int $width, int $height)","return":"<p class=\"para\">   The Gmagick object with border defined  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::charcoalimage":{"id":"gmagick.charcoalimage","purpose":"Simulates a charcoal drawing","prototype":"Gmagick Gmagick::charcoalimage(float $radius, float $sigma)","return":"<p class=\"para\">   The Gmagick object with charcoal simulation  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::chopimage":{"id":"gmagick.chopimage","purpose":"Removes a region of an image and trims","prototype":"Gmagick Gmagick::chopimage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   The chopped Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::clear":{"id":"gmagick.clear","purpose":"Clears all resources associated to Gmagick object","prototype":"Gmagick Gmagick::clear()","return":"<p class=\"para\">    The cleared Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::commentimage":{"id":"gmagick.commentimage","purpose":"Adds a comment to your image","prototype":"Gmagick Gmagick::commentimage(string $comment)","return":"<p class=\"para\">   The Gmagick object with comment added.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::compositeimage":{"id":"gmagick.compositeimage","purpose":"Composite one image onto another","prototype":"Gmagick Gmagick::compositeimage(Gmagick $source, int $COMPOSE, int $x, int $y)","return":"<p class=\"para\">   The Gmagick object with compositions.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::__construct":{"id":"gmagick.construct","purpose":"The Gmagick constructor","prototype":" Gmagick::__construct([string $filename = ''])","return":"<p class=\"para\">   Returns a new Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::cropimage":{"id":"gmagick.cropimage","purpose":"Extracts a region of the image","prototype":"Gmagick Gmagick::cropimage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   The cropped Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::cropthumbnailimage":{"id":"gmagick.cropthumbnailimage","purpose":"Creates a crop thumbnail","prototype":"Gmagick Gmagick::cropthumbnailimage(int $width, int $height)","return":"<p class=\"para\">  The cropped Gmagick object   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::current":{"id":"gmagick.current","purpose":"The current purpose","prototype":"Gmagick Gmagick::current()","return":"<p class=\"para\">    Returns self on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::cyclecolormapimage":{"id":"gmagick.cyclecolormapimage","purpose":"Displaces an image's colormap","prototype":"Gmagick Gmagick::cyclecolormapimage(int $displace)","return":"<p class=\"para\">   Returns self on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::deconstructimages":{"id":"gmagick.deconstructimages","purpose":"Returns certain pixel differences between images","prototype":"Gmagick Gmagick::deconstructimages()","return":"<p class=\"para\">   Returns a new <span class=\"classname\">Gmagick<\/span> object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::despeckleimage":{"id":"gmagick.despeckleimage","purpose":"The despeckleimage purpose","prototype":"Gmagick Gmagick::despeckleimage()","return":"<p class=\"para\">   The despeckled Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::destroy":{"id":"gmagick.destroy","purpose":"The destroy purpose","prototype":"bool Gmagick::destroy()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::drawimage":{"id":"gmagick.drawimage","purpose":"Renders the GmagickDraw object on the current image","prototype":"Gmagick Gmagick::drawimage(GmagickDraw $GmagickDraw)","return":"<p class=\"para\">   The drawn Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::edgeimage":{"id":"gmagick.edgeimage","purpose":"Enhance edges within the image","prototype":"Gmagick Gmagick::edgeimage(float $radius)","return":"<p class=\"para\">   The Gmagick object with edges enhanced.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::embossimage":{"id":"gmagick.embossimage","purpose":"Returns a grayscale image with a three-dimensional effect","prototype":"Gmagick Gmagick::embossimage(float $radius, float $sigma)","return":"<p class=\"para\">   The embossed Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::enhanceimage":{"id":"gmagick.enhanceimage","purpose":"Improves the quality of a noisy image","prototype":"Gmagick Gmagick::enhanceimage()","return":"<p class=\"para\">   The enhanced Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::equalizeimage":{"id":"gmagick.equalizeimage","purpose":"Equalizes the image histogram","prototype":"Gmagick Gmagick::equalizeimage()","return":"<p class=\"para\">   The equalized Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::flipimage":{"id":"gmagick.flipimage","purpose":"Creates a vertical mirror image","prototype":"Gmagick Gmagick::flipimage()","return":"<p class=\"para\">   The flipped Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::flopimage":{"id":"gmagick.flopimage","purpose":"The flopimage purpose","prototype":"Gmagick Gmagick::flopimage()","return":"<p class=\"para\">   The flopped Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::frameimage":{"id":"gmagick.frameimage","purpose":"Adds a simulated three-dimensional border","prototype":"Gmagick Gmagick::frameimage(GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel)","return":"<p class=\"para\">   The framed Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::gammaimage":{"id":"gmagick.gammaimage","purpose":"Gamma-corrects an image","prototype":"Gmagick Gmagick::gammaimage(float $gamma)","return":"<p class=\"para\">  The gamma corrected Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getcopyright":{"id":"gmagick.getcopyright","purpose":"Returns the GraphicsMagick API copyright as a string","prototype":"string Gmagick::getcopyright()","return":"<p class=\"para\">   Returns a string containing the copyright notice of GraphicsMagick and   Magickwand C API.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getfilename":{"id":"gmagick.getfilename","purpose":"The filename associated with an image sequence","prototype":"string Gmagick::getfilename()","return":"<p class=\"para\">   Returns a string on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagebackgroundcolor":{"id":"gmagick.getimagebackgroundcolor","purpose":"Returns the image background color","prototype":"GmagickPixel Gmagick::getimagebackgroundcolor()","return":"<p class=\"para\">   Returns an GmagickPixel set to the background color of the image.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageblueprimary":{"id":"gmagick.getimageblueprimary","purpose":"Returns the chromaticy blue primary point","prototype":"array Gmagick::getimageblueprimary()","return":"<p class=\"para\">   Array consisting of &quot;x&quot; and &quot;y&quot; coordinates of point.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagebordercolor":{"id":"gmagick.getimagebordercolor","purpose":"Returns the image border color","prototype":"GmagickPixel Gmagick::getimagebordercolor()","return":"<p class=\"para\">   GmagickPixel object representing the color of the border  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagechanneldepth":{"id":"gmagick.getimagechanneldepth","purpose":"Gets the depth for a particular image channel","prototype":"int Gmagick::getimagechanneldepth(int $channel_type)","return":"<p class=\"para\">   Depth of image channel  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagecolors":{"id":"gmagick.getimagecolors","purpose":"Returns the color of the specified colormap index","prototype":"int Gmagick::getimagecolors()","return":"<p class=\"para\">   The number of colors in image.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagecolorspace":{"id":"gmagick.getimagecolorspace","purpose":"Gets the image colorspace","prototype":"int Gmagick::getimagecolorspace()","return":"<p class=\"para\">    Colorspace  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagecompose":{"id":"gmagick.getimagecompose","purpose":"Returns the composite operator associated with the image","prototype":"int Gmagick::getimagecompose()","return":"<p class=\"para\">   Returns the composite operator associated with the image.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagedelay":{"id":"gmagick.getimagedelay","purpose":"Gets the image delay","prototype":"int Gmagick::getimagedelay()","return":"<p class=\"para\">   Returns the composite operator associated with the image.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagedepth":{"id":"gmagick.getimagedepth","purpose":"Gets the depth of the image","prototype":"int Gmagick::getimagedepth()","return":"<p class=\"para\">   Image depth  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagedispose":{"id":"gmagick.getimagedispose","purpose":"Gets the image disposal method","prototype":"int Gmagick::getimagedispose()","return":"<p class=\"para\">   Returns the dispose method on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageextrema":{"id":"gmagick.getimageextrema","purpose":"Gets the extrema for the image","prototype":"array Gmagick::getimageextrema()","return":"<p class=\"para\">   Returns an associative array with the keys &quot;min&quot; and &quot;max&quot;.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagefilename":{"id":"gmagick.getimagefilename","purpose":"Returns the filename of a particular image in a sequence","prototype":"string Gmagick::getimagefilename()","return":"<p class=\"para\">   Returns a string with the filename of the image  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageformat":{"id":"gmagick.getimageformat","purpose":"Returns the format of a particular image in a sequence","prototype":"string Gmagick::getimageformat()","return":"<p class=\"para\">   Returns a string containing the image format on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagegamma":{"id":"gmagick.getimagegamma","purpose":"Gets the image gamma","prototype":"float Gmagick::getimagegamma()","return":"<p class=\"para\">    Returns the image gamma on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagegreenprimary":{"id":"gmagick.getimagegreenprimary","purpose":"Returns the chromaticy green primary point","prototype":"array Gmagick::getimagegreenprimary()","return":"<p class=\"para\">   Returns an array with the keys &quot;x&quot; and &quot;y&quot; on success.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageheight":{"id":"gmagick.getimageheight","purpose":"Returns the image height","prototype":"int Gmagick::getimageheight()","return":"<p class=\"para\">    Returns the image height in pixels.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagehistogram":{"id":"gmagick.getimagehistogram","purpose":"Gets the image histogram","prototype":"array Gmagick::getimagehistogram()","return":"<p class=\"para\">   Returns the image histogram as an array of GmagickPixel objects.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageindex":{"id":"gmagick.getimageindex","purpose":"Gets the index of the current active image","prototype":"int Gmagick::getimageindex()","return":"<p class=\"para\">   Index of current active image  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageinterlacescheme":{"id":"gmagick.getimageinterlacescheme","purpose":"Gets the image interlace scheme","prototype":"int Gmagick::getimageinterlacescheme()","return":"<p class=\"para\">   Returns the interlace scheme as an integer on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageiterations":{"id":"gmagick.getimageiterations","purpose":"Gets the image iterations","prototype":"int Gmagick::getimageiterations()","return":"<p class=\"para\">   Returns the image iterations as an integer.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagematte":{"id":"gmagick.getimagematte","purpose":"Check if the image has a matte channel","prototype":"int Gmagick::getimagematte()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the image has a matte channel, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagemattecolor":{"id":"gmagick.getimagemattecolor","purpose":"Returns the image matte color","prototype":"GmagickPixel Gmagick::getimagemattecolor()","return":"<p class=\"para\">   Returns GmagickPixel object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageprofile":{"id":"gmagick.getimageprofile","purpose":"Returns the named image profile","prototype":"string Gmagick::getimageprofile(string $name)","return":"<p class=\"para\">   Returns a string containing the image profile.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageredprimary":{"id":"gmagick.getimageredprimary","purpose":"Returns the chromaticity red primary point","prototype":"array Gmagick::getimageredprimary()","return":"<p class=\"para\">   Returns the chromaticity red primary point as an array with the keys &quot;x&quot; and &quot;y&quot;.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagerenderingintent":{"id":"gmagick.getimagerenderingintent","purpose":"Gets the image rendering intent","prototype":"int Gmagick::getimagerenderingintent()","return":"<p class=\"para\">   Extracts a region of the image and returns it as a a new wand  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageresolution":{"id":"gmagick.getimageresolution","purpose":"Gets the image X and Y resolution","prototype":"array Gmagick::getimageresolution()","return":"<p class=\"para\">   Returns the resolution as an array.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagescene":{"id":"gmagick.getimagescene","purpose":"Gets the image scene","prototype":"int Gmagick::getimagescene()","return":"<p class=\"para\">   Returns the image scene.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagesignature":{"id":"gmagick.getimagesignature","purpose":"Generates an SHA-256 message digest","prototype":"string Gmagick::getimagesignature()","return":"<p class=\"para\">   Returns a string containing the SHA-256 hash of the file.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagetype":{"id":"gmagick.getimagetype","purpose":"Gets the potential image type","prototype":"int Gmagick::getimagetype()","return":"<p class=\"para\">   Returns the potential image type.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimageunits":{"id":"gmagick.getimageunits","purpose":"Gets the image units of resolution","prototype":"int Gmagick::getimageunits()","return":"<p class=\"para\">   Returns the image units of resolution.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagewhitepoint":{"id":"gmagick.getimagewhitepoint","purpose":"Returns the chromaticity white point","prototype":"array Gmagick::getimagewhitepoint()","return":"<p class=\"para\">   Returns the chromaticity white point as an associative array with the keys &quot;x&quot; and &quot;y&quot;.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getimagewidth":{"id":"gmagick.getimagewidth","purpose":"Returns the width of the image","prototype":"int Gmagick::getimagewidth()","return":"<p class=\"para\">   Returns the image width.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getpackagename":{"id":"gmagick.getpackagename","purpose":"Returns the GraphicsMagick package name","prototype":"string Gmagick::getpackagename()","return":"<p class=\"para\">   Returns the GraphicsMagick package name as a string.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getquantumdepth":{"id":"gmagick.getquantumdepth","purpose":"Returns the Gmagick quantum depth as a string","prototype":"array Gmagick::getquantumdepth()","return":"<p class=\"para\">   Returns the Gmagick quantum depth as a string.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getreleasedate":{"id":"gmagick.getreleasedate","purpose":"Returns the GraphicsMagick release date as a string","prototype":"string Gmagick::getreleasedate()","return":"<p class=\"para\">   Returns the GraphicsMagick release date as a string.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getsamplingfactors":{"id":"gmagick.getsamplingfactors","purpose":"Gets the horizontal and vertical sampling factor","prototype":"array Gmagick::getsamplingfactors()","return":"<p class=\"para\">   Returns an associative array with the horizontal and vertical sampling factors of the image.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getsize":{"id":"gmagick.getsize","purpose":"Returns the size associated with the Gmagick object","prototype":"array Gmagick::getsize()","return":"<p class=\"para\">   Returns the size associated with the Gmagick object as an array with the keys &quot;columns&quot; and &quot;rows&quot;.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::getversion":{"id":"gmagick.getversion","purpose":"Returns the GraphicsMagick API version","prototype":"array Gmagick::getversion()","return":"<p class=\"para\">   Returns the GraphicsMagick API version as a string and as a number.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::hasnextimage":{"id":"gmagick.hasnextimage","purpose":"Checks if the object has more images","prototype":"mixed Gmagick::hasnextimage()","return":"<p class=\"para\">   Returns TRUE if the object has more images when traversing the list in the forward direction, returns FALSE if there are none.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::haspreviousimage":{"id":"gmagick.haspreviousimage","purpose":"Checks if the object has a previous image","prototype":"mixed Gmagick::haspreviousimage()","return":"<p class=\"para\">   Returns TRUE if the object has more images when traversing the list in the reverse direction, returns FALSE if there are none.   <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::implodeimage":{"id":"gmagick.implodeimage","purpose":"Creates a new image as a copy","prototype":"mixed Gmagick::implodeimage(float $radius)","return":"<p class=\"para\">   Returns imploded Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::labelimage":{"id":"gmagick.labelimage","purpose":"Adds a label to an image","prototype":"mixed Gmagick::labelimage(string $label)","return":"<p class=\"para\">   Gmagick with label.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::levelimage":{"id":"gmagick.levelimage","purpose":"Adjusts the levels of an image","prototype":"mixed Gmagick::levelimage(float $blackPoint, float $gamma, float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Gmagick object with image levelled.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::magnifyimage":{"id":"gmagick.magnifyimage","purpose":"Scales an image proportionally 2x","prototype":"mixed Gmagick::magnifyimage()","return":"<p class=\"para\">   Magnified Gmagick object.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::mapimage":{"id":"gmagick.mapimage","purpose":"Replaces the colors of an image with the closest color from a reference image","prototype":"Gmagick Gmagick::mapimage(gmagick $gmagick, bool $dither)","return":"<p class=\"para\">   Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::medianfilterimage":{"id":"gmagick.medianfilterimage","purpose":"Applies a digital filter","prototype":"void Gmagick::medianfilterimage(float $radius)","return":"<p class=\"para\">   Gmagick object with median filter applied.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::minifyimage":{"id":"gmagick.minifyimage","purpose":"Scales an image proportionally to half its size","prototype":"Gmagick Gmagick::minifyimage()","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::modulateimage":{"id":"gmagick.modulateimage","purpose":"Control the brightness, saturation, and hue","prototype":"Gmagick Gmagick::modulateimage(float $brightness, float $saturation, float $hue)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::motionblurimage":{"id":"gmagick.motionblurimage","purpose":"Simulates motion blur","prototype":"Gmagick Gmagick::motionblurimage(float $radius, float $sigma, float $angle)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::newimage":{"id":"gmagick.newimage","purpose":"Creates a new image","prototype":"Gmagick Gmagick::newimage(int $width, int $height, string $background [, string $format = ''])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::nextimage":{"id":"gmagick.nextimage","purpose":"Moves to the next image","prototype":"bool Gmagick::nextimage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::normalizeimage":{"id":"gmagick.normalizeimage","purpose":"Enhances the contrast of a color image","prototype":"Gmagick Gmagick::normalizeimage([int $channel = ''])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::oilpaintimage":{"id":"gmagick.oilpaintimage","purpose":"Simulates an oil painting","prototype":"Gmagick Gmagick::oilpaintimage(float $radius)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::previousimage":{"id":"gmagick.previousimage","purpose":"Move to the previous image in the object","prototype":"bool Gmagick::previousimage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::profileimage":{"id":"gmagick.profileimage","purpose":"Adds or removes a profile from an image","prototype":"Gmagick Gmagick::profileimage(string $name, string $profile)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::quantizeimage":{"id":"gmagick.quantizeimage","purpose":"Analyzes the colors within a reference image","prototype":"Gmagick Gmagick::quantizeimage(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::quantizeimages":{"id":"gmagick.quantizeimages","purpose":"The quantizeimages purpose","prototype":"Gmagick Gmagick::quantizeimages(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::queryfontmetrics":{"id":"gmagick.queryfontmetrics","purpose":"Returns an array representing the font metrics","prototype":"array Gmagick::queryfontmetrics(GmagickDraw $draw, string $text)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::queryfonts":{"id":"gmagick.queryfonts","purpose":"Returns the configured fonts","prototype":"array Gmagick::queryfonts([string $pattern = \"*\"])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::queryformats":{"id":"gmagick.queryformats","purpose":"Returns formats supported by Gmagick","prototype":"array Gmagick::queryformats([string $pattern = \"*\"])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::radialblurimage":{"id":"gmagick.radialblurimage","purpose":"Radial blurs an image","prototype":"Gmagick Gmagick::radialblurimage(float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::raiseimage":{"id":"gmagick.raiseimage","purpose":"Creates a simulated 3d button-like effect","prototype":"Gmagick Gmagick::raiseimage(int $width, int $height, int $x, int $y, bool $raise)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::read":{"id":"gmagick.read","purpose":"Reads image from filename","prototype":"Gmagick Gmagick::read(string $filename)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::readimage":{"id":"gmagick.readimage","purpose":"Reads image from filename","prototype":"Gmagick Gmagick::readimage(string $filename)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::readimageblob":{"id":"gmagick.readimageblob","purpose":"Reads image from a binary string","prototype":"Gmagick Gmagick::readimageblob(string $imageContents [, string $filename = ''])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::readimagefile":{"id":"gmagick.readimagefile","purpose":"The readimagefile purpose","prototype":"Gmagick Gmagick::readimagefile(resource $fp [, string $filename = ''])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::reducenoiseimage":{"id":"gmagick.reducenoiseimage","purpose":"Smooths the contours of an image","prototype":"Gmagick Gmagick::reducenoiseimage(float $radius)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::removeimage":{"id":"gmagick.removeimage","purpose":"Removes an image from the image list","prototype":"Gmagick Gmagick::removeimage()","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::removeimageprofile":{"id":"gmagick.removeimageprofile","purpose":"Removes the named image profile and returns it","prototype":"string Gmagick::removeimageprofile(string $name)","return":"<p class=\"para\">   The named profile.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::resampleimage":{"id":"gmagick.resampleimage","purpose":"Resample image to desired resolution","prototype":"Gmagick Gmagick::resampleimage(float $xResolution, float $yResolution, int $filter, float $blur)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::resizeimage":{"id":"gmagick.resizeimage","purpose":"Scales an image","prototype":"Gmagick Gmagick::resizeimage(int $width, int $height, int $filter, float $blur [, bool $fit = ''])","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::rollimage":{"id":"gmagick.rollimage","purpose":"Offsets an image","prototype":"Gmagick Gmagick::rollimage(int $x, int $y)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::rotateimage":{"id":"gmagick.rotateimage","purpose":"Rotates an image","prototype":"Gmagick Gmagick::rotateimage(mixed $color, float $degrees)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::scaleimage":{"id":"gmagick.scaleimage","purpose":"Scales the size of an image","prototype":"Gmagick Gmagick::scaleimage(int $width, int $height [, bool $fit = ''])","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::separateimagechannel":{"id":"gmagick.separateimagechannel","purpose":"Separates a channel from the image","prototype":"Gmagick Gmagick::separateimagechannel(int $channel)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setCompressionQuality":{"id":"gmagick.setcompressionquality","purpose":"Sets the object's default compression quality","prototype":"Gmagick Gmagick::setCompressionQuality(int $quality)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":""},"Gmagick::setfilename":{"id":"gmagick.setfilename","purpose":"Sets the filename before you read or write the image","prototype":"Gmagick Gmagick::setfilename(string $filename)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagebackgroundcolor":{"id":"gmagick.setimagebackgroundcolor","purpose":"Sets the image background color","prototype":"Gmagick Gmagick::setimagebackgroundcolor(GmagickPixel $color)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageblueprimary":{"id":"gmagick.setimageblueprimary","purpose":"Sets the image chromaticity blue primary point","prototype":"Gmagick Gmagick::setimageblueprimary(float $x, float $y)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagebordercolor":{"id":"gmagick.setimagebordercolor","purpose":"Sets the image border color","prototype":"Gmagick Gmagick::setimagebordercolor(GmagickPixel $color)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagechanneldepth":{"id":"gmagick.setimagechanneldepth","purpose":"Sets the depth of a particular image channel","prototype":"Gmagick Gmagick::setimagechanneldepth(int $channel, int $depth)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagecolorspace":{"id":"gmagick.setimagecolorspace","purpose":"Sets the image colorspace","prototype":"Gmagick Gmagick::setimagecolorspace(int $colorspace)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagecompose":{"id":"gmagick.setimagecompose","purpose":"Sets the image composite operator","prototype":"Gmagick Gmagick::setimagecompose(int $composite)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagedelay":{"id":"gmagick.setimagedelay","purpose":"Sets the image delay","prototype":"Gmagick Gmagick::setimagedelay(int $delay)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagedepth":{"id":"gmagick.setimagedepth","purpose":"Sets the image depth","prototype":"Gmagick Gmagick::setimagedepth(int $depth)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagedispose":{"id":"gmagick.setimagedispose","purpose":"Sets the image disposal method","prototype":"Gmagick Gmagick::setimagedispose(int $disposeType)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagefilename":{"id":"gmagick.setimagefilename","purpose":"Sets the filename of a particular image in a sequence","prototype":"Gmagick Gmagick::setimagefilename(string $filename)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageformat":{"id":"gmagick.setimageformat","purpose":"Sets the format of a particular image","prototype":"Gmagick Gmagick::setimageformat(string $imageFormat)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagegamma":{"id":"gmagick.setimagegamma","purpose":"Sets the image gamma","prototype":"Gmagick Gmagick::setimagegamma(float $gamma)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagegreenprimary":{"id":"gmagick.setimagegreenprimary","purpose":"Sets the image chromaticity green primary point","prototype":"Gmagick Gmagick::setimagegreenprimary(float $x, float $y)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageindex":{"id":"gmagick.setimageindex","purpose":"Set the iterator to the position in the image list specified with the index parameter","prototype":"Gmagick Gmagick::setimageindex(int $index)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageinterlacescheme":{"id":"gmagick.setimageinterlacescheme","purpose":"Sets the interlace scheme of the image","prototype":"Gmagick Gmagick::setimageinterlacescheme(int $interlace)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageiterations":{"id":"gmagick.setimageiterations","purpose":"Sets the image iterations","prototype":"Gmagick Gmagick::setimageiterations(int $iterations)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageprofile":{"id":"gmagick.setimageprofile","purpose":"Adds a named profile to the Gmagick object","prototype":"Gmagick Gmagick::setimageprofile(string $name, string $profile)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageredprimary":{"id":"gmagick.setimageredprimary","purpose":"Sets the image chromaticity red primary point","prototype":"Gmagick Gmagick::setimageredprimary(float $x, float $y)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagerenderingintent":{"id":"gmagick.setimagerenderingintent","purpose":"Sets the image rendering intent","prototype":"Gmagick Gmagick::setimagerenderingintent(int $rendering_intent)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageresolution":{"id":"gmagick.setimageresolution","purpose":"Sets the image resolution","prototype":"Gmagick Gmagick::setimageresolution(float $xResolution, float $yResolution)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagescene":{"id":"gmagick.setimagescene","purpose":"Sets the image scene","prototype":"Gmagick Gmagick::setimagescene(int $scene)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagetype":{"id":"gmagick.setimagetype","purpose":"Sets the image type","prototype":"Gmagick Gmagick::setimagetype(int $imgType)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimageunits":{"id":"gmagick.setimageunits","purpose":"Sets the image units of resolution","prototype":"Gmagick Gmagick::setimageunits(int $resolution)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setimagewhitepoint":{"id":"gmagick.setimagewhitepoint","purpose":"Sets the image chromaticity white point","prototype":"Gmagick Gmagick::setimagewhitepoint(float $x, float $y)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setsamplingfactors":{"id":"gmagick.setsamplingfactors","purpose":"Sets the image sampling factors","prototype":"Gmagick Gmagick::setsamplingfactors(array $factors)","return":"<p class=\"para\">      The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::setsize":{"id":"gmagick.setsize","purpose":"Sets the size of the Gmagick object","prototype":"Gmagick Gmagick::setsize(int $columns, int $rows)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::shearimage":{"id":"gmagick.shearimage","purpose":"Creating a parallelogram","prototype":"Gmagick Gmagick::shearimage(mixed $color, float $xShear, float $yShear)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::solarizeimage":{"id":"gmagick.solarizeimage","purpose":"Applies a solarizing effect to the image","prototype":"Gmagick Gmagick::solarizeimage(int $threshold)","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::spreadimage":{"id":"gmagick.spreadimage","purpose":"Randomly displaces each pixel in a block","prototype":"Gmagick Gmagick::spreadimage(float $radius)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::stripimage":{"id":"gmagick.stripimage","purpose":"Strips an image of all profiles and comments","prototype":"Gmagick Gmagick::stripimage()","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::swirlimage":{"id":"gmagick.swirlimage","purpose":"Swirls the pixels about the center of the image","prototype":"Gmagick Gmagick::swirlimage(float $degrees)","return":"<p class=\"para\">   The Gmagick object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::thumbnailimage":{"id":"gmagick.thumbnailimage","purpose":"Changes the size of an image","prototype":"Gmagick Gmagick::thumbnailimage(int $width, int $height [, bool $fit = ''])","return":"<p class=\"para\">   The Gmagick object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::trimimage":{"id":"gmagick.trimimage","purpose":"Remove edges from the image","prototype":"Gmagick Gmagick::trimimage(float $fuzz)","return":"<p class=\"para\">   The Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"Gmagick::write":{"id":"gmagick.write","purpose":"Alias of Gmagick::writeimage","prototype":" Gmagick::write()","return":"","versions":"PECL gmagick >= Unknown"},"Gmagick::writeimage":{"id":"gmagick.writeimage","purpose":"Writes an image to the specified filename","prototype":"Gmagick Gmagick::writeimage(string $filename [, bool $all_frames = ''])","return":"<p class=\"para\">   The Gmagick object  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::annotate":{"id":"gmagickdraw.annotate","purpose":"Draws text on the image","prototype":"GmagickDraw GmagickDraw::annotate(float $x, float $y, string $text)","return":"<p class=\"para\">       The GmagickDraw object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::arc":{"id":"gmagickdraw.arc","purpose":"Draws an arc","prototype":"GmagickDraw GmagickDraw::arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed)","return":"<p class=\"para\">   The GmagickDraw object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::bezier":{"id":"gmagickdraw.bezier","purpose":"Draws a bezier curve","prototype":"GmagickDraw GmagickDraw::bezier(array $coordinate_array)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::ellipse":{"id":"gmagickdraw.ellipse","purpose":"Draws an ellipse on the image","prototype":"GmagickDraw GmagickDraw::ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getfillcolor":{"id":"gmagickdraw.getfillcolor","purpose":"Returns the fill color","prototype":"GmagickPixel GmagickDraw::getfillcolor()","return":"<p class=\"para\">   The <span class=\"classname\">GmagickPixel<\/span> fill color used for drawing filled objects.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getfillopacity":{"id":"gmagickdraw.getfillopacity","purpose":"Returns the opacity used when drawing","prototype":"float GmagickDraw::getfillopacity()","return":"<p class=\"para\">   Returns the opacity used when drawing using the fill color or fill texture. Fully opaque is 1.0.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getfont":{"id":"gmagickdraw.getfont","purpose":"Returns the font","prototype":"mixed GmagickDraw::getfont()","return":"<p class=\"para\">   Returns a string on success and <strong><code>FALSE<\/code><\/strong> if no font is set.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getfontsize":{"id":"gmagickdraw.getfontsize","purpose":"Returns the font pointsize","prototype":"float GmagickDraw::getfontsize()","return":"<p class=\"para\">   Returns the font size associated with the current GmagickDraw object.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getfontstyle":{"id":"gmagickdraw.getfontstyle","purpose":"Returns the font style","prototype":"int GmagickDraw::getfontstyle()","return":"<p class=\"para\">   Returns the font style constant (STYLE_) associated with the GmagickDraw object or 0 if no style is set.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getfontweight":{"id":"gmagickdraw.getfontweight","purpose":"Returns the font weight","prototype":"int GmagickDraw::getfontweight()","return":"<p class=\"para\">   Returns an int on success and 0 if no weight is set.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getstrokecolor":{"id":"gmagickdraw.getstrokecolor","purpose":"Returns the color used for stroking object outlines","prototype":"GmagickPixel GmagickDraw::getstrokecolor()","return":"<p class=\"para\">   Returns an <span class=\"classname\">GmagickPixel<\/span> object which describes the color.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getstrokeopacity":{"id":"gmagickdraw.getstrokeopacity","purpose":"Returns the opacity of stroked object outlines","prototype":"float GmagickDraw::getstrokeopacity()","return":"<p class=\"para\">   Returns a double describing the opacity.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::getstrokewidth":{"id":"gmagickdraw.getstrokewidth","purpose":"Returns the width of the stroke used to draw object outlines","prototype":"float GmagickDraw::getstrokewidth()","return":"<p class=\"para\">   Returns a double describing the stroke width.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::gettextdecoration":{"id":"gmagickdraw.gettextdecoration","purpose":"Returns the text decoration","prototype":"int GmagickDraw::gettextdecoration()","return":"<p class=\"para\">   Returns one of the DECORATION_ constants and 0 if no decoration is set.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::gettextencoding":{"id":"gmagickdraw.gettextencoding","purpose":"Returns the code set used for text annotations","prototype":"mixed GmagickDraw::gettextencoding()","return":"<p class=\"para\">   Returns a string specifying the code set or <strong><code>FALSE<\/code><\/strong> if text encoding is not set.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::line":{"id":"gmagickdraw.line","purpose":"The line purpose","prototype":"GmagickDraw GmagickDraw::line(float $sx, float $sy, float $ex, float $ey)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::point":{"id":"gmagickdraw.point","purpose":"Draws a point","prototype":"GmagickDraw GmagickDraw::point(float $x, float $y)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::polygon":{"id":"gmagickdraw.polygon","purpose":"Draws a polygon","prototype":"GmagickDraw GmagickDraw::polygon(array $coordinates)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::polyline":{"id":"gmagickdraw.polyline","purpose":"Draws a polyline","prototype":"GmagickDraw GmagickDraw::polyline(array $coordinate_array)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::rectangle":{"id":"gmagickdraw.rectangle","purpose":"Draws a rectangle","prototype":"GmagickDraw GmagickDraw::rectangle(float $x1, float $y1, float $x2, float $y2)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::rotate":{"id":"gmagickdraw.rotate","purpose":"Applies the specified rotation to the current coordinate space","prototype":"GmagickDraw GmagickDraw::rotate(float $degrees)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::roundrectangle":{"id":"gmagickdraw.roundrectangle","purpose":"Draws a rounded rectangle","prototype":"GmagickDraw GmagickDraw::roundrectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::scale":{"id":"gmagickdraw.scale","purpose":"Adjusts the scaling factor","prototype":"GmagickDraw GmagickDraw::scale(float $x, float $y)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setfillcolor":{"id":"gmagickdraw.setfillcolor","purpose":"Sets the fill color to be used for drawing filled objects","prototype":"GmagickDraw GmagickDraw::setfillcolor(mixed $color)","return":"<p class=\"para\">   The <span class=\"classname\">GmagickDraw<\/span> object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setfillopacity":{"id":"gmagickdraw.setfillopacity","purpose":"The setfillopacity purpose","prototype":"GmagickDraw GmagickDraw::setfillopacity(float $fill_opacity)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setfont":{"id":"gmagickdraw.setfont","purpose":"Sets the fully-specified font to use when annotating with text","prototype":"GmagickDraw GmagickDraw::setfont(string $font)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setfontsize":{"id":"gmagickdraw.setfontsize","purpose":"Sets the font pointsize to use when annotating with text","prototype":"GmagickDraw GmagickDraw::setfontsize(float $pointsize)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setfontstyle":{"id":"gmagickdraw.setfontstyle","purpose":"Sets the font style to use when annotating with text","prototype":"GmagickDraw GmagickDraw::setfontstyle(int $style)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setfontweight":{"id":"gmagickdraw.setfontweight","purpose":"Sets the font weight","prototype":"GmagickDraw GmagickDraw::setfontweight(int $weight)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setstrokecolor":{"id":"gmagickdraw.setstrokecolor","purpose":"Sets the color used for stroking object outlines","prototype":"GmagickDraw GmagickDraw::setstrokecolor(mixed $color)","return":"<p class=\"para\">   The <span class=\"classname\">GmagickDraw<\/span> object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setstrokeopacity":{"id":"gmagickdraw.setstrokeopacity","purpose":"Specifies the opacity of stroked object outlines","prototype":"GmagickDraw GmagickDraw::setstrokeopacity(float $stroke_opacity)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::setstrokewidth":{"id":"gmagickdraw.setstrokewidth","purpose":"Sets the width of the stroke used to draw object outlines","prototype":"GmagickDraw GmagickDraw::setstrokewidth(float $width)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::settextdecoration":{"id":"gmagickdraw.settextdecoration","purpose":"Specifies a decoration","prototype":"GmagickDraw GmagickDraw::settextdecoration(int $decoration)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickDraw::settextencoding":{"id":"gmagickdraw.settextencoding","purpose":"Specifies the text code set","prototype":"GmagickDraw GmagickDraw::settextencoding(string $encoding)","return":"<p class=\"para\">   The GmagickDraw object on success  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickPixel::__construct":{"id":"gmagickpixel.construct","purpose":"The GmagickPixel constructor","prototype":" GmagickPixel::__construct([string $color = ''])","return":"<p class=\"para\">   The GmagickPixel object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickPixel::getcolor":{"id":"gmagickpixel.getcolor","purpose":"Returns the color","prototype":"array GmagickPixel::getcolor([bool $as_array = '' [, bool $normalize_array = '']])","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> or an <span class=\"type\">array<\/span> of channel values, each normalized if <strong><code>TRUE<\/code><\/strong> is given as <code class=\"parameter\">normalize_array<\/code>. Throws <span class=\"classname\">GmagickPixelException<\/span> on error.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickPixel::getcolorcount":{"id":"gmagickpixel.getcolorcount","purpose":"Returns the color count associated with this color","prototype":"int GmagickPixel::getcolorcount()","return":"<p class=\"para\">   Returns the color count as an integer on success, throws GmagickPixelException on failure.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickPixel::getcolorvalue":{"id":"gmagickpixel.getcolorvalue","purpose":"Gets the normalized value of the provided color channel","prototype":"float GmagickPixel::getcolorvalue(int $color)","return":"<p class=\"para\">   The value of the channel, as a normalized floating-point number, throwing GmagickPixelException on error.   <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickPixel::setcolor":{"id":"gmagickpixel.setcolor","purpose":"Sets the color","prototype":"GmagickPixel GmagickPixel::setcolor(string $color)","return":"<p class=\"para\">   The GmagickPixel object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"GmagickPixel::setcolorvalue":{"id":"gmagickpixel.setcolorvalue","purpose":"Sets the normalized value of one of the channels","prototype":"GmagickPixel GmagickPixel::setcolorvalue(int $color, float $value)","return":"<p class=\"para\">   The GmagickPixel object on success.  <\/p>","versions":"PECL gmagick >= Unknown"},"Imagick::adaptiveBlurImage":{"id":"imagick.adaptiveblurimage","purpose":"Adds adaptive blur filter to image","prototype":"bool Imagick::adaptiveBlurImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::adaptiveResizeImage":{"id":"imagick.adaptiveresizeimage","purpose":"Adaptively resize image with data dependent triangulation","prototype":"bool Imagick::adaptiveResizeImage(int $columns, int $rows [, bool $bestfit = '' [, bool $legacy = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::adaptiveSharpenImage":{"id":"imagick.adaptivesharpenimage","purpose":"Adaptively sharpen the image","prototype":"bool Imagick::adaptiveSharpenImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::adaptiveThresholdImage":{"id":"imagick.adaptivethresholdimage","purpose":"Selects a threshold for each pixel based on a range of intensity","prototype":"bool Imagick::adaptiveThresholdImage(int $width, int $height, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::addImage":{"id":"imagick.addimage","purpose":"Adds new image to Imagick object image list","prototype":"bool Imagick::addImage(Imagick $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::addNoiseImage":{"id":"imagick.addnoiseimage","purpose":"Adds random noise to the image","prototype":"bool Imagick::addNoiseImage(int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::affineTransformImage":{"id":"imagick.affinetransformimage","purpose":"Transforms an image","prototype":"bool Imagick::affineTransformImage(ImagickDraw $matrix)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::animateImages":{"id":"imagick.animateimages","purpose":"Animates an image or images","prototype":"bool Imagick::animateImages(string $x_server)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::annotateImage":{"id":"imagick.annotateimage","purpose":"Annotates an image with text","prototype":"bool Imagick::annotateImage(ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::appendImages":{"id":"imagick.appendimages","purpose":"Append a set of images","prototype":"Imagick Imagick::appendImages(bool $stack)","return":"<p class=\"para\">   Returns Imagick instance on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::autoLevelImage":{"id":"imagick.autolevelimage","purpose":"Description","prototype":"bool Imagick::autoLevelImage([int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::averageImages":{"id":"imagick.averageimages","purpose":"Average a set of images","prototype":"Imagick Imagick::averageImages()","return":"<p class=\"para\">   Returns a new Imagick object on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::blackThresholdImage":{"id":"imagick.blackthresholdimage","purpose":"Forces all pixels below the threshold into black","prototype":"bool Imagick::blackThresholdImage(mixed $threshold)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::blueShiftImage":{"id":"imagick.blueshiftimage","purpose":"Description","prototype":"bool Imagick::blueShiftImage([float $factor = 1.5])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::blurImage":{"id":"imagick.blurimage","purpose":"Adds blur filter to image","prototype":"bool Imagick::blurImage(float $radius, float $sigma [, int $channel = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::borderImage":{"id":"imagick.borderimage","purpose":"Surrounds the image with a border","prototype":"bool Imagick::borderImage(mixed $bordercolor, int $width, int $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::brightnessContrastImage":{"id":"imagick.brightnesscontrastimage","purpose":"Description","prototype":"bool Imagick::brightnessContrastImage(float $brightness, float $contrast [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::charcoalImage":{"id":"imagick.charcoalimage","purpose":"Simulates a charcoal drawing","prototype":"bool Imagick::charcoalImage(float $radius, float $sigma)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::chopImage":{"id":"imagick.chopimage","purpose":"Removes a region of an image and trims","prototype":"bool Imagick::chopImage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::clampImage":{"id":"imagick.clampimage","purpose":"Description","prototype":"bool Imagick::clampImage([int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"Imagick::clear":{"id":"imagick.clear","purpose":"Clears all resources associated to Imagick object","prototype":"bool Imagick::clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::clipImage":{"id":"imagick.clipimage","purpose":"Clips along the first path from the 8BIM profile","prototype":"bool Imagick::clipImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::clipImagePath":{"id":"imagick.clipimagepath","purpose":"Description","prototype":"void Imagick::clipImagePath(string $pathname, string $inside)","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::clipPathImage":{"id":"imagick.clippathimage","purpose":"Clips along the named paths from the 8BIM profile","prototype":"bool Imagick::clipPathImage(string $pathname, bool $inside)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::clone":{"id":"imagick.clone","purpose":"Makes an exact copy of the Imagick object","prototype":"Imagick Imagick::clone()","return":"<p class=\"para\">   A copy of the Imagick object is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::clutImage":{"id":"imagick.clutimage","purpose":"Replaces colors in the image","prototype":"bool Imagick::clutImage(Imagick $lookup_table [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::coalesceImages":{"id":"imagick.coalesceimages","purpose":"Composites a set of images","prototype":"Imagick Imagick::coalesceImages()","return":"<p class=\"para\">   Returns a new Imagick object on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::colorFloodfillImage":{"id":"imagick.colorfloodfillimage","purpose":"Changes the color value of any pixel that matches target","prototype":"bool Imagick::colorFloodfillImage(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::colorizeImage":{"id":"imagick.colorizeimage","purpose":"Blends the fill color with the image","prototype":"bool Imagick::colorizeImage(mixed $colorize, mixed $opacity [, bool $legacy = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::colorMatrixImage":{"id":"imagick.colormatriximage","purpose":"Description","prototype":"bool Imagick::colorMatrixImage(array $color_matrix)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::combineImages":{"id":"imagick.combineimages","purpose":"Combines one or more images into a single image","prototype":"Imagick Imagick::combineImages(int $channelType)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::commentImage":{"id":"imagick.commentimage","purpose":"Adds a comment to your image","prototype":"bool Imagick::commentImage(string $comment)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::compareImageChannels":{"id":"imagick.compareimagechannels","purpose":"Returns the difference in one or more images","prototype":"array Imagick::compareImageChannels(Imagick $image, int $channelType, int $metricType)","return":"<p class=\"para\">   Array consisting of <em>new_wand<\/em> and   <em>distortion<\/em>.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::compareImageLayers":{"id":"imagick.compareimagelayers","purpose":"Returns the maximum bounding region between images","prototype":"Imagick Imagick::compareImageLayers(int $method)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::compareImages":{"id":"imagick.compareimages","purpose":"Compares an image to a reconstructed image","prototype":"array Imagick::compareImages(Imagick $compare, int $metric)","return":"<p class=\"para\">   Returns an array containing a reconstructed image and the difference between images.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::compositeImage":{"id":"imagick.compositeimage","purpose":"Composite one image onto another","prototype":"bool Imagick::compositeImage(Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::__construct":{"id":"imagick.construct","purpose":"The Imagick constructor","prototype":" Imagick::__construct([mixed $files = ''])","return":"<p class=\"para\">   Returns a new Imagick object on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::contrastImage":{"id":"imagick.contrastimage","purpose":"Change the contrast of the image","prototype":"bool Imagick::contrastImage(bool $sharpen)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::contrastStretchImage":{"id":"imagick.contraststretchimage","purpose":"Enhances the contrast of a color image","prototype":"bool Imagick::contrastStretchImage(float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::convolveImage":{"id":"imagick.convolveimage","purpose":"Applies a custom convolution kernel to the image","prototype":"bool Imagick::convolveImage(array $kernel [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::count":{"id":"imagick.count","purpose":"Get the number of images","prototype":"int Imagick::count([int $mode = ''])","return":"<p class=\"para\">   Returns the number of images.  <\/p>","versions":""},"Imagick::cropImage":{"id":"imagick.cropimage","purpose":"Extracts a region of the image","prototype":"bool Imagick::cropImage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::cropThumbnailImage":{"id":"imagick.cropthumbnailimage","purpose":"Creates a crop thumbnail","prototype":"bool Imagick::cropThumbnailImage(int $width, int $height [, bool $legacy = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::current":{"id":"imagick.current","purpose":"Returns a reference to the current Imagick object","prototype":"Imagick Imagick::current()","return":"<p class=\"para\">   Returns self on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::cycleColormapImage":{"id":"imagick.cyclecolormapimage","purpose":"Displaces an image's colormap","prototype":"bool Imagick::cycleColormapImage(int $displace)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::decipherImage":{"id":"imagick.decipherimage","purpose":"Deciphers an image","prototype":"bool Imagick::decipherImage(string $passphrase)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::deconstructImages":{"id":"imagick.deconstructimages","purpose":"Returns certain pixel differences between images","prototype":"Imagick Imagick::deconstructImages()","return":"<p class=\"para\">   Returns a new Imagick object on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::deleteImageArtifact":{"id":"imagick.deleteimageartifact","purpose":"Delete image artifact","prototype":"bool Imagick::deleteImageArtifact(string $artifact)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::deleteImageProperty":{"id":"imagick.deleteimageproperty","purpose":"Description","prototype":"bool Imagick::deleteImageProperty(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::deskewImage":{"id":"imagick.deskewimage","purpose":"Removes skew from the image","prototype":"bool Imagick::deskewImage(float $threshold)","return":"<p class=\"para\">  <\/p>","versions":""},"Imagick::despeckleImage":{"id":"imagick.despeckleimage","purpose":"Reduces the speckle noise in an image","prototype":"bool Imagick::despeckleImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::destroy":{"id":"imagick.destroy","purpose":"Destroys the Imagick object","prototype":"bool Imagick::destroy()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::displayImage":{"id":"imagick.displayimage","purpose":"Displays an image","prototype":"bool Imagick::displayImage(string $servername)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::displayImages":{"id":"imagick.displayimages","purpose":"Displays an image or image sequence","prototype":"bool Imagick::displayImages(string $servername)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::distortImage":{"id":"imagick.distortimage","purpose":"Distorts an image using various distortion methods","prototype":"bool Imagick::distortImage(int $method, array $arguments, bool $bestfit)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.1"},"Imagick::drawImage":{"id":"imagick.drawimage","purpose":"Renders the ImagickDraw object on the current image","prototype":"bool Imagick::drawImage(ImagickDraw $draw)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::edgeImage":{"id":"imagick.edgeimage","purpose":"Enhance edges within the image","prototype":"bool Imagick::edgeImage(float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::embossImage":{"id":"imagick.embossimage","purpose":"Returns a grayscale image with a three-dimensional effect","prototype":"bool Imagick::embossImage(float $radius, float $sigma)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::encipherImage":{"id":"imagick.encipherimage","purpose":"Enciphers an image","prototype":"bool Imagick::encipherImage(string $passphrase)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::enhanceImage":{"id":"imagick.enhanceimage","purpose":"Improves the quality of a noisy image","prototype":"bool Imagick::enhanceImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::equalizeImage":{"id":"imagick.equalizeimage","purpose":"Equalizes the image histogram","prototype":"bool Imagick::equalizeImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::evaluateImage":{"id":"imagick.evaluateimage","purpose":"Applies an expression to an image","prototype":"bool Imagick::evaluateImage(int $op, float $constant [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::exportImagePixels":{"id":"imagick.exportimagepixels","purpose":"Exports raw image pixels","prototype":"array Imagick::exportImagePixels(int $x, int $y, int $width, int $height, string $map, int $STORAGE)","return":"<p class=\"para\">   Returns an array containing the pixels values.  <\/p>","versions":""},"Imagick::extentImage":{"id":"imagick.extentimage","purpose":"Set image size","prototype":"bool Imagick::extentImage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::filter":{"id":"imagick.filter","purpose":"Description","prototype":"bool Imagick::filter(ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_UNDEFINED])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::flattenImages":{"id":"imagick.flattenimages","purpose":"Merges a sequence of images","prototype":"Imagick Imagick::flattenImages()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::flipImage":{"id":"imagick.flipimage","purpose":"Creates a vertical mirror image","prototype":"bool Imagick::flipImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::floodFillPaintImage":{"id":"imagick.floodfillpaintimage","purpose":"Changes the color value of any pixel that matches target","prototype":"bool Imagick::floodFillPaintImage(mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::flopImage":{"id":"imagick.flopimage","purpose":"Creates a horizontal mirror image","prototype":"bool Imagick::flopImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::forwardFourierTransformImage":{"id":"imagick.forwardfouriertransformimage","purpose":"Description","prototype":"bool Imagick::forwardFourierTransformImage(bool $magnitude)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::frameImage":{"id":"imagick.frameimage","purpose":"Adds a simulated three-dimensional border","prototype":"bool Imagick::frameImage(mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::functionImage":{"id":"imagick.functionimage","purpose":"Applies a function on the image","prototype":"bool Imagick::functionImage(int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::fxImage":{"id":"imagick.fximage","purpose":"Evaluate expression for each pixel in the image","prototype":"Imagick Imagick::fxImage(string $expression [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::gammaImage":{"id":"imagick.gammaimage","purpose":"Gamma-corrects an image","prototype":"bool Imagick::gammaImage(float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::gaussianBlurImage":{"id":"imagick.gaussianblurimage","purpose":"Blurs an image","prototype":"bool Imagick::gaussianBlurImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getColorspace":{"id":"imagick.getcolorspace","purpose":"Gets the colorspace","prototype":"int Imagick::getColorspace()","return":"<p class=\"para\">   Returns an integer which can be compared against <a href=\"imagick.constants.html#imagick.constants.colorspace\" class=\"link\">COLORSPACE constants<\/a>.  <\/p>","versions":"PECL imagick 0.9.10-0.9.9"},"Imagick::getCompression":{"id":"imagick.getcompression","purpose":"Gets the object compression type","prototype":"int Imagick::getCompression()","return":"<p class=\"para\">   Returns the compression constant  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getCompressionQuality":{"id":"imagick.getcompressionquality","purpose":"Gets the object compression quality","prototype":"int Imagick::getCompressionQuality()","return":"<p class=\"para\">   Returns integer describing the compression quality  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getCopyright":{"id":"imagick.getcopyright","purpose":"Returns the ImageMagick API copyright as a string","prototype":"string Imagick::getCopyright()","return":"<p class=\"para\">   Returns a string containing the copyright notice of Imagemagick and   Magickwand C API.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getFilename":{"id":"imagick.getfilename","purpose":"The filename associated with an image sequence","prototype":"string Imagick::getFilename()","return":"<p class=\"para\">   Returns a string on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getFont":{"id":"imagick.getfont","purpose":"Gets font","prototype":"string Imagick::getFont()","return":"<p class=\"para\">   Returns the string containing the font name or <strong><code>FALSE<\/code><\/strong> if not font is set.  <\/p>","versions":"PECL imagick 2.1.0"},"Imagick::getFormat":{"id":"imagick.getformat","purpose":"Returns the format of the Imagick object","prototype":"string Imagick::getFormat()","return":"<p class=\"para\">   Returns the format of the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getGravity":{"id":"imagick.getgravity","purpose":"Gets the gravity","prototype":"int Imagick::getGravity()","return":"<p class=\"para\">   Returns the gravity property. Refer to the list of    <a href=\"imagick.constants.html#imagick.constants.gravity\" class=\"link\">gravity constants<\/a>.  <\/p>","versions":""},"Imagick::getHomeURL":{"id":"imagick.gethomeurl","purpose":"Returns the ImageMagick home URL","prototype":"string Imagick::getHomeURL()","return":"<p class=\"para\">   Returns a link to the imagemagick homepage.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImage":{"id":"imagick.getimage","purpose":"Returns a new Imagick object","prototype":"Imagick Imagick::getImage()","return":"<p class=\"para\">   Returns a new Imagick object with the current image sequence.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageAlphaChannel":{"id":"imagick.getimagealphachannel","purpose":"Gets the image alpha channel","prototype":"int Imagick::getImageAlphaChannel()","return":"<p class=\"para\">   Returns a constant defining the current alpha channel value. Refer to this   list of <a href=\"imagick.constants.html#imagick.constants.alphachannel\" class=\"link\">alpha channel constants<\/a>.  <\/p>","versions":""},"Imagick::getImageArtifact":{"id":"imagick.getimageartifact","purpose":"Get image artifact","prototype":"string Imagick::getImageArtifact(string $artifact)","return":"<p class=\"para\">   Returns the artifact value on success.  <\/p>","versions":""},"Imagick::getImageAttribute":{"id":"imagick.getimageattribute","purpose":"Description","prototype":"string Imagick::getImageAttribute(string $key)","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::getImageBackgroundColor":{"id":"imagick.getimagebackgroundcolor","purpose":"Returns the image background color","prototype":"ImagickPixel Imagick::getImageBackgroundColor()","return":"<p class=\"para\">   Returns an ImagickPixel set to the background color of the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageBlob":{"id":"imagick.getimageblob","purpose":"Returns the image sequence as a blob","prototype":"string Imagick::getImageBlob()","return":"<p class=\"para\">   Returns a string containing the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageBluePrimary":{"id":"imagick.getimageblueprimary","purpose":"Returns the chromaticy blue primary point","prototype":"array Imagick::getImageBluePrimary()","return":"<p class=\"para\">   Array consisting of &quot;x&quot; and &quot;y&quot; coordinates of point.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageBorderColor":{"id":"imagick.getimagebordercolor","purpose":"Returns the image border color","prototype":"ImagickPixel Imagick::getImageBorderColor()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageChannelDepth":{"id":"imagick.getimagechanneldepth","purpose":"Gets the depth for a particular image channel","prototype":"int Imagick::getImageChannelDepth(int $channel)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageChannelDistortion":{"id":"imagick.getimagechanneldistortion","purpose":"Compares image channels of an image to a reconstructed image","prototype":"float Imagick::getImageChannelDistortion(Imagick $reference, int $channel, int $metric)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageChannelDistortions":{"id":"imagick.getimagechanneldistortions","purpose":"Gets channel distortions","prototype":"float Imagick::getImageChannelDistortions(Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns a double describing the channel distortion.   <\/p>","versions":""},"Imagick::getImageChannelExtrema":{"id":"imagick.getimagechannelextrema","purpose":"Gets the extrema for one or more image channels","prototype":"array Imagick::getImageChannelExtrema(int $channel)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageChannelKurtosis":{"id":"imagick.getimagechannelkurtosis","purpose":"The getImageChannelKurtosis purpose","prototype":"array Imagick::getImageChannelKurtosis([int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns an array with <em>kurtosis<\/em> and <em>skewness<\/em>   members.  <\/p>","versions":""},"Imagick::getImageChannelMean":{"id":"imagick.getimagechannelmean","purpose":"Gets the mean and standard deviation","prototype":"array Imagick::getImageChannelMean(int $channel)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageChannelRange":{"id":"imagick.getimagechannelrange","purpose":"Gets channel range","prototype":"array Imagick::getImageChannelRange(int $channel)","return":"<p class=\"para\">   Returns an array containing minima and maxima values of the channel(s).  <\/p>","versions":"PECL imagick 2.2.1"},"Imagick::getImageChannelStatistics":{"id":"imagick.getimagechannelstatistics","purpose":"Returns statistics for each channel in the image","prototype":"array Imagick::getImageChannelStatistics()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageClipMask":{"id":"imagick.getimageclipmask","purpose":"Gets image clip mask","prototype":"Imagick Imagick::getImageClipMask()","return":"<p class=\"para\">   Returns an Imagick object containing the clip mask.  <\/p>","versions":""},"Imagick::getImageColormapColor":{"id":"imagick.getimagecolormapcolor","purpose":"Returns the color of the specified colormap index","prototype":"ImagickPixel Imagick::getImageColormapColor(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageColors":{"id":"imagick.getimagecolors","purpose":"Gets the number of unique colors in the image","prototype":"int Imagick::getImageColors()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span>, the number of unique colors in the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageColorspace":{"id":"imagick.getimagecolorspace","purpose":"Gets the image colorspace","prototype":"int Imagick::getImageColorspace()","return":"<p class=\"para\">   Returns an integer which can be compared against <a href=\"imagick.constants.html#imagick.constants.colorspace\" class=\"link\">COLORSPACE constants<\/a>.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageCompose":{"id":"imagick.getimagecompose","purpose":"Returns the composite operator associated with the image","prototype":"int Imagick::getImageCompose()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageCompression":{"id":"imagick.getimagecompression","purpose":"Gets the current image's compression type","prototype":"int Imagick::getImageCompression()","return":"<p class=\"para\">   Returns the compression constant  <\/p>","versions":"PECL imagick 2.2.2"},"Imagick::getImageCompressionQuality":{"id":"imagick.getimagecompressionquality","purpose":"Gets the current image's compression quality","prototype":"int Imagick::getImageCompressionQuality()","return":"<p class=\"para\">   Returns integer describing the images compression quality  <\/p>","versions":"PECL imagick 2.2.2"},"Imagick::getImageDelay":{"id":"imagick.getimagedelay","purpose":"Gets the image delay","prototype":"int Imagick::getImageDelay()","return":"<p class=\"para\">   Returns the image delay.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageDepth":{"id":"imagick.getimagedepth","purpose":"Gets the image depth","prototype":"int Imagick::getImageDepth()","return":"<p class=\"para\">   The image depth.  <\/p>","versions":"PECL imagick 0.9.1-0.9.9"},"Imagick::getImageDispose":{"id":"imagick.getimagedispose","purpose":"Gets the image disposal method","prototype":"int Imagick::getImageDispose()","return":"<p class=\"para\">   Returns the dispose method on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageDistortion":{"id":"imagick.getimagedistortion","purpose":"Compares an image to a reconstructed image","prototype":"float Imagick::getImageDistortion(MagickWand $reference, int $metric)","return":"<p class=\"para\">   Returns the distortion metric used on the image (or the best guess   thereof).  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageExtrema":{"id":"imagick.getimageextrema","purpose":"Gets the extrema for the image","prototype":"array Imagick::getImageExtrema()","return":"<p class=\"para\">   Returns an associative array with the keys &quot;min&quot; and &quot;max&quot;.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageFilename":{"id":"imagick.getimagefilename","purpose":"Returns the filename of a particular image in a sequence","prototype":"string Imagick::getImageFilename()","return":"<p class=\"para\">   Returns a string with the filename of the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageFormat":{"id":"imagick.getimageformat","purpose":"Returns the format of a particular image in a sequence","prototype":"string Imagick::getImageFormat()","return":"<p class=\"para\">   Returns a string containing the image format on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageGamma":{"id":"imagick.getimagegamma","purpose":"Gets the image gamma","prototype":"float Imagick::getImageGamma()","return":"<p class=\"para\">   Returns the image gamma on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageGeometry":{"id":"imagick.getimagegeometry","purpose":"Gets the width and height as an associative array","prototype":"array Imagick::getImageGeometry()","return":"<p class=\"para\">   Returns an array with the width\/height of the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageGravity":{"id":"imagick.getimagegravity","purpose":"Gets the image gravity","prototype":"int Imagick::getImageGravity()","return":"<p class=\"para\">   Returns the images gravity property. Refer to the list of    <a href=\"imagick.constants.html#imagick.constants.gravity\" class=\"link\">gravity constants<\/a>.  <\/p>","versions":""},"Imagick::getImageGreenPrimary":{"id":"imagick.getimagegreenprimary","purpose":"Returns the chromaticy green primary point","prototype":"array Imagick::getImageGreenPrimary()","return":"<p class=\"para\">   Returns an array with the keys &quot;x&quot; and &quot;y&quot; on success, throws an   ImagickException on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageHeight":{"id":"imagick.getimageheight","purpose":"Returns the image height","prototype":"int Imagick::getImageHeight()","return":"<p class=\"para\">   Returns the image height in pixels.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageHistogram":{"id":"imagick.getimagehistogram","purpose":"Gets the image histogram","prototype":"array Imagick::getImageHistogram()","return":"<p class=\"para\">   Returns the image histogram as an array of ImagickPixel objects.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageIndex":{"id":"imagick.getimageindex","purpose":"Gets the index of the current active image","prototype":"int Imagick::getImageIndex()","return":"<p class=\"para\">   Returns an integer containing the index of the image in the stack.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageInterlaceScheme":{"id":"imagick.getimageinterlacescheme","purpose":"Gets the image interlace scheme","prototype":"int Imagick::getImageInterlaceScheme()","return":"<p class=\"para\">   Returns the interlace scheme as an integer on success.   Throw an<span class=\"classname\">ImagickException<\/span> on error.     <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageInterpolateMethod":{"id":"imagick.getimageinterpolatemethod","purpose":"Returns the interpolation method","prototype":"int Imagick::getImageInterpolateMethod()","return":"<p class=\"para\">   Returns the interpolate method on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageIterations":{"id":"imagick.getimageiterations","purpose":"Gets the image iterations","prototype":"int Imagick::getImageIterations()","return":"<p class=\"para\">   Returns the image iterations as an integer.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageLength":{"id":"imagick.getimagelength","purpose":"Returns the image length in bytes","prototype":"int Imagick::getImageLength()","return":"<p class=\"para\">   Returns an int containing the current image size.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageMagickLicense":{"id":"imagick.getimagemagicklicense","purpose":"Returns a string containing the ImageMagick license","prototype":"string Imagick::getImageMagickLicense()","return":"<p class=\"para\">   Returns a string containing the ImageMagick license.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageMatte":{"id":"imagick.getimagematte","purpose":"Return if the image has a matte channel","prototype":"bool Imagick::getImageMatte()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageMatteColor":{"id":"imagick.getimagemattecolor","purpose":"Returns the image matte color","prototype":"ImagickPixel Imagick::getImageMatteColor()","return":"<p class=\"para\">   Returns ImagickPixel object on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageMimeType":{"id":"imagick.getimagemimetype","purpose":"Description","prototype":"string Imagick::getImageMimeType()","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::getImageOrientation":{"id":"imagick.getimageorientation","purpose":"Gets the image orientation","prototype":"int Imagick::getImageOrientation()","return":"<p class=\"para\">   Returns an int on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImagePage":{"id":"imagick.getimagepage","purpose":"Returns the page geometry","prototype":"array Imagick::getImagePage()","return":"<p class=\"para\">   Returns the page geometry associated with the image in an array with the   keys &quot;width&quot;, &quot;height&quot;, &quot;x&quot;, and &quot;y&quot;.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImagePixelColor":{"id":"imagick.getimagepixelcolor","purpose":"Returns the color of the specified pixel","prototype":"ImagickPixel Imagick::getImagePixelColor(int $x, int $y)","return":"<p class=\"para\">   Returns an ImagickPixel instance for the color at the coordinates given.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageProfile":{"id":"imagick.getimageprofile","purpose":"Returns the named image profile","prototype":"string Imagick::getImageProfile(string $name)","return":"<p class=\"para\">   Returns a string containing the image profile.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageProfiles":{"id":"imagick.getimageprofiles","purpose":"Returns the image profiles","prototype":"array Imagick::getImageProfiles([string $pattern = \"*\" [, bool $include_values = '']])","return":"<p class=\"para\">   Returns an array containing the image profiles or profile names.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageProperties":{"id":"imagick.getimageproperties","purpose":"Returns the image properties","prototype":"array Imagick::getImageProperties([string $pattern = \"*\" [, bool $include_values = '']])","return":"<p class=\"para\">  Returns an array containing the image properties or property names.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageProperty":{"id":"imagick.getimageproperty","purpose":"Returns the named image property","prototype":"string Imagick::getImageProperty(string $name)","return":"<p class=\"para\">   Returns a string containing the image property, false if a    property with the given name does not exist.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageRedPrimary":{"id":"imagick.getimageredprimary","purpose":"Returns the chromaticity red primary point","prototype":"array Imagick::getImageRedPrimary()","return":"<p class=\"para\">    Returns the chromaticity red primary point as an array with the keys &quot;x&quot;    and &quot;y&quot;.    Throw an<span class=\"classname\">ImagickException<\/span> on error.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageRegion":{"id":"imagick.getimageregion","purpose":"Extracts a region of the image","prototype":"Imagick Imagick::getImageRegion(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Extracts a region of the image and returns it as a new wand.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageRenderingIntent":{"id":"imagick.getimagerenderingintent","purpose":"Gets the image rendering intent","prototype":"int Imagick::getImageRenderingIntent()","return":"<p class=\"para\">   Returns the image <a href=\"imagick.constants.html#imagick.constants.renderingintent\" class=\"link\">rendering intent<\/a>.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageResolution":{"id":"imagick.getimageresolution","purpose":"Gets the image X and Y resolution","prototype":"array Imagick::getImageResolution()","return":"<p class=\"para\">   Returns the resolution as an array.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImagesBlob":{"id":"imagick.getimagesblob","purpose":"Returns all image sequences as a blob","prototype":"string Imagick::getImagesBlob()","return":"<p class=\"para\">   Returns a string containing the images. On failure, throws   ImagickException.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageScene":{"id":"imagick.getimagescene","purpose":"Gets the image scene","prototype":"int Imagick::getImageScene()","return":"<p class=\"para\">   Returns the image scene.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageSignature":{"id":"imagick.getimagesignature","purpose":"Generates an SHA-256 message digest","prototype":"string Imagick::getImageSignature()","return":"<p class=\"para\">   Returns a string containing the SHA-256 hash of the file.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageSize":{"id":"imagick.getimagesize","purpose":"Returns the image length in bytes","prototype":"int Imagick::getImageSize()","return":"<p class=\"para\">   Returns an int containing the current image size.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageTicksPerSecond":{"id":"imagick.getimagetickspersecond","purpose":"Gets the image ticks-per-second","prototype":"int Imagick::getImageTicksPerSecond()","return":"<p class=\"para\">   Returns the image ticks-per-second.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageTotalInkDensity":{"id":"imagick.getimagetotalinkdensity","purpose":"Gets the image total ink density","prototype":"float Imagick::getImageTotalInkDensity()","return":"<p class=\"para\">    Returns the image total ink density of the image.    Throw an<span class=\"classname\">ImagickException<\/span> on error.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageType":{"id":"imagick.getimagetype","purpose":"Gets the potential image type","prototype":"int Imagick::getImageType()","return":"<p class=\"para\">   Returns the potential image type.   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_UNDEFINED<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_BILEVEL<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_GRAYSCALE<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_GRAYSCALEMATTE<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_PALETTE<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_PALETTEMATTE<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_TRUECOLOR<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_TRUECOLORMATTE<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_COLORSEPARATION<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_COLORSEPARATIONMATTE<\/code><\/strong>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>imagick::IMGTYPE_OPTIMIZE<\/code><\/strong>     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PECL imagick 0.9.10-0.9.9"},"Imagick::getImageUnits":{"id":"imagick.getimageunits","purpose":"Gets the image units of resolution","prototype":"int Imagick::getImageUnits()","return":"<p class=\"para\">   Returns the image units of resolution.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageVirtualPixelMethod":{"id":"imagick.getimagevirtualpixelmethod","purpose":"Returns the virtual pixel method","prototype":"int Imagick::getImageVirtualPixelMethod()","return":"<p class=\"para\">   Returns the virtual pixel method on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageWhitePoint":{"id":"imagick.getimagewhitepoint","purpose":"Returns the chromaticity white point","prototype":"array Imagick::getImageWhitePoint()","return":"<p class=\"para\">   Returns the chromaticity white point as an associative array with the keys   &quot;x&quot; and &quot;y&quot;.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getImageWidth":{"id":"imagick.getimagewidth","purpose":"Returns the image width","prototype":"int Imagick::getImageWidth()","return":"<p class=\"para\">   Returns the image width.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getInterlaceScheme":{"id":"imagick.getinterlacescheme","purpose":"Gets the object interlace scheme","prototype":"int Imagick::getInterlaceScheme()","return":"<p class=\"para\">   Gets the wand <a href=\"imagick.constants.html#imagick.constants.interlace\" class=\"link\">interlace   scheme<\/a>.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getIteratorIndex":{"id":"imagick.getiteratorindex","purpose":"Gets the index of the current active image","prototype":"int Imagick::getIteratorIndex()","return":"<p class=\"para\">   Returns an integer containing the index of the image in the stack.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getNumberImages":{"id":"imagick.getnumberimages","purpose":"Returns the number of images in the object","prototype":"int Imagick::getNumberImages()","return":"<p class=\"para\">   Returns the number of images associated with Imagick object.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getOption":{"id":"imagick.getoption","purpose":"Returns a value associated with the specified key","prototype":"string Imagick::getOption(string $key)","return":"<p class=\"para\">   Returns a value associated with a wand and the specified key.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getPackageName":{"id":"imagick.getpackagename","purpose":"Returns the ImageMagick package name","prototype":"string Imagick::getPackageName()","return":"<p class=\"para\">   Returns the ImageMagick package name as a string.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getPage":{"id":"imagick.getpage","purpose":"Returns the page geometry","prototype":"array Imagick::getPage()","return":"<p class=\"para\">   Returns the page geometry associated with the Imagick object in   an associative array with the keys &quot;width&quot;, &quot;height&quot;, &quot;x&quot;, and &quot;y&quot;,   throwing ImagickException on error.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getPixelIterator":{"id":"imagick.getpixeliterator","purpose":"Returns a MagickPixelIterator","prototype":"ImagickPixelIterator Imagick::getPixelIterator()","return":"<p class=\"para\">   Returns an ImagickPixelIterator on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getPixelRegionIterator":{"id":"imagick.getpixelregioniterator","purpose":"Get an ImagickPixelIterator for an image section","prototype":"ImagickPixelIterator Imagick::getPixelRegionIterator(int $x, int $y, int $columns, int $rows)","return":"<p class=\"para\">   Returns an ImagickPixelIterator for an image section.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getPointSize":{"id":"imagick.getpointsize","purpose":"Gets point size","prototype":"float Imagick::getPointSize()","return":"<p class=\"para\">   Returns a <span class=\"type\">float<\/span> containing the point size.  <\/p>","versions":""},"Imagick::getQuantum":{"id":"imagick.getquantum","purpose":"Description","prototype":"int Imagick::getQuantum()","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::getQuantumDepth":{"id":"imagick.getquantumdepth","purpose":"Gets the quantum depth","prototype":"array Imagick::getQuantumDepth()","return":"<p class=\"para\">   Returns the Imagick quantum depth as a string.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getQuantumRange":{"id":"imagick.getquantumrange","purpose":"Returns the Imagick quantum range","prototype":"array Imagick::getQuantumRange()","return":"<p class=\"para\">   Returns an associative array containing the quantum range as an   <span class=\"type\">integer<\/span> (<em>&quot;quantumRangeLong&quot;<\/em>) and as a    <span class=\"type\">string<\/span> (<em>&quot;quantumRangeString&quot;<\/em>).  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getRegistry":{"id":"imagick.getregistry","purpose":"Description","prototype":"string Imagick::getRegistry(string $key)","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::getReleaseDate":{"id":"imagick.getreleasedate","purpose":"Returns the ImageMagick release date","prototype":"string Imagick::getReleaseDate()","return":"<p class=\"para\">   Returns the ImageMagick release date as a string.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getResource":{"id":"imagick.getresource","purpose":"Returns the specified resource's memory usage","prototype":"int Imagick::getResource(int $type)","return":"<p class=\"para\">   Returns the specified resource&#039;s memory usage in megabytes.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getResourceLimit":{"id":"imagick.getresourcelimit","purpose":"Returns the specified resource limit","prototype":"int Imagick::getResourceLimit(int $type)","return":"<p class=\"para\">   Returns the specified resource limit in megabytes.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getSamplingFactors":{"id":"imagick.getsamplingfactors","purpose":"Gets the horizontal and vertical sampling factor","prototype":"array Imagick::getSamplingFactors()","return":"<p class=\"para\">   Returns an associative array with the horizontal and vertical sampling   factors of the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getSize":{"id":"imagick.getsize","purpose":"Returns the size associated with the Imagick object","prototype":"array Imagick::getSize()","return":"<p class=\"para\">   Returns the size associated with the Imagick object as an array with the   keys &quot;columns&quot; and &quot;rows&quot;.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getSizeOffset":{"id":"imagick.getsizeoffset","purpose":"Returns the size offset","prototype":"int Imagick::getSizeOffset()","return":"<p class=\"para\">   Returns the size offset associated with the Imagick object.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::getVersion":{"id":"imagick.getversion","purpose":"Returns the ImageMagick API version","prototype":"array Imagick::getVersion()","return":"<p class=\"para\">   Returns the ImageMagick API version as a string and as a number.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::haldClutImage":{"id":"imagick.haldclutimage","purpose":"Replaces colors in the image","prototype":"bool Imagick::haldClutImage(Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::hasNextImage":{"id":"imagick.hasnextimage","purpose":"Checks if the object has more images","prototype":"bool Imagick::hasNextImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the object has more images when traversing the list in the   forward direction, returns <strong><code>FALSE<\/code><\/strong> if there are none.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::hasPreviousImage":{"id":"imagick.haspreviousimage","purpose":"Checks if the object has a previous image","prototype":"bool Imagick::hasPreviousImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the object has more images when traversing the list in the   reverse direction, returns <strong><code>FALSE<\/code><\/strong> if there are none.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::identifyFormat":{"id":"imagick.identifyformat","purpose":"Description","prototype":"string Imagick::identifyFormat(string $embedText)","return":"<p class=\"para\">   Returns format or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"Imagick::identifyImage":{"id":"imagick.identifyimage","purpose":"Identifies an image and fetches attributes","prototype":"array Imagick::identifyImage([bool $appendRawOutput = ''])","return":"<p class=\"para\">   Identifies an image and returns the attributes.  Attributes include   the image width, height, size, and others.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::implodeImage":{"id":"imagick.implodeimage","purpose":"Creates a new image as a copy","prototype":"bool Imagick::implodeImage(float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::importImagePixels":{"id":"imagick.importimagepixels","purpose":"Imports image pixels","prototype":"bool Imagick::importImagePixels(int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::inverseFourierTransformImage":{"id":"imagick.inversefouriertransformimage","purpose":"Description","prototype":"bool Imagick::inverseFourierTransformImage(Imagick $complement, bool $magnitude)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::labelImage":{"id":"imagick.labelimage","purpose":"Adds a label to an image","prototype":"bool Imagick::labelImage(string $label)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::levelImage":{"id":"imagick.levelimage","purpose":"Adjusts the levels of an image","prototype":"bool Imagick::levelImage(float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::linearStretchImage":{"id":"imagick.linearstretchimage","purpose":"Stretches with saturation the image intensity","prototype":"bool Imagick::linearStretchImage(float $blackPoint, float $whitePoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::liquidRescaleImage":{"id":"imagick.liquidrescaleimage","purpose":"Animates an image or images","prototype":"bool Imagick::liquidRescaleImage(int $width, int $height, float $delta_x, float $rigidity)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::listRegistry":{"id":"imagick.listregistry","purpose":"Description","prototype":"array Imagick::listRegistry()","return":"<p class=\"para\">   An array containing the key\/values from the registry.  <\/p>","versions":""},"Imagick::magnifyImage":{"id":"imagick.magnifyimage","purpose":"Scales an image proportionally 2x","prototype":"bool Imagick::magnifyImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::mapImage":{"id":"imagick.mapimage","purpose":"Replaces the colors of an image with the closest color from a reference image","prototype":"bool Imagick::mapImage(Imagick $map, bool $dither)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::matteFloodfillImage":{"id":"imagick.mattefloodfillimage","purpose":"Changes the transparency value of a color","prototype":"bool Imagick::matteFloodfillImage(float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::medianFilterImage":{"id":"imagick.medianfilterimage","purpose":"Applies a digital filter","prototype":"bool Imagick::medianFilterImage(float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::mergeImageLayers":{"id":"imagick.mergeimagelayers","purpose":"Merges image layers","prototype":"Imagick Imagick::mergeImageLayers(int $layer_method)","return":"<p class=\"para\">   Returns an Imagick object containing the merged image.  <\/p>","versions":"PECL imagick 2.1.0"},"Imagick::minifyImage":{"id":"imagick.minifyimage","purpose":"Scales an image proportionally to half its size","prototype":"bool Imagick::minifyImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::modulateImage":{"id":"imagick.modulateimage","purpose":"Control the brightness, saturation, and hue","prototype":"bool Imagick::modulateImage(float $brightness, float $saturation, float $hue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::montageImage":{"id":"imagick.montageimage","purpose":"Creates a composite image","prototype":"Imagick Imagick::montageImage(ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::morphImages":{"id":"imagick.morphimages","purpose":"Method morphs a set of images","prototype":"Imagick Imagick::morphImages(int $number_frames)","return":"<p class=\"para\">  This method returns a new Imagick object on success.  Throw an<span class=\"classname\">ImagickException<\/span> on error.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::morphology":{"id":"imagick.morphology","purpose":"Description","prototype":"bool Imagick::morphology(int $morphologyMethod, int $iterations, ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::mosaicImages":{"id":"imagick.mosaicimages","purpose":"Forms a mosaic from images","prototype":"Imagick Imagick::mosaicImages()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::motionBlurImage":{"id":"imagick.motionblurimage","purpose":"Simulates motion blur","prototype":"bool Imagick::motionBlurImage(float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::negateImage":{"id":"imagick.negateimage","purpose":"Negates the colors in the reference image","prototype":"bool Imagick::negateImage(bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::newImage":{"id":"imagick.newimage","purpose":"Creates a new image","prototype":"bool Imagick::newImage(int $cols, int $rows, mixed $background [, string $format = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::newPseudoImage":{"id":"imagick.newpseudoimage","purpose":"Creates a new image","prototype":"bool Imagick::newPseudoImage(int $columns, int $rows, string $pseudoString)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::nextImage":{"id":"imagick.nextimage","purpose":"Moves to the next image","prototype":"bool Imagick::nextImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::normalizeImage":{"id":"imagick.normalizeimage","purpose":"Enhances the contrast of a color image","prototype":"bool Imagick::normalizeImage([int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::oilPaintImage":{"id":"imagick.oilpaintimage","purpose":"Simulates an oil painting","prototype":"bool Imagick::oilPaintImage(float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::opaquePaintImage":{"id":"imagick.opaquepaintimage","purpose":"Changes the color value of any pixel that matches target","prototype":"bool Imagick::opaquePaintImage(mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::optimizeImageLayers":{"id":"imagick.optimizeimagelayers","purpose":"Removes repeated portions of images to optimize","prototype":"bool Imagick::optimizeImageLayers()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::orderedPosterizeImage":{"id":"imagick.orderedposterizeimage","purpose":"Performs an ordered dither","prototype":"bool Imagick::orderedPosterizeImage(string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.2.2"},"Imagick::paintFloodfillImage":{"id":"imagick.paintfloodfillimage","purpose":"Changes the color value of any pixel that matches target","prototype":"bool Imagick::paintFloodfillImage(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.1.0"},"Imagick::paintOpaqueImage":{"id":"imagick.paintopaqueimage","purpose":"Change any pixel that matches color","prototype":"bool Imagick::paintOpaqueImage(mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::paintTransparentImage":{"id":"imagick.painttransparentimage","purpose":"Changes any pixel that matches color with the color defined by fill","prototype":"bool Imagick::paintTransparentImage(mixed $target, float $alpha, float $fuzz)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::pingImage":{"id":"imagick.pingimage","purpose":"Fetch basic attributes about the image","prototype":"bool Imagick::pingImage(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::pingImageBlob":{"id":"imagick.pingimageblob","purpose":"Quickly fetch attributes","prototype":"bool Imagick::pingImageBlob(string $image)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::pingImageFile":{"id":"imagick.pingimagefile","purpose":"Get basic image attributes in a lightweight manner","prototype":"bool Imagick::pingImageFile(resource $filehandle [, string $fileName = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::polaroidImage":{"id":"imagick.polaroidimage","purpose":"Simulates a Polaroid picture","prototype":"bool Imagick::polaroidImage(ImagickDraw $properties, float $angle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::posterizeImage":{"id":"imagick.posterizeimage","purpose":"Reduces the image to a limited number of color level","prototype":"bool Imagick::posterizeImage(int $levels, bool $dither)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::previewImages":{"id":"imagick.previewimages","purpose":"Quickly pin-point appropriate parameters for image processing","prototype":"bool Imagick::previewImages(int $preview)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::previousImage":{"id":"imagick.previousimage","purpose":"Move to the previous image in the object","prototype":"bool Imagick::previousImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::profileImage":{"id":"imagick.profileimage","purpose":"Adds or removes a profile from an image","prototype":"bool Imagick::profileImage(string $name, string $profile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::quantizeImage":{"id":"imagick.quantizeimage","purpose":"Analyzes the colors within a reference image","prototype":"bool Imagick::quantizeImage(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::quantizeImages":{"id":"imagick.quantizeimages","purpose":"Analyzes the colors within a sequence of images","prototype":"bool Imagick::quantizeImages(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::queryFontMetrics":{"id":"imagick.queryfontmetrics","purpose":"Returns an array representing the font metrics","prototype":"array Imagick::queryFontMetrics(ImagickDraw $properties, string $text [, bool $multiline = ''])","return":"<p class=\"para\">   Returns a multi-dimensional array representing the font metrics.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::queryFonts":{"id":"imagick.queryfonts","purpose":"Returns the configured fonts","prototype":"array Imagick::queryFonts([string $pattern = \"*\"])","return":"<p class=\"para\">   Returns an array containing the configured fonts.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::queryFormats":{"id":"imagick.queryformats","purpose":"Returns formats supported by Imagick","prototype":"array Imagick::queryFormats([string $pattern = \"*\"])","return":"<p class=\"para\">   Returns an array containing the formats supported by Imagick.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::radialBlurImage":{"id":"imagick.radialblurimage","purpose":"Radial blurs an image","prototype":"bool Imagick::radialBlurImage(float $angle [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::raiseImage":{"id":"imagick.raiseimage","purpose":"Creates a simulated 3d button-like effect","prototype":"bool Imagick::raiseImage(int $width, int $height, int $x, int $y, bool $raise)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::randomThresholdImage":{"id":"imagick.randomthresholdimage","purpose":"Creates a high-contrast, two-color image","prototype":"bool Imagick::randomThresholdImage(float $low, float $high [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::readImage":{"id":"imagick.readimage","purpose":"Reads image from filename","prototype":"bool Imagick::readImage(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 0.9.0-0.9.9"},"Imagick::readImageBlob":{"id":"imagick.readimageblob","purpose":"Reads image from a binary string","prototype":"bool Imagick::readImageBlob(string $image [, string $filename = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::readImageFile":{"id":"imagick.readimagefile","purpose":"Reads image from open filehandle","prototype":"bool Imagick::readImageFile(resource $filehandle [, string $fileName = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::readimages":{"id":"imagick.readimages","purpose":"Description","prototype":"bool Imagick::readimages(array $filenames)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::recolorImage":{"id":"imagick.recolorimage","purpose":"Recolors image","prototype":"bool Imagick::recolorImage(array $matrix)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::reduceNoiseImage":{"id":"imagick.reducenoiseimage","purpose":"Smooths the contours of an image","prototype":"bool Imagick::reduceNoiseImage(float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::remapImage":{"id":"imagick.remapimage","purpose":"Remaps image colors","prototype":"bool Imagick::remapImage(Imagick $replacement, int $DITHER)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::removeImage":{"id":"imagick.removeimage","purpose":"Removes an image from the image list","prototype":"bool Imagick::removeImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::removeImageProfile":{"id":"imagick.removeimageprofile","purpose":"Removes the named image profile and returns it","prototype":"string Imagick::removeImageProfile(string $name)","return":"<p class=\"para\">   Returns a string containing the profile of the image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::render":{"id":"imagick.render","purpose":"Renders all preceding drawing commands","prototype":"bool Imagick::render()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::resampleImage":{"id":"imagick.resampleimage","purpose":"Resample image to desired resolution","prototype":"bool Imagick::resampleImage(float $x_resolution, float $y_resolution, int $filter, float $blur)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::resetImagePage":{"id":"imagick.resetimagepage","purpose":"Reset image page","prototype":"bool Imagick::resetImagePage(string $page)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::resizeImage":{"id":"imagick.resizeimage","purpose":"Scales an image","prototype":"bool Imagick::resizeImage(int $columns, int $rows, int $filter, float $blur [, bool $bestfit = '' [, bool $legacy = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::rollImage":{"id":"imagick.rollimage","purpose":"Offsets an image","prototype":"bool Imagick::rollImage(int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::rotateImage":{"id":"imagick.rotateimage","purpose":"Rotates an image","prototype":"bool Imagick::rotateImage(mixed $background, float $degrees)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::rotationalBlurImage":{"id":"imagick.rotationalblurimage","purpose":"Description","prototype":"bool Imagick::rotationalBlurImage(float $angle [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::roundCorners":{"id":"imagick.roundcorners","purpose":"Rounds image corners","prototype":"bool Imagick::roundCorners(float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::sampleImage":{"id":"imagick.sampleimage","purpose":"Scales an image with pixel sampling","prototype":"bool Imagick::sampleImage(int $columns, int $rows)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::scaleImage":{"id":"imagick.scaleimage","purpose":"Scales the size of an image","prototype":"bool Imagick::scaleImage(int $cols, int $rows [, bool $bestfit = '' [, bool $legacy = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::segmentImage":{"id":"imagick.segmentimage","purpose":"Segments an image","prototype":"bool Imagick::segmentImage(int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = ''])","return":"<p class=\"para\">  <\/p>","versions":""},"Imagick::selectiveBlurImage":{"id":"imagick.selectiveblurimage","purpose":"Description","prototype":"bool Imagick::selectiveBlurImage(float $radius, float $sigma, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::separateImageChannel":{"id":"imagick.separateimagechannel","purpose":"Separates a channel from the image","prototype":"bool Imagick::separateImageChannel(int $channel)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::sepiaToneImage":{"id":"imagick.sepiatoneimage","purpose":"Sepia tones an image","prototype":"bool Imagick::sepiaToneImage(float $threshold)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setBackgroundColor":{"id":"imagick.setbackgroundcolor","purpose":"Sets the object's default background color","prototype":"bool Imagick::setBackgroundColor(mixed $background)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setColorspace":{"id":"imagick.setcolorspace","purpose":"Set colorspace","prototype":"bool Imagick::setColorspace(int $COLORSPACE)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setCompression":{"id":"imagick.setcompression","purpose":"Sets the object's default compression type","prototype":"bool Imagick::setCompression(int $compression)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setCompressionQuality":{"id":"imagick.setcompressionquality","purpose":"Sets the object's default compression quality","prototype":"bool Imagick::setCompressionQuality(int $quality)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 0.9.10-0.9.9"},"Imagick::setFilename":{"id":"imagick.setfilename","purpose":"Sets the filename before you read or write the image","prototype":"bool Imagick::setFilename(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setFirstIterator":{"id":"imagick.setfirstiterator","purpose":"Sets the Imagick iterator to the first image","prototype":"bool Imagick::setFirstIterator()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setFont":{"id":"imagick.setfont","purpose":"Sets font","prototype":"bool Imagick::setFont(string $font)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.1.0"},"Imagick::setFormat":{"id":"imagick.setformat","purpose":"Sets the format of the Imagick object","prototype":"bool Imagick::setFormat(string $format)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setGravity":{"id":"imagick.setgravity","purpose":"Sets the gravity","prototype":"bool Imagick::setGravity(int $gravity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":""},"Imagick::setImage":{"id":"imagick.setimage","purpose":"Replaces image in the object","prototype":"bool Imagick::setImage(Imagick $replace)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageAlphaChannel":{"id":"imagick.setimagealphachannel","purpose":"Sets image alpha channel","prototype":"bool Imagick::setImageAlphaChannel(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setImageArtifact":{"id":"imagick.setimageartifact","purpose":"Set image artifact","prototype":"bool Imagick::setImageArtifact(string $artifact, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setImageAttribute":{"id":"imagick.setimageattribute","purpose":"Description","prototype":"bool Imagick::setImageAttribute(string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setImageBackgroundColor":{"id":"imagick.setimagebackgroundcolor","purpose":"Sets the image background color","prototype":"bool Imagick::setImageBackgroundColor(mixed $background)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageBias":{"id":"imagick.setimagebias","purpose":"Sets the image bias for any method that convolves an image","prototype":"bool Imagick::setImageBias(float $bias)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageBiasQuantum":{"id":"imagick.setimagebiasquantum","purpose":"Description","prototype":"void Imagick::setImageBiasQuantum(string $bias)","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::setImageBluePrimary":{"id":"imagick.setimageblueprimary","purpose":"Sets the image chromaticity blue primary point","prototype":"bool Imagick::setImageBluePrimary(float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageBorderColor":{"id":"imagick.setimagebordercolor","purpose":"Sets the image border color","prototype":"bool Imagick::setImageBorderColor(mixed $border)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageChannelDepth":{"id":"imagick.setimagechanneldepth","purpose":"Sets the depth of a particular image channel","prototype":"bool Imagick::setImageChannelDepth(int $channel, int $depth)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageClipMask":{"id":"imagick.setimageclipmask","purpose":"Sets image clip mask","prototype":"bool Imagick::setImageClipMask(Imagick $clip_mask)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setImageColormapColor":{"id":"imagick.setimagecolormapcolor","purpose":"Sets the color of the specified colormap index","prototype":"bool Imagick::setImageColormapColor(int $index, ImagickPixel $color)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageColorspace":{"id":"imagick.setimagecolorspace","purpose":"Sets the image colorspace","prototype":"bool Imagick::setImageColorspace(int $colorspace)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageCompose":{"id":"imagick.setimagecompose","purpose":"Sets the image composite operator","prototype":"bool Imagick::setImageCompose(int $compose)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageCompression":{"id":"imagick.setimagecompression","purpose":"Sets the image compression","prototype":"bool Imagick::setImageCompression(int $compression)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageCompressionQuality":{"id":"imagick.setimagecompressionquality","purpose":"Sets the image compression quality","prototype":"bool Imagick::setImageCompressionQuality(int $quality)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setImageDelay":{"id":"imagick.setimagedelay","purpose":"Sets the image delay","prototype":"bool Imagick::setImageDelay(int $delay)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageDepth":{"id":"imagick.setimagedepth","purpose":"Sets the image depth","prototype":"bool Imagick::setImageDepth(int $depth)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageDispose":{"id":"imagick.setimagedispose","purpose":"Sets the image disposal method","prototype":"bool Imagick::setImageDispose(int $dispose)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageExtent":{"id":"imagick.setimageextent","purpose":"Sets the image size","prototype":"bool Imagick::setImageExtent(int $columns, int $rows)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageFilename":{"id":"imagick.setimagefilename","purpose":"Sets the filename of a particular image","prototype":"bool Imagick::setImageFilename(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageFormat":{"id":"imagick.setimageformat","purpose":"Sets the format of a particular image","prototype":"bool Imagick::setImageFormat(string $format)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageGamma":{"id":"imagick.setimagegamma","purpose":"Sets the image gamma","prototype":"bool Imagick::setImageGamma(float $gamma)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageGravity":{"id":"imagick.setimagegravity","purpose":"Sets the image gravity","prototype":"bool Imagick::setImageGravity(int $gravity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":""},"Imagick::setImageGreenPrimary":{"id":"imagick.setimagegreenprimary","purpose":"Sets the image chromaticity green primary point","prototype":"bool Imagick::setImageGreenPrimary(float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageIndex":{"id":"imagick.setimageindex","purpose":"Set the iterator position","prototype":"bool Imagick::setImageIndex(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageInterlaceScheme":{"id":"imagick.setimageinterlacescheme","purpose":"Sets the image compression","prototype":"bool Imagick::setImageInterlaceScheme(int $interlace_scheme)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageInterpolateMethod":{"id":"imagick.setimageinterpolatemethod","purpose":"Sets the image interpolate pixel method","prototype":"bool Imagick::setImageInterpolateMethod(int $method)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageIterations":{"id":"imagick.setimageiterations","purpose":"Sets the image iterations","prototype":"bool Imagick::setImageIterations(int $iterations)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageMatte":{"id":"imagick.setimagematte","purpose":"Sets the image matte channel","prototype":"bool Imagick::setImageMatte(bool $matte)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageMatteColor":{"id":"imagick.setimagemattecolor","purpose":"Sets the image matte color","prototype":"bool Imagick::setImageMatteColor(mixed $matte)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageOpacity":{"id":"imagick.setimageopacity","purpose":"Sets the image opacity level","prototype":"bool Imagick::setImageOpacity(float $opacity)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageOrientation":{"id":"imagick.setimageorientation","purpose":"Sets the image orientation","prototype":"bool Imagick::setImageOrientation(int $orientation)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImagePage":{"id":"imagick.setimagepage","purpose":"Sets the page geometry of the image","prototype":"bool Imagick::setImagePage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageProfile":{"id":"imagick.setimageprofile","purpose":"Adds a named profile to the Imagick object","prototype":"bool Imagick::setImageProfile(string $name, string $profile)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageProperty":{"id":"imagick.setimageproperty","purpose":"Sets an image property","prototype":"bool Imagick::setImageProperty(string $name, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageRedPrimary":{"id":"imagick.setimageredprimary","purpose":"Sets the image chromaticity red primary point","prototype":"bool Imagick::setImageRedPrimary(float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageRenderingIntent":{"id":"imagick.setimagerenderingintent","purpose":"Sets the image rendering intent","prototype":"bool Imagick::setImageRenderingIntent(int $rendering_intent)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageResolution":{"id":"imagick.setimageresolution","purpose":"Sets the image resolution","prototype":"bool Imagick::setImageResolution(float $x_resolution, float $y_resolution)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageScene":{"id":"imagick.setimagescene","purpose":"Sets the image scene","prototype":"bool Imagick::setImageScene(int $scene)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageTicksPerSecond":{"id":"imagick.setimagetickspersecond","purpose":"Sets the image ticks-per-second","prototype":"bool Imagick::setImageTicksPerSecond(int $ticks_per_second)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageType":{"id":"imagick.setimagetype","purpose":"Sets the image type","prototype":"bool Imagick::setImageType(int $image_type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageUnits":{"id":"imagick.setimageunits","purpose":"Sets the image units of resolution","prototype":"bool Imagick::setImageUnits(int $units)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageVirtualPixelMethod":{"id":"imagick.setimagevirtualpixelmethod","purpose":"Sets the image virtual pixel method","prototype":"bool Imagick::setImageVirtualPixelMethod(int $method)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setImageWhitePoint":{"id":"imagick.setimagewhitepoint","purpose":"Sets the image chromaticity white point","prototype":"bool Imagick::setImageWhitePoint(float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setInterlaceScheme":{"id":"imagick.setinterlacescheme","purpose":"Sets the image compression","prototype":"bool Imagick::setInterlaceScheme(int $interlace_scheme)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setIteratorIndex":{"id":"imagick.setiteratorindex","purpose":"Set the iterator position","prototype":"bool Imagick::setIteratorIndex(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setLastIterator":{"id":"imagick.setlastiterator","purpose":"Sets the Imagick iterator to the last image","prototype":"bool Imagick::setLastIterator()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.1"},"Imagick::setOption":{"id":"imagick.setoption","purpose":"Set an option","prototype":"bool Imagick::setOption(string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setPage":{"id":"imagick.setpage","purpose":"Sets the page geometry of the Imagick object","prototype":"bool Imagick::setPage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setPointSize":{"id":"imagick.setpointsize","purpose":"Sets point size","prototype":"bool Imagick::setPointSize(float $point_size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.1.0"},"Imagick::setProgressMonitor":{"id":"imagick.setprogressmonitor","purpose":"Description","prototype":"bool Imagick::setProgressMonitor(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setRegistry":{"id":"imagick.setregistry","purpose":"Description","prototype":"bool Imagick::setRegistry(string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::setResolution":{"id":"imagick.setresolution","purpose":"Sets the image resolution","prototype":"bool Imagick::setResolution(float $x_resolution, float $y_resolution)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setResourceLimit":{"id":"imagick.setresourcelimit","purpose":"Sets the limit for a particular resource in megabytes","prototype":"bool Imagick::setResourceLimit(int $type, int $limit)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setSamplingFactors":{"id":"imagick.setsamplingfactors","purpose":"Sets the image sampling factors","prototype":"bool Imagick::setSamplingFactors(array $factors)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setSize":{"id":"imagick.setsize","purpose":"Sets the size of the Imagick object","prototype":"bool Imagick::setSize(int $columns, int $rows)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setSizeOffset":{"id":"imagick.setsizeoffset","purpose":"Sets the size and offset of the Imagick object","prototype":"bool Imagick::setSizeOffset(int $columns, int $rows, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::setType":{"id":"imagick.settype","purpose":"Sets the image type attribute","prototype":"bool Imagick::setType(int $image_type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::shadeImage":{"id":"imagick.shadeimage","purpose":"Creates a 3D effect","prototype":"bool Imagick::shadeImage(bool $gray, float $azimuth, float $elevation)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::shadowImage":{"id":"imagick.shadowimage","purpose":"Simulates an image shadow","prototype":"bool Imagick::shadowImage(float $opacity, float $sigma, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::sharpenImage":{"id":"imagick.sharpenimage","purpose":"Sharpens an image","prototype":"bool Imagick::sharpenImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::shaveImage":{"id":"imagick.shaveimage","purpose":"Shaves pixels from the image edges","prototype":"bool Imagick::shaveImage(int $columns, int $rows)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::shearImage":{"id":"imagick.shearimage","purpose":"Creating a parallelogram","prototype":"bool Imagick::shearImage(mixed $background, float $x_shear, float $y_shear)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::sigmoidalContrastImage":{"id":"imagick.sigmoidalcontrastimage","purpose":"Adjusts the contrast of an image","prototype":"bool Imagick::sigmoidalContrastImage(bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::sketchImage":{"id":"imagick.sketchimage","purpose":"Simulates a pencil sketch","prototype":"bool Imagick::sketchImage(float $radius, float $sigma, float $angle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::smushImages":{"id":"imagick.smushimages","purpose":"Description","prototype":"Imagick Imagick::smushImages(bool $stack, int $offset)","return":"<p class=\"para\">   The new smushed image.  <\/p>","versions":""},"Imagick::solarizeImage":{"id":"imagick.solarizeimage","purpose":"Applies a solarizing effect to the image","prototype":"bool Imagick::solarizeImage(int $threshold)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::sparseColorImage":{"id":"imagick.sparsecolorimage","purpose":"Interpolates colors","prototype":"bool Imagick::sparseColorImage(int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::spliceImage":{"id":"imagick.spliceimage","purpose":"Splices a solid color into the image","prototype":"bool Imagick::spliceImage(int $width, int $height, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::spreadImage":{"id":"imagick.spreadimage","purpose":"Randomly displaces each pixel in a block","prototype":"bool Imagick::spreadImage(float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::statisticImage":{"id":"imagick.statisticimage","purpose":"Description","prototype":"bool Imagick::statisticImage(int $type, int $width, int $height [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::steganoImage":{"id":"imagick.steganoimage","purpose":"Hides a digital watermark within the image","prototype":"Imagick Imagick::steganoImage(Imagick $watermark_wand, int $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::stereoImage":{"id":"imagick.stereoimage","purpose":"Composites two images","prototype":"bool Imagick::stereoImage(Imagick $offset_wand)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::stripImage":{"id":"imagick.stripimage","purpose":"Strips an image of all profiles and comments","prototype":"bool Imagick::stripImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::subImageMatch":{"id":"imagick.subimagematch","purpose":"Description","prototype":"Imagick Imagick::subImageMatch(Imagick $Imagick [, array $offset = '' [, float $similarity = '']])","return":"<p class=\"para\">     <\/p>","versions":""},"Imagick::swirlImage":{"id":"imagick.swirlimage","purpose":"Swirls the pixels about the center of the image","prototype":"bool Imagick::swirlImage(float $degrees)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::textureImage":{"id":"imagick.textureimage","purpose":"Repeatedly tiles the texture image","prototype":"Imagick Imagick::textureImage(Imagick $texture_wand)","return":"<p class=\"para\">   Returns a new Imagick object that has the repeated texture applied.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::thresholdImage":{"id":"imagick.thresholdimage","purpose":"Changes the value of individual pixels based on a threshold","prototype":"bool Imagick::thresholdImage(float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::thumbnailImage":{"id":"imagick.thumbnailimage","purpose":"Changes the size of an image","prototype":"bool Imagick::thumbnailImage(int $columns, int $rows [, bool $bestfit = '' [, bool $fill = '' [, bool $legacy = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::tintImage":{"id":"imagick.tintimage","purpose":"Applies a color vector to each pixel in the image","prototype":"bool Imagick::tintImage(mixed $tint, mixed $opacity [, bool $legacy = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::__toString":{"id":"imagick.tostring","purpose":"Returns the image as a string","prototype":"string Imagick::__toString()","return":"<p class=\"para\">   Returns the string content on success or an empty string on failure.  <\/p>","versions":""},"Imagick::transformImage":{"id":"imagick.transformimage","purpose":"Convenience method for setting crop size and the image geometry","prototype":"Imagick Imagick::transformImage(string $crop, string $geometry)","return":"<p class=\"para\">   Returns an Imagick object containing the transformed image.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::transformImageColorspace":{"id":"imagick.transformimagecolorspace","purpose":"Transforms an image to a new colorspace","prototype":"bool Imagick::transformImageColorspace(int $colorspace)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::transparentPaintImage":{"id":"imagick.transparentpaintimage","purpose":"Paints pixels transparent","prototype":"bool Imagick::transparentPaintImage(mixed $target, float $alpha, float $fuzz, bool $invert)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::transposeImage":{"id":"imagick.transposeimage","purpose":"Creates a vertical mirror image","prototype":"bool Imagick::transposeImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::transverseImage":{"id":"imagick.transverseimage","purpose":"Creates a horizontal mirror image","prototype":"bool Imagick::transverseImage()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::trimImage":{"id":"imagick.trimimage","purpose":"Remove edges from the image","prototype":"bool Imagick::trimImage(float $fuzz)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::uniqueImageColors":{"id":"imagick.uniqueimagecolors","purpose":"Discards all but one of any pixel color","prototype":"bool Imagick::uniqueImageColors()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::unsharpMaskImage":{"id":"imagick.unsharpmaskimage","purpose":"Sharpens an image","prototype":"bool Imagick::unsharpMaskImage(float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::valid":{"id":"imagick.valid","purpose":"Checks if the current item is valid","prototype":"bool Imagick::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::vignetteImage":{"id":"imagick.vignetteimage","purpose":"Adds vignette filter to the image","prototype":"bool Imagick::vignetteImage(float $blackPoint, float $whitePoint, int $x, int $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::waveImage":{"id":"imagick.waveimage","purpose":"Applies wave filter to the image","prototype":"bool Imagick::waveImage(float $amplitude, float $length)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::whiteThresholdImage":{"id":"imagick.whitethresholdimage","purpose":"Force all pixels above the threshold into white","prototype":"bool Imagick::whiteThresholdImage(mixed $threshold)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"Imagick::writeImage":{"id":"imagick.writeimage","purpose":"Writes an image to the specified filename","prototype":"bool Imagick::writeImage([string $filename = null])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 0.9.0-0.9.9"},"Imagick::writeImageFile":{"id":"imagick.writeimagefile","purpose":"Writes an image to a filehandle","prototype":"bool Imagick::writeImageFile(resource $filehandle [, string $format = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"Imagick::writeImages":{"id":"imagick.writeimages","purpose":"Writes an image or image sequence","prototype":"bool Imagick::writeImages(string $filename, bool $adjoin)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 0.9.0-0.9.9"},"Imagick::writeImagesFile":{"id":"imagick.writeimagesfile","purpose":"Writes frames to a filehandle","prototype":"bool Imagick::writeImagesFile(resource $filehandle [, string $format = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickDraw::affine":{"id":"imagickdraw.affine","purpose":"Adjusts the current affine transformation matrix","prototype":"bool ImagickDraw::affine(array $affine)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::annotation":{"id":"imagickdraw.annotation","purpose":"Draws text on the image","prototype":"bool ImagickDraw::annotation(float $x, float $y, string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::arc":{"id":"imagickdraw.arc","purpose":"Draws an arc","prototype":"bool ImagickDraw::arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::bezier":{"id":"imagickdraw.bezier","purpose":"Draws a bezier curve","prototype":"bool ImagickDraw::bezier(array $coordinates)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::circle":{"id":"imagickdraw.circle","purpose":"Draws a circle","prototype":"bool ImagickDraw::circle(float $ox, float $oy, float $px, float $py)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::clear":{"id":"imagickdraw.clear","purpose":"Clears the ImagickDraw","prototype":"bool ImagickDraw::clear()","return":"<p class=\"para\">   Returns an ImagickDraw object.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::clone":{"id":"imagickdraw.clone","purpose":"Makes an exact copy of the specified ImagickDraw object","prototype":"ImagickDraw ImagickDraw::clone()","return":"<p class=\"para\">   What the function returns, first on success, then on failure. See   also the &amp;return.success; entity  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::color":{"id":"imagickdraw.color","purpose":"Draws color on image","prototype":"bool ImagickDraw::color(float $x, float $y, int $paintMethod)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::comment":{"id":"imagickdraw.comment","purpose":"Adds a comment","prototype":"bool ImagickDraw::comment(string $comment)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::composite":{"id":"imagickdraw.composite","purpose":"Composites an image onto the current image","prototype":"bool ImagickDraw::composite(int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::__construct":{"id":"imagickdraw.construct","purpose":"The ImagickDraw constructor","prototype":" ImagickDraw::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::destroy":{"id":"imagickdraw.destroy","purpose":"Frees all associated resources","prototype":"bool ImagickDraw::destroy()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::ellipse":{"id":"imagickdraw.ellipse","purpose":"Draws an ellipse on the image","prototype":"bool ImagickDraw::ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getClipPath":{"id":"imagickdraw.getclippath","purpose":"Obtains the current clipping path ID","prototype":"string ImagickDraw::getClipPath()","return":"<p class=\"para\">   Returns a string containing the clip path ID or false if no clip path exists.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getClipRule":{"id":"imagickdraw.getcliprule","purpose":"Returns the current polygon fill rule","prototype":"int ImagickDraw::getClipRule()","return":"<p class=\"para\">   Returns one of the FILLRULE_ constants.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getClipUnits":{"id":"imagickdraw.getclipunits","purpose":"Returns the interpretation of clip path units","prototype":"int ImagickDraw::getClipUnits()","return":"<p class=\"para\">   Returns an int on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFillColor":{"id":"imagickdraw.getfillcolor","purpose":"Returns the fill color","prototype":"ImagickPixel ImagickDraw::getFillColor()","return":"<p class=\"para\">   Returns an ImagickPixel object.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFillOpacity":{"id":"imagickdraw.getfillopacity","purpose":"Returns the opacity used when drawing","prototype":"float ImagickDraw::getFillOpacity()","return":"<p class=\"para\">   The opacity.   <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFillRule":{"id":"imagickdraw.getfillrule","purpose":"Returns the fill rule","prototype":"int ImagickDraw::getFillRule()","return":"<p class=\"para\">   Returns a FILLRULE_ constant  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFont":{"id":"imagickdraw.getfont","purpose":"Returns the font","prototype":"string ImagickDraw::getFont()","return":"<p class=\"para\">   Returns a string on success and false if no font is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFontFamily":{"id":"imagickdraw.getfontfamily","purpose":"Returns the font family","prototype":"string ImagickDraw::getFontFamily()","return":"<p class=\"para\">   Returns the font family currently selected or false if font family is not set.   <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFontSize":{"id":"imagickdraw.getfontsize","purpose":"Returns the font pointsize","prototype":"float ImagickDraw::getFontSize()","return":"<p class=\"para\">   Returns the font size associated with the current ImagickDraw object.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFontStretch":{"id":"imagickdraw.getfontstretch","purpose":"Description","prototype":"int ImagickDraw::getFontStretch()","return":"<p class=\"para\">     <\/p>","versions":""},"ImagickDraw::getFontStyle":{"id":"imagickdraw.getfontstyle","purpose":"Returns the font style","prototype":"int ImagickDraw::getFontStyle()","return":"<p class=\"para\">   Returns the font style constant (STYLE_) associated with the ImagickDraw object    or 0 if no style is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getFontWeight":{"id":"imagickdraw.getfontweight","purpose":"Returns the font weight","prototype":"int ImagickDraw::getFontWeight()","return":"<p class=\"para\">   Returns an int on success and 0 if no weight is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getGravity":{"id":"imagickdraw.getgravity","purpose":"Returns the text placement gravity","prototype":"int ImagickDraw::getGravity()","return":"<p class=\"para\">   Returns a GRAVITY_ constant on success and 0 if no gravity is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeAntialias":{"id":"imagickdraw.getstrokeantialias","purpose":"Returns the current stroke antialias setting","prototype":"bool ImagickDraw::getStrokeAntialias()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if antialiasing is on and false if it is off.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeColor":{"id":"imagickdraw.getstrokecolor","purpose":"Returns the color used for stroking object outlines","prototype":"ImagickPixel ImagickDraw::getStrokeColor()","return":"<p class=\"para\">   Returns an ImagickPixel object which describes the color.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeDashArray":{"id":"imagickdraw.getstrokedasharray","purpose":"Returns an array representing the pattern of dashes and gaps used to stroke paths","prototype":"array ImagickDraw::getStrokeDashArray()","return":"<p class=\"para\">   Returns an array on success and empty array if not set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeDashOffset":{"id":"imagickdraw.getstrokedashoffset","purpose":"Returns the offset into the dash pattern to start the dash","prototype":"float ImagickDraw::getStrokeDashOffset()","return":"<p class=\"para\">   Returns a float representing the offset and 0 if it&#039;s not set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeLineCap":{"id":"imagickdraw.getstrokelinecap","purpose":"Returns the shape to be used at the end of open subpaths when they are stroked","prototype":"int ImagickDraw::getStrokeLineCap()","return":"<p class=\"para\">   Returns one of the LINECAP_ constants or 0 if stroke linecap is not set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeLineJoin":{"id":"imagickdraw.getstrokelinejoin","purpose":"Returns the shape to be used at the corners of paths when they are stroked","prototype":"int ImagickDraw::getStrokeLineJoin()","return":"<p class=\"para\">   Returns one of the LINEJOIN_ constants or 0 if stroke line join is not set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeMiterLimit":{"id":"imagickdraw.getstrokemiterlimit","purpose":"Returns the stroke miter limit","prototype":"int ImagickDraw::getStrokeMiterLimit()","return":"<p class=\"para\">   Returns an int describing the miter limit   and 0 if no miter limit is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeOpacity":{"id":"imagickdraw.getstrokeopacity","purpose":"Returns the opacity of stroked object outlines","prototype":"float ImagickDraw::getStrokeOpacity()","return":"<p class=\"para\">   Returns a double describing the opacity.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getStrokeWidth":{"id":"imagickdraw.getstrokewidth","purpose":"Returns the width of the stroke used to draw object outlines","prototype":"float ImagickDraw::getStrokeWidth()","return":"<p class=\"para\">   Returns a double describing the stroke width.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getTextAlignment":{"id":"imagickdraw.gettextalignment","purpose":"Returns the text alignment","prototype":"int ImagickDraw::getTextAlignment()","return":"<p class=\"para\">   Returns one of the ALIGN_ constants and 0 if no align is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getTextAntialias":{"id":"imagickdraw.gettextantialias","purpose":"Returns the current text antialias setting","prototype":"bool ImagickDraw::getTextAntialias()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if text is antialiased and false if not.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getTextDecoration":{"id":"imagickdraw.gettextdecoration","purpose":"Returns the text decoration","prototype":"int ImagickDraw::getTextDecoration()","return":"<p class=\"para\">   Returns one of the DECORATION_ constants   and 0 if no decoration is set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getTextEncoding":{"id":"imagickdraw.gettextencoding","purpose":"Returns the code set used for text annotations","prototype":"string ImagickDraw::getTextEncoding()","return":"<p class=\"para\">   Returns a string specifying the code set   or false if text encoding is not set.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getTextInterlineSpacing":{"id":"imagickdraw.gettextinterlinespacing","purpose":"Description","prototype":"float ImagickDraw::getTextInterlineSpacing()","return":"<p class=\"para\">     <\/p>","versions":""},"ImagickDraw::getTextInterwordSpacing":{"id":"imagickdraw.gettextinterwordspacing","purpose":"Description","prototype":"float ImagickDraw::getTextInterwordSpacing()","return":"<p class=\"para\">     <\/p>","versions":""},"ImagickDraw::getTextKerning":{"id":"imagickdraw.gettextkerning","purpose":"Description","prototype":"float ImagickDraw::getTextKerning()","return":"<p class=\"para\">     <\/p>","versions":""},"ImagickDraw::getTextUnderColor":{"id":"imagickdraw.gettextundercolor","purpose":"Returns the text under color","prototype":"ImagickPixel ImagickDraw::getTextUnderColor()","return":"<p class=\"para\">   Returns an ImagickPixel object describing the color.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::getVectorGraphics":{"id":"imagickdraw.getvectorgraphics","purpose":"Returns a string containing vector graphics","prototype":"string ImagickDraw::getVectorGraphics()","return":"<p class=\"para\">   Returns a string containing the vector graphics.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::line":{"id":"imagickdraw.line","purpose":"Draws a line","prototype":"bool ImagickDraw::line(float $sx, float $sy, float $ex, float $ey)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::matte":{"id":"imagickdraw.matte","purpose":"Paints on the image's opacity channel","prototype":"bool ImagickDraw::matte(float $x, float $y, int $paintMethod)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathClose":{"id":"imagickdraw.pathclose","purpose":"Adds a path element to the current path","prototype":"bool ImagickDraw::pathClose()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToAbsolute":{"id":"imagickdraw.pathcurvetoabsolute","purpose":"Draws a cubic Bezier curve","prototype":"bool ImagickDraw::pathCurveToAbsolute(float $x1, float $y1, float $x2, float $y2, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToQuadraticBezierAbsolute":{"id":"imagickdraw.pathcurvetoquadraticbezierabsolute","purpose":"Draws a quadratic Bezier curve","prototype":"bool ImagickDraw::pathCurveToQuadraticBezierAbsolute(float $x1, float $y1, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToQuadraticBezierRelative":{"id":"imagickdraw.pathcurvetoquadraticbezierrelative","purpose":"Draws a quadratic Bezier curve","prototype":"bool ImagickDraw::pathCurveToQuadraticBezierRelative(float $x1, float $y1, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute":{"id":"imagickdraw.pathcurvetoquadraticbeziersmoothabsolute","purpose":"Draws a quadratic Bezier curve","prototype":"bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToQuadraticBezierSmoothRelative":{"id":"imagickdraw.pathcurvetoquadraticbeziersmoothrelative","purpose":"Draws a quadratic Bezier curve","prototype":"bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToRelative":{"id":"imagickdraw.pathcurvetorelative","purpose":"Draws a cubic Bezier curve","prototype":"bool ImagickDraw::pathCurveToRelative(float $x1, float $y1, float $x2, float $y2, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToSmoothAbsolute":{"id":"imagickdraw.pathcurvetosmoothabsolute","purpose":"Draws a cubic Bezier curve","prototype":"bool ImagickDraw::pathCurveToSmoothAbsolute(float $x2, float $y2, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathCurveToSmoothRelative":{"id":"imagickdraw.pathcurvetosmoothrelative","purpose":"Draws a cubic Bezier curve","prototype":"bool ImagickDraw::pathCurveToSmoothRelative(float $x2, float $y2, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathEllipticArcAbsolute":{"id":"imagickdraw.pathellipticarcabsolute","purpose":"Draws an elliptical arc","prototype":"bool ImagickDraw::pathEllipticArcAbsolute(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathEllipticArcRelative":{"id":"imagickdraw.pathellipticarcrelative","purpose":"Draws an elliptical arc","prototype":"bool ImagickDraw::pathEllipticArcRelative(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathFinish":{"id":"imagickdraw.pathfinish","purpose":"Terminates the current path","prototype":"bool ImagickDraw::pathFinish()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathLineToAbsolute":{"id":"imagickdraw.pathlinetoabsolute","purpose":"Draws a line path","prototype":"bool ImagickDraw::pathLineToAbsolute(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathLineToHorizontalAbsolute":{"id":"imagickdraw.pathlinetohorizontalabsolute","purpose":"Draws a horizontal line path","prototype":"bool ImagickDraw::pathLineToHorizontalAbsolute(float $x)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathLineToHorizontalRelative":{"id":"imagickdraw.pathlinetohorizontalrelative","purpose":"Draws a horizontal line","prototype":"bool ImagickDraw::pathLineToHorizontalRelative(float $x)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathLineToRelative":{"id":"imagickdraw.pathlinetorelative","purpose":"Draws a line path","prototype":"bool ImagickDraw::pathLineToRelative(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathLineToVerticalAbsolute":{"id":"imagickdraw.pathlinetoverticalabsolute","purpose":"Draws a vertical line","prototype":"bool ImagickDraw::pathLineToVerticalAbsolute(float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathLineToVerticalRelative":{"id":"imagickdraw.pathlinetoverticalrelative","purpose":"Draws a vertical line path","prototype":"bool ImagickDraw::pathLineToVerticalRelative(float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathMoveToAbsolute":{"id":"imagickdraw.pathmovetoabsolute","purpose":"Starts a new sub-path","prototype":"bool ImagickDraw::pathMoveToAbsolute(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathMoveToRelative":{"id":"imagickdraw.pathmovetorelative","purpose":"Starts a new sub-path","prototype":"bool ImagickDraw::pathMoveToRelative(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pathStart":{"id":"imagickdraw.pathstart","purpose":"Declares the start of a path drawing list","prototype":"bool ImagickDraw::pathStart()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::point":{"id":"imagickdraw.point","purpose":"Draws a point","prototype":"bool ImagickDraw::point(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::polygon":{"id":"imagickdraw.polygon","purpose":"Draws a polygon","prototype":"bool ImagickDraw::polygon(array $coordinates)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::polyline":{"id":"imagickdraw.polyline","purpose":"Draws a polyline","prototype":"bool ImagickDraw::polyline(array $coordinates)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pop":{"id":"imagickdraw.pop","purpose":"Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw","prototype":"bool ImagickDraw::pop()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and false on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::popClipPath":{"id":"imagickdraw.popclippath","purpose":"Terminates a clip path definition","prototype":"bool ImagickDraw::popClipPath()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::popDefs":{"id":"imagickdraw.popdefs","purpose":"Terminates a definition list","prototype":"bool ImagickDraw::popDefs()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::popPattern":{"id":"imagickdraw.poppattern","purpose":"Terminates a pattern definition","prototype":"bool ImagickDraw::popPattern()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::push":{"id":"imagickdraw.push","purpose":"Clones the current ImagickDraw and pushes it to the stack","prototype":"bool ImagickDraw::push()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pushClipPath":{"id":"imagickdraw.pushclippath","purpose":"Starts a clip path definition","prototype":"bool ImagickDraw::pushClipPath(string $clip_mask_id)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pushDefs":{"id":"imagickdraw.pushdefs","purpose":"Indicates that following commands create named elements for early processing","prototype":"bool ImagickDraw::pushDefs()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::pushPattern":{"id":"imagickdraw.pushpattern","purpose":"Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern","prototype":"bool ImagickDraw::pushPattern(string $pattern_id, float $x, float $y, float $width, float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::rectangle":{"id":"imagickdraw.rectangle","purpose":"Draws a rectangle","prototype":"bool ImagickDraw::rectangle(float $x1, float $y1, float $x2, float $y2)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::render":{"id":"imagickdraw.render","purpose":"Renders all preceding drawing commands onto the image","prototype":"bool ImagickDraw::render()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::resetVectorGraphics":{"id":"imagickdraw.resetvectorgraphics","purpose":"Description","prototype":"bool ImagickDraw::resetVectorGraphics()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickDraw::rotate":{"id":"imagickdraw.rotate","purpose":"Applies the specified rotation to the current coordinate space","prototype":"bool ImagickDraw::rotate(float $degrees)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::roundRectangle":{"id":"imagickdraw.roundrectangle","purpose":"Draws a rounded rectangle","prototype":"bool ImagickDraw::roundRectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::scale":{"id":"imagickdraw.scale","purpose":"Adjusts the scaling factor","prototype":"bool ImagickDraw::scale(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setClipPath":{"id":"imagickdraw.setclippath","purpose":"Associates a named clipping path with the image","prototype":"bool ImagickDraw::setClipPath(string $clip_mask)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setClipRule":{"id":"imagickdraw.setcliprule","purpose":"Set the polygon fill rule to be used by the clipping path","prototype":"bool ImagickDraw::setClipRule(int $fill_rule)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setClipUnits":{"id":"imagickdraw.setclipunits","purpose":"Sets the interpretation of clip path units","prototype":"bool ImagickDraw::setClipUnits(int $clip_units)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFillAlpha":{"id":"imagickdraw.setfillalpha","purpose":"Sets the opacity to use when drawing using the fill color or fill texture","prototype":"bool ImagickDraw::setFillAlpha(float $opacity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFillColor":{"id":"imagickdraw.setfillcolor","purpose":"Sets the fill color to be used for drawing filled objects","prototype":"bool ImagickDraw::setFillColor(ImagickPixel $fill_pixel)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFillOpacity":{"id":"imagickdraw.setfillopacity","purpose":"Sets the opacity to use when drawing using the fill color or fill texture","prototype":"bool ImagickDraw::setFillOpacity(float $fillOpacity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFillPatternURL":{"id":"imagickdraw.setfillpatternurl","purpose":"Sets the URL to use as a fill pattern for filling objects","prototype":"bool ImagickDraw::setFillPatternURL(string $fill_url)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFillRule":{"id":"imagickdraw.setfillrule","purpose":"Sets the fill rule to use while drawing polygons","prototype":"bool ImagickDraw::setFillRule(int $fill_rule)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFont":{"id":"imagickdraw.setfont","purpose":"Sets the fully-specified font to use when annotating with text","prototype":"bool ImagickDraw::setFont(string $font_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFontFamily":{"id":"imagickdraw.setfontfamily","purpose":"Sets the font family to use when annotating with text","prototype":"bool ImagickDraw::setFontFamily(string $font_family)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFontSize":{"id":"imagickdraw.setfontsize","purpose":"Sets the font pointsize to use when annotating with text","prototype":"bool ImagickDraw::setFontSize(float $pointsize)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFontStretch":{"id":"imagickdraw.setfontstretch","purpose":"Sets the font stretch to use when annotating with text","prototype":"bool ImagickDraw::setFontStretch(int $fontStretch)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFontStyle":{"id":"imagickdraw.setfontstyle","purpose":"Sets the font style to use when annotating with text","prototype":"bool ImagickDraw::setFontStyle(int $style)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setFontWeight":{"id":"imagickdraw.setfontweight","purpose":"Sets the font weight","prototype":"bool ImagickDraw::setFontWeight(int $font_weight)","return":"<p class=\"para\">  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setGravity":{"id":"imagickdraw.setgravity","purpose":"Sets the text placement gravity","prototype":"bool ImagickDraw::setGravity(int $gravity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setResolution":{"id":"imagickdraw.setresolution","purpose":"Description","prototype":"bool ImagickDraw::setResolution(float $x_resolution, float $y_resolution)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickDraw::setStrokeAlpha":{"id":"imagickdraw.setstrokealpha","purpose":"Specifies the opacity of stroked object outlines","prototype":"bool ImagickDraw::setStrokeAlpha(float $opacity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeAntialias":{"id":"imagickdraw.setstrokeantialias","purpose":"Controls whether stroked outlines are antialiased","prototype":"bool ImagickDraw::setStrokeAntialias(bool $stroke_antialias)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeColor":{"id":"imagickdraw.setstrokecolor","purpose":"Sets the color used for stroking object outlines","prototype":"bool ImagickDraw::setStrokeColor(ImagickPixel $stroke_pixel)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeDashArray":{"id":"imagickdraw.setstrokedasharray","purpose":"Specifies the pattern of dashes and gaps used to stroke paths","prototype":"bool ImagickDraw::setStrokeDashArray(array $dashArray)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeDashOffset":{"id":"imagickdraw.setstrokedashoffset","purpose":"Specifies the offset into the dash pattern to start the dash","prototype":"bool ImagickDraw::setStrokeDashOffset(float $dash_offset)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeLineCap":{"id":"imagickdraw.setstrokelinecap","purpose":"Specifies the shape to be used at the end of open subpaths when they are stroked","prototype":"bool ImagickDraw::setStrokeLineCap(int $linecap)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeLineJoin":{"id":"imagickdraw.setstrokelinejoin","purpose":"Specifies the shape to be used at the corners of paths when they are stroked","prototype":"bool ImagickDraw::setStrokeLineJoin(int $linejoin)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeMiterLimit":{"id":"imagickdraw.setstrokemiterlimit","purpose":"Specifies the miter limit","prototype":"bool ImagickDraw::setStrokeMiterLimit(int $miterlimit)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeOpacity":{"id":"imagickdraw.setstrokeopacity","purpose":"Specifies the opacity of stroked object outlines","prototype":"bool ImagickDraw::setStrokeOpacity(float $stroke_opacity)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokePatternURL":{"id":"imagickdraw.setstrokepatternurl","purpose":"Sets the pattern used for stroking object outlines","prototype":"bool ImagickDraw::setStrokePatternURL(string $stroke_url)","return":"<p class=\"para\">   imagick.imagickdraw.return.success;  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setStrokeWidth":{"id":"imagickdraw.setstrokewidth","purpose":"Sets the width of the stroke used to draw object outlines","prototype":"bool ImagickDraw::setStrokeWidth(float $stroke_width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setTextAlignment":{"id":"imagickdraw.settextalignment","purpose":"Specifies a text alignment","prototype":"bool ImagickDraw::setTextAlignment(int $alignment)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setTextAntialias":{"id":"imagickdraw.settextantialias","purpose":"Controls whether text is antialiased","prototype":"bool ImagickDraw::setTextAntialias(bool $antiAlias)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setTextDecoration":{"id":"imagickdraw.settextdecoration","purpose":"Specifies a decoration","prototype":"bool ImagickDraw::setTextDecoration(int $decoration)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setTextEncoding":{"id":"imagickdraw.settextencoding","purpose":"Specifies the text code set","prototype":"bool ImagickDraw::setTextEncoding(string $encoding)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setTextInterlineSpacing":{"id":"imagickdraw.settextinterlinespacing","purpose":"Description","prototype":"bool ImagickDraw::setTextInterlineSpacing(float $spacing)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickDraw::setTextInterwordSpacing":{"id":"imagickdraw.settextinterwordspacing","purpose":"Description","prototype":"bool ImagickDraw::setTextInterwordSpacing(float $spacing)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickDraw::setTextKerning":{"id":"imagickdraw.settextkerning","purpose":"Description","prototype":"bool ImagickDraw::setTextKerning(float $kerning)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickDraw::setTextUnderColor":{"id":"imagickdraw.settextundercolor","purpose":"Specifies the color of a background rectangle","prototype":"bool ImagickDraw::setTextUnderColor(ImagickPixel $under_color)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setVectorGraphics":{"id":"imagickdraw.setvectorgraphics","purpose":"Sets the vector graphics","prototype":"bool ImagickDraw::setVectorGraphics(string $xml)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::setViewbox":{"id":"imagickdraw.setviewbox","purpose":"Sets the overall canvas size","prototype":"bool ImagickDraw::setViewbox(int $x1, int $y1, int $x2, int $y2)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::skewX":{"id":"imagickdraw.skewx","purpose":"Skews the current coordinate system in the horizontal direction","prototype":"bool ImagickDraw::skewX(float $degrees)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::skewY":{"id":"imagickdraw.skewy","purpose":"Skews the current coordinate system in the vertical direction","prototype":"bool ImagickDraw::skewY(float $degrees)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickDraw::translate":{"id":"imagickdraw.translate","purpose":"Applies a translation to the current coordinate system","prototype":"bool ImagickDraw::translate(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::clear":{"id":"imagickpixel.clear","purpose":"Clears resources associated with this object","prototype":"bool ImagickPixel::clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::__construct":{"id":"imagickpixel.construct","purpose":"The ImagickPixel constructor","prototype":" ImagickPixel::__construct([string $color = ''])","return":"<p class=\"para\">   Returns an ImagickPixel object on success, throwing ImagickPixelException on   failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::destroy":{"id":"imagickpixel.destroy","purpose":"Deallocates resources associated with this object","prototype":"bool ImagickPixel::destroy()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::getColor":{"id":"imagickpixel.getcolor","purpose":"Returns the color","prototype":"array ImagickPixel::getColor([int $normalized = ''])","return":"<p class=\"para\">   An array of channel values, each normalized if <strong><code>TRUE<\/code><\/strong> is given as param. Throws   ImagickPixelException on error.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::getColorAsString":{"id":"imagickpixel.getcolorasstring","purpose":"Returns the color as a string","prototype":"string ImagickPixel::getColorAsString()","return":"<p class=\"para\">   Returns the color of the ImagickPixel object as a string.  <\/p>","versions":"PECL imagick 2.1.0"},"ImagickPixel::getColorCount":{"id":"imagickpixel.getcolorcount","purpose":"Returns the color count associated with this color","prototype":"int ImagickPixel::getColorCount()","return":"<p class=\"para\">   Returns the color count as an integer on success, throws  ImagickPixelException on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::getColorQuantum":{"id":"imagickpixel.getcolorquantum","purpose":"Description","prototype":"array ImagickPixel::getColorQuantum()","return":"<p class=\"para\">   Returns an array with keys <em>&quot;r&quot;<\/em>, <em>&quot;g&quot;<\/em>,   <em>&quot;b&quot;<\/em>, <em>&quot;a&quot;<\/em>.  <\/p>","versions":""},"ImagickPixel::getColorValue":{"id":"imagickpixel.getcolorvalue","purpose":"Gets the normalized value of the provided color channel","prototype":"float ImagickPixel::getColorValue(int $color)","return":"<p class=\"para\">   The value of the channel, as a normalized floating-point number, throwing   ImagickPixelException on error.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::getColorValueQuantum":{"id":"imagickpixel.getcolorvaluequantum","purpose":"Description","prototype":"number ImagickPixel::getColorValueQuantum(int $color)","return":"<p class=\"para\">   The quantum value of the color element. Float if ImageMagick was compiled with HDRI, otherwise an int.  <\/p>","versions":""},"ImagickPixel::getHSL":{"id":"imagickpixel.gethsl","purpose":"Returns the normalized HSL color of the ImagickPixel object","prototype":"array ImagickPixel::getHSL()","return":"<p class=\"para\">   Returns the HSL value in an array with the keys &quot;hue&quot;,   &quot;saturation&quot;, and &quot;luminosity&quot;. Throws ImagickPixelException on failure.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::getIndex":{"id":"imagickpixel.getindex","purpose":"Description","prototype":"int ImagickPixel::getIndex()","return":"<p class=\"para\">     <\/p>","versions":""},"ImagickPixel::isPixelSimilar":{"id":"imagickpixel.ispixelsimilar","purpose":"Check the distance between this color and another","prototype":"bool ImagickPixel::isPixelSimilar(ImagickPixel $color, float $fuzz)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickPixel::isPixelSimilarQuantum":{"id":"imagickpixel.ispixelsimilarquantum","purpose":"Description","prototype":"bool ImagickPixel::isPixelSimilarQuantum(string $color [, string $fuzz = ''])","return":"<p class=\"para\">     <\/p>","versions":""},"ImagickPixel::isSimilar":{"id":"imagickpixel.issimilar","purpose":"Check the distance between this color and another","prototype":"bool ImagickPixel::isSimilar(ImagickPixel $color, float $fuzz)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::setColor":{"id":"imagickpixel.setcolor","purpose":"Sets the color","prototype":"bool ImagickPixel::setColor(string $color)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the specified color was set, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::setColorCount":{"id":"imagickpixel.setcolorcount","purpose":"Description","prototype":"bool ImagickPixel::setColorCount(int $colorCount)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickPixel::setColorValue":{"id":"imagickpixel.setcolorvalue","purpose":"Sets the normalized value of one of the channels","prototype":"bool ImagickPixel::setColorValue(int $color, float $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::setColorValueQuantum":{"id":"imagickpixel.setcolorvaluequantum","purpose":"Description","prototype":"bool ImagickPixel::setColorValueQuantum(int $color, number $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickPixel::setHSL":{"id":"imagickpixel.sethsl","purpose":"Sets the normalized HSL color","prototype":"bool ImagickPixel::setHSL(float $hue, float $saturation, float $luminosity)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixel::setIndex":{"id":"imagickpixel.setindex","purpose":"Description","prototype":"bool ImagickPixel::setIndex(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":""},"ImagickPixelIterator::clear":{"id":"imagickpixeliterator.clear","purpose":"Clear resources associated with a PixelIterator","prototype":"bool ImagickPixelIterator::clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::__construct":{"id":"imagickpixeliterator.construct","purpose":"The ImagickPixelIterator constructor","prototype":" ImagickPixelIterator::__construct(Imagick $wand)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::destroy":{"id":"imagickpixeliterator.destroy","purpose":"Deallocates resources associated with a PixelIterator","prototype":"bool ImagickPixelIterator::destroy()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::getCurrentIteratorRow":{"id":"imagickpixeliterator.getcurrentiteratorrow","purpose":"Returns the current row of ImagickPixel objects","prototype":"array ImagickPixelIterator::getCurrentIteratorRow()","return":"<p class=\"para\">   Returns a row as an array of ImagickPixel objects that can themselves be iterated.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::getIteratorRow":{"id":"imagickpixeliterator.getiteratorrow","purpose":"Returns the current pixel iterator row","prototype":"int ImagickPixelIterator::getIteratorRow()","return":"<p class=\"para\">   Returns the integer offset of the row, throwing   ImagickPixelIteratorException on error.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::getNextIteratorRow":{"id":"imagickpixeliterator.getnextiteratorrow","purpose":"Returns the next row of the pixel iterator","prototype":"array ImagickPixelIterator::getNextIteratorRow()","return":"<p class=\"para\">   Returns the next row as an array of ImagickPixel objects, throwing   ImagickPixelIteratorException on error.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::getPreviousIteratorRow":{"id":"imagickpixeliterator.getpreviousiteratorrow","purpose":"Returns the previous row","prototype":"array ImagickPixelIterator::getPreviousIteratorRow()","return":"<p class=\"para\">   Returns the previous row as an array of ImagickPixelWand objects from the   ImagickPixelIterator, throwing ImagickPixelIteratorException on error.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::newPixelIterator":{"id":"imagickpixeliterator.newpixeliterator","purpose":"Returns a new pixel iterator","prototype":"bool ImagickPixelIterator::newPixelIterator(Imagick $wand)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Throwing ImagickPixelIteratorException.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::newPixelRegionIterator":{"id":"imagickpixeliterator.newpixelregioniterator","purpose":"Returns a new pixel iterator","prototype":"bool ImagickPixelIterator::newPixelRegionIterator(Imagick $wand, int $x, int $y, int $columns, int $rows)","return":"<p class=\"para\">   Returns a new ImagickPixelIterator on success; on failure, throws   ImagickPixelIteratorException.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::resetIterator":{"id":"imagickpixeliterator.resetiterator","purpose":"Resets the pixel iterator","prototype":"bool ImagickPixelIterator::resetIterator()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::setIteratorFirstRow":{"id":"imagickpixeliterator.setiteratorfirstrow","purpose":"Sets the pixel iterator to the first pixel row","prototype":"bool ImagickPixelIterator::setIteratorFirstRow()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::setIteratorLastRow":{"id":"imagickpixeliterator.setiteratorlastrow","purpose":"Sets the pixel iterator to the last pixel row","prototype":"bool ImagickPixelIterator::setIteratorLastRow()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::setIteratorRow":{"id":"imagickpixeliterator.setiteratorrow","purpose":"Set the pixel iterator row","prototype":"bool ImagickPixelIterator::setIteratorRow(int $row)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickPixelIterator::syncIterator":{"id":"imagickpixeliterator.synciterator","purpose":"Syncs the pixel iterator","prototype":"bool ImagickPixelIterator::syncIterator()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL imagick 2.0.0"},"ImagickKernel::addKernel":{"id":"imagickkernel.addkernel","purpose":"Description","prototype":"void ImagickKernel::addKernel(ImagickKernel $ImagickKernel)","return":"<p class=\"para\">     <\/p>","versions":"PECL imagick >= 3.3.0"},"ImagickKernel::addUnityKernel":{"id":"imagickkernel.addunitykernel","purpose":"Description","prototype":"void ImagickKernel::addUnityKernel(float $scale)","return":"<p class=\"para\">     <\/p>","versions":"PECL imagick >= 3.3.0"},"ImagickKernel::fromBuiltIn":{"id":"imagickkernel.frombuiltin","purpose":"Description","prototype":"ImagickKernel ImagickKernel::fromBuiltIn(int $kernelType, string $kernelString)","return":"<p class=\"para\">     <\/p>","versions":"PECL imagick >= 3.3.0"},"ImagickKernel::fromMatrix":{"id":"imagickkernel.frommatrix","purpose":"Description","prototype":"ImagickKernel ImagickKernel::fromMatrix(array $matrix [, array $origin = ''])","return":"<p class=\"para\">   The generated ImagickKernel.  <\/p>","versions":"PECL imagick >= 3.3.0"},"ImagickKernel::getMatrix":{"id":"imagickkernel.getmatrix","purpose":"Description","prototype":"array ImagickKernel::getMatrix()","return":"<p class=\"para\">   A matrix (2d array) of the values that represent the kernel.  <\/p>","versions":"PECL imagick >= 3.3.0"},"ImagickKernel::scale":{"id":"imagickkernel.scale","purpose":"Description","prototype":"void ImagickKernel::scale(float $scale [, int $normalizeFlag = ''])","return":"<p class=\"para\">     <\/p>","versions":"PECL imagick >= 3.3.0"},"ImagickKernel::separate":{"id":"imagickkernel.separate","purpose":"Description","prototype":"array ImagickKernel::separate()","return":"<p class=\"para\">     <\/p>","versions":"PECL imagick >= 3.3.0"},"cyrus_authenticate":{"id":"function.cyrus-authenticate","purpose":"Authenticate against a Cyrus IMAP server","prototype":"void cyrus_authenticate(resource $connection [, string $mechlist = '' [, string $service = '' [, string $user = '' [, int $minssf = '' [, int $maxssf = '' [, string $authname = '' [, string $password = '']]]]]]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.1.0, PECL cyrus 1.0"},"cyrus_bind":{"id":"function.cyrus-bind","purpose":"Bind callbacks to a Cyrus IMAP connection","prototype":"bool cyrus_bind(resource $connection, array $callbacks)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PECL cyrus 1.0"},"cyrus_close":{"id":"function.cyrus-close","purpose":"Close connection to a Cyrus IMAP server","prototype":"bool cyrus_close(resource $connection)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PECL cyrus 1.0"},"cyrus_connect":{"id":"function.cyrus-connect","purpose":"Connect to a Cyrus IMAP server","prototype":"resource cyrus_connect([string $host = '' [, string $port = '' [, int $flags = '']]])","return":"<p class=\"para\">   Returns a connection handler on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PECL cyrus 1.0"},"cyrus_query":{"id":"function.cyrus-query","purpose":"Send a query to a Cyrus IMAP server","prototype":"array cyrus_query(resource $connection, string $query)","return":"<p class=\"para\">   Returns an associative array with the following keys:   <em>text<\/em>, <em>msgno<\/em>,   and <em>keyword<\/em>.  <\/p>","versions":"PHP 4 >= 4.1.0, PECL cyrus 1.0"},"cyrus_unbind":{"id":"function.cyrus-unbind","purpose":"Unbind ...","prototype":"bool cyrus_unbind(resource $connection, string $trigger_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PECL cyrus 1.0"},"imap_8bit":{"id":"function.imap-8bit","purpose":"Convert an 8bit string to a quoted-printable string","prototype":"string imap_8bit(string $string)","return":"<p class=\"para\">   Returns a quoted-printable string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_alerts":{"id":"function.imap-alerts","purpose":"Returns all IMAP alert messages that have occurred","prototype":"array imap_alerts()","return":"<p class=\"para\">   Returns an array of all of the IMAP alert messages generated or <strong><code>FALSE<\/code><\/strong> if   no alert messages are available.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_append":{"id":"function.imap-append","purpose":"Append a string message to a specified mailbox","prototype":"bool imap_append(resource $imap_stream, string $mailbox, string $message [, string $options = '' [, string $internal_date = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_base64":{"id":"function.imap-base64","purpose":"Decode BASE64 encoded text","prototype":"string imap_base64(string $text)","return":"<p class=\"para\">   Returns the decoded message as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_binary":{"id":"function.imap-binary","purpose":"Convert an 8bit string to a base64 string","prototype":"string imap_binary(string $string)","return":"<p class=\"para\">   Returns a base64 encoded string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_body":{"id":"function.imap-body","purpose":"Read the message body","prototype":"string imap_body(resource $imap_stream, int $msg_number [, int $options = ''])","return":"<p class=\"para\">   Returns the body of the specified message, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_bodystruct":{"id":"function.imap-bodystruct","purpose":"Read the structure of a specified body section of a specific message","prototype":"object imap_bodystruct(resource $imap_stream, int $msg_number, string $section)","return":"<p class=\"para\">   Returns the information in an object, for a detailed description   of the object structure and properties see    <span class=\"function\">imap_fetchstructure<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_check":{"id":"function.imap-check","purpose":"Check current mailbox","prototype":"object imap_check(resource $imap_stream)","return":"<p class=\"para\">   Returns the information in an object with following properties:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>Date<\/code><\/strong> - current system time formatted according to <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2822\" class=\"link external\">&raquo;&nbsp;RFC2822<\/a>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>Driver<\/code><\/strong> - protocol used to access this mailbox:      <acronym class=\"acronym\">POP3<\/acronym>, <acronym class=\"acronym\">IMAP<\/acronym>, <acronym class=\"acronym\">NNTP<\/acronym>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>Mailbox<\/code><\/strong> - the mailbox name     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>Nmsgs<\/code><\/strong> - number of messages in the mailbox     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>Recent<\/code><\/strong> - number of recent messages in the mailbox     <\/span>    <\/li>   <\/ul>  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_clearflag_full":{"id":"function.imap-clearflag-full","purpose":"Clears flags on messages","prototype":"bool imap_clearflag_full(resource $imap_stream, string $sequence, string $flag [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_close":{"id":"function.imap-close","purpose":"Close an IMAP stream","prototype":"bool imap_close(resource $imap_stream [, int $flag = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_create":{"id":"function.imap-create","purpose":"Alias of imap_createmailbox","prototype":" imap_create()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_createmailbox":{"id":"function.imap-createmailbox","purpose":"Create a new mailbox","prototype":"bool imap_createmailbox(resource $imap_stream, string $mailbox)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_delete":{"id":"function.imap-delete","purpose":"Mark a message for deletion from current mailbox","prototype":"bool imap_delete(resource $imap_stream, int $msg_number [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_deletemailbox":{"id":"function.imap-deletemailbox","purpose":"Delete a mailbox","prototype":"bool imap_deletemailbox(resource $imap_stream, string $mailbox)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_errors":{"id":"function.imap-errors","purpose":"Returns all of the IMAP errors that have occurred","prototype":"array imap_errors()","return":"<p class=\"para\">   This function returns an array of all of the IMAP error messages   generated since the last <span class=\"function\">imap_errors<\/span> call,   or the beginning of the page. Returns <strong><code>FALSE<\/code><\/strong> if no error messages are   available.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_expunge":{"id":"function.imap-expunge","purpose":"Delete all messages marked for deletion","prototype":"bool imap_expunge(resource $imap_stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_fetch_overview":{"id":"function.imap-fetch-overview","purpose":"Read an overview of the information in the headers of the given message","prototype":"array imap_fetch_overview(resource $imap_stream, string $sequence [, int $options = ''])","return":"<p class=\"para\">   Returns an array of objects describing one message header each.   The object will only define a property if it exists. The possible   properties are:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>subject<\/em> - the messages subject     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>from<\/em> - who sent it     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>to<\/em> - recipient     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>date<\/em> - when was it sent     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>message_id<\/em> - Message-ID     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>references<\/em> - is a reference to this message id     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>in_reply_to<\/em> - is a reply to this message id     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>size<\/em> - size in bytes     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>uid<\/em> - UID the message has in the mailbox     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>msgno<\/em> - message sequence number in the mailbox     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>recent<\/em> - this message is flagged as recent     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>flagged<\/em> -  this message is flagged     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>answered<\/em> -  this message is flagged as answered     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>deleted<\/em> -  this message is flagged for deletion     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>seen<\/em> -  this message is flagged as already read     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>draft<\/em> -  this message is flagged as being a draft     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>udate<\/em> -  the UNIX timestamp of the arrival date     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_fetchbody":{"id":"function.imap-fetchbody","purpose":"Fetch a particular section of the body of the message","prototype":"string imap_fetchbody(resource $imap_stream, int $msg_number, string $section [, int $options = ''])","return":"<p class=\"para\">   Returns a particular section of the body of the specified messages as a   text string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_fetchheader":{"id":"function.imap-fetchheader","purpose":"Returns header for a message","prototype":"string imap_fetchheader(resource $imap_stream, int $msg_number [, int $options = ''])","return":"<p class=\"para\">   Returns the header of the specified message as a text string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_fetchmime":{"id":"function.imap-fetchmime","purpose":"Fetch MIME headers for a particular section of the message","prototype":"string imap_fetchmime(resource $imap_stream, int $msg_number, string $section [, int $options = ''])","return":"<p class=\"para\">   Returns the MIME headers of a particular section of the body of the specified messages as a   text string.  <\/p>","versions":"PHP 5 >= 5.3.6, PHP 7"},"imap_fetchstructure":{"id":"function.imap-fetchstructure","purpose":"Read the structure of a particular message","prototype":"object imap_fetchstructure(resource $imap_stream, int $msg_number [, int $options = ''])","return":"<p class=\"para\">   Returns an object includes the envelope, internal date, size, flags and   body structure along with a similar object for each mime attachment. The   structure of the returned objects is as follows:  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>     Returned Objects for <span class=\"function\">imap_fetchstructure<\/span>    <\/strong><\/caption>         <tbody class=\"tbody\">      <tr>       <td>type<\/td>       <td>Primary body type<\/td>      <\/tr>      <tr>       <td>encoding<\/td>       <td>Body transfer encoding<\/td>      <\/tr>      <tr>       <td>ifsubtype<\/td>       <td><strong><code>TRUE<\/code><\/strong> if there is a subtype string<\/td>      <\/tr>      <tr>       <td>subtype<\/td>       <td><acronym class=\"acronym\">MIME<\/acronym> subtype<\/td>      <\/tr>      <tr>       <td>ifdescription<\/td>       <td><strong><code>TRUE<\/code><\/strong> if there is a description string<\/td>      <\/tr>      <tr>       <td>description<\/td>       <td>Content description string<\/td>      <\/tr>      <tr>       <td>ifid<\/td>       <td><strong><code>TRUE<\/code><\/strong> if there is an identification string<\/td>      <\/tr>      <tr>       <td>id<\/td>       <td>Identification string<\/td>      <\/tr>      <tr>       <td>lines<\/td>       <td>Number of lines<\/td>      <\/tr>      <tr>       <td>bytes<\/td>       <td>Number of bytes<\/td>      <\/tr>      <tr>       <td>ifdisposition<\/td>       <td><strong><code>TRUE<\/code><\/strong> if there is a disposition string<\/td>      <\/tr>      <tr>       <td>disposition<\/td>       <td>Disposition string<\/td>      <\/tr>      <tr>       <td>ifdparameters<\/td>       <td><strong><code>TRUE<\/code><\/strong> if the <var class=\"varname\">dparameters<\/var> array exists<\/td>      <\/tr>      <tr>       <td>dparameters<\/td>       <td>An array of objects where each object has an        <em>&quot;attribute&quot;<\/em> and a <em>&quot;value&quot;<\/em>        property corresponding to the parameters on the        <em>Content-disposition<\/em> <acronym class=\"acronym\">MIME<\/acronym>        header.<\/td>      <\/tr>      <tr>       <td>ifparameters<\/td>       <td><strong><code>TRUE<\/code><\/strong> if the parameters array exists<\/td>      <\/tr>      <tr>       <td>parameters<\/td>       <td>An array of objects where each object has an        <em>&quot;attribute&quot;<\/em> and a <em>&quot;value&quot;<\/em>        property.<\/td>      <\/tr>      <tr>       <td>parts<\/td>       <td>An array of objects identical in structure to the top-level       object, each of which corresponds to a <acronym class=\"acronym\">MIME<\/acronym> body       part.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Primary body type (value may vary with used library, use of constants is recommended)<\/strong><\/caption>         <thead>      <tr><th>Value<\/th><th>Type<\/th><th>Constant<\/th><\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr><td>0<\/td><td>text<\/td><td>TYPETEXT<\/td><\/tr>      <tr><td>1<\/td><td>multipart<\/td><td>TYPEMULTIPART<\/td><\/tr>      <tr><td>2<\/td><td>message<\/td><td>TYPEMESSAGE<\/td><\/tr>      <tr><td>3<\/td><td>application<\/td><td>TYPEAPPLICATION<\/td><\/tr>      <tr><td>4<\/td><td>audio<\/td><td>TYPEAUDIO<\/td><\/tr>      <tr><td>5<\/td><td>image<\/td><td>TYPEIMAGE<\/td><\/tr>      <tr><td>6<\/td><td>video<\/td><td>TYPEVIDEO<\/td><\/tr>      <tr><td>7<\/td><td>model<\/td><td>TYPEMODEL<\/td><\/tr>      <tr><td>8<\/td><td>other<\/td><td>TYPEOTHER<\/td><\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Transfer encodings (value may vary with used library, use of constants is recommended)<\/strong><\/caption>         <thead>      <tr><th>Value<\/th><th>Type<\/th><th>Constant<\/th><\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr><td>0<\/td><td>7bit<\/td><td>ENC7BIT<\/td><\/tr>      <tr><td>1<\/td><td>8bit<\/td><td>ENC8BIT<\/td><\/tr>      <tr><td>2<\/td><td>Binary<\/td><td>ENCBINARY<\/td><\/tr>      <tr><td>3<\/td><td>Base64<\/td><td>ENCBASE64<\/td><\/tr>      <tr><td>4<\/td><td>Quoted-Printable<\/td><td>ENCQUOTEDPRINTABLE<\/td><\/tr>      <tr><td>5<\/td><td>other<\/td><td>ENCOTHER<\/td><\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_fetchtext":{"id":"function.imap-fetchtext","purpose":"Alias of imap_body","prototype":" imap_fetchtext()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_gc":{"id":"function.imap-gc","purpose":"Clears IMAP cache","prototype":"bool imap_gc(resource $imap_stream, int $caches)","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"imap_get_quota":{"id":"function.imap-get-quota","purpose":"Retrieve the quota level settings, and usage statics per mailbox","prototype":"array imap_get_quota(resource $imap_stream, string $quota_root)","return":"<p class=\"para\">   Returns an array with integer values limit and usage for the given   mailbox.  The value of limit represents the total amount of space   allowed for this mailbox.  The usage value represents the mailboxes   current level of capacity.  Will return <strong><code>FALSE<\/code><\/strong> in the case of failure.  <\/p>  <p class=\"para\">   As of PHP 4.3, the function more properly reflects the   functionality as dictated by the <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2087\" class=\"link external\">&raquo;&nbsp;RFC2087<\/a>.   The array return value has changed to support an unlimited number of returned    resources (i.e.  messages, or sub-folders) with each named resource receiving   an individual array key.  Each key value then contains an another array with   the usage and limit values within it.  <\/p>  <p class=\"para\">   For backwards compatibility reasons, the original access methods are   still available for use, although it is suggested to update.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"imap_get_quotaroot":{"id":"function.imap-get-quotaroot","purpose":"Retrieve the quota settings per user","prototype":"array imap_get_quotaroot(resource $imap_stream, string $quota_root)","return":"<p class=\"para\">   Returns an array of integer values pertaining to the specified user   mailbox.  All values contain a key based upon the resource name, and a   corresponding array with the usage and limit values within.  <\/p>  <p class=\"para\">   This function will return <strong><code>FALSE<\/code><\/strong> in the case of call failure, and an   array of information about the connection upon an un-parsable response   from the server.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"imap_getacl":{"id":"function.imap-getacl","purpose":"Gets the ACL for a given mailbox","prototype":"array imap_getacl(resource $imap_stream, string $mailbox)","return":"<p class=\"para\">   Returns an associative array of &quot;folder&quot; =&gt; &quot;acl&quot; pairs.  <\/p>","versions":"PHP 5, PHP 7"},"imap_getmailboxes":{"id":"function.imap-getmailboxes","purpose":"Read the list of mailboxes, returning detailed information on each one","prototype":"array imap_getmailboxes(resource $imap_stream, string $ref, string $pattern)","return":"<p class=\"para\">   Returns an array of objects containing mailbox information. Each   object has the attributes <code class=\"parameter\">name<\/code>, specifying   the full name of the mailbox; <code class=\"parameter\">delimiter<\/code>,   which is the hierarchy delimiter for the part of the hierarchy   this mailbox is in; and   <code class=\"parameter\">attributes<\/code>. <code class=\"parameter\">Attributes<\/code>   is a bitmask that can be tested against:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_NOINFERIORS<\/code><\/strong> - This mailbox not contains, and may not contain any      &quot;children&quot; (there are no mailboxes below this one). Calling       <span class=\"function\">imap_createmailbox<\/span> will not work on this mailbox.     <\/p>    <\/li>   <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_NOSELECT<\/code><\/strong> - This is only a container,      not a mailbox - you cannot open it.     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_MARKED<\/code><\/strong> - This mailbox is marked. This means that it may       contain new messages since the last time it was checked. Not provided by all IMAP      servers.     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_UNMARKED<\/code><\/strong> - This mailbox is not marked, does not contain new      messages.  If either <strong><code>MARKED<\/code><\/strong> or <strong><code>UNMARKED<\/code><\/strong> is      provided, you can assume the IMAP server  supports this feature for this mailbox.     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_REFERRAL<\/code><\/strong> - This container has a referral to a remote mailbox.     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_HASCHILDREN<\/code><\/strong> - This mailbox has selectable inferiors.     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      <strong><code>LATT_HASNOCHILDREN<\/code><\/strong> - This mailbox has no selectable inferiors.     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_getsubscribed":{"id":"function.imap-getsubscribed","purpose":"List all the subscribed mailboxes","prototype":"array imap_getsubscribed(resource $imap_stream, string $ref, string $pattern)","return":"<p class=\"para\">   Returns an array of objects containing mailbox information. Each   object has the attributes <code class=\"parameter\">name<\/code>, specifying   the full name of the mailbox; <code class=\"parameter\">delimiter<\/code>,   which is the hierarchy delimiter for the part of the hierarchy   this mailbox is in; and   <code class=\"parameter\">attributes<\/code>. <code class=\"parameter\">Attributes<\/code>   is a bitmask that can be tested against:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_NOINFERIORS<\/code><\/strong> - This mailbox has no      &quot;children&quot; (there are no mailboxes below this one).     <\/span>    <\/li>   <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_NOSELECT<\/code><\/strong> - This is only a container,      not a mailbox - you cannot open it.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_MARKED<\/code><\/strong> - This mailbox is marked.      Only used by UW-IMAPD.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_UNMARKED<\/code><\/strong> - This mailbox is not marked.      Only used by UW-IMAPD.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_REFERRAL<\/code><\/strong> - This container has a referral to a remote mailbox.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_HASCHILDREN<\/code><\/strong> - This mailbox has selectable inferiors.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <strong><code>LATT_HASNOCHILDREN<\/code><\/strong> - This mailbox has no selectable inferiors.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_header":{"id":"function.imap-header","purpose":"Alias of imap_headerinfo","prototype":" imap_header()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_headerinfo":{"id":"function.imap-headerinfo","purpose":"Read the header of the message","prototype":"object imap_headerinfo(resource $imap_stream, int $msg_number [, int $fromlength = '' [, int $subjectlength = '' [, string $defaulthost = '']]])","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on error or, if successful, the information in an object with following properties:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      toaddress - full to: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      to - an array of objects from the To: line, with the following       properties: <em>personal<\/em>, <em>adl<\/em>,      <em>mailbox<\/em>, and <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      fromaddress - full from: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      from - an array of objects from the From: line, with the following       properties: <em>personal<\/em>, <em>adl<\/em>,      <em>mailbox<\/em>, and <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      ccaddress - full cc: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      cc - an array of objects from the Cc: line, with the following       properties: <em>personal<\/em>, <em>adl<\/em>,      <em>mailbox<\/em>, and <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      bccaddress - full bcc: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      bcc - an array of objects from the Bcc: line, with the following       properties: <em>personal<\/em>, <em>adl<\/em>,      <em>mailbox<\/em>, and <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      reply_toaddress - full Reply-To: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      reply_to - an array of objects from the Reply-To: line, with the following      properties: <em>personal<\/em>, <em>adl<\/em>,      <em>mailbox<\/em>, and <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      senderaddress - full sender: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      sender - an array of objects from the Sender: line, with the following       properties: <em>personal<\/em>, <em>adl<\/em>,      <em>mailbox<\/em>, and <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      return_pathaddress - full Return-Path: line, up to 1024 characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      return_path - an array of objects from the Return-Path: line, with the      following properties: <em>personal<\/em>,       <em>adl<\/em>, <em>mailbox<\/em>, and       <em>host<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      remail -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      date - The message date as found in its headers     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Date - Same as date     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      subject - The message subject     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Subject - Same as subject      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      in_reply_to -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      message_id -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      newsgroups -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      followup_to -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      references -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Recent - <em>R<\/em> if recent and seen, <em>N<\/em>      if recent and not seen, &#039; &#039; if not recent.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Unseen - <em>U<\/em> if not seen AND not recent, &#039; &#039; if seen      OR not seen and recent     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Flagged - <em>F<\/em> if flagged, &#039; &#039; if not flagged     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Answered - <em>A<\/em> if answered, &#039; &#039; if unanswered     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Deleted - <em>D<\/em> if deleted, &#039; &#039; if not deleted     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Draft - <em>X<\/em> if draft, &#039; &#039; if not draft     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Msgno - The message number     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      MailDate -      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      Size - The message size     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      udate - mail message date in Unix time     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      fetchfrom - from line formatted to fit <code class=\"parameter\">fromlength<\/code>      characters     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      fetchsubject - subject line formatted to fit       <code class=\"parameter\">subjectlength<\/code> characters     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_headers":{"id":"function.imap-headers","purpose":"Returns headers for all messages in a mailbox","prototype":"array imap_headers(resource $imap_stream)","return":"<p class=\"para\">   Returns an array of string formatted with header info. One   element per mail message.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_last_error":{"id":"function.imap-last-error","purpose":"Gets the last IMAP error that occurred during this page request","prototype":"string imap_last_error()","return":"<p class=\"para\">   Returns the full text of the last IMAP error message that occurred on the   current page. Returns <strong><code>FALSE<\/code><\/strong> if no error messages are available.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_list":{"id":"function.imap-list","purpose":"Read the list of mailboxes","prototype":"array imap_list(resource $imap_stream, string $ref, string $pattern)","return":"<p class=\"para\">   Returns an array containing the names of the mailboxes or false in case of failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_listmailbox":{"id":"function.imap-listmailbox","purpose":"Alias of imap_list","prototype":" imap_listmailbox()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_listscan":{"id":"function.imap-listscan","purpose":"Returns the list of mailboxes that matches the given text","prototype":"array imap_listscan(resource $imap_stream, string $ref, string $pattern, string $content)","return":"<p class=\"para\">   Returns an array containing the names of the mailboxes that have   <code class=\"parameter\">content<\/code> in the text of the mailbox.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_listsubscribed":{"id":"function.imap-listsubscribed","purpose":"Alias of imap_lsub","prototype":" imap_listsubscribed()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_lsub":{"id":"function.imap-lsub","purpose":"List all the subscribed mailboxes","prototype":"array imap_lsub(resource $imap_stream, string $ref, string $pattern)","return":"<p class=\"para\">   Returns an array of all the subscribed mailboxes.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mail_compose":{"id":"function.imap-mail-compose","purpose":"Create a MIME message based on given envelope and body sections","prototype":"string imap_mail_compose(array $envelope, array $body)","return":"<p class=\"para\">   Returns the MIME message.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mail_copy":{"id":"function.imap-mail-copy","purpose":"Copy specified messages to a mailbox","prototype":"bool imap_mail_copy(resource $imap_stream, string $msglist, string $mailbox [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mail_move":{"id":"function.imap-mail-move","purpose":"Move specified messages to a mailbox","prototype":"bool imap_mail_move(resource $imap_stream, string $msglist, string $mailbox [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mail":{"id":"function.imap-mail","purpose":"Send an email message","prototype":"bool imap_mail(string $to, string $subject, string $message [, string $additional_headers = '' [, string $cc = '' [, string $bcc = '' [, string $rpath = '']]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mailboxmsginfo":{"id":"function.imap-mailboxmsginfo","purpose":"Get information about the current mailbox","prototype":"object imap_mailboxmsginfo(resource $imap_stream)","return":"<p class=\"para\">   Returns the information in an object with following properties:   <table class=\"doctable table\">    <caption><strong>Mailbox properties<\/strong><\/caption>         <tbody class=\"tbody\">      <tr>       <td>Date<\/td>       <td>date of last change (current datetime)<\/td>      <\/tr>      <tr>       <td>Driver<\/td>       <td>driver<\/td>      <\/tr>      <tr>       <td>Mailbox<\/td>       <td>name of the mailbox<\/td>      <\/tr>      <tr>       <td>Nmsgs<\/td>       <td>number of messages<\/td>      <\/tr>      <tr>       <td>Recent<\/td>       <td>number of recent messages<\/td>      <\/tr>      <tr>       <td>Unread<\/td>       <td>number of unread messages<\/td>      <\/tr>      <tr>       <td>Deleted<\/td>       <td>number of deleted messages<\/td>      <\/tr>      <tr>       <td>Size<\/td>       <td>mailbox size<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mime_header_decode":{"id":"function.imap-mime-header-decode","purpose":"Decode MIME header elements","prototype":"array imap_mime_header_decode(string $text)","return":"<p class=\"para\">   The decoded elements are returned in an array of objects, where each   object has two properties, <em>charset<\/em> and    <em>text<\/em>.  <\/p>  <p class=\"para\">   If the element hasn&#039;t been encoded, and in other words is in   plain US-ASCII, the <em>charset<\/em> property of that element is   set to <em>default<\/em>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_msgno":{"id":"function.imap-msgno","purpose":"Gets the message sequence number for the given UID","prototype":"int imap_msgno(resource $imap_stream, int $uid)","return":"<p class=\"para\">   Returns the message sequence number for the given    <code class=\"parameter\">uid<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_mutf7_to_utf8":{"id":"function.imap-mutf7-to-utf8","purpose":"Decode a modified UTF-7 string to UTF-8","prototype":"string imap_mutf7_to_utf8(string $in)","return":"<p class=\"para\">   Returns <code class=\"parameter\">in<\/code> converted to UTF-8,    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"imap_num_msg":{"id":"function.imap-num-msg","purpose":"Gets the number of messages in the current mailbox","prototype":"int imap_num_msg(resource $imap_stream)","return":"<p class=\"para\">   Return the number of messages in the current mailbox, as an integer, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_num_recent":{"id":"function.imap-num-recent","purpose":"Gets the number of recent messages in current mailbox","prototype":"int imap_num_recent(resource $imap_stream)","return":"<p class=\"para\">   Returns the number of recent messages in the current mailbox, as an   integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_open":{"id":"function.imap-open","purpose":"Open an IMAP stream to a mailbox","prototype":"resource imap_open(string $mailbox, string $username, string $password [, int $options = '' [, int $n_retries = '' [, array $params = '']]])","return":"<p class=\"para\">   Returns an IMAP stream on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_ping":{"id":"function.imap-ping","purpose":"Check if the IMAP stream is still active","prototype":"bool imap_ping(resource $imap_stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the stream is still alive, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_qprint":{"id":"function.imap-qprint","purpose":"Convert a quoted-printable string to an 8 bit string","prototype":"string imap_qprint(string $string)","return":"<p class=\"para\">   Returns an 8 bits string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_rename":{"id":"function.imap-rename","purpose":"Alias of imap_renamemailbox","prototype":" imap_rename()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_renamemailbox":{"id":"function.imap-renamemailbox","purpose":"Rename an old mailbox to new mailbox","prototype":"bool imap_renamemailbox(resource $imap_stream, string $old_mbox, string $new_mbox)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_reopen":{"id":"function.imap-reopen","purpose":"Reopen IMAP stream to new mailbox","prototype":"bool imap_reopen(resource $imap_stream, string $mailbox [, int $options = '' [, int $n_retries = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the stream is reopened, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_rfc822_parse_adrlist":{"id":"function.imap-rfc822-parse-adrlist","purpose":"Parses an address string","prototype":"array imap_rfc822_parse_adrlist(string $address, string $default_host)","return":"<p class=\"para\">   Returns an array of objects. The objects properties are:  <\/p>  <p class=\"para\">   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      mailbox  - the mailbox name (username)     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      host - the host name     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      personal - the personal name     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      adl - at domain source route     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_rfc822_parse_headers":{"id":"function.imap-rfc822-parse-headers","purpose":"Parse mail headers from a string","prototype":"object imap_rfc822_parse_headers(string $headers [, string $defaulthost = \"UNKNOWN\"])","return":"<p class=\"para\">   Returns an object similar to the one returned by   <span class=\"function\">imap_header<\/span>, except for the flags and other    properties that come from the IMAP server.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_rfc822_write_address":{"id":"function.imap-rfc822-write-address","purpose":"Returns a properly formatted email address given the mailbox, host, and personal info","prototype":"string imap_rfc822_write_address(string $mailbox, string $host, string $personal)","return":"<p class=\"para\">   Returns a string properly formatted email address as defined in <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2822\" class=\"link external\">&raquo;&nbsp;RFC2822<\/a>.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_savebody":{"id":"function.imap-savebody","purpose":"Save a specific body section to a file","prototype":"bool imap_savebody(resource $imap_stream, mixed $file, int $msg_number [, string $part_number = \"\" [, int $options = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"imap_scan":{"id":"function.imap-scan","purpose":"Alias of imap_listscan","prototype":" imap_scan()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_scanmailbox":{"id":"function.imap-scanmailbox","purpose":"Alias of imap_listscan","prototype":" imap_scanmailbox()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"imap_search":{"id":"function.imap-search","purpose":"This function returns an array of messages matching the given search criteria","prototype":"array imap_search(resource $imap_stream, string $criteria [, int $options = SE_FREE [, string $charset = '']])","return":"<p class=\"para\">   Returns an array of message numbers or UIDs.  <\/p>  <p class=\"para\">   Return <strong><code>FALSE<\/code><\/strong> if it does not understand the search   <code class=\"parameter\">criteria<\/code> or no messages have been found.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_set_quota":{"id":"function.imap-set-quota","purpose":"Sets a quota for a given mailbox","prototype":"bool imap_set_quota(resource $imap_stream, string $quota_root, int $quota_limit)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"imap_setacl":{"id":"function.imap-setacl","purpose":"Sets the ACL for a given mailbox","prototype":"bool imap_setacl(resource $imap_stream, string $mailbox, string $id, string $rights)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imap_setflag_full":{"id":"function.imap-setflag-full","purpose":"Sets flags on messages","prototype":"bool imap_setflag_full(resource $imap_stream, string $sequence, string $flag [, int $options = NIL])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_sort":{"id":"function.imap-sort","purpose":"Gets and sort messages","prototype":"array imap_sort(resource $imap_stream, int $criteria, int $reverse [, int $options = '' [, string $search_criteria = '' [, string $charset = '']]])","return":"<p class=\"para\">   Returns an array of message numbers sorted by the given   parameters.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_status":{"id":"function.imap-status","purpose":"Returns status information on a mailbox","prototype":"object imap_status(resource $imap_stream, string $mailbox, int $options)","return":"<p class=\"para\">   This function returns an object containing status information.   The object has the following properties: <em>messages<\/em>,   <em>recent<\/em>, <em>unseen<\/em>,    <em>uidnext<\/em>, and <em>uidvalidity<\/em>.    <\/p>  <p class=\"para\">   <em>flags<\/em> is also set, which contains a bitmask which can   be checked against any of the above constants.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_subscribe":{"id":"function.imap-subscribe","purpose":"Subscribe to a mailbox","prototype":"bool imap_subscribe(resource $imap_stream, string $mailbox)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_thread":{"id":"function.imap-thread","purpose":"Returns a tree of threaded message","prototype":"array imap_thread(resource $imap_stream [, int $options = SE_FREE])","return":"<p class=\"para\">   <span class=\"function\">imap_thread<\/span> returns an associative array containing   a tree of messages threaded by <em>REFERENCES<\/em>, or <strong><code>FALSE<\/code><\/strong>   on error.  <\/p>  <p class=\"para\">   Every message in the current mailbox will be represented by three entries   in the resulting array:   <ul class=\"itemizedlist\">    <li class=\"listitem\"><p class=\"para\">     <var class=\"varname\">$thread[&quot;XX.num&quot;]<\/var> - current message number    <\/p><\/li>    <li class=\"listitem\"><p class=\"para\">     <var class=\"varname\">$thread[&quot;XX.next&quot;]<\/var>    <\/p><\/li>    <li class=\"listitem\"><p class=\"para\">     <var class=\"varname\">$thread[&quot;XX.branch&quot;]<\/var>    <\/p><\/li>   <\/ul>  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"imap_timeout":{"id":"function.imap-timeout","purpose":"Set or fetch imap timeout","prototype":"mixed imap_timeout(int $timeout_type [, int $timeout = -1])","return":"<p class=\"para\">   If the <code class=\"parameter\">timeout<\/code> parameter is set, this function   returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">timeout<\/code>  is not provided or evaluates to -1,   the current timeout value of <code class=\"parameter\">timeout_type<\/code> is   returned as an integer.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5, PHP 7"},"imap_uid":{"id":"function.imap-uid","purpose":"This function returns the UID for the given message sequence number","prototype":"int imap_uid(resource $imap_stream, int $msg_number)","return":"<p class=\"para\">   The UID of the given message.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_undelete":{"id":"function.imap-undelete","purpose":"Unmark the message which is marked deleted","prototype":"bool imap_undelete(resource $imap_stream, int $msg_number [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_unsubscribe":{"id":"function.imap-unsubscribe","purpose":"Unsubscribe from a mailbox","prototype":"bool imap_unsubscribe(resource $imap_stream, string $mailbox)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_utf7_decode":{"id":"function.imap-utf7-decode","purpose":"Decodes a modified UTF-7 encoded string","prototype":"string imap_utf7_decode(string $text)","return":"<p class=\"para\">   Returns a string that is encoded in ISO-8859-1 and consists of the same   sequence of characters in <code class=\"parameter\">text<\/code>, or <strong><code>FALSE<\/code><\/strong>   if <code class=\"parameter\">text<\/code> contains invalid modified UTF-7 sequence   or <code class=\"parameter\">text<\/code> contains a character that is not part of   ISO-8859-1 character set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_utf7_encode":{"id":"function.imap-utf7-encode","purpose":"Converts ISO-8859-1 string to modified UTF-7 text","prototype":"string imap_utf7_encode(string $data)","return":"<p class=\"para\">   Returns <code class=\"parameter\">data<\/code> encoded with the modified UTF-7   encoding as defined in <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2060\" class=\"link external\">&raquo;&nbsp;RFC 2060<\/a>,    section 5.1.3 (original UTF-7 was defined in <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc1642\" class=\"link external\">&raquo;&nbsp;RFC1642<\/a>).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"imap_utf8_to_mutf7":{"id":"function.imap-utf8-to-mutf7","purpose":"Encode a UTF-8 string to modified UTF-7","prototype":"string imap_utf8_to_mutf7(string $in)","return":"<p class=\"para\">   Returns <code class=\"parameter\">in<\/code> converted to modified UTF-7,    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"imap_utf8":{"id":"function.imap-utf8","purpose":"Converts MIME-encoded text to UTF-8","prototype":"string imap_utf8(string $mime_encoded_text)","return":"<p class=\"para\">   Returns an UTF-8 encoded string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ezmlm_hash":{"id":"function.ezmlm-hash","purpose":"Calculate the hash value needed by EZMLM","prototype":"int ezmlm_hash(string $addr)","return":"<p class=\"para\">   The hash value of <code class=\"parameter\">addr<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"mail":{"id":"function.mail","purpose":"Send mail","prototype":"bool mail(string $to, string $subject, string $message [, mixed $additional_headers = '' [, string $additional_parameters = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the mail was successfully accepted for delivery, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <p class=\"para\">   It is important to note that just because the mail was accepted for delivery,   it does NOT mean the mail will actually reach the intended destination.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mailparse_determine_best_xfer_encoding":{"id":"function.mailparse-determine-best-xfer-encoding","purpose":"Gets the best way of encoding","prototype":"string mailparse_determine_best_xfer_encoding(resource $fp)","return":"<p class=\"para\">   Returns one of the character encodings supported by the   <a href=\"ref.mbstring.html\" class=\"link\">mbstring<\/a> module.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_create":{"id":"function.mailparse-msg-create","purpose":"Create a mime mail resource","prototype":"resource mailparse_msg_create()","return":"<p class=\"para\">   Returns a handle that can be used to parse a message.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_extract_part_file":{"id":"function.mailparse-msg-extract-part-file","purpose":"Extracts\/decodes a message section","prototype":"string mailparse_msg_extract_part_file(resource $mimemail, mixed $filename [, callable $callbackfunc = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">callbackfunc<\/code> is not <strong><code>NULL<\/code><\/strong> returns <strong><code>TRUE<\/code><\/strong> on   success.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">callbackfunc<\/code> is set to <strong><code>NULL<\/code><\/strong>, returns the   extracted section as a string.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_extract_part":{"id":"function.mailparse-msg-extract-part","purpose":"Extracts\/decodes a message section","prototype":"void mailparse_msg_extract_part(resource $mimemail, string $msgbody [, callable $callbackfunc = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_extract_whole_part_file":{"id":"function.mailparse-msg-extract-whole-part-file","purpose":"Extracts a message section including headers without decoding the transfer encoding","prototype":"string mailparse_msg_extract_whole_part_file(resource $mimemail, string $filename [, callable $callbackfunc = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_free":{"id":"function.mailparse-msg-free","purpose":"Frees a MIME resource","prototype":"bool mailparse_msg_free(resource $mimemail)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_get_part_data":{"id":"function.mailparse-msg-get-part-data","purpose":"Returns an associative array of info about the message","prototype":"array mailparse_msg_get_part_data(resource $mimemail)","return":"","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_get_part":{"id":"function.mailparse-msg-get-part","purpose":"Returns a handle on a given section in a mimemessage","prototype":"resource mailparse_msg_get_part(resource $mimemail, string $mimesection)","return":"","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_get_structure":{"id":"function.mailparse-msg-get-structure","purpose":"Returns an array of mime section names in the supplied message","prototype":"array mailparse_msg_get_structure(resource $mimemail)","return":"","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_parse_file":{"id":"function.mailparse-msg-parse-file","purpose":"Parses a file","prototype":"resource mailparse_msg_parse_file(string $filename)","return":"<p class=\"para\">   Returns a <em>MIME<\/em> resource representing the structure, or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_msg_parse":{"id":"function.mailparse-msg-parse","purpose":"Incrementally parse data into buffer","prototype":"bool mailparse_msg_parse(resource $mimemail, string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_rfc822_parse_addresses":{"id":"function.mailparse-rfc822-parse-addresses","purpose":"Parse RFC 822 compliant addresses","prototype":"array mailparse_rfc822_parse_addresses(string $addresses)","return":"<p class=\"para\">   Returns an array of associative arrays with the following keys for each   recipient:   <table class=\"doctable informaltable\">         <tbody class=\"tbody\">      <tr>       <td><em>display<\/em><\/td>       <td>        The recipient name, for display purpose. If this part is not set for a        recipient, this key will hold the same value as         <em>address<\/em>.       <\/td>      <\/tr>      <tr>       <td><em>address<\/em><\/td>       <td>The email address<\/td>      <\/tr>      <tr>       <td><em>is_group<\/em><\/td>       <td><strong><code>TRUE<\/code><\/strong> if the recipient is a newsgroup, <strong><code>FALSE<\/code><\/strong> otherwise.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_stream_encode":{"id":"function.mailparse-stream-encode","purpose":"Streams data from source file pointer, apply encoding and write to destfp","prototype":"bool mailparse_stream_encode(resource $sourcefp, resource $destfp, string $encoding)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"mailparse_uudecode_all":{"id":"function.mailparse-uudecode-all","purpose":"Scans the data from fp and extract each embedded uuencoded file","prototype":"array mailparse_uudecode_all(resource $fp)","return":"<p class=\"para\">   Returns an array of associative arrays listing filename information.   <table class=\"doctable informaltable\">         <tbody class=\"tbody\">      <tr>       <td><em>filename<\/em><\/td>       <td>Path to the temporary file name created<\/td>      <\/tr>      <tr>       <td><em>origfilename<\/em><\/td>       <td>The original filename, for uuencoded parts only<\/td>      <\/tr>     <\/tbody>       <\/table>   The first filename entry is the message body. The next entries are the   decoded uuencoded files.  <\/p>","versions":"PECL mailparse >= 0.9.0"},"vpopmail_add_alias_domain_ex":{"id":"function.vpopmail-add-alias-domain-ex","purpose":"Add alias to an existing virtual domain","prototype":"bool vpopmail_add_alias_domain_ex(string $olddomain, string $newdomain)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_add_alias_domain":{"id":"function.vpopmail-add-alias-domain","purpose":"Add an alias for a virtual domain","prototype":"bool vpopmail_add_alias_domain(string $domain, string $aliasdomain)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_add_domain_ex":{"id":"function.vpopmail-add-domain-ex","purpose":"Add a new virtual domain","prototype":"bool vpopmail_add_domain_ex(string $domain, string $passwd [, string $quota = '' [, string $bounce = '' [, bool $apop = '']]])","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_add_domain":{"id":"function.vpopmail-add-domain","purpose":"Add a new virtual domain","prototype":"bool vpopmail_add_domain(string $domain, string $dir, int $uid, int $gid)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_add_user":{"id":"function.vpopmail-add-user","purpose":"Add a new user to the specified virtual domain","prototype":"bool vpopmail_add_user(string $user, string $domain, string $password [, string $gecos = '' [, bool $apop = '']])","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_alias_add":{"id":"function.vpopmail-alias-add","purpose":"Insert a virtual alias","prototype":"bool vpopmail_alias_add(string $user, string $domain, string $alias)","return":"","versions":"PHP 4 >= 4.0.7, PECL vpopmail >= 0.2"},"vpopmail_alias_del_domain":{"id":"function.vpopmail-alias-del-domain","purpose":"Deletes all virtual aliases of a domain","prototype":"bool vpopmail_alias_del_domain(string $domain)","return":"","versions":"PHP 4 >= 4.0.7, PECL vpopmail >= 0.2"},"vpopmail_alias_del":{"id":"function.vpopmail-alias-del","purpose":"Deletes all virtual aliases of a user","prototype":"bool vpopmail_alias_del(string $user, string $domain)","return":"","versions":"PHP 4 >= 4.0.7, PECL vpopmail >= 0.2"},"vpopmail_alias_get_all":{"id":"function.vpopmail-alias-get-all","purpose":"Get all lines of an alias for a domain","prototype":"array vpopmail_alias_get_all(string $domain)","return":"","versions":"PHP 4 >= 4.0.7, PECL vpopmail >= 0.2"},"vpopmail_alias_get":{"id":"function.vpopmail-alias-get","purpose":"Get all lines of an alias for a domain","prototype":"array vpopmail_alias_get(string $alias, string $domain)","return":"","versions":"PHP 4 >= 4.0.7, PECL vpopmail >= 0.2"},"vpopmail_auth_user":{"id":"function.vpopmail-auth-user","purpose":"Attempt to validate a username\/domain\/password","prototype":"bool vpopmail_auth_user(string $user, string $domain, string $password [, string $apop = ''])","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_del_domain_ex":{"id":"function.vpopmail-del-domain-ex","purpose":"Delete a virtual domain","prototype":"bool vpopmail_del_domain_ex(string $domain)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_del_domain":{"id":"function.vpopmail-del-domain","purpose":"Delete a virtual domain","prototype":"bool vpopmail_del_domain(string $domain)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_del_user":{"id":"function.vpopmail-del-user","purpose":"Delete a user from a virtual domain","prototype":"bool vpopmail_del_user(string $user, string $domain)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_error":{"id":"function.vpopmail-error","purpose":"Get text message for last vpopmail error","prototype":"string vpopmail_error()","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_passwd":{"id":"function.vpopmail-passwd","purpose":"Change a virtual user's password","prototype":"bool vpopmail_passwd(string $user, string $domain, string $password [, bool $apop = ''])","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"vpopmail_set_user_quota":{"id":"function.vpopmail-set-user-quota","purpose":"Sets a virtual user's quota","prototype":"bool vpopmail_set_user_quota(string $user, string $domain, string $quota)","return":"","versions":"PHP 4 >= 4.0.5, PECL vpopmail >= 0.2"},"bcadd":{"id":"function.bcadd","purpose":"Add two arbitrary precision numbers","prototype":"string bcadd(string $left_operand, string $right_operand [, int $scale = ''])","return":"<p class=\"para\">   The sum of the two operands, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bccomp":{"id":"function.bccomp","purpose":"Compare two arbitrary precision numbers","prototype":"int bccomp(string $left_operand, string $right_operand [, int $scale = ''])","return":"<p class=\"para\">   Returns 0 if the two operands are equal, 1 if the   <code class=\"parameter\">left_operand<\/code> is larger than the    <code class=\"parameter\">right_operand<\/code>, -1 otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcdiv":{"id":"function.bcdiv","purpose":"Divide two arbitrary precision numbers","prototype":"string bcdiv(string $dividend, string $divisor [, int $scale = ''])","return":"<p class=\"para\">   Returns the result of the division as a string, or <strong><code>NULL<\/code><\/strong> if    <code class=\"parameter\">divisor<\/code> is <em>0<\/em>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcmod":{"id":"function.bcmod","purpose":"Get modulus of an arbitrary precision number","prototype":"string bcmod(string $dividend, string $divisor [, int $scale = ''])","return":"<p class=\"para\">   Returns the modulus as a string, or <strong><code>NULL<\/code><\/strong> if    <code class=\"parameter\">divisor<\/code> is <em>0<\/em>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcmul":{"id":"function.bcmul","purpose":"Multiply two arbitrary precision numbers","prototype":"string bcmul(string $left_operand, string $right_operand [, int $scale = ''])","return":"<p class=\"para\">   Returns the result as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcpow":{"id":"function.bcpow","purpose":"Raise an arbitrary precision number to another","prototype":"string bcpow(string $base, string $exponent [, int $scale = ''])","return":"<p class=\"para\">   Returns the result as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcpowmod":{"id":"function.bcpowmod","purpose":"Raise an arbitrary precision number to another, reduced by a specified modulus","prototype":"string bcpowmod(string $base, string $exponent, string $modulus [, int $scale = ''])","return":"<p class=\"para\">   Returns the result as a string, or <strong><code>NULL<\/code><\/strong> if <code class=\"parameter\">modulus<\/code>   is <em>0<\/em> or <code class=\"parameter\">exponent<\/code> is negative.  <\/p>","versions":"PHP 5, PHP 7"},"bcscale":{"id":"function.bcscale","purpose":"Set default scale parameter for all bc math functions","prototype":"int bcscale([int $scale = ''])","return":"<p class=\"para\">   Returns the old scale.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcsqrt":{"id":"function.bcsqrt","purpose":"Get the square root of an arbitrary precision number","prototype":"string bcsqrt(string $operand [, int $scale = ''])","return":"<p class=\"para\">   Returns the square root as a string, or <strong><code>NULL<\/code><\/strong> if    <code class=\"parameter\">operand<\/code> is negative.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bcsub":{"id":"function.bcsub","purpose":"Subtract one arbitrary precision number from another","prototype":"string bcsub(string $left_operand, string $right_operand [, int $scale = ''])","return":"<p class=\"para\">   The result of the subtraction, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gmp_abs":{"id":"function.gmp-abs","purpose":"Absolute value","prototype":"GMP gmp_abs(GMP $a)","return":"<p class=\"para\">   Returns the absolute value of <code class=\"parameter\">a<\/code>, as a GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_add":{"id":"function.gmp-add","purpose":"Add numbers","prototype":"GMP gmp_add(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number representing the sum of the arguments.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_and":{"id":"function.gmp-and","purpose":"Bitwise AND","prototype":"GMP gmp_and(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number representing the bitwise <em>AND<\/em> comparison.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_clrbit":{"id":"function.gmp-clrbit","purpose":"Clear bit","prototype":"void gmp_clrbit(GMP $a, int $index)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_cmp":{"id":"function.gmp-cmp","purpose":"Compare numbers","prototype":"int gmp_cmp(GMP $a, GMP $b)","return":"<p class=\"para\">   Returns a positive value if <em>a &gt; b<\/em>, zero if   <em>a = b<\/em> and a negative value if <em>a &lt;   b<\/em>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_com":{"id":"function.gmp-com","purpose":"Calculates one's complement","prototype":"GMP gmp_com(GMP $a)","return":"<p class=\"para\">   Returns the one&#039;s complement of <code class=\"parameter\">a<\/code>, as a GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_div_q":{"id":"function.gmp-div-q","purpose":"Divide numbers","prototype":"GMP gmp_div_q(GMP $a, GMP $b [, int $round = GMP_ROUND_ZERO])","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_div_qr":{"id":"function.gmp-div-qr","purpose":"Divide numbers and get quotient and remainder","prototype":"array gmp_div_qr(GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span>, with the first   element being <em>[n\/d]<\/em> (the integer result of the   division) and the second being <em>(n - [n\/d] * d)<\/em>   (the remainder of the division).  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_div_r":{"id":"function.gmp-div-r","purpose":"Remainder of the division of numbers","prototype":"GMP gmp_div_r(GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO])","return":"<p class=\"para\">   The remainder, as a GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_div":{"id":"function.gmp-div","purpose":"Alias of gmp_div_q","prototype":" gmp_div()","return":"","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_divexact":{"id":"function.gmp-divexact","purpose":"Exact division of numbers","prototype":"GMP gmp_divexact(GMP $n, GMP $d)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_export":{"id":"function.gmp-export","purpose":"Export to a binary string","prototype":"string gmp_export(GMP $gmpnumber [, int $word_size = 1 [, int $options =  | ]])","return":"<p class=\"para\">   Returns a string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.1, PHP 7"},"gmp_fact":{"id":"function.gmp-fact","purpose":"Factorial","prototype":"GMP gmp_fact(mixed $a)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_gcd":{"id":"function.gmp-gcd","purpose":"Calculate GCD","prototype":"GMP gmp_gcd(GMP $a, GMP $b)","return":"<p class=\"para\">   A positive GMP number that divides into both   <code class=\"parameter\">a<\/code> and <code class=\"parameter\">b<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_gcdext":{"id":"function.gmp-gcdext","purpose":"Calculate GCD and multipliers","prototype":"array gmp_gcdext(GMP $a, GMP $b)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of GMP numbers.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_hamdist":{"id":"function.gmp-hamdist","purpose":"Hamming distance","prototype":"int gmp_hamdist(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_import":{"id":"function.gmp-import","purpose":"Import from a binary string","prototype":"GMP gmp_import(string $data [, int $word_size = 1 [, int $options =  | ]])","return":"<p class=\"para\">   Returns a GMP number or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.1, PHP 7"},"gmp_init":{"id":"function.gmp-init","purpose":"Create GMP number","prototype":"GMP gmp_init(mixed $number [, int $base = ''])","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_intval":{"id":"function.gmp-intval","purpose":"Convert GMP number to integer","prototype":"integer gmp_intval(GMP $gmpnumber)","return":"<p class=\"para\">   The <span class=\"type\">integer<\/span> value of <code class=\"parameter\">gmpnumber<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_invert":{"id":"function.gmp-invert","purpose":"Inverse by modulo","prototype":"GMP gmp_invert(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number on success or <strong><code>FALSE<\/code><\/strong> if an inverse does not exist.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_jacobi":{"id":"function.gmp-jacobi","purpose":"Jacobi symbol","prototype":"int gmp_jacobi(GMP $a, GMP $p)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_legendre":{"id":"function.gmp-legendre","purpose":"Legendre symbol","prototype":"int gmp_legendre(GMP $a, GMP $p)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_mod":{"id":"function.gmp-mod","purpose":"Modulo operation","prototype":"GMP gmp_mod(GMP $n, GMP $d)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_mul":{"id":"function.gmp-mul","purpose":"Multiply numbers","prototype":"GMP gmp_mul(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_neg":{"id":"function.gmp-neg","purpose":"Negate number","prototype":"GMP gmp_neg(GMP $a)","return":"<p class=\"para\">   Returns -<code class=\"parameter\">a<\/code>, as a GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_nextprime":{"id":"function.gmp-nextprime","purpose":"Find next prime number","prototype":"GMP gmp_nextprime(int $a)","return":"<p class=\"para\">   Return the next prime number greater than <code class=\"parameter\">a<\/code>,   as a GMP number.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"gmp_or":{"id":"function.gmp-or","purpose":"Bitwise OR","prototype":"GMP gmp_or(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_perfect_square":{"id":"function.gmp-perfect-square","purpose":"Perfect square check","prototype":"bool gmp_perfect_square(GMP $a)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">a<\/code> is a perfect square,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_popcount":{"id":"function.gmp-popcount","purpose":"Population count","prototype":"int gmp_popcount(GMP $a)","return":"<p class=\"para\">   The population count of <code class=\"parameter\">a<\/code>, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_pow":{"id":"function.gmp-pow","purpose":"Raise number into power","prototype":"GMP gmp_pow(GMP $base, int $exp)","return":"<p class=\"para\">   The new (raised) number, as a GMP number. The case of    <em>0^0<\/em> yields 1.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_powm":{"id":"function.gmp-powm","purpose":"Raise number into power with modulo","prototype":"GMP gmp_powm(GMP $base, GMP $exp, GMP $mod)","return":"<p class=\"para\">   The new (raised) number, as a GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_prob_prime":{"id":"function.gmp-prob-prime","purpose":"Check if number is \"probably prime\"","prototype":"int gmp_prob_prime(GMP $a [, int $reps = 10])","return":"<p class=\"para\">   If this function returns 0, <code class=\"parameter\">a<\/code> is   definitely not prime. If it returns 1, then   <code class=\"parameter\">a<\/code> is &quot;probably&quot; prime.  If it returns 2,   then <code class=\"parameter\">a<\/code> is surely prime.   <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_random_bits":{"id":"function.gmp-random-bits","purpose":"Random number","prototype":"GMP gmp_random_bits(int $bits)","return":"<p class=\"para\">   A random GMP number.  <\/p>","versions":"PHP 5 >= 5.6.3, PHP 7"},"gmp_random_range":{"id":"function.gmp-random-range","purpose":"Random number","prototype":"GMP gmp_random_range(GMP $min, GMP $max)","return":"<p class=\"para\">   A random GMP number.  <\/p>","versions":"PHP 5 >= 5.6.3, PHP 7"},"gmp_random_seed":{"id":"function.gmp-random-seed","purpose":"Sets the RNG seed","prototype":"void gmp_random_seed(mixed $seed)","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"gmp_random":{"id":"function.gmp-random","purpose":"Random number","prototype":"GMP gmp_random([int $limiter = 20])","return":"<p class=\"para\">   A random GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_root":{"id":"function.gmp-root","purpose":"Take the integer part of nth root","prototype":"GMP gmp_root(GMP $a, int $nth)","return":"<p class=\"para\">   The integer component of the resultant root, as a GMP number.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"gmp_rootrem":{"id":"function.gmp-rootrem","purpose":"Take the integer part and remainder of nth root","prototype":"array gmp_rootrem(GMP $a, int $nth)","return":"<p class=\"para\">   A two element array, where the first element is the integer component of   the root, and the second element is the remainder, both represented as GMP   numbers.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"gmp_scan0":{"id":"function.gmp-scan0","purpose":"Scan for 0","prototype":"int gmp_scan0(GMP $a, int $start)","return":"<p class=\"para\">   Returns the index of the found bit, as an <span class=\"type\">integer<\/span>. The   index starts from 0.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_scan1":{"id":"function.gmp-scan1","purpose":"Scan for 1","prototype":"int gmp_scan1(GMP $a, int $start)","return":"<p class=\"para\">   Returns the index of the found bit, as an <span class=\"type\">integer<\/span>.   If no set bit is found, -1 is returned.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_setbit":{"id":"function.gmp-setbit","purpose":"Set bit","prototype":"void gmp_setbit(GMP $a, int $index [, bool $bit_on = ''])","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_sign":{"id":"function.gmp-sign","purpose":"Sign of number","prototype":"int gmp_sign(GMP $a)","return":"<p class=\"para\">   Returns 1 if <code class=\"parameter\">a<\/code> is positive,   -1 if <code class=\"parameter\">a<\/code> is negative,   and 0 if <code class=\"parameter\">a<\/code> is zero.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_sqrt":{"id":"function.gmp-sqrt","purpose":"Calculate square root","prototype":"GMP gmp_sqrt(GMP $a)","return":"<p class=\"para\">   The integer portion of the square root, as a GMP number.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_sqrtrem":{"id":"function.gmp-sqrtrem","purpose":"Square root with remainder","prototype":"array gmp_sqrtrem(GMP $a)","return":"<p class=\"para\">   Returns array where first element is the integer square root of   <code class=\"parameter\">a<\/code> and the second is the remainder   (i.e., the difference between <code class=\"parameter\">a<\/code> and the   first element squared).  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_strval":{"id":"function.gmp-strval","purpose":"Convert GMP number to string","prototype":"string gmp_strval(GMP $gmpnumber [, int $base = 10])","return":"<p class=\"para\">   The number, as a <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_sub":{"id":"function.gmp-sub","purpose":"Subtract numbers","prototype":"GMP gmp_sub(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"gmp_testbit":{"id":"function.gmp-testbit","purpose":"Tests if a bit is set","prototype":"bool gmp_testbit(GMP $a, int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the bit is set in resource <code class=\"parameter\">$a<\/code>,    otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"gmp_xor":{"id":"function.gmp-xor","purpose":"Bitwise XOR","prototype":"GMP gmp_xor(GMP $a, GMP $b)","return":"<p class=\"para\">   A GMP number <span class=\"type\">resource<\/span> in PHP 5.5 and earlier, or a <span class=\"classname\">GMP<\/span> object in PHP 5.6 and later.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"Lapack::eigenValues":{"id":"lapack.eigenvalues","purpose":"This function returns the eigenvalues for a given square matrix","prototype":"array Lapack::eigenValues(array $a [, array $left = '' [, array $right = '']])","return":"<p class=\"para\">    Returns an array of arrays representing the eigenvalues for the array.   <\/p>","versions":"PECL lapack >= 0.1.0"},"Lapack::identity":{"id":"lapack.identity","purpose":"Return an identity matrix","prototype":"array Lapack::identity(int $n)","return":"<p class=\"para\">    Will return a an array of n arrays, each containing n entries. The diagonals of the matrix will be 1s, the other positions 0.   <\/p>","versions":"PECL lapack >= 0.1.0"},"Lapack::leastSquaresByFactorisation":{"id":"lapack.leastsquaresbyfactorisation","purpose":"Calculate the linear least squares solution of a matrix using QR factorisation","prototype":"array Lapack::leastSquaresByFactorisation(array $a, array $b)","return":"<p class=\"para\">    Array of the solution matrix  <\/p>","versions":"PECL lapack >= 0.1.0"},"Lapack::leastSquaresBySVD":{"id":"lapack.leastsquaresbysvd","purpose":"Solve the linear least squares problem, using SVD","prototype":"array Lapack::leastSquaresBySVD(array $a, array $b)","return":"<p class=\"para\">    Returns the solution as an array of arrays.  <\/p>","versions":"PECL lapack >= 0.1.0"},"Lapack::pseudoInverse":{"id":"lapack.pseudoinverse","purpose":"Calculate the inverse of a matrix","prototype":"array Lapack::pseudoInverse(array $a)","return":"<p class=\"para\">    Inverted matrix (array of arrays).  <\/p>","versions":"PECL lapack >= 0.1.0"},"Lapack::singularValues":{"id":"lapack.singularvalues","purpose":"Calculated the singular values of a matrix","prototype":"array Lapack::singularValues(array $a)","return":"<p class=\"para\">    The singular values  <\/p>","versions":"PECL lapack >= 0.1.0"},"Lapack::solveLinearEquation":{"id":"lapack.solvelinearequation","purpose":"Solve a system of linear equations","prototype":"array Lapack::solveLinearEquation(array $a, array $b)","return":"<p class=\"para\">    Matrix X  <\/p>","versions":"PECL lapack >= 0.1.0"},"abs":{"id":"function.abs","purpose":"Absolute value","prototype":"number abs(mixed $number)","return":"<p class=\"para\">   The absolute value of <code class=\"parameter\">number<\/code>. If the   argument <code class=\"parameter\">number<\/code> is   of type <span class=\"type\">float<\/span>, the return type is also <span class=\"type\">float<\/span>,   otherwise it is <span class=\"type\">integer<\/span> (as <span class=\"type\">float<\/span> usually has a   bigger value range than <span class=\"type\">integer<\/span>).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"acos":{"id":"function.acos","purpose":"Arc cosine","prototype":"float acos(float $arg)","return":"<p class=\"para\">   The arc cosine of <code class=\"parameter\">arg<\/code> in radians.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"acosh":{"id":"function.acosh","purpose":"Inverse hyperbolic cosine","prototype":"float acosh(float $arg)","return":"<p class=\"para\">   The inverse hyperbolic cosine of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"asin":{"id":"function.asin","purpose":"Arc sine","prototype":"float asin(float $arg)","return":"<p class=\"para\">   The arc sine of <code class=\"parameter\">arg<\/code> in radians  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"asinh":{"id":"function.asinh","purpose":"Inverse hyperbolic sine","prototype":"float asinh(float $arg)","return":"<p class=\"para\">   The inverse hyperbolic sine of <code class=\"parameter\">arg<\/code>   <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"atan2":{"id":"function.atan2","purpose":"Arc tangent of two variables","prototype":"float atan2(float $y, float $x)","return":"<p class=\"para\">   The arc tangent of <code class=\"parameter\">y<\/code>\/<code class=\"parameter\">x<\/code>    in radians.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"atan":{"id":"function.atan","purpose":"Arc tangent","prototype":"float atan(float $arg)","return":"<p class=\"para\">   The arc tangent of <code class=\"parameter\">arg<\/code> in radians.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"atanh":{"id":"function.atanh","purpose":"Inverse hyperbolic tangent","prototype":"float atanh(float $arg)","return":"<p class=\"para\">   Inverse hyperbolic tangent of <code class=\"parameter\">arg<\/code>   <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"base_convert":{"id":"function.base-convert","purpose":"Convert a number between arbitrary bases","prototype":"string base_convert(string $number, int $frombase, int $tobase)","return":"<p class=\"para\">   <code class=\"parameter\">number<\/code> converted to base <code class=\"parameter\">tobase<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bindec":{"id":"function.bindec","purpose":"Binary to decimal","prototype":"float bindec(string $binary_string)","return":"<p class=\"para\">   The decimal value of <code class=\"parameter\">binary_string<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ceil":{"id":"function.ceil","purpose":"Round fractions up","prototype":"float ceil(float $value)","return":"<p class=\"para\">   <code class=\"parameter\">value<\/code> rounded up to the next highest   integer.   The return value of <span class=\"function\">ceil<\/span> is still of type   <span class=\"type\">float<\/span> as the value range of <span class=\"type\">float<\/span> is    usually bigger than that of <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"cos":{"id":"function.cos","purpose":"Cosine","prototype":"float cos(float $arg)","return":"<p class=\"para\">   The cosine of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"cosh":{"id":"function.cosh","purpose":"Hyperbolic cosine","prototype":"float cosh(float $arg)","return":"<p class=\"para\">   The hyperbolic cosine of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"decbin":{"id":"function.decbin","purpose":"Decimal to binary","prototype":"string decbin(int $number)","return":"<p class=\"para\">   Binary string representation of <code class=\"parameter\">number<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"dechex":{"id":"function.dechex","purpose":"Decimal to hexadecimal","prototype":"string dechex(int $number)","return":"<p class=\"para\">   Hexadecimal string representation of <code class=\"parameter\">number<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"decoct":{"id":"function.decoct","purpose":"Decimal to octal","prototype":"string decoct(int $number)","return":"<p class=\"para\">   Octal string representation of <code class=\"parameter\">number<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"deg2rad":{"id":"function.deg2rad","purpose":"Converts the number in degrees to the radian equivalent","prototype":"float deg2rad(float $number)","return":"<p class=\"para\">   The radian equivalent of <code class=\"parameter\">number<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"exp":{"id":"function.exp","purpose":"Calculates the exponent of e","prototype":"float exp(float $arg)","return":"<p class=\"para\">   &#039;e&#039; raised to the power of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"expm1":{"id":"function.expm1","purpose":"Returns exp(number) - 1, computed in a way that is accurate even   when the value of number is close to zero","prototype":"float expm1(float $arg)","return":"<p class=\"para\">   &#039;e&#039; to the power of <code class=\"parameter\">arg<\/code> minus one  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"floor":{"id":"function.floor","purpose":"Round fractions down","prototype":"float floor(float $value)","return":"<p class=\"para\">   <code class=\"parameter\">value<\/code> rounded to the next lowest integer.   The return value of <span class=\"function\">floor<\/span> is still of type   <span class=\"type\">float<\/span> because the value range of <span class=\"type\">float<\/span> is    usually bigger than that of <span class=\"type\">integer<\/span>.   This function returns <strong><code>FALSE<\/code><\/strong> in case of an error (e.g. passing an array).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fmod":{"id":"function.fmod","purpose":"Returns the floating point remainder (modulo) of the division  of the arguments","prototype":"float fmod(float $x, float $y)","return":"<p class=\"para\">   The floating point remainder of    <code class=\"parameter\">x<\/code>\/<code class=\"parameter\">y<\/code>  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"getrandmax":{"id":"function.getrandmax","purpose":"Show largest possible random value","prototype":"int getrandmax()","return":"<p class=\"para\">   The largest possible random value returned by <span class=\"function\">rand<\/span>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"hexdec":{"id":"function.hexdec","purpose":"Hexadecimal to decimal","prototype":"number hexdec(string $hex_string)","return":"<p class=\"para\">   The decimal representation of <code class=\"parameter\">hex_string<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"hypot":{"id":"function.hypot","purpose":"Calculate the length of the hypotenuse of a right-angle triangle","prototype":"float hypot(float $x, float $y)","return":"<p class=\"para\">   Calculated length of the hypotenuse  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"intdiv":{"id":"function.intdiv","purpose":"Integer division","prototype":"int intdiv(int $dividend, int $divisor)","return":"<p class=\"para\">   The integer quotient of the division of <code class=\"parameter\">dividend<\/code> by <code class=\"parameter\">divisor<\/code>.  <\/p>","versions":"PHP 7"},"is_finite":{"id":"function.is-finite","purpose":"Finds whether a value is a legal finite number","prototype":"bool is_finite(float $val)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">val<\/code> is a legal finite   number within the allowed range for a PHP float on this platform,   else <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"is_infinite":{"id":"function.is-infinite","purpose":"Finds whether a value is infinite","prototype":"bool is_infinite(float $val)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">val<\/code> is infinite, else <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"is_nan":{"id":"function.is-nan","purpose":"Finds whether a value is not a number","prototype":"bool is_nan(float $val)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">val<\/code> is &#039;not a number&#039;,   else <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"lcg_value":{"id":"function.lcg-value","purpose":"Combined linear congruential generator","prototype":"float lcg_value()","return":"<p class=\"para\">   A pseudo random float value between 0.0 and 1.0, inclusive.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"log10":{"id":"function.log10","purpose":"Base-10 logarithm","prototype":"float log10(float $arg)","return":"<p class=\"para\">   The base-10 logarithm of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"log1p":{"id":"function.log1p","purpose":"Returns log(1 + number), computed in a way that is accurate even when   the value of number is close to zero","prototype":"float log1p(float $number)","return":"<p class=\"para\">   log(1 + <code class=\"parameter\">number<\/code>)  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"log":{"id":"function.log","purpose":"Natural logarithm","prototype":"float log(float $arg [, float $base = M_E])","return":"<p class=\"para\">   The logarithm of <code class=\"parameter\">arg<\/code> to    <code class=\"parameter\">base<\/code>, if given, or the   natural logarithm.    <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"max":{"id":"function.max","purpose":"Find highest value","prototype":"string max(array $values, mixed $value1, mixed $value2 [, mixed $... = ''])","return":"<p class=\"para\">   <span class=\"function\">max<\/span> returns the parameter value considered &quot;highest&quot; according to standard   comparisons. If multiple values of different types evaluate as equal (e.g. <em>0<\/em>   and <em>&#039;abc&#039;<\/em>) the first provided to the function will be returned.  <\/p>  <p class=\"para\">   If an empty array is passed, then <strong><code>FALSE<\/code><\/strong> will be returned and an   <strong><code>E_WARNING<\/code><\/strong> error will be emitted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"min":{"id":"function.min","purpose":"Find lowest value","prototype":"string min(array $values, mixed $value1, mixed $value2 [, mixed $... = ''])","return":"<p class=\"para\">   <span class=\"function\">min<\/span> returns the parameter value considered &quot;lowest&quot; according to standard   comparisons. If multiple values of different types evaluate as equal (e.g. <em>0<\/em>   and <em>&#039;abc&#039;<\/em>) the first provided to the function will be returned.  <\/p>  <p class=\"para\">   If an empty array is passed, then <strong><code>FALSE<\/code><\/strong> will be returned and an   <strong><code>E_WARNING<\/code><\/strong> error will be emitted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mt_getrandmax":{"id":"function.mt-getrandmax","purpose":"Show largest possible random value","prototype":"int mt_getrandmax()","return":"<p class=\"para\">   Returns the maximum random value returned by a call to   <span class=\"function\">mt_rand<\/span> without arguments, which is the maximum value    that can be used for its <code class=\"parameter\">max<\/code> parameter without the   result being scaled up (and therefore less random).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mt_rand":{"id":"function.mt-rand","purpose":"Generate a random value via the Mersenne Twister Random Number Generator","prototype":"int mt_rand(int $min, int $max)","return":"<p class=\"para\">   A random integer value between <code class=\"parameter\">min<\/code> (or 0)   and <code class=\"parameter\">max<\/code> (or <span class=\"function\">mt_getrandmax<\/span>, inclusive),   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">max<\/code> is less than <code class=\"parameter\">min<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"mt_srand":{"id":"function.mt-srand","purpose":"Seeds the Mersenne Twister Random Number Generator","prototype":"void mt_srand([int $seed = '' [, int $mode = MT_RAND_MT19937]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"octdec":{"id":"function.octdec","purpose":"Octal to decimal","prototype":"number octdec(string $octal_string)","return":"<p class=\"para\">   The decimal representation of <code class=\"parameter\">octal_string<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pi":{"id":"function.pi","purpose":"Get value of pi","prototype":"float pi()","return":"<p class=\"para\">   The value of pi as float.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pow":{"id":"function.pow","purpose":"Exponential expression","prototype":"number pow(number $base, number $exp)","return":"<p class=\"para\">   <code class=\"parameter\">base<\/code> raised to the power of <code class=\"parameter\">exp<\/code>.   If both arguments are non-negative integers and the result can be represented   as an integer, the result will be returned with <span class=\"type\">integer<\/span> type,   otherwise it will be returned as a <span class=\"type\">float<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rad2deg":{"id":"function.rad2deg","purpose":"Converts the radian number to the equivalent number in degrees","prototype":"float rad2deg(float $number)","return":"<p class=\"para\">   The equivalent of <code class=\"parameter\">number<\/code> in degrees  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rand":{"id":"function.rand","purpose":"Generate a random integer","prototype":"int rand(int $min, int $max)","return":"<p class=\"para\">   A pseudo random value between <code class=\"parameter\">min<\/code>   (or 0) and <code class=\"parameter\">max<\/code> (or <span class=\"function\">getrandmax<\/span>, inclusive).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"round":{"id":"function.round","purpose":"Rounds a float","prototype":"float round(float $val [, int $precision = '' [, int $mode = PHP_ROUND_HALF_UP]])","return":"<p class=\"para\">   The rounded value  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sin":{"id":"function.sin","purpose":"Sine","prototype":"float sin(float $arg)","return":"<p class=\"para\">   The sine of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sinh":{"id":"function.sinh","purpose":"Hyperbolic sine","prototype":"float sinh(float $arg)","return":"<p class=\"para\">   The hyperbolic sine of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"sqrt":{"id":"function.sqrt","purpose":"Square root","prototype":"float sqrt(float $arg)","return":"<p class=\"para\">   The square root of <code class=\"parameter\">arg<\/code>   or the special value <em>NAN<\/em> for negative numbers.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"srand":{"id":"function.srand","purpose":"Seed the random number generator","prototype":"void srand([int $seed = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"tan":{"id":"function.tan","purpose":"Tangent","prototype":"float tan(float $arg)","return":"<p class=\"para\">   The tangent of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"tanh":{"id":"function.tanh","purpose":"Hyperbolic tangent","prototype":"float tanh(float $arg)","return":"<p class=\"para\">   The hyperbolic tangent of <code class=\"parameter\">arg<\/code>  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"stats_absolute_deviation":{"id":"function.stats-absolute-deviation","purpose":"Returns the absolute deviation of an array of values","prototype":"float stats_absolute_deviation(array $a)","return":"<p class=\"para\">   Returns the absolute deviation of the values in <code class=\"parameter\">a<\/code>,   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">a<\/code> is empty or is not an array.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_beta":{"id":"function.stats-cdf-beta","purpose":"Calculates any one parameter of the beta distribution given values for the others","prototype":"float stats_cdf_beta(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, alpha, or beta, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_binomial":{"id":"function.stats-cdf-binomial","purpose":"Calculates any one parameter of the binomial distribution given values for the others","prototype":"float stats_cdf_binomial(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, n, or p, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_cauchy":{"id":"function.stats-cdf-cauchy","purpose":"Calculates any one parameter of the Cauchy distribution given values for the others","prototype":"float stats_cdf_cauchy(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, x0, or gamma, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_chisquare":{"id":"function.stats-cdf-chisquare","purpose":"Calculates any one parameter of the chi-square distribution given values for the others","prototype":"float stats_cdf_chisquare(float $par1, float $par2, int $which)","return":"<p class=\"para\">   Returns CDF, x, or k, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_exponential":{"id":"function.stats-cdf-exponential","purpose":"Calculates any one parameter of the exponential distribution given values for the others","prototype":"float stats_cdf_exponential(float $par1, float $par2, int $which)","return":"<p class=\"para\">   Returns CDF, x, or lambda, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_f":{"id":"function.stats-cdf-f","purpose":"Calculates any one parameter of the F distribution given values for the others","prototype":"float stats_cdf_f(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, d1, or d2, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_gamma":{"id":"function.stats-cdf-gamma","purpose":"Calculates any one parameter of the gamma distribution given values for the others","prototype":"float stats_cdf_gamma(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, k, or theta, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_laplace":{"id":"function.stats-cdf-laplace","purpose":"Calculates any one parameter of the Laplace distribution given values for the others","prototype":"float stats_cdf_laplace(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, mu, or b, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_logistic":{"id":"function.stats-cdf-logistic","purpose":"Calculates any one parameter of the logistic distribution given values for the others","prototype":"float stats_cdf_logistic(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, mu, or s, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_negative_binomial":{"id":"function.stats-cdf-negative-binomial","purpose":"Calculates any one parameter of the negative binomial distribution given values for the others","prototype":"float stats_cdf_negative_binomial(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, r, or p, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_noncentral_chisquare":{"id":"function.stats-cdf-noncentral-chisquare","purpose":"Calculates any one parameter of the non-central chi-square distribution given values for the others","prototype":"float stats_cdf_noncentral_chisquare(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, k, or lambda, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_noncentral_f":{"id":"function.stats-cdf-noncentral-f","purpose":"Calculates any one parameter of the non-central F distribution given values for the others","prototype":"float stats_cdf_noncentral_f(float $par1, float $par2, float $par3, float $par4, int $which)","return":"<p class=\"para\">   Returns CDF, x, nu1, nu2, or lambda, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_noncentral_t":{"id":"function.stats-cdf-noncentral-t","purpose":"Calculates any one parameter of the non-central t-distribution give values for the others","prototype":"float stats_cdf_noncentral_t(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, nu, or mu, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_normal":{"id":"function.stats-cdf-normal","purpose":"Calculates any one parameter of the normal distribution given values for the others","prototype":"float stats_cdf_normal(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, mu, or sigma, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_poisson":{"id":"function.stats-cdf-poisson","purpose":"Calculates any one parameter of the Poisson distribution given values for the others","prototype":"float stats_cdf_poisson(float $par1, float $par2, int $which)","return":"<p class=\"para\">   Returns CDF, x, or lambda, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_t":{"id":"function.stats-cdf-t","purpose":"Calculates any one parameter of the t-distribution given values for the others","prototype":"float stats_cdf_t(float $par1, float $par2, int $which)","return":"<p class=\"para\">   Returns CDF, x, or nu, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_uniform":{"id":"function.stats-cdf-uniform","purpose":"Calculates any one parameter of the uniform distribution given values for the others","prototype":"float stats_cdf_uniform(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, a, or b, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_cdf_weibull":{"id":"function.stats-cdf-weibull","purpose":"Calculates any one parameter of the Weibull distribution given values for the others","prototype":"float stats_cdf_weibull(float $par1, float $par2, float $par3, int $which)","return":"<p class=\"para\">   Returns CDF, x, k, or lambda, determined by <code class=\"parameter\">which<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_covariance":{"id":"function.stats-covariance","purpose":"Computes the covariance of two data sets","prototype":"float stats_covariance(array $a, array $b)","return":"<p class=\"para\">   Returns the covariance of <code class=\"parameter\">a<\/code> and <code class=\"parameter\">b<\/code>,   or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_beta":{"id":"function.stats-dens-beta","purpose":"Probability density function of the beta distribution","prototype":"float stats_dens_beta(float $x, float $a, float $b)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_cauchy":{"id":"function.stats-dens-cauchy","purpose":"Probability density function of the Cauchy distribution","prototype":"float stats_dens_cauchy(float $x, float $ave, float $stdev)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_chisquare":{"id":"function.stats-dens-chisquare","purpose":"Probability density function of the chi-square distribution","prototype":"float stats_dens_chisquare(float $x, float $dfr)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_exponential":{"id":"function.stats-dens-exponential","purpose":"Probability density function of the exponential distribution","prototype":"float stats_dens_exponential(float $x, float $scale)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_f":{"id":"function.stats-dens-f","purpose":"Probability density function of the F distribution","prototype":"float stats_dens_f(float $x, float $dfr1, float $dfr2)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_gamma":{"id":"function.stats-dens-gamma","purpose":"Probability density function of the gamma distribution","prototype":"float stats_dens_gamma(float $x, float $shape, float $scale)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_laplace":{"id":"function.stats-dens-laplace","purpose":"Probability density function of the Laplace distribution","prototype":"float stats_dens_laplace(float $x, float $ave, float $stdev)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_logistic":{"id":"function.stats-dens-logistic","purpose":"Probability density function of the logistic distribution","prototype":"float stats_dens_logistic(float $x, float $ave, float $stdev)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_normal":{"id":"function.stats-dens-normal","purpose":"Probability density function of the normal distribution","prototype":"float stats_dens_normal(float $x, float $ave, float $stdev)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_pmf_binomial":{"id":"function.stats-dens-pmf-binomial","purpose":"Probability mass function of the binomial distribution","prototype":"float stats_dens_pmf_binomial(float $x, float $n, float $pi)","return":"<p class=\"para\">   The probability mass at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_pmf_hypergeometric":{"id":"function.stats-dens-pmf-hypergeometric","purpose":"Probability mass function of the hypergeometric distribution","prototype":"float stats_dens_pmf_hypergeometric(float $n1, float $n2, float $N1, float $N2)","return":"<p class=\"para\">   The probability mass at <code class=\"parameter\">n1<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_pmf_negative_binomial":{"id":"function.stats-dens-pmf-negative-binomial","purpose":"Probability density function of the negative binomial distribution","prototype":"float stats_dens_pmf_negative_binomial(float $x, float $n, float $pi)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_pmf_poisson":{"id":"function.stats-dens-pmf-poisson","purpose":"Probability mass function of the Poisson distribution","prototype":"float stats_dens_pmf_poisson(float $x, float $lb)","return":"<p class=\"para\">   The probability mass at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_t":{"id":"function.stats-dens-t","purpose":"Probability density function of the t-distribution","prototype":"float stats_dens_t(float $x, float $dfr)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_uniform":{"id":"function.stats-dens-uniform","purpose":"Probability density function of the uniform distribution","prototype":"float stats_dens_uniform(float $x, float $a, float $b)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_dens_weibull":{"id":"function.stats-dens-weibull","purpose":"Probability density function of the Weibull distribution","prototype":"float stats_dens_weibull(float $x, float $a, float $b)","return":"<p class=\"para\">   The probability density at <code class=\"parameter\">x<\/code> or <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_harmonic_mean":{"id":"function.stats-harmonic-mean","purpose":"Returns the harmonic mean of an array of values","prototype":"number stats_harmonic_mean(array $a)","return":"<p class=\"para\">   Returns the harmonic mean of the values in <code class=\"parameter\">a<\/code>,   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">a<\/code> is empty or is not an array.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_kurtosis":{"id":"function.stats-kurtosis","purpose":"Computes the kurtosis of the data in the array","prototype":"float stats_kurtosis(array $a)","return":"<p class=\"para\">   Returns the kurtosis of the values in <code class=\"parameter\">a<\/code>,   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">a<\/code> is empty or is not an array.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_beta":{"id":"function.stats-rand-gen-beta","purpose":"Generates a random deviate from the beta distribution","prototype":"float stats_rand_gen_beta(float $a, float $b)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_chisquare":{"id":"function.stats-rand-gen-chisquare","purpose":"Generates a random deviate from the chi-square distribution","prototype":"float stats_rand_gen_chisquare(float $df)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_exponential":{"id":"function.stats-rand-gen-exponential","purpose":"Generates a random deviate from the exponential distribution","prototype":"float stats_rand_gen_exponential(float $av)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_f":{"id":"function.stats-rand-gen-f","purpose":"Generates a random deviate from the F distribution","prototype":"float stats_rand_gen_f(float $dfn, float $dfd)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_funiform":{"id":"function.stats-rand-gen-funiform","purpose":"Generates uniform float between low (exclusive) and high (exclusive)","prototype":"float stats_rand_gen_funiform(float $low, float $high)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_gamma":{"id":"function.stats-rand-gen-gamma","purpose":"Generates a random deviate from the gamma distribution","prototype":"float stats_rand_gen_gamma(float $a, float $r)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_ibinomial_negative":{"id":"function.stats-rand-gen-ibinomial-negative","purpose":"Generates a random deviate from the negative binomial distribution","prototype":"int stats_rand_gen_ibinomial_negative(int $n, float $p)","return":"<p class=\"para\">   A random deviate, which is the number of failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_ibinomial":{"id":"function.stats-rand-gen-ibinomial","purpose":"Generates a random deviate from the binomial distribution","prototype":"int stats_rand_gen_ibinomial(int $n, float $pp)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_int":{"id":"function.stats-rand-gen-int","purpose":"Generates random integer between 1 and 2147483562","prototype":"int stats_rand_gen_int()","return":"<p class=\"para\">   A random integer  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_ipoisson":{"id":"function.stats-rand-gen-ipoisson","purpose":"Generates a single random deviate from a Poisson distribution","prototype":"int stats_rand_gen_ipoisson(float $mu)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_iuniform":{"id":"function.stats-rand-gen-iuniform","purpose":"Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)","prototype":"int stats_rand_gen_iuniform(int $low, int $high)","return":"<p class=\"para\">   A random integer  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_noncenral_chisquare":{"id":"function.stats-rand-gen-noncenral-chisquare","purpose":"Generates a random deviate from the non-central chi-square distribution","prototype":"float stats_rand_gen_noncenral_chisquare(float $df, float $xnonc)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_noncentral_chisquare":{"id":"function.stats-rand-gen-noncentral-chisquare","purpose":"Generates a random deviate from the non-central chi-square distribution","prototype":"float stats_rand_gen_noncentral_chisquare(float $df, float $xnonc)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_noncentral_f":{"id":"function.stats-rand-gen-noncentral-f","purpose":"Generates a random deviate from the noncentral F distribution","prototype":"float stats_rand_gen_noncentral_f(float $dfn, float $dfd, float $xnonc)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_noncentral_t":{"id":"function.stats-rand-gen-noncentral-t","purpose":"Generates a single random deviate from a non-central t-distribution","prototype":"float stats_rand_gen_noncentral_t(float $df, float $xnonc)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_normal":{"id":"function.stats-rand-gen-normal","purpose":"Generates a single random deviate from a normal distribution","prototype":"float stats_rand_gen_normal(float $av, float $sd)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_gen_t":{"id":"function.stats-rand-gen-t","purpose":"Generates a single random deviate from a t-distribution","prototype":"float stats_rand_gen_t(float $df)","return":"<p class=\"para\">   A random deviate  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_get_seeds":{"id":"function.stats-rand-get-seeds","purpose":"Get the seed values of the random number generator","prototype":"array stats_rand_get_seeds()","return":"<p class=\"para\">   Returns an array of two integers.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_phrase_to_seeds":{"id":"function.stats-rand-phrase-to-seeds","purpose":"Generate two seeds for the RGN random number generator","prototype":"array stats_rand_phrase_to_seeds(string $phrase)","return":"<p class=\"para\">   Returns an array of two integers.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_ranf":{"id":"function.stats-rand-ranf","purpose":"Generates a random floating point number between 0 and 1","prototype":"float stats_rand_ranf()","return":"<p class=\"para\">   A random floating point number  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_rand_setall":{"id":"function.stats-rand-setall","purpose":"Set seed values to the random generator","prototype":"void stats_rand_setall(int $iseed1, int $iseed2)","return":"<p class=\"para\">   No values are returned.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_skew":{"id":"function.stats-skew","purpose":"Computes the skewness of the data in the array","prototype":"float stats_skew(array $a)","return":"<p class=\"para\">   Returns the skewness of the values in <code class=\"parameter\">a<\/code>,   or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">a<\/code> is empty or is not an array.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_standard_deviation":{"id":"function.stats-standard-deviation","purpose":"Returns the standard deviation","prototype":"float stats_standard_deviation(array $a [, bool $sample = ''])","return":"<p class=\"para\">   Returns the standard deviation on success; <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_binomial_coef":{"id":"function.stats-stat-binomial-coef","purpose":"Returns a binomial coefficient","prototype":"float stats_stat_binomial_coef(int $x, int $n)","return":"<p class=\"para\">   Returns the binomial coefficient  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_correlation":{"id":"function.stats-stat-correlation","purpose":"Returns the Pearson correlation coefficient of two data sets","prototype":"float stats_stat_correlation(array $arr1, array $arr2)","return":"<p class=\"para\">   Returns the Pearson correlation coefficient between <code class=\"parameter\">arr1<\/code> and <code class=\"parameter\">arr2<\/code>,   or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_factorial":{"id":"function.stats-stat-factorial","purpose":"Returns the factorial of an integer","prototype":"float stats_stat_factorial(int $n)","return":"<p class=\"para\">   The factorial of <code class=\"parameter\">n<\/code>.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_independent_t":{"id":"function.stats-stat-independent-t","purpose":"Returns the t-value from the independent two-sample t-test","prototype":"float stats_stat_independent_t(array $arr1, array $arr2)","return":"<p class=\"para\">   Returns the t-value, or <strong><code>FALSE<\/code><\/strong> if failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_innerproduct":{"id":"function.stats-stat-innerproduct","purpose":"Returns the inner product of two vectors","prototype":"float stats_stat_innerproduct(array $arr1, array $arr2)","return":"<p class=\"para\">   Returns the inner product of <code class=\"parameter\">arr1<\/code> and <code class=\"parameter\">arr2<\/code>,   or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_paired_t":{"id":"function.stats-stat-paired-t","purpose":"Returns the t-value of the dependent t-test for paired samples","prototype":"float stats_stat_paired_t(array $arr1, array $arr2)","return":"<p class=\"para\">   Returns the t-value, or <strong><code>FALSE<\/code><\/strong> if failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_percentile":{"id":"function.stats-stat-percentile","purpose":"Returns the percentile value","prototype":"float stats_stat_percentile(array $arr, float $perc)","return":"<p class=\"para\">   Returns the percentile values of the input array.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_stat_powersum":{"id":"function.stats-stat-powersum","purpose":"Returns the power sum of a vector","prototype":"float stats_stat_powersum(array $arr, float $power)","return":"<p class=\"para\">   Returns the power sum of the input array.  <\/p>","versions":"PECL stats >= 1.0.0"},"stats_variance":{"id":"function.stats-variance","purpose":"Returns the variance","prototype":"float stats_variance(array $a [, bool $sample = ''])","return":"<p class=\"para\">   Returns the variance on success; <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stats >= 1.0.0"},"trader_acos":{"id":"function.trader-acos","purpose":"Vector Trigonometric ACos","prototype":"array trader_acos(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ad":{"id":"function.trader-ad","purpose":"Chaikin A\/D Line","prototype":"array trader_ad(array $high, array $low, array $close, array $volume)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_add":{"id":"function.trader-add","purpose":"Vector Arithmetic Add","prototype":"array trader_add(array $real0, array $real1)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_adosc":{"id":"function.trader-adosc","purpose":"Chaikin A\/D Oscillator","prototype":"array trader_adosc(array $high, array $low, array $close, array $volume [, int $fastPeriod = '' [, int $slowPeriod = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_adx":{"id":"function.trader-adx","purpose":"Average Directional Movement Index","prototype":"array trader_adx(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_adxr":{"id":"function.trader-adxr","purpose":"Average Directional Movement Index Rating","prototype":"array trader_adxr(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_apo":{"id":"function.trader-apo","purpose":"Absolute Price Oscillator","prototype":"array trader_apo(array $real [, int $fastPeriod = '' [, int $slowPeriod = '' [, int $mAType = '']]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_aroon":{"id":"function.trader-aroon","purpose":"Aroon","prototype":"array trader_aroon(array $high, array $low [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_aroonosc":{"id":"function.trader-aroonosc","purpose":"Aroon Oscillator","prototype":"array trader_aroonosc(array $high, array $low [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_asin":{"id":"function.trader-asin","purpose":"Vector Trigonometric ASin","prototype":"array trader_asin(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_atan":{"id":"function.trader-atan","purpose":"Vector Trigonometric ATan","prototype":"array trader_atan(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_atr":{"id":"function.trader-atr","purpose":"Average True Range","prototype":"array trader_atr(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_avgprice":{"id":"function.trader-avgprice","purpose":"Average Price","prototype":"array trader_avgprice(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_bbands":{"id":"function.trader-bbands","purpose":"Bollinger Bands","prototype":"array trader_bbands(array $real [, int $timePeriod = '' [, float $nbDevUp = '' [, float $nbDevDn = '' [, int $mAType = '']]]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_beta":{"id":"function.trader-beta","purpose":"Beta","prototype":"array trader_beta(array $real0, array $real1 [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_bop":{"id":"function.trader-bop","purpose":"Balance Of Power","prototype":"array trader_bop(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cci":{"id":"function.trader-cci","purpose":"Commodity Channel Index","prototype":"array trader_cci(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl2crows":{"id":"function.trader-cdl2crows","purpose":"Two Crows","prototype":"array trader_cdl2crows(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl3blackcrows":{"id":"function.trader-cdl3blackcrows","purpose":"Three Black Crows","prototype":"array trader_cdl3blackcrows(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl3inside":{"id":"function.trader-cdl3inside","purpose":"Three Inside Up\/Down","prototype":"array trader_cdl3inside(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl3linestrike":{"id":"function.trader-cdl3linestrike","purpose":"Three-Line Strike","prototype":"array trader_cdl3linestrike(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl3outside":{"id":"function.trader-cdl3outside","purpose":"Three Outside Up\/Down","prototype":"array trader_cdl3outside(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl3starsinsouth":{"id":"function.trader-cdl3starsinsouth","purpose":"Three Stars In The South","prototype":"array trader_cdl3starsinsouth(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdl3whitesoldiers":{"id":"function.trader-cdl3whitesoldiers","purpose":"Three Advancing White Soldiers","prototype":"array trader_cdl3whitesoldiers(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlabandonedbaby":{"id":"function.trader-cdlabandonedbaby","purpose":"Abandoned Baby","prototype":"array trader_cdlabandonedbaby(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdladvanceblock":{"id":"function.trader-cdladvanceblock","purpose":"Advance Block","prototype":"array trader_cdladvanceblock(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlbelthold":{"id":"function.trader-cdlbelthold","purpose":"Belt-hold","prototype":"array trader_cdlbelthold(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlbreakaway":{"id":"function.trader-cdlbreakaway","purpose":"Breakaway","prototype":"array trader_cdlbreakaway(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlclosingmarubozu":{"id":"function.trader-cdlclosingmarubozu","purpose":"Closing Marubozu","prototype":"array trader_cdlclosingmarubozu(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlconcealbabyswall":{"id":"function.trader-cdlconcealbabyswall","purpose":"Concealing Baby Swallow","prototype":"array trader_cdlconcealbabyswall(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlcounterattack":{"id":"function.trader-cdlcounterattack","purpose":"Counterattack","prototype":"array trader_cdlcounterattack(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdldarkcloudcover":{"id":"function.trader-cdldarkcloudcover","purpose":"Dark Cloud Cover","prototype":"array trader_cdldarkcloudcover(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdldoji":{"id":"function.trader-cdldoji","purpose":"Doji","prototype":"array trader_cdldoji(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdldojistar":{"id":"function.trader-cdldojistar","purpose":"Doji Star","prototype":"array trader_cdldojistar(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdldragonflydoji":{"id":"function.trader-cdldragonflydoji","purpose":"Dragonfly Doji","prototype":"array trader_cdldragonflydoji(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlengulfing":{"id":"function.trader-cdlengulfing","purpose":"Engulfing Pattern","prototype":"array trader_cdlengulfing(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdleveningdojistar":{"id":"function.trader-cdleveningdojistar","purpose":"Evening Doji Star","prototype":"array trader_cdleveningdojistar(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdleveningstar":{"id":"function.trader-cdleveningstar","purpose":"Evening Star","prototype":"array trader_cdleveningstar(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlgapsidesidewhite":{"id":"function.trader-cdlgapsidesidewhite","purpose":"Up\/Down-gap side-by-side white lines","prototype":"array trader_cdlgapsidesidewhite(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlgravestonedoji":{"id":"function.trader-cdlgravestonedoji","purpose":"Gravestone Doji","prototype":"array trader_cdlgravestonedoji(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlhammer":{"id":"function.trader-cdlhammer","purpose":"Hammer","prototype":"array trader_cdlhammer(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlhangingman":{"id":"function.trader-cdlhangingman","purpose":"Hanging Man","prototype":"array trader_cdlhangingman(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlharami":{"id":"function.trader-cdlharami","purpose":"Harami Pattern","prototype":"array trader_cdlharami(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlharamicross":{"id":"function.trader-cdlharamicross","purpose":"Harami Cross Pattern","prototype":"array trader_cdlharamicross(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlhighwave":{"id":"function.trader-cdlhighwave","purpose":"High-Wave Candle","prototype":"array trader_cdlhighwave(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlhikkake":{"id":"function.trader-cdlhikkake","purpose":"Hikkake Pattern","prototype":"array trader_cdlhikkake(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlhikkakemod":{"id":"function.trader-cdlhikkakemod","purpose":"Modified Hikkake Pattern","prototype":"array trader_cdlhikkakemod(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlhomingpigeon":{"id":"function.trader-cdlhomingpigeon","purpose":"Homing Pigeon","prototype":"array trader_cdlhomingpigeon(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlidentical3crows":{"id":"function.trader-cdlidentical3crows","purpose":"Identical Three Crows","prototype":"array trader_cdlidentical3crows(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlinneck":{"id":"function.trader-cdlinneck","purpose":"In-Neck Pattern","prototype":"array trader_cdlinneck(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlinvertedhammer":{"id":"function.trader-cdlinvertedhammer","purpose":"Inverted Hammer","prototype":"array trader_cdlinvertedhammer(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlkicking":{"id":"function.trader-cdlkicking","purpose":"Kicking","prototype":"array trader_cdlkicking(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlkickingbylength":{"id":"function.trader-cdlkickingbylength","purpose":"Kicking - bull\/bear determined by the longer marubozu","prototype":"array trader_cdlkickingbylength(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlladderbottom":{"id":"function.trader-cdlladderbottom","purpose":"Ladder Bottom","prototype":"array trader_cdlladderbottom(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdllongleggeddoji":{"id":"function.trader-cdllongleggeddoji","purpose":"Long Legged Doji","prototype":"array trader_cdllongleggeddoji(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdllongline":{"id":"function.trader-cdllongline","purpose":"Long Line Candle","prototype":"array trader_cdllongline(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlmarubozu":{"id":"function.trader-cdlmarubozu","purpose":"Marubozu","prototype":"array trader_cdlmarubozu(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlmatchinglow":{"id":"function.trader-cdlmatchinglow","purpose":"Matching Low","prototype":"array trader_cdlmatchinglow(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlmathold":{"id":"function.trader-cdlmathold","purpose":"Mat Hold","prototype":"array trader_cdlmathold(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlmorningdojistar":{"id":"function.trader-cdlmorningdojistar","purpose":"Morning Doji Star","prototype":"array trader_cdlmorningdojistar(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlmorningstar":{"id":"function.trader-cdlmorningstar","purpose":"Morning Star","prototype":"array trader_cdlmorningstar(array $open, array $high, array $low, array $close [, float $penetration = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlonneck":{"id":"function.trader-cdlonneck","purpose":"On-Neck Pattern","prototype":"array trader_cdlonneck(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlpiercing":{"id":"function.trader-cdlpiercing","purpose":"Piercing Pattern","prototype":"array trader_cdlpiercing(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlrickshawman":{"id":"function.trader-cdlrickshawman","purpose":"Rickshaw Man","prototype":"array trader_cdlrickshawman(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlrisefall3methods":{"id":"function.trader-cdlrisefall3methods","purpose":"Rising\/Falling Three Methods","prototype":"array trader_cdlrisefall3methods(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlseparatinglines":{"id":"function.trader-cdlseparatinglines","purpose":"Separating Lines","prototype":"array trader_cdlseparatinglines(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlshootingstar":{"id":"function.trader-cdlshootingstar","purpose":"Shooting Star","prototype":"array trader_cdlshootingstar(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlshortline":{"id":"function.trader-cdlshortline","purpose":"Short Line Candle","prototype":"array trader_cdlshortline(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlspinningtop":{"id":"function.trader-cdlspinningtop","purpose":"Spinning Top","prototype":"array trader_cdlspinningtop(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlstalledpattern":{"id":"function.trader-cdlstalledpattern","purpose":"Stalled Pattern","prototype":"array trader_cdlstalledpattern(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlsticksandwich":{"id":"function.trader-cdlsticksandwich","purpose":"Stick Sandwich","prototype":"array trader_cdlsticksandwich(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdltakuri":{"id":"function.trader-cdltakuri","purpose":"Takuri (Dragonfly Doji with very long lower shadow)","prototype":"array trader_cdltakuri(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdltasukigap":{"id":"function.trader-cdltasukigap","purpose":"Tasuki Gap","prototype":"array trader_cdltasukigap(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlthrusting":{"id":"function.trader-cdlthrusting","purpose":"Thrusting Pattern","prototype":"array trader_cdlthrusting(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdltristar":{"id":"function.trader-cdltristar","purpose":"Tristar Pattern","prototype":"array trader_cdltristar(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlunique3river":{"id":"function.trader-cdlunique3river","purpose":"Unique 3 River","prototype":"array trader_cdlunique3river(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlupsidegap2crows":{"id":"function.trader-cdlupsidegap2crows","purpose":"Upside Gap Two Crows","prototype":"array trader_cdlupsidegap2crows(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cdlxsidegap3methods":{"id":"function.trader-cdlxsidegap3methods","purpose":"Upside\/Downside Gap Three Methods","prototype":"array trader_cdlxsidegap3methods(array $open, array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ceil":{"id":"function.trader-ceil","purpose":"Vector Ceil","prototype":"array trader_ceil(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cmo":{"id":"function.trader-cmo","purpose":"Chande Momentum Oscillator","prototype":"array trader_cmo(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_correl":{"id":"function.trader-correl","purpose":"Pearson's Correlation Coefficient (r)","prototype":"array trader_correl(array $real0, array $real1 [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cos":{"id":"function.trader-cos","purpose":"Vector Trigonometric Cos","prototype":"array trader_cos(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_cosh":{"id":"function.trader-cosh","purpose":"Vector Trigonometric Cosh","prototype":"array trader_cosh(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_dema":{"id":"function.trader-dema","purpose":"Double Exponential Moving Average","prototype":"array trader_dema(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_div":{"id":"function.trader-div","purpose":"Vector Arithmetic Div","prototype":"array trader_div(array $real0, array $real1)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_dx":{"id":"function.trader-dx","purpose":"Directional Movement Index","prototype":"array trader_dx(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ema":{"id":"function.trader-ema","purpose":"Exponential Moving Average","prototype":"array trader_ema(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_errno":{"id":"function.trader-errno","purpose":"Get error code","prototype":"int trader_errno()","return":"<p class=\"para\">Returns the error code identified by one of the <a href=\"trader.constants.html\" class=\"link\">TRADER_ERR_*<\/a> constants.<\/p>","versions":"PECL trader >= 0.3.0"},"trader_exp":{"id":"function.trader-exp","purpose":"Vector Arithmetic Exp","prototype":"array trader_exp(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_floor":{"id":"function.trader-floor","purpose":"Vector Floor","prototype":"array trader_floor(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_get_compat":{"id":"function.trader-get-compat","purpose":"Get compatibility mode","prototype":"int trader_get_compat()","return":"<p class=\"para\">Returns the compatibility mode id which can be identified by <a href=\"trader.constants.html\" class=\"link\">TRADER_COMPATIBILITY_*<\/a> series of constants.  <\/p>","versions":"PECL trader >= 0.2.2"},"trader_get_unstable_period":{"id":"function.trader-get-unstable-period","purpose":"Get unstable period","prototype":"int trader_get_unstable_period(int $functionId)","return":"<p class=\"para\">Returns the unstable period factor for the corresponding function.<\/p>","versions":"PECL trader >= 0.2.2"},"trader_ht_dcperiod":{"id":"function.trader-ht-dcperiod","purpose":"Hilbert Transform - Dominant Cycle Period","prototype":"array trader_ht_dcperiod(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ht_dcphase":{"id":"function.trader-ht-dcphase","purpose":"Hilbert Transform - Dominant Cycle Phase","prototype":"array trader_ht_dcphase(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ht_phasor":{"id":"function.trader-ht-phasor","purpose":"Hilbert Transform - Phasor Components","prototype":"array trader_ht_phasor(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ht_sine":{"id":"function.trader-ht-sine","purpose":"Hilbert Transform - SineWave","prototype":"array trader_ht_sine(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ht_trendline":{"id":"function.trader-ht-trendline","purpose":"Hilbert Transform - Instantaneous Trendline","prototype":"array trader_ht_trendline(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ht_trendmode":{"id":"function.trader-ht-trendmode","purpose":"Hilbert Transform - Trend vs Cycle Mode","prototype":"array trader_ht_trendmode(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_kama":{"id":"function.trader-kama","purpose":"Kaufman Adaptive Moving Average","prototype":"array trader_kama(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_linearreg_angle":{"id":"function.trader-linearreg-angle","purpose":"Linear Regression Angle","prototype":"array trader_linearreg_angle(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_linearreg_intercept":{"id":"function.trader-linearreg-intercept","purpose":"Linear Regression Intercept","prototype":"array trader_linearreg_intercept(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_linearreg_slope":{"id":"function.trader-linearreg-slope","purpose":"Linear Regression Slope","prototype":"array trader_linearreg_slope(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_linearreg":{"id":"function.trader-linearreg","purpose":"Linear Regression","prototype":"array trader_linearreg(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ln":{"id":"function.trader-ln","purpose":"Vector Log Natural","prototype":"array trader_ln(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_log10":{"id":"function.trader-log10","purpose":"Vector Log10","prototype":"array trader_log10(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ma":{"id":"function.trader-ma","purpose":"Moving average","prototype":"array trader_ma(array $real [, int $timePeriod = '' [, int $mAType = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_macd":{"id":"function.trader-macd","purpose":"Moving Average Convergence\/Divergence","prototype":"array trader_macd(array $real [, int $fastPeriod = '' [, int $slowPeriod = '' [, int $signalPeriod = '']]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_macdext":{"id":"function.trader-macdext","purpose":"MACD with controllable MA type","prototype":"array trader_macdext(array $real [, int $fastPeriod = '' [, int $fastMAType = '' [, int $slowPeriod = '' [, int $slowMAType = '' [, int $signalPeriod = '' [, int $signalMAType = '']]]]]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_macdfix":{"id":"function.trader-macdfix","purpose":"Moving Average Convergence\/Divergence Fix 12\/26","prototype":"array trader_macdfix(array $real [, int $signalPeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_mama":{"id":"function.trader-mama","purpose":"MESA Adaptive Moving Average","prototype":"array trader_mama(array $real [, float $fastLimit = '' [, float $slowLimit = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_mavp":{"id":"function.trader-mavp","purpose":"Moving average with variable period","prototype":"array trader_mavp(array $real, array $periods [, int $minPeriod = '' [, int $maxPeriod = '' [, int $mAType = '']]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_max":{"id":"function.trader-max","purpose":"Highest value over a specified period","prototype":"array trader_max(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_maxindex":{"id":"function.trader-maxindex","purpose":"Index of highest value over a specified period","prototype":"array trader_maxindex(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_medprice":{"id":"function.trader-medprice","purpose":"Median Price","prototype":"array trader_medprice(array $high, array $low)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_mfi":{"id":"function.trader-mfi","purpose":"Money Flow Index","prototype":"array trader_mfi(array $high, array $low, array $close, array $volume [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_midpoint":{"id":"function.trader-midpoint","purpose":"MidPoint over period","prototype":"array trader_midpoint(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_midprice":{"id":"function.trader-midprice","purpose":"Midpoint Price over period","prototype":"array trader_midprice(array $high, array $low [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_min":{"id":"function.trader-min","purpose":"Lowest value over a specified period","prototype":"array trader_min(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_minindex":{"id":"function.trader-minindex","purpose":"Index of lowest value over a specified period","prototype":"array trader_minindex(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_minmax":{"id":"function.trader-minmax","purpose":"Lowest and highest values over a specified period","prototype":"array trader_minmax(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_minmaxindex":{"id":"function.trader-minmaxindex","purpose":"Indexes of lowest and highest values over a specified period","prototype":"array trader_minmaxindex(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_minus_di":{"id":"function.trader-minus-di","purpose":"Minus Directional Indicator","prototype":"array trader_minus_di(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_minus_dm":{"id":"function.trader-minus-dm","purpose":"Minus Directional Movement","prototype":"array trader_minus_dm(array $high, array $low [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_mom":{"id":"function.trader-mom","purpose":"Momentum","prototype":"array trader_mom(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_mult":{"id":"function.trader-mult","purpose":"Vector Arithmetic Mult","prototype":"array trader_mult(array $real0, array $real1)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_natr":{"id":"function.trader-natr","purpose":"Normalized Average True Range","prototype":"array trader_natr(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_obv":{"id":"function.trader-obv","purpose":"On Balance Volume","prototype":"array trader_obv(array $real, array $volume)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_plus_di":{"id":"function.trader-plus-di","purpose":"Plus Directional Indicator","prototype":"array trader_plus_di(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_plus_dm":{"id":"function.trader-plus-dm","purpose":"Plus Directional Movement","prototype":"array trader_plus_dm(array $high, array $low [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ppo":{"id":"function.trader-ppo","purpose":"Percentage Price Oscillator","prototype":"array trader_ppo(array $real [, int $fastPeriod = '' [, int $slowPeriod = '' [, int $mAType = '']]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_roc":{"id":"function.trader-roc","purpose":"Rate of change : ((price\/prevPrice)-1)*100","prototype":"array trader_roc(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_rocp":{"id":"function.trader-rocp","purpose":"Rate of change Percentage: (price-prevPrice)\/prevPrice","prototype":"array trader_rocp(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_rocr100":{"id":"function.trader-rocr100","purpose":"Rate of change ratio 100 scale: (price\/prevPrice)*100","prototype":"array trader_rocr100(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_rocr":{"id":"function.trader-rocr","purpose":"Rate of change ratio: (price\/prevPrice)","prototype":"array trader_rocr(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_rsi":{"id":"function.trader-rsi","purpose":"Relative Strength Index","prototype":"array trader_rsi(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sar":{"id":"function.trader-sar","purpose":"Parabolic SAR","prototype":"array trader_sar(array $high, array $low [, float $acceleration = '' [, float $maximum = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sarext":{"id":"function.trader-sarext","purpose":"Parabolic SAR - Extended","prototype":"array trader_sarext(array $high, array $low [, float $startValue = '' [, float $offsetOnReverse = '' [, float $accelerationInitLong = '' [, float $accelerationLong = '' [, float $accelerationMaxLong = '' [, float $accelerationInitShort = '' [, float $accelerationShort = '' [, float $accelerationMaxShort = '']]]]]]]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_set_compat":{"id":"function.trader-set-compat","purpose":"Set compatibility mode","prototype":"void trader_set_compat(int $compatId)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL trader >= 0.2.2"},"trader_set_unstable_period":{"id":"function.trader-set-unstable-period","purpose":"Set unstable period","prototype":"void trader_set_unstable_period(int $functionId, int $timePeriod)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL trader >= 0.2.2"},"trader_sin":{"id":"function.trader-sin","purpose":"Vector Trigonometric Sin","prototype":"array trader_sin(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sinh":{"id":"function.trader-sinh","purpose":"Vector Trigonometric Sinh","prototype":"array trader_sinh(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sma":{"id":"function.trader-sma","purpose":"Simple Moving Average","prototype":"array trader_sma(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sqrt":{"id":"function.trader-sqrt","purpose":"Vector Square Root","prototype":"array trader_sqrt(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_stddev":{"id":"function.trader-stddev","purpose":"Standard Deviation","prototype":"array trader_stddev(array $real [, int $timePeriod = '' [, float $nbDev = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_stoch":{"id":"function.trader-stoch","purpose":"Stochastic","prototype":"array trader_stoch(array $high, array $low, array $close [, int $fastK_Period = '' [, int $slowK_Period = '' [, int $slowK_MAType = '' [, int $slowD_Period = '' [, int $slowD_MAType = '']]]]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_stochf":{"id":"function.trader-stochf","purpose":"Stochastic Fast","prototype":"array trader_stochf(array $high, array $low, array $close [, int $fastK_Period = '' [, int $fastD_Period = '' [, int $fastD_MAType = '']]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_stochrsi":{"id":"function.trader-stochrsi","purpose":"Stochastic Relative Strength Index","prototype":"array trader_stochrsi(array $real [, int $timePeriod = '' [, int $fastK_Period = '' [, int $fastD_Period = '' [, int $fastD_MAType = '']]]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sub":{"id":"function.trader-sub","purpose":"Vector Arithmetic Subtraction","prototype":"array trader_sub(array $real0, array $real1)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_sum":{"id":"function.trader-sum","purpose":"Summation","prototype":"array trader_sum(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_t3":{"id":"function.trader-t3","purpose":"Triple Exponential Moving Average (T3)","prototype":"array trader_t3(array $real [, int $timePeriod = '' [, float $vFactor = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_tan":{"id":"function.trader-tan","purpose":"Vector Trigonometric Tan","prototype":"array trader_tan(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_tanh":{"id":"function.trader-tanh","purpose":"Vector Trigonometric Tanh","prototype":"array trader_tanh(array $real)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_tema":{"id":"function.trader-tema","purpose":"Triple Exponential Moving Average","prototype":"array trader_tema(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_trange":{"id":"function.trader-trange","purpose":"True Range","prototype":"array trader_trange(array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_trima":{"id":"function.trader-trima","purpose":"Triangular Moving Average","prototype":"array trader_trima(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_trix":{"id":"function.trader-trix","purpose":"1-day Rate-Of-Change (ROC) of a Triple Smooth EMA","prototype":"array trader_trix(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_tsf":{"id":"function.trader-tsf","purpose":"Time Series Forecast","prototype":"array trader_tsf(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_typprice":{"id":"function.trader-typprice","purpose":"Typical Price","prototype":"array trader_typprice(array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_ultosc":{"id":"function.trader-ultosc","purpose":"Ultimate Oscillator","prototype":"array trader_ultosc(array $high, array $low, array $close [, int $timePeriod1 = '' [, int $timePeriod2 = '' [, int $timePeriod3 = '']]])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_var":{"id":"function.trader-var","purpose":"Variance","prototype":"array trader_var(array $real [, int $timePeriod = '' [, float $nbDev = '']])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_wclprice":{"id":"function.trader-wclprice","purpose":"Weighted Close Price","prototype":"array trader_wclprice(array $high, array $low, array $close)","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_willr":{"id":"function.trader-willr","purpose":"Williams' %R","prototype":"array trader_willr(array $high, array $low, array $close [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"trader_wma":{"id":"function.trader-wma","purpose":"Weighted Moving Average","prototype":"array trader_wma(array $real [, int $timePeriod = ''])","return":"<p class=\"para\">Returns an array with calculated data or false on failure.<\/p>","versions":"PECL trader >= 0.2.0"},"fdf_add_doc_javascript":{"id":"function.fdf-add-doc-javascript","purpose":"Adds javascript code to the FDF document","prototype":"bool fdf_add_doc_javascript(resource $fdf_document, string $script_name, string $script_code)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_add_template":{"id":"function.fdf-add-template","purpose":"Adds a template into the FDF document","prototype":"bool fdf_add_template(resource $fdf_document, int $newpage, string $filename, string $template, int $rename)","return":"","versions":"PHP 4, PHP 5, PHP 7"},"fdf_close":{"id":"function.fdf-close","purpose":"Close an FDF document","prototype":"void fdf_close(resource $fdf_document)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_create":{"id":"function.fdf-create","purpose":"Create a new FDF document","prototype":"resource fdf_create()","return":"<p class=\"para\">   Returns a FDF document handle, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_enum_values":{"id":"function.fdf-enum-values","purpose":"Call a user defined function for each document value","prototype":"bool fdf_enum_values(resource $fdf_document, callable $function [, mixed $userdata = ''])","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_errno":{"id":"function.fdf-errno","purpose":"Return error code for last fdf operation","prototype":"int fdf_errno()","return":"<p class=\"para\">   Returns the error code as an integer, or zero if there was no errors.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_error":{"id":"function.fdf-error","purpose":"Return error description for FDF error code","prototype":"string fdf_error([int $error_code = -1])","return":"<p class=\"para\">   Returns the error message as a string, or the string    <em>no error<\/em> if nothing went wrong.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_get_ap":{"id":"function.fdf-get-ap","purpose":"Get the appearance of a field","prototype":"bool fdf_get_ap(resource $fdf_document, string $field, int $face, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_get_attachment":{"id":"function.fdf-get-attachment","purpose":"Extracts uploaded file embedded in the FDF","prototype":"array fdf_get_attachment(resource $fdf_document, string $fieldname, string $savepath)","return":"<p class=\"para\">   The returned array contains the following fields:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\"><code class=\"parameter\">path<\/code> - path were the file got stored<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\"><code class=\"parameter\">size<\/code> - size of the stored file in bytes<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\"><code class=\"parameter\">type<\/code> - mimetype if given in the FDF<\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_get_encoding":{"id":"function.fdf-get-encoding","purpose":"Get the value of the \/Encoding key","prototype":"string fdf_get_encoding(resource $fdf_document)","return":"<p class=\"para\">   Returns the encoding as a string. An empty string is returned if the   default <em>PDFDocEncoding\/Unicode<\/em> scheme is used.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_get_file":{"id":"function.fdf-get-file","purpose":"Get the value of the \/F key","prototype":"string fdf_get_file(resource $fdf_document)","return":"<p class=\"para\">   Returns the key value, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_get_flags":{"id":"function.fdf-get-flags","purpose":"Gets the flags of a field","prototype":"int fdf_get_flags(resource $fdf_document, string $fieldname, int $whichflags)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_get_opt":{"id":"function.fdf-get-opt","purpose":"Gets a value from the opt array of a field","prototype":"mixed fdf_get_opt(resource $fdf_document, string $fieldname [, int $element = -1])","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_get_status":{"id":"function.fdf-get-status","purpose":"Get the value of the \/STATUS key","prototype":"string fdf_get_status(resource $fdf_document)","return":"<p class=\"para\">   Returns the key value, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_get_value":{"id":"function.fdf-get-value","purpose":"Get the value of a field","prototype":"mixed fdf_get_value(resource $fdf_document, string $fieldname [, int $which = -1])","return":"<p class=\"para\">   Returns the field value.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_get_version":{"id":"function.fdf-get-version","purpose":"Gets version number for FDF API or file","prototype":"string fdf_get_version([resource $fdf_document = ''])","return":"<p class=\"para\">   Returns the version as a string. For the current FDF toolkit 5.0 the API   version number is <em>5.0<\/em> and the document version number   is either <em>1.2<\/em>, <em>1.3<\/em> or    <em>1.4<\/em>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_header":{"id":"function.fdf-header","purpose":"Sets FDF-specific output headers","prototype":"void fdf_header()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_next_field_name":{"id":"function.fdf-next-field-name","purpose":"Get the next field name","prototype":"string fdf_next_field_name(resource $fdf_document [, string $fieldname = ''])","return":"<p class=\"para\">   Returns the field name as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_open_string":{"id":"function.fdf-open-string","purpose":"Read a FDF document from a string","prototype":"resource fdf_open_string(string $fdf_data)","return":"<p class=\"para\">   Returns a FDF document handle, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_open":{"id":"function.fdf-open","purpose":"Open a FDF document","prototype":"resource fdf_open(string $filename)","return":"<p class=\"para\">   Returns a FDF document handle, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_remove_item":{"id":"function.fdf-remove-item","purpose":"Sets target frame for form","prototype":"bool fdf_remove_item(resource $fdf_document, string $fieldname, int $item)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_save_string":{"id":"function.fdf-save-string","purpose":"Returns the FDF document as a string","prototype":"string fdf_save_string(resource $fdf_document)","return":"<p class=\"para\">   Returns the document as a string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_save":{"id":"function.fdf-save","purpose":"Save a FDF document","prototype":"bool fdf_save(resource $fdf_document [, string $filename = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_set_ap":{"id":"function.fdf-set-ap","purpose":"Set the appearance of a field","prototype":"bool fdf_set_ap(resource $fdf_document, string $field_name, int $face, string $filename, int $page_number)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_set_encoding":{"id":"function.fdf-set-encoding","purpose":"Sets FDF character encoding","prototype":"bool fdf_set_encoding(resource $fdf_document, string $encoding)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"fdf_set_file":{"id":"function.fdf-set-file","purpose":"Set PDF document to display FDF data in","prototype":"bool fdf_set_file(resource $fdf_document, string $url [, string $target_frame = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_set_flags":{"id":"function.fdf-set-flags","purpose":"Sets a flag of a field","prototype":"bool fdf_set_flags(resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"fdf_set_javascript_action":{"id":"function.fdf-set-javascript-action","purpose":"Sets an javascript action of a field","prototype":"bool fdf_set_javascript_action(resource $fdf_document, string $fieldname, int $trigger, string $script)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"fdf_set_on_import_javascript":{"id":"function.fdf-set-on-import-javascript","purpose":"Adds javascript code to be executed when Acrobat opens the FDF","prototype":"bool fdf_set_on_import_javascript(resource $fdf_document, string $script, bool $before_data_import)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_set_opt":{"id":"function.fdf-set-opt","purpose":"Sets an option of a field","prototype":"bool fdf_set_opt(resource $fdf_document, string $fieldname, int $element, string $str1, string $str2)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"fdf_set_status":{"id":"function.fdf-set-status","purpose":"Set the value of the \/STATUS key","prototype":"bool fdf_set_status(resource $fdf_document, string $status)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_set_submit_form_action":{"id":"function.fdf-set-submit-form-action","purpose":"Sets a submit form action of a field","prototype":"bool fdf_set_submit_form_action(resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"fdf_set_target_frame":{"id":"function.fdf-set-target-frame","purpose":"Set target frame for form display","prototype":"bool fdf_set_target_frame(resource $fdf_document, string $frame_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"fdf_set_value":{"id":"function.fdf-set-value","purpose":"Set the value of a field","prototype":"bool fdf_set_value(resource $fdf_document, string $fieldname, mixed $value [, int $isName = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fdf_set_version":{"id":"function.fdf-set-version","purpose":"Sets version number for a FDF file","prototype":"bool fdf_set_version(resource $fdf_document, string $version)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"gnupg_adddecryptkey":{"id":"function.gnupg-adddecryptkey","purpose":"Add a key for decryption","prototype":"bool gnupg_adddecryptkey(resource $identifier, string $fingerprint, string $passphrase)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.5"},"gnupg_addencryptkey":{"id":"function.gnupg-addencryptkey","purpose":"Add a key for encryption","prototype":"bool gnupg_addencryptkey(resource $identifier, string $fingerprint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.5"},"gnupg_addsignkey":{"id":"function.gnupg-addsignkey","purpose":"Add a key for signing","prototype":"bool gnupg_addsignkey(resource $identifier, string $fingerprint [, string $passphrase = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.5"},"gnupg_cleardecryptkeys":{"id":"function.gnupg-cleardecryptkeys","purpose":"Removes all keys which were set for decryption before","prototype":"bool gnupg_cleardecryptkeys(resource $identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.5"},"gnupg_clearencryptkeys":{"id":"function.gnupg-clearencryptkeys","purpose":"Removes all keys which were set for encryption before","prototype":"bool gnupg_clearencryptkeys(resource $identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.5"},"gnupg_clearsignkeys":{"id":"function.gnupg-clearsignkeys","purpose":"Removes all keys which were set for signing before","prototype":"bool gnupg_clearsignkeys(resource $identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.5"},"gnupg_decrypt":{"id":"function.gnupg-decrypt","purpose":"Decrypts a given text","prototype":"string gnupg_decrypt(resource $identifier, string $text)","return":"<p class=\"para\">   On success, this function returns the decrypted text.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_decryptverify":{"id":"function.gnupg-decryptverify","purpose":"Decrypts and verifies a given text","prototype":"array gnupg_decryptverify(resource $identifier, string $text, string $plaintext)","return":"<p class=\"para\">   On success, this function returns information about the signature and   fills the <code class=\"parameter\">plaintext<\/code> parameter with the decrypted text.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.2"},"gnupg_encrypt":{"id":"function.gnupg-encrypt","purpose":"Encrypts a given text","prototype":"string gnupg_encrypt(resource $identifier, string $plaintext)","return":"<p class=\"para\">    On success, this function returns the encrypted text.    On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_encryptsign":{"id":"function.gnupg-encryptsign","purpose":"Encrypts and signs a given text","prototype":"string gnupg_encryptsign(resource $identifier, string $plaintext)","return":"<p class=\"para\">   On success, this function returns the encrypted and signed text.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.2"},"gnupg_export":{"id":"function.gnupg-export","purpose":"Exports a key","prototype":"string gnupg_export(resource $identifier, string $fingerprint)","return":"<p class=\"para\">   On success, this function returns the keydata.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_geterror":{"id":"function.gnupg-geterror","purpose":"Returns the errortext, if a function fails","prototype":"string gnupg_geterror(resource $identifier)","return":"<p class=\"para\">   Returns an errortext, if an error has occurred, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_getprotocol":{"id":"function.gnupg-getprotocol","purpose":"Returns the currently active protocol for all operations","prototype":"int gnupg_getprotocol(resource $identifier)","return":"<p class=\"para\">   Returns the currently active protocol, which can be one of   <strong><code>GNUPG_PROTOCOL_OpenPGP<\/code><\/strong> or   <strong><code>GNUPG_PROTOCOL_CMS<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_import":{"id":"function.gnupg-import","purpose":"Imports a key","prototype":"array gnupg_import(resource $identifier, string $keydata)","return":"<p class=\"para\">   On success, this function returns and info-array about the importprocess.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.3"},"gnupg_init":{"id":"function.gnupg-init","purpose":"Initialize a connection","prototype":"resource gnupg_init()","return":"<p class=\"para\">   A GnuPG <span class=\"type\">resource<\/span> connection used by other GnuPG functions.  <\/p>","versions":"PECL gnupg >= 0.4"},"gnupg_keyinfo":{"id":"function.gnupg-keyinfo","purpose":"Returns an array with information about all keys that matches the given pattern","prototype":"array gnupg_keyinfo(resource $identifier, string $pattern)","return":"<p class=\"para\">   Returns an array with information about all keys that matches the given   pattern or <strong><code>FALSE<\/code><\/strong>, if an error has occurred.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_setarmor":{"id":"function.gnupg-setarmor","purpose":"Toggle armored output","prototype":"bool gnupg_setarmor(resource $identifier, int $armor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_seterrormode":{"id":"function.gnupg-seterrormode","purpose":"Sets the mode for error_reporting","prototype":"void gnupg_seterrormode(resource $identifier, int $errormode)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL gnupg >= 0.6"},"gnupg_setsignmode":{"id":"function.gnupg-setsignmode","purpose":"Sets the mode for signing","prototype":"bool gnupg_setsignmode(resource $identifier, int $signmode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_sign":{"id":"function.gnupg-sign","purpose":"Signs a given text","prototype":"string gnupg_sign(resource $identifier, string $plaintext)","return":"<p class=\"para\">   On success, this function returns the signed text or the signature.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"gnupg_verify":{"id":"function.gnupg-verify","purpose":"Verifies a signed text","prototype":"array gnupg_verify(resource $identifier, string $signed_text, string $signature [, string $plaintext = ''])","return":"<p class=\"para\">   On success, this function returns information about the signature.   On failure, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gnupg >= 0.1"},"HaruDoc::addPage":{"id":"harudoc.addpage","purpose":"Add new page to the document","prototype":"object HaruDoc::addPage()","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruPage<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::addPageLabel":{"id":"harudoc.addpagelabel","purpose":"Set the numbering style for the specified range of pages","prototype":"bool HaruDoc::addPageLabel(int $first_page, int $style, int $first_num [, string $prefix = \"\"])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::__construct":{"id":"harudoc.construct","purpose":"Construct new HaruDoc instance","prototype":" HaruDoc::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::createOutline":{"id":"harudoc.createoutline","purpose":"Create a HaruOutline instance","prototype":"object HaruDoc::createOutline(string $title [, object $parent_outline = '' [, object $encoder = '']])","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruOutline<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getCurrentEncoder":{"id":"harudoc.getcurrentencoder","purpose":"Get HaruEncoder currently used in the document","prototype":"object HaruDoc::getCurrentEncoder()","return":"<p class=\"para\">   Returns <span class=\"classname\">HaruEncoder<\/span> currently used in the document   or <strong><code>FALSE<\/code><\/strong> if encoder is not set.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getCurrentPage":{"id":"harudoc.getcurrentpage","purpose":"Return current page of the document","prototype":"object HaruDoc::getCurrentPage()","return":"<p class=\"para\">   Returns <span class=\"classname\">HaruPage<\/span> instance on success or <strong><code>FALSE<\/code><\/strong>    if there is no current page at the moment.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getEncoder":{"id":"harudoc.getencoder","purpose":"Get HaruEncoder instance for the specified encoding","prototype":"object HaruDoc::getEncoder(string $encoding)","return":"<p class=\"para\">   Returns a <span class=\"classname\">HaruEncoder<\/span> instance for the specified encoding.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getFont":{"id":"harudoc.getfont","purpose":"Get HaruFont instance","prototype":"object HaruDoc::getFont(string $fontname [, string $encoding = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">HaruFont<\/span> instance with the   specified <code class=\"parameter\">fontname<\/code> and   <code class=\"parameter\">encoding<\/code>.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getInfoAttr":{"id":"harudoc.getinfoattr","purpose":"Get current value of the specified document attribute","prototype":"string HaruDoc::getInfoAttr(int $type)","return":"<p class=\"para\">   Returns the <span class=\"type\">string<\/span> value of the specified document attribute.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getPageLayout":{"id":"harudoc.getpagelayout","purpose":"Get current page layout","prototype":"int HaruDoc::getPageLayout()","return":"<p class=\"para\">   Returns the page layout currently set in the document or <strong><code>FALSE<\/code><\/strong> if page   layout was not set.    See  <span class=\"methodname\">HaruDoc::setPageLayout<\/span>   for the list of possible values.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getPageMode":{"id":"harudoc.getpagemode","purpose":"Get current page mode","prototype":"int HaruDoc::getPageMode()","return":"<p class=\"para\">   Returns the page mode currently set in the document.   See  <span class=\"methodname\">HaruDoc::setPageMode<\/span> for the list of possible values.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::getStreamSize":{"id":"harudoc.getstreamsize","purpose":"Get the size of the temporary stream","prototype":"int HaruDoc::getStreamSize()","return":"<p class=\"para\">   Returns the size of the data in the temporary stream of the document.   The size is zero if the document was not saved to the temporary stream.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::insertPage":{"id":"harudoc.insertpage","purpose":"Insert new page just before the specified page","prototype":"object HaruDoc::insertPage(object $page)","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruPage<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::loadJPEG":{"id":"harudoc.loadjpeg","purpose":"Load a JPEG image","prototype":"object HaruDoc::loadJPEG(string $filename)","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruImage<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::loadPNG":{"id":"harudoc.loadpng","purpose":"Load PNG image and return HaruImage instance","prototype":"object HaruDoc::loadPNG(string $filename [, bool $deferred = ''])","return":"<p class=\"para\">   Returns a <span class=\"classname\">HaruImage<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::loadRaw":{"id":"harudoc.loadraw","purpose":"Load a RAW image","prototype":"object HaruDoc::loadRaw(string $filename, int $width, int $height, int $color_space)","return":"<p class=\"para\">   Returns a <span class=\"classname\">HaruImage<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::loadTTC":{"id":"harudoc.loadttc","purpose":"Load the font with the specified index from TTC file","prototype":"string HaruDoc::loadTTC(string $fontfile, int $index [, bool $embed = ''])","return":"<p class=\"para\">   Returns the name of the loaded font on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::loadTTF":{"id":"harudoc.loadttf","purpose":"Load TTF font file","prototype":"string HaruDoc::loadTTF(string $fontfile [, bool $embed = ''])","return":"<p class=\"para\">   Returns the name of the loaded font on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::loadType1":{"id":"harudoc.loadtype1","purpose":"Load Type1 font","prototype":"string HaruDoc::loadType1(string $afmfile [, string $pfmfile = ''])","return":"<p class=\"para\">   Returns the name of the loaded font on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::output":{"id":"harudoc.output","purpose":"Write the document data to the output buffer","prototype":"bool HaruDoc::output()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::readFromStream":{"id":"harudoc.readfromstream","purpose":"Read data from the temporary stream","prototype":"string HaruDoc::readFromStream(int $bytes)","return":"<p class=\"para\">   Returns data from the temporary stream.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::resetError":{"id":"harudoc.reseterror","purpose":"Reset error state of the document handle","prototype":"bool HaruDoc::resetError()","return":"<p class=\"para\">   Always succeeds and returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::resetStream":{"id":"harudoc.resetstream","purpose":"Rewind the temporary stream","prototype":"bool HaruDoc::resetStream()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::save":{"id":"harudoc.save","purpose":"Save the document into the specified file","prototype":"bool HaruDoc::save(string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::saveToStream":{"id":"harudoc.savetostream","purpose":"Save the document into a temporary stream","prototype":"bool HaruDoc::saveToStream()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setCompressionMode":{"id":"harudoc.setcompressionmode","purpose":"Set compression mode for the document","prototype":"bool HaruDoc::setCompressionMode(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setCurrentEncoder":{"id":"harudoc.setcurrentencoder","purpose":"Set the current encoder for the document","prototype":"bool HaruDoc::setCurrentEncoder(string $encoding)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setEncryptionMode":{"id":"harudoc.setencryptionmode","purpose":"Set encryption mode for the document","prototype":"bool HaruDoc::setEncryptionMode(int $mode [, int $key_len = 5])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setInfoAttr":{"id":"harudoc.setinfoattr","purpose":"Set the info attribute of the document","prototype":"bool HaruDoc::setInfoAttr(int $type, string $info)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setInfoDateAttr":{"id":"harudoc.setinfodateattr","purpose":"Set the datetime info attributes of the document","prototype":"bool HaruDoc::setInfoDateAttr(int $type, int $year, int $month, int $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int $off_min)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setOpenAction":{"id":"harudoc.setopenaction","purpose":"Define which page is shown when the document is opened","prototype":"bool HaruDoc::setOpenAction(object $destination)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setPageLayout":{"id":"harudoc.setpagelayout","purpose":"Set how pages should be displayed","prototype":"bool HaruDoc::setPageLayout(int $layout)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setPageMode":{"id":"harudoc.setpagemode","purpose":"Set how the document should be displayed","prototype":"bool HaruDoc::setPageMode(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setPagesConfiguration":{"id":"harudoc.setpagesconfiguration","purpose":"Set the number of pages per set of pages","prototype":"bool HaruDoc::setPagesConfiguration(int $page_per_pages)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setPassword":{"id":"harudoc.setpassword","purpose":"Set owner and user passwords for the document","prototype":"bool HaruDoc::setPassword(string $owner_password, string $user_password)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::setPermission":{"id":"harudoc.setpermission","purpose":"Set permissions for the document","prototype":"bool HaruDoc::setPermission(int $permission)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useCNSEncodings":{"id":"harudoc.usecnsencodings","purpose":"Enable Chinese simplified encodings","prototype":"bool HaruDoc::useCNSEncodings()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useCNSFonts":{"id":"harudoc.usecnsfonts","purpose":"Enable builtin Chinese simplified fonts","prototype":"bool HaruDoc::useCNSFonts()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useCNTEncodings":{"id":"harudoc.usecntencodings","purpose":"Enable Chinese traditional encodings","prototype":"bool HaruDoc::useCNTEncodings()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useCNTFonts":{"id":"harudoc.usecntfonts","purpose":"Enable builtin Chinese traditional fonts","prototype":"bool HaruDoc::useCNTFonts()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useJPEncodings":{"id":"harudoc.usejpencodings","purpose":"Enable Japanese encodings","prototype":"bool HaruDoc::useJPEncodings()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useJPFonts":{"id":"harudoc.usejpfonts","purpose":"Enable builtin Japanese fonts","prototype":"bool HaruDoc::useJPFonts()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useKREncodings":{"id":"harudoc.usekrencodings","purpose":"Enable Korean encodings","prototype":"bool HaruDoc::useKREncodings()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDoc::useKRFonts":{"id":"harudoc.usekrfonts","purpose":"Enable builtin Korean fonts","prototype":"bool HaruDoc::useKRFonts()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::arc":{"id":"harupage.arc","purpose":"Append an arc to the current path","prototype":"bool HaruPage::arc(float $x, float $y, float $ray, float $ang1, float $ang2)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::beginText":{"id":"harupage.begintext","purpose":"Begin a text object and set the current text position to (0,0)","prototype":"bool HaruPage::beginText()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::circle":{"id":"harupage.circle","purpose":"Append a circle to the current path","prototype":"bool HaruPage::circle(float $x, float $y, float $ray)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::closePath":{"id":"harupage.closepath","purpose":"Append a straight line from the current point to the start point of the path","prototype":"bool HaruPage::closePath()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::concat":{"id":"harupage.concat","purpose":"Concatenate current transformation matrix of the page and the specified matrix","prototype":"bool HaruPage::concat(float $a, float $b, float $c, float $d, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::createDestination":{"id":"harupage.createdestination","purpose":"Create new HaruDestination instance","prototype":"object HaruPage::createDestination()","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruDestination<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::createLinkAnnotation":{"id":"harupage.createlinkannotation","purpose":"Create new HaruAnnotation instance","prototype":"object HaruPage::createLinkAnnotation(array $rectangle, object $destination)","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruAnnotation<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::createTextAnnotation":{"id":"harupage.createtextannotation","purpose":"Create new HaruAnnotation instance","prototype":"object HaruPage::createTextAnnotation(array $rectangle, string $text [, object $encoder = ''])","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruAnnotation<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::createURLAnnotation":{"id":"harupage.createurlannotation","purpose":"Create and return new HaruAnnotation instance","prototype":"object HaruPage::createURLAnnotation(array $rectangle, string $url)","return":"<p class=\"para\">   Returns a new <span class=\"classname\">HaruAnnotation<\/span> instance.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::curveTo2":{"id":"harupage.curveto2","purpose":"Append a Bezier curve to the current path","prototype":"bool HaruPage::curveTo2(float $x2, float $y2, float $x3, float $y3)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::curveTo3":{"id":"harupage.curveto3","purpose":"Append a Bezier curve to the current path","prototype":"bool HaruPage::curveTo3(float $x1, float $y1, float $x3, float $y3)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::curveTo":{"id":"harupage.curveto","purpose":"Append a Bezier curve to the current path","prototype":"bool HaruPage::curveTo(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::drawImage":{"id":"harupage.drawimage","purpose":"Show image at the page","prototype":"bool HaruPage::drawImage(object $image, float $x, float $y, float $width, float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::ellipse":{"id":"harupage.ellipse","purpose":"Append an ellipse to the current path","prototype":"bool HaruPage::ellipse(float $x, float $y, float $xray, float $yray)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::endPath":{"id":"harupage.endpath","purpose":"End current path object without filling and painting operations","prototype":"bool HaruPage::endPath()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::endText":{"id":"harupage.endtext","purpose":"End current text object","prototype":"bool HaruPage::endText()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::eofill":{"id":"harupage.eofill","purpose":"Fill current path using even-odd rule","prototype":"bool HaruPage::eofill()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::eoFillStroke":{"id":"harupage.eofillstroke","purpose":"Fill current path using even-odd rule, then paint the path","prototype":"bool HaruPage::eoFillStroke([bool $close_path = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::fill":{"id":"harupage.fill","purpose":"Fill current path using nonzero winding number rule","prototype":"bool HaruPage::fill()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::fillStroke":{"id":"harupage.fillstroke","purpose":"Fill current path using nonzero winding number rule, then paint the path","prototype":"bool HaruPage::fillStroke([bool $close_path = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCharSpace":{"id":"harupage.getcharspace","purpose":"Get the current value of character spacing","prototype":"float HaruPage::getCharSpace()","return":"<p class=\"para\">   Returns the current value of character spacing.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCMYKFill":{"id":"harupage.getcmykfill","purpose":"Get the current filling color","prototype":"array HaruPage::getCMYKFill()","return":"<p class=\"para\">   Returns the current filling color as an array with 4 elements (&quot;c&quot;, &quot;m&quot;,   &quot;y&quot; and &quot;k&quot;).  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCMYKStroke":{"id":"harupage.getcmykstroke","purpose":"Get the current stroking color","prototype":"array HaruPage::getCMYKStroke()","return":"<p class=\"para\">   Returns the current stroking color as an array with 4 elements (&quot;c&quot;, &quot;m&quot;,   &quot;y&quot; and &quot;k&quot;).  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCurrentFont":{"id":"harupage.getcurrentfont","purpose":"Get the currently used font","prototype":"object HaruPage::getCurrentFont()","return":"<p class=\"para\">   Returns the currently used font as an instance of <span class=\"classname\">HaruFont<\/span>.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCurrentFontSize":{"id":"harupage.getcurrentfontsize","purpose":"Get the current font size","prototype":"float HaruPage::getCurrentFontSize()","return":"<p class=\"para\">   Returns the current font size.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCurrentPos":{"id":"harupage.getcurrentpos","purpose":"Get the current position for path painting","prototype":"array HaruPage::getCurrentPos()","return":"<p class=\"para\">   Returns the current position for path painting as an array of with two   elements - &quot;x&quot; and &quot;y&quot;.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getCurrentTextPos":{"id":"harupage.getcurrenttextpos","purpose":"Get the current position for text printing","prototype":"array HaruPage::getCurrentTextPos()","return":"<p class=\"para\">   Returns the current position for text printing as an array with 2 elements   - &quot;x&quot; and &quot;y&quot;.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getDash":{"id":"harupage.getdash","purpose":"Get the current dash pattern","prototype":"array HaruPage::getDash()","return":"<p class=\"para\">   Returns the current dash pattern as an array of two elements - &quot;pattern&quot;   and &quot;phase&quot; or <strong><code>FALSE<\/code><\/strong> if dash pattern was not set.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getFillingColorSpace":{"id":"harupage.getfillingcolorspace","purpose":"Get the current filling color space","prototype":"int HaruPage::getFillingColorSpace()","return":"<p class=\"para\">   Returns the current filling color space. The result value is one of the following:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruDoc::CS_DEVICE_GRAY<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_DEVICE_RGB<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_DEVICE_CMYK<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_CAL_GRAY<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_CAL_RGB<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_LAB<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_ICC_BASED<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_SEPARATION<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_DEVICE_N<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_INDEXED<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruDoc::CS_PATTERN<\/code><\/strong>    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getFlatness":{"id":"harupage.getflatness","purpose":"Get the flatness of the page","prototype":"float HaruPage::getFlatness()","return":"<p class=\"para\">   Returns the flatness of the page.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getGMode":{"id":"harupage.getgmode","purpose":"Get the current graphics mode","prototype":"int HaruPage::getGMode()","return":"<p class=\"para\">   Returns the current graphics mode. The result value is one of the following:  <\/p>  <p class=\"para\">   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruPage::GMODE_PAGE_DESCRIPTION<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::GMODE_TEXT_OBJECT<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::GMODE_PATH_OBJECT<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::GMODE_CLIPPING_PATH<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::GMODE_SHADING<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::GMODE_INLINE_IMAGE<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::GMODE_EXTERNAL_OBJECT<\/code><\/strong>    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getGrayFill":{"id":"harupage.getgrayfill","purpose":"Get the current filling color","prototype":"float HaruPage::getGrayFill()","return":"<p class=\"para\">   Returns the current filling color.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getGrayStroke":{"id":"harupage.getgraystroke","purpose":"Get the current stroking color","prototype":"float HaruPage::getGrayStroke()","return":"<p class=\"para\">   Returns the current stroking color.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getHeight":{"id":"harupage.getheight","purpose":"Get the height of the page","prototype":"float HaruPage::getHeight()","return":"<p class=\"para\">   Returns the height of the page.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getHorizontalScaling":{"id":"harupage.gethorizontalscaling","purpose":"Get the current value of horizontal scaling","prototype":"float HaruPage::getHorizontalScaling()","return":"<p class=\"para\">   Returns the current value of horizontal scaling.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getLineCap":{"id":"harupage.getlinecap","purpose":"Get the current line cap style","prototype":"int HaruPage::getLineCap()","return":"<p class=\"para\">   Returns the current line cap style. The result value is one of the following:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruPage::BUTT_END<\/code><\/strong> - the line is squared off at the endpoint of the path.     <\/li>    <li class=\"member\">     <strong><code>HaruPage::ROUND_END<\/code><\/strong> - the end of the line becomes a semicircle with center in the end point of the path.    <\/li>    <li class=\"member\">     <strong><code>HaruPage::PROJECTING_SCUARE_END<\/code><\/strong> - the line continues to the point that exceeds half of the stroke width the end point.    <\/li>   <\/ul>   <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getLineJoin":{"id":"harupage.getlinejoin","purpose":"Get the current line join style","prototype":"int HaruPage::getLineJoin()","return":"<p class=\"para\">   Returns the current line join style. The result value is one of the following:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruPage::MITER_JOIN<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::ROUND_JOIN<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::BEVEL_JOIN<\/code><\/strong>    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getLineWidth":{"id":"harupage.getlinewidth","purpose":"Get the current line width","prototype":"float HaruPage::getLineWidth()","return":"<p class=\"para\">   Returns the current line width.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getMiterLimit":{"id":"harupage.getmiterlimit","purpose":"Get the value of miter limit","prototype":"float HaruPage::getMiterLimit()","return":"<p class=\"para\">   Returns the value of the miter limit.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getRGBFill":{"id":"harupage.getrgbfill","purpose":"Get the current filling color","prototype":"array HaruPage::getRGBFill()","return":"<p class=\"para\">   Returns the current filling color as an array with 3 elements: &quot;r&quot;, &quot;g&quot; and &quot;b&quot;.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getRGBStroke":{"id":"harupage.getrgbstroke","purpose":"Get the current stroking color","prototype":"array HaruPage::getRGBStroke()","return":"<p class=\"para\">   Returns the current stroking color.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getStrokingColorSpace":{"id":"harupage.getstrokingcolorspace","purpose":"Get the current stroking color space","prototype":"int HaruPage::getStrokingColorSpace()","return":"<p class=\"para\">   Returns the current stroking color space. The list of return values is the same as for     <span class=\"methodname\">HaruPage::getFillingColorSpace<\/span>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getTextLeading":{"id":"harupage.gettextleading","purpose":"Get the current value of line spacing","prototype":"float HaruPage::getTextLeading()","return":"<p class=\"para\">   Returns the current value of line spacing.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getTextMatrix":{"id":"harupage.gettextmatrix","purpose":"Get the current text transformation matrix of the page","prototype":"array HaruPage::getTextMatrix()","return":"<p class=\"para\">   Returns the current text transformation matrix of the page as an array of 6 elements:   &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;x&quot; and &quot;y&quot;.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getTextRenderingMode":{"id":"harupage.gettextrenderingmode","purpose":"Get the current text rendering mode","prototype":"int HaruPage::getTextRenderingMode()","return":"<p class=\"para\">   Returns the current text rendering mode. The result value is one of the following:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruPage::FILL<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::STROKE<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::FILL_THEN_STROKE<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::INVISIBLE<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::FILL_CLIPPING<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::STROKE_CLIPPING<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::FILL_STROKE_CLIPPING<\/code><\/strong>    <\/li>    <li class=\"member\">     <strong><code>HaruPage::CLIPPING<\/code><\/strong>    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getTextRise":{"id":"harupage.gettextrise","purpose":"Get the current value of text rising","prototype":"float HaruPage::getTextRise()","return":"<p class=\"para\">   Returns the current value of text rising.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getTextWidth":{"id":"harupage.gettextwidth","purpose":"Get the width of the text using current fontsize, character spacing and word spacing","prototype":"float HaruPage::getTextWidth(string $text)","return":"<p class=\"para\">   Returns the width of the text using current fontsize, character spacing and word spacing.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getTransMatrix":{"id":"harupage.gettransmatrix","purpose":"Get the current transformation matrix of the page","prototype":"array HaruPage::getTransMatrix()","return":"<p class=\"para\">   Returns the current transformation matrix of the page as an array of 6 elements:   &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;x&quot; and &quot;y&quot;.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getWidth":{"id":"harupage.getwidth","purpose":"Get the width of the page","prototype":"float HaruPage::getWidth()","return":"<p class=\"para\">   Returns the width of the page.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::getWordSpace":{"id":"harupage.getwordspace","purpose":"Get the current value of word spacing","prototype":"float HaruPage::getWordSpace()","return":"<p class=\"para\">   Returns the current value of word spacing.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::lineTo":{"id":"harupage.lineto","purpose":"Draw a line from the current point to the specified point","prototype":"bool HaruPage::lineTo(float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::measureText":{"id":"harupage.measuretext","purpose":"Calculate the byte length of characters which can be included on one line of the specified width","prototype":"int HaruPage::measureText(string $text, float $width [, bool $wordwrap = ''])","return":"<p class=\"para\">   Returns the byte length of characters which can be included within the specified width.   For single-byte encodings, this is equal to the number of characters. For multi-byte encodings,   this is not necessarily the case.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::moveTextPos":{"id":"harupage.movetextpos","purpose":"Move text position to the specified offset","prototype":"bool HaruPage::moveTextPos(float $x, float $y [, bool $set_leading = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::moveTo":{"id":"harupage.moveto","purpose":"Set starting point for new drawing path","prototype":"bool HaruPage::moveTo(float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::moveToNextLine":{"id":"harupage.movetonextline","purpose":"Move text position to the start of the next line","prototype":"bool HaruPage::moveToNextLine()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::rectangle":{"id":"harupage.rectangle","purpose":"Append a rectangle to the current path","prototype":"bool HaruPage::rectangle(float $x, float $y, float $width, float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setCharSpace":{"id":"harupage.setcharspace","purpose":"Set character spacing for the page","prototype":"bool HaruPage::setCharSpace(float $char_space)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setCMYKFill":{"id":"harupage.setcmykfill","purpose":"Set filling color for the page","prototype":"bool HaruPage::setCMYKFill(float $c, float $m, float $y, float $k)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setCMYKStroke":{"id":"harupage.setcmykstroke","purpose":"Set stroking color for the page","prototype":"bool HaruPage::setCMYKStroke(float $c, float $m, float $y, float $k)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setDash":{"id":"harupage.setdash","purpose":"Set the dash pattern for the page","prototype":"bool HaruPage::setDash(array $pattern, int $phase)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setFlatness":{"id":"harupage.setflatness","purpose":"Set flatness for the page","prototype":"bool HaruPage::setFlatness(float $flatness)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setFontAndSize":{"id":"harupage.setfontandsize","purpose":"Set font and fontsize for the page","prototype":"bool HaruPage::setFontAndSize(object $font, float $size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setGrayFill":{"id":"harupage.setgrayfill","purpose":"Set filling color for the page","prototype":"bool HaruPage::setGrayFill(float $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setGrayStroke":{"id":"harupage.setgraystroke","purpose":"Sets stroking color for the page","prototype":"bool HaruPage::setGrayStroke(float $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setHeight":{"id":"harupage.setheight","purpose":"Set height of the page","prototype":"bool HaruPage::setHeight(float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setHorizontalScaling":{"id":"harupage.sethorizontalscaling","purpose":"Set horizontal scaling for the page","prototype":"bool HaruPage::setHorizontalScaling(float $scaling)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setLineCap":{"id":"harupage.setlinecap","purpose":"Set the shape to be used at the ends of lines","prototype":"bool HaruPage::setLineCap(int $cap)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setLineJoin":{"id":"harupage.setlinejoin","purpose":"Set line join style for the page","prototype":"bool HaruPage::setLineJoin(int $join)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setLineWidth":{"id":"harupage.setlinewidth","purpose":"Set line width for the page","prototype":"bool HaruPage::setLineWidth(float $width)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setMiterLimit":{"id":"harupage.setmiterlimit","purpose":"Set the current value of the miter limit of the page","prototype":"bool HaruPage::setMiterLimit(float $limit)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setRGBFill":{"id":"harupage.setrgbfill","purpose":"Set filling color for the page","prototype":"bool HaruPage::setRGBFill(float $r, float $g, float $b)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setRGBStroke":{"id":"harupage.setrgbstroke","purpose":"Set stroking color for the page","prototype":"bool HaruPage::setRGBStroke(float $r, float $g, float $b)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setRotate":{"id":"harupage.setrotate","purpose":"Set rotation angle of the page","prototype":"bool HaruPage::setRotate(int $angle)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setSize":{"id":"harupage.setsize","purpose":"Set size and direction of the page","prototype":"bool HaruPage::setSize(int $size, int $direction)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setSlideShow":{"id":"harupage.setslideshow","purpose":"Set transition style for the page","prototype":"bool HaruPage::setSlideShow(int $type, float $disp_time, float $trans_time)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setTextLeading":{"id":"harupage.settextleading","purpose":"Set text leading (line spacing) for the page","prototype":"bool HaruPage::setTextLeading(float $text_leading)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setTextMatrix":{"id":"harupage.settextmatrix","purpose":"Set the current text transformation matrix of the page","prototype":"bool HaruPage::setTextMatrix(float $a, float $b, float $c, float $d, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setTextRenderingMode":{"id":"harupage.settextrenderingmode","purpose":"Set text rendering mode for the page","prototype":"bool HaruPage::setTextRenderingMode(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setTextRise":{"id":"harupage.settextrise","purpose":"Set the current value of text rising","prototype":"bool HaruPage::setTextRise(float $rise)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setWidth":{"id":"harupage.setwidth","purpose":"Set width of the page","prototype":"bool HaruPage::setWidth(float $width)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::setWordSpace":{"id":"harupage.setwordspace","purpose":"Set word spacing for the page","prototype":"bool HaruPage::setWordSpace(float $word_space)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::showText":{"id":"harupage.showtext","purpose":"Print text at the current position of the page","prototype":"bool HaruPage::showText(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::showTextNextLine":{"id":"harupage.showtextnextline","purpose":"Move the current position to the start of the next line and print the text","prototype":"bool HaruPage::showTextNextLine(string $text [, float $word_space = '' [, float $char_space = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::stroke":{"id":"harupage.stroke","purpose":"Paint current path","prototype":"bool HaruPage::stroke([bool $close_path = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::textOut":{"id":"harupage.textout","purpose":"Print the text on the specified position","prototype":"bool HaruPage::textOut(float $x, float $y, string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruPage::textRect":{"id":"harupage.textrect","purpose":"Print the text inside the specified region","prototype":"bool HaruPage::textRect(float $left, float $top, float $right, float $bottom, string $text [, int $align = HaruPage::TALIGN_LEFT])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getAscent":{"id":"harufont.getascent","purpose":"Get the vertical ascent of the font","prototype":"int HaruFont::getAscent()","return":"<p class=\"para\">   Returns the vertical ascent of the font.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getCapHeight":{"id":"harufont.getcapheight","purpose":"Get the distance from the baseline of uppercase letters","prototype":"int HaruFont::getCapHeight()","return":"<p class=\"para\">   Returns the distance from the baseline of uppercase letters.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getDescent":{"id":"harufont.getdescent","purpose":"Get the vertical descent of the font","prototype":"int HaruFont::getDescent()","return":"<p class=\"para\">   Return the vertical descent of the font.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getEncodingName":{"id":"harufont.getencodingname","purpose":"Get the name of the encoding","prototype":"string HaruFont::getEncodingName()","return":"<p class=\"para\">   Returns the name of the font encoding.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getFontName":{"id":"harufont.getfontname","purpose":"Get the name of the font","prototype":"string HaruFont::getFontName()","return":"<p class=\"para\">   Returns the name of the font.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getTextWidth":{"id":"harufont.gettextwidth","purpose":"Get the total width of the text, number of characters, number of words and number of spaces","prototype":"array HaruFont::getTextWidth(string $text)","return":"<p class=\"para\">   Returns the total width of the text, number of characters, number of words   and number of spaces in the given text.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getUnicodeWidth":{"id":"harufont.getunicodewidth","purpose":"Get the width of the character in the font","prototype":"int HaruFont::getUnicodeWidth(int $character)","return":"<p class=\"para\">   Returns the width of the character in the font.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::getXHeight":{"id":"harufont.getxheight","purpose":"Get the distance from the baseline of lowercase letters","prototype":"int HaruFont::getXHeight()","return":"<p class=\"para\">   Returns the distance from the baseline of lowercase letters.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruFont::measureText":{"id":"harufont.measuretext","purpose":"Calculate the number of characters which can be included within the specified width","prototype":"int HaruFont::measureText(string $text, float $width, float $font_size, float $char_space, float $word_space [, bool $word_wrap = ''])","return":"<p class=\"para\">   Returns the number of characters which can be included within the   specified width.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::getBitsPerComponent":{"id":"haruimage.getbitspercomponent","purpose":"Get the number of bits used to describe each color component of the image","prototype":"int HaruImage::getBitsPerComponent()","return":"<p class=\"para\">   Returns the number of bits used to describe each color component of the   image.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::getColorSpace":{"id":"haruimage.getcolorspace","purpose":"Get the name of the color space","prototype":"string HaruImage::getColorSpace()","return":"<p class=\"para\">   Returns the name of the color space of the image. The name is one of the   following values:   <ul class=\"simplelist\">    <li class=\"member\">     &quot;DeviceGray&quot;    <\/li>    <li class=\"member\">     &quot;DeviceRGB&quot;    <\/li>    <li class=\"member\">     &quot;DeviceCMYK&quot;    <\/li>    <li class=\"member\">     &quot;Indexed&quot;    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::getHeight":{"id":"haruimage.getheight","purpose":"Get the height of the image","prototype":"int HaruImage::getHeight()","return":"<p class=\"para\">   Returns the height of the image.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::getSize":{"id":"haruimage.getsize","purpose":"Get size of the image","prototype":"array HaruImage::getSize()","return":"<p class=\"para\">   Returns an array with two elements: width and height, which contain   appropriate dimensions of the image.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::getWidth":{"id":"haruimage.getwidth","purpose":"Get the width of the image","prototype":"int HaruImage::getWidth()","return":"<p class=\"para\">   Returns the width of the image.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::setColorMask":{"id":"haruimage.setcolormask","purpose":"Set the color mask of the image","prototype":"bool HaruImage::setColorMask(int $rmin, int $rmax, int $gmin, int $gmax, int $bmin, int $bmax)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruImage::setMaskImage":{"id":"haruimage.setmaskimage","purpose":"Set the image mask","prototype":"bool HaruImage::setMaskImage(object $mask_image)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruEncoder::getByteType":{"id":"haruencoder.getbytetype","purpose":"Get the type of the byte in the text","prototype":"int HaruEncoder::getByteType(string $text, int $index)","return":"<p class=\"para\">   Returns the type of the byte in the text on the specified position.   The result is one of the following values:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruEncoder::BYTE_TYPE_SINGLE<\/code><\/strong> - single byte     character.     <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::BYTE_TYPE_LEAD<\/code><\/strong> - lead byte of a     double-byte character.    <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::BYTE_TYPE_TRAIL<\/code><\/strong> - trailing byte of a     double-byte character.    <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::BYTE_TYPE_UNKNOWN<\/code><\/strong> - invalid encoder or     cannot detect the byte type.    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruEncoder::getType":{"id":"haruencoder.gettype","purpose":"Get the type of the encoder","prototype":"int HaruEncoder::getType()","return":"<p class=\"para\">   Returns the type of the encoder. The result is one of the following values:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruEncoder::TYPE_SINGLE_BYTE<\/code><\/strong> - the encoder is for single     byte characters.     <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::TYPE_DOUBLE_BYTE<\/code><\/strong> - the encoder is for     multibyte characters.    <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::TYPE_UNINITIALIZED<\/code><\/strong> - the encoder is     not initialized.    <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::UNKNOWN<\/code><\/strong> - the encoder is invalid.    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruEncoder::getUnicode":{"id":"haruencoder.getunicode","purpose":"Convert the specified character to unicode","prototype":"int HaruEncoder::getUnicode(int $character)","return":"<p class=\"para\">     <\/p>","versions":"PECL haru >= 0.0.1"},"HaruEncoder::getWritingMode":{"id":"haruencoder.getwritingmode","purpose":"Get the writing mode of the encoder","prototype":"int HaruEncoder::getWritingMode()","return":"<p class=\"para\">   Returns the writing mode of the encoder. The result value is on of the   following:   <ul class=\"simplelist\">    <li class=\"member\">     <strong><code>HaruEncoder::WMODE_HORIZONTAL<\/code><\/strong> - horizontal writing     mode.     <\/li>    <li class=\"member\">     <strong><code>HaruEncoder::WMODE_VERTICAL<\/code><\/strong> - vertical writing mode.    <\/li>   <\/ul>  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruOutline::setDestination":{"id":"haruoutline.setdestination","purpose":"Set the destination for the outline","prototype":"bool HaruOutline::setDestination(object $destination)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruOutline::setOpened":{"id":"haruoutline.setopened","purpose":"Set the initial state of the outline","prototype":"bool HaruOutline::setOpened(bool $opened)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruAnnotation::setBorderStyle":{"id":"haruannotation.setborderstyle","purpose":"Set the border style of the annotation","prototype":"bool HaruAnnotation::setBorderStyle(float $width, int $dash_on, int $dash_off)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruAnnotation::setHighlightMode":{"id":"haruannotation.sethighlightmode","purpose":"Set the highlighting mode of the annotation","prototype":"bool HaruAnnotation::setHighlightMode(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruAnnotation::setIcon":{"id":"haruannotation.seticon","purpose":"Set the icon style of the annotation","prototype":"bool HaruAnnotation::setIcon(int $icon)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruAnnotation::setOpened":{"id":"haruannotation.setopened","purpose":"Set the initial state of the annotation","prototype":"bool HaruAnnotation::setOpened(bool $opened)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFit":{"id":"harudestination.setfit","purpose":"Set the appearance of the page to fit the window","prototype":"bool HaruDestination::setFit()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFitB":{"id":"harudestination.setfitb","purpose":"Set the appearance of the page to fit the bounding box of the page within the window","prototype":"bool HaruDestination::setFitB()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFitBH":{"id":"harudestination.setfitbh","purpose":"Set the appearance of the page to fit the width of the bounding box","prototype":"bool HaruDestination::setFitBH(float $top)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFitBV":{"id":"harudestination.setfitbv","purpose":"Set the appearance of the page to fit the height of the boudning box","prototype":"bool HaruDestination::setFitBV(float $left)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFitH":{"id":"harudestination.setfith","purpose":"Set the appearance of the page to fit the window width","prototype":"bool HaruDestination::setFitH(float $top)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFitR":{"id":"harudestination.setfitr","purpose":"Set the appearance of the page to fit the specified rectangle","prototype":"bool HaruDestination::setFitR(float $left, float $bottom, float $right, float $top)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setFitV":{"id":"harudestination.setfitv","purpose":"Set the appearance of the page to fit the window height","prototype":"bool HaruDestination::setFitV(float $left)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"HaruDestination::setXYZ":{"id":"harudestination.setxyz","purpose":"Set the appearance of the page","prototype":"bool HaruDestination::setXYZ(float $left, float $top, float $zoom)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL haru >= 0.0.1"},"ming_keypress":{"id":"function.ming-keypress","purpose":"Returns the action flag for keyPress(char)","prototype":"int ming_keypress(string $char)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"ming_setcubicthreshold":{"id":"function.ming-setcubicthreshold","purpose":"Set cubic threshold","prototype":"void ming_setcubicthreshold(int $threshold)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7, PECL ming SVN"},"ming_setscale":{"id":"function.ming-setscale","purpose":"Set the global scaling factor","prototype":"void ming_setscale(float $scale)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7, PECL ming SVN"},"ming_setswfcompression":{"id":"function.ming-setswfcompression","purpose":"Sets the SWF output compression","prototype":"void ming_setswfcompression(int $level)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5.2.1-5.3.0, PHP 7, PECL ming SVN"},"ming_useconstants":{"id":"function.ming-useconstants","purpose":"Use constant pool","prototype":"void ming_useconstants(int $use)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"ming_useswfversion":{"id":"function.ming-useswfversion","purpose":"Sets the SWF version","prototype":"void ming_useswfversion(int $version)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ming SVN"},"SWFAction::__construct":{"id":"swfaction.construct","purpose":"Creates a new SWFAction","prototype":" SWFAction::__construct(string $script)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFBitmap::__construct":{"id":"swfbitmap.construct","purpose":"Loads Bitmap object","prototype":" SWFBitmap::__construct(mixed $file [, mixed $alphafile = ''])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFBitmap::getHeight":{"id":"swfbitmap.getheight","purpose":"Returns the bitmap's height","prototype":"float SWFBitmap::getHeight()","return":"<p class=\"para\">   Returns the bitmap height in pixels.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFBitmap::getWidth":{"id":"swfbitmap.getwidth","purpose":"Returns the bitmap's width","prototype":"float SWFBitmap::getWidth()","return":"<p class=\"para\">   Returns the bitmap width in pixels.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::addAction":{"id":"swfbutton.addaction","purpose":"Adds an action","prototype":"void SWFButton::addAction(SWFAction $action, int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::addASound":{"id":"swfbutton.addasound","purpose":"Associates a sound with a button transition","prototype":"SWFSoundInstance SWFButton::addASound(SWFSound $sound, int $flags)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::addShape":{"id":"swfbutton.addshape","purpose":"Adds a shape to a button","prototype":"void SWFButton::addShape(SWFShape $shape, int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::__construct":{"id":"swfbutton.construct","purpose":"Creates a new Button","prototype":" SWFButton::__construct()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::setAction":{"id":"swfbutton.setaction","purpose":"Sets the action","prototype":"void SWFButton::setAction(SWFAction $action)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::setDown":{"id":"swfbutton.setdown","purpose":"Alias for addShape(shape, SWFBUTTON_DOWN)","prototype":"void SWFButton::setDown(SWFShape $shape)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::setHit":{"id":"swfbutton.sethit","purpose":"Alias for addShape(shape, SWFBUTTON_HIT)","prototype":"void SWFButton::setHit(SWFShape $shape)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::setMenu":{"id":"swfbutton.setmenu","purpose":"Enable track as menu button behaviour","prototype":"void SWFButton::setMenu(int $flag)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::setOver":{"id":"swfbutton.setover","purpose":"Alias for addShape(shape, SWFBUTTON_OVER)","prototype":"void SWFButton::setOver(SWFShape $shape)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFButton::setUp":{"id":"swfbutton.setup","purpose":"Alias for addShape(shape, SWFBUTTON_UP)","prototype":"void SWFButton::setUp(SWFShape $shape)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::addAction":{"id":"swfdisplayitem.addaction","purpose":"Adds this SWFAction to the given SWFSprite instance","prototype":"void SWFDisplayItem::addAction(SWFAction $action, int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::addColor":{"id":"swfdisplayitem.addcolor","purpose":"Adds the given color to this item's color transform","prototype":"void SWFDisplayItem::addColor(int $red, int $green, int $blue [, int $a = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::endMask":{"id":"swfdisplayitem.endmask","purpose":"Another way of defining a MASK layer","prototype":"void SWFDisplayItem::endMask()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getRot":{"id":"swfdisplayitem.getrot","purpose":"","prototype":"float SWFDisplayItem::getRot()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getX":{"id":"swfdisplayitem.getx","purpose":"","prototype":"float SWFDisplayItem::getX()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getXScale":{"id":"swfdisplayitem.getxscale","purpose":"","prototype":"float SWFDisplayItem::getXScale()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getXSkew":{"id":"swfdisplayitem.getxskew","purpose":"","prototype":"float SWFDisplayItem::getXSkew()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getY":{"id":"swfdisplayitem.gety","purpose":"","prototype":"float SWFDisplayItem::getY()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getYScale":{"id":"swfdisplayitem.getyscale","purpose":"","prototype":"float SWFDisplayItem::getYScale()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::getYSkew":{"id":"swfdisplayitem.getyskew","purpose":"","prototype":"float SWFDisplayItem::getYSkew()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::move":{"id":"swfdisplayitem.move","purpose":"Moves object in relative coordinates","prototype":"void SWFDisplayItem::move(float $dx, float $dy)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::moveTo":{"id":"swfdisplayitem.moveto","purpose":"Moves object in global coordinates","prototype":"void SWFDisplayItem::moveTo(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::multColor":{"id":"swfdisplayitem.multcolor","purpose":"Multiplies the item's color transform","prototype":"void SWFDisplayItem::multColor(float $red, float $green, float $blue [, float $a = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::remove":{"id":"swfdisplayitem.remove","purpose":"Removes the object from the movie","prototype":"void SWFDisplayItem::remove()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::rotate":{"id":"swfdisplayitem.rotate","purpose":"Rotates in relative coordinates","prototype":"void SWFDisplayItem::rotate(float $angle)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::rotateTo":{"id":"swfdisplayitem.rotateto","purpose":"Rotates the object in global coordinates","prototype":"void SWFDisplayItem::rotateTo(float $angle)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::scale":{"id":"swfdisplayitem.scale","purpose":"Scales the object in relative coordinates","prototype":"void SWFDisplayItem::scale(float $dx, float $dy)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::scaleTo":{"id":"swfdisplayitem.scaleto","purpose":"Scales the object in global coordinates","prototype":"void SWFDisplayItem::scaleTo(float $x [, float $y = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::setDepth":{"id":"swfdisplayitem.setdepth","purpose":"Sets z-order","prototype":"void SWFDisplayItem::setDepth(int $depth)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::setMaskLevel":{"id":"swfdisplayitem.setmasklevel","purpose":"Defines a MASK layer at level","prototype":"void SWFDisplayItem::setMaskLevel(int $level)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::setMatrix":{"id":"swfdisplayitem.setmatrix","purpose":"Sets the item's transform matrix","prototype":"void SWFDisplayItem::setMatrix(float $a, float $b, float $c, float $d, float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::setName":{"id":"swfdisplayitem.setname","purpose":"Sets the object's name","prototype":"void SWFDisplayItem::setName(string $name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::setRatio":{"id":"swfdisplayitem.setratio","purpose":"Sets the object's ratio","prototype":"void SWFDisplayItem::setRatio(float $ratio)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::skewX":{"id":"swfdisplayitem.skewx","purpose":"Sets the X-skew","prototype":"void SWFDisplayItem::skewX(float $ddegrees)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::skewXTo":{"id":"swfdisplayitem.skewxto","purpose":"Sets the X-skew","prototype":"void SWFDisplayItem::skewXTo(float $degrees)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::skewY":{"id":"swfdisplayitem.skewy","purpose":"Sets the Y-skew","prototype":"void SWFDisplayItem::skewY(float $ddegrees)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFDisplayItem::skewYTo":{"id":"swfdisplayitem.skewyto","purpose":"Sets the Y-skew","prototype":"void SWFDisplayItem::skewYTo(float $degrees)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFill::moveTo":{"id":"swffill.moveto","purpose":"Moves fill origin","prototype":"void SWFFill::moveTo(float $x, float $y)","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFill::rotateTo":{"id":"swffill.rotateto","purpose":"Sets fill's rotation","prototype":"void SWFFill::rotateTo(float $angle)","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFill::scaleTo":{"id":"swffill.scaleto","purpose":"Sets fill's scale","prototype":"void SWFFill::scaleTo(float $x [, float $y = ''])","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFill::skewXTo":{"id":"swffill.skewxto","purpose":"Sets fill x-skew","prototype":"void SWFFill::skewXTo(float $x)","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFill::skewYTo":{"id":"swffill.skewyto","purpose":"Sets fill y-skew","prototype":"void SWFFill::skewYTo(float $y)","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::__construct":{"id":"swffont.construct","purpose":"Loads a font definition","prototype":" SWFFont::__construct(string $filename)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::getAscent":{"id":"swffont.getascent","purpose":"Returns the ascent of the font, or 0 if not available","prototype":"float SWFFont::getAscent()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::getDescent":{"id":"swffont.getdescent","purpose":"Returns the descent of the font, or 0 if not available","prototype":"float SWFFont::getDescent()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::getLeading":{"id":"swffont.getleading","purpose":"Returns the leading of the font, or 0 if not available","prototype":"float SWFFont::getLeading()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::getShape":{"id":"swffont.getshape","purpose":"Returns the glyph shape of a char as a text string","prototype":"string SWFFont::getShape(int $code)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::getUTF8Width":{"id":"swffont.getutf8width","purpose":"Calculates the width of the given string in this font at full height","prototype":"float SWFFont::getUTF8Width(string $string)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFont::getWidth":{"id":"swffont.getwidth","purpose":"Returns the string's width","prototype":"float SWFFont::getWidth(string $string)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFontChar::addChars":{"id":"swffontchar.addchars","purpose":"Adds characters to a font for exporting font","prototype":"void SWFFontChar::addChars(string $char)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFFontChar::addUTF8Chars":{"id":"swffontchar.addutf8chars","purpose":"Adds characters to a font for exporting font","prototype":"void SWFFontChar::addUTF8Chars(string $char)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFGradient::addEntry":{"id":"swfgradient.addentry","purpose":"Adds an entry to the gradient list","prototype":"void SWFGradient::addEntry(float $ratio, int $red, int $green, int $blue [, int $alpha = 255])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFGradient::__construct":{"id":"swfgradient.construct","purpose":"Creates a gradient object","prototype":" SWFGradient::__construct()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMorph::__construct":{"id":"swfmorph.construct","purpose":"Creates a new SWFMorph object","prototype":" SWFMorph::__construct()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMorph::getShape1":{"id":"swfmorph.getshape1","purpose":"Gets a handle to the starting shape","prototype":"SWFShape SWFMorph::getShape1()","return":"<p class=\"para\">   Returns a <a href=\"class.swfshape.html\" class=\"xref\">SWFShape<\/a> object.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMorph::getShape2":{"id":"swfmorph.getshape2","purpose":"Gets a handle to the ending shape","prototype":"SWFShape SWFMorph::getShape2()","return":"<p class=\"para\">   Returns a <a href=\"class.swfshape.html\" class=\"xref\">SWFShape<\/a> object.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::add":{"id":"swfmovie.add","purpose":"Adds any type of data to a movie","prototype":"mixed SWFMovie::add(object $instance)","return":"<p class=\"para\">   For displayable types (shape, text, button, sprite), this returns an    <a href=\"class.swfdisplayitem.html\" class=\"xref\">SWFDisplayItem<\/a>, a handle to the object in a display   list. Thus, you can add the same shape to a movie multiple    times and get separate handles back for each separate instance.   <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::addExport":{"id":"swfmovie.addexport","purpose":"","prototype":"void SWFMovie::addExport(SWFCharacter $char, string $name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::addFont":{"id":"swfmovie.addfont","purpose":"","prototype":"mixed SWFMovie::addFont(SWFFont $font)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::__construct":{"id":"swfmovie.construct","purpose":"Creates a new movie object, representing an SWF version 4 movie","prototype":" SWFMovie::__construct([int $version = ''])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::importChar":{"id":"swfmovie.importchar","purpose":"","prototype":"SWFSprite SWFMovie::importChar(string $libswf, string $name)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::importFont":{"id":"swfmovie.importfont","purpose":"","prototype":"SWFFontChar SWFMovie::importFont(string $libswf, string $name)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::labelFrame":{"id":"swfmovie.labelframe","purpose":"Labels a frame","prototype":"void SWFMovie::labelFrame(string $label)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::nextFrame":{"id":"swfmovie.nextframe","purpose":"Moves to the next frame of the animation","prototype":"void SWFMovie::nextFrame()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::output":{"id":"swfmovie.output","purpose":"Dumps your lovingly prepared movie out","prototype":"int SWFMovie::output([int $compression = ''])","return":"<p class=\"para\">   Return the number of bytes written or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::remove":{"id":"swfmovie.remove","purpose":"Removes the object instance from the display list","prototype":"void SWFMovie::remove(object $instance)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5.2.1-5.3.0, PHP 7, PECL ming SVN"},"SWFMovie::save":{"id":"swfmovie.save","purpose":"Saves the SWF movie in a file","prototype":"int SWFMovie::save(string $filename [, int $compression = -1])","return":"<p class=\"para\">   Return the number of bytes written or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::saveToFile":{"id":"swfmovie.savetofile","purpose":"","prototype":"int SWFMovie::saveToFile(resource $x [, int $compression = -1])","return":"<p class=\"para\">   Return the number of bytes written or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::setbackground":{"id":"swfmovie.setbackground","purpose":"Sets the background color","prototype":"void SWFMovie::setbackground(int $red, int $green, int $blue)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::setDimension":{"id":"swfmovie.setdimension","purpose":"Sets the movie's width and height","prototype":"void SWFMovie::setDimension(float $width, float $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::setFrames":{"id":"swfmovie.setframes","purpose":"Sets the total number of frames in the animation","prototype":"void SWFMovie::setFrames(int $number)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::setRate":{"id":"swfmovie.setrate","purpose":"Sets the animation's frame rate","prototype":"void SWFMovie::setRate(float $rate)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::startSound":{"id":"swfmovie.startsound","purpose":"","prototype":"SWFSoundInstance SWFMovie::startSound(SWFSound $sound)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::stopSound":{"id":"swfmovie.stopsound","purpose":"","prototype":"void SWFMovie::stopSound(SWFSound $sound)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::streamMP3":{"id":"swfmovie.streammp3","purpose":"Streams a MP3 file","prototype":"int SWFMovie::streamMP3(mixed $mp3file [, float $skip = ''])","return":"<p class=\"para\">   Return number of frames.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFMovie::writeExports":{"id":"swfmovie.writeexports","purpose":"","prototype":"void SWFMovie::writeExports()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFPrebuiltClip::__construct":{"id":"swfprebuiltclip.construct","purpose":"Returns a SWFPrebuiltClip object","prototype":" SWFPrebuiltClip::__construct(mixed $file)","return":"","versions":"PHP 5.0.5-5.3.0, PHP 7, PECL ming SVN"},"SWFShape::addFill":{"id":"swfshape.addfill","purpose":"Adds a solid fill to the shape","prototype":"SWFFill SWFShape::addFill(int $red, int $green, int $blue [, int $alpha = 255, SWFBitmap $bitmap [, int $flags = '', SWFGradient $gradient]])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::__construct":{"id":"swfshape.construct","purpose":"Creates a new shape object","prototype":" SWFShape::__construct()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawArc":{"id":"swfshape.drawarc","purpose":"Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured clockwise from 12 o'clock","prototype":"void SWFShape::drawArc(float $r, float $startAngle, float $endAngle)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawCircle":{"id":"swfshape.drawcircle","purpose":"Draws a circle of radius r centered at the current location, in a counter-clockwise fashion","prototype":"void SWFShape::drawCircle(float $r)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawCubic":{"id":"swfshape.drawcubic","purpose":"Draws a cubic bezier curve using the current position and the three given points as control points","prototype":"int SWFShape::drawCubic(float $bx, float $by, float $cx, float $cy, float $dx, float $dy)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawCubicTo":{"id":"swfshape.drawcubicto","purpose":"Draws a cubic bezier curve using the current position and the three given points as control points","prototype":"int SWFShape::drawCubicTo(float $bx, float $by, float $cx, float $cy, float $dx, float $dy)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawCurve":{"id":"swfshape.drawcurve","purpose":"Draws a curve (relative)","prototype":"int SWFShape::drawCurve(float $controldx, float $controldy, float $anchordx, float $anchordy [, float $targetdx = '', float $targetdy])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawCurveTo":{"id":"swfshape.drawcurveto","purpose":"Draws a curve","prototype":"int SWFShape::drawCurveTo(float $controlx, float $controly, float $anchorx, float $anchory [, float $targetx = '', float $targety])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawGlyph":{"id":"swfshape.drawglyph","purpose":"Draws the first character in the given string into the shape using the glyph definition from the given font","prototype":"void SWFShape::drawGlyph(SWFFont $font, string $character [, int $size = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawLine":{"id":"swfshape.drawline","purpose":"Draws a line (relative)","prototype":"void SWFShape::drawLine(float $dx, float $dy)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::drawLineTo":{"id":"swfshape.drawlineto","purpose":"Draws a line","prototype":"void SWFShape::drawLineTo(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::movePen":{"id":"swfshape.movepen","purpose":"Moves the shape's pen (relative)","prototype":"void SWFShape::movePen(float $dx, float $dy)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::movePenTo":{"id":"swfshape.movepento","purpose":"Moves the shape's pen","prototype":"void SWFShape::movePenTo(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::setLeftFill":{"id":"swfshape.setleftfill","purpose":"Sets left rasterizing color","prototype":"void SWFShape::setLeftFill(SWFGradient $fill, int $red, int $green, int $blue [, int $a = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::setLine":{"id":"swfshape.setline","purpose":"Sets the shape's line style","prototype":"void SWFShape::setLine(SWFShape $shape, int $width, int $red, int $green, int $blue [, int $a = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFShape::setRightFill":{"id":"swfshape.setrightfill","purpose":"Sets right rasterizing color","prototype":"void SWFShape::setRightFill(SWFGradient $fill, int $red, int $green, int $blue [, int $a = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSound::__construct":{"id":"swfsound.construct","purpose":"Returns a new SWFSound object from given file","prototype":" SWFSound::__construct(string $filename [, int $flags = ''])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSoundInstance::loopCount":{"id":"swfsoundinstance.loopcount","purpose":"","prototype":"void SWFSoundInstance::loopCount(int $point)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSoundInstance::loopInPoint":{"id":"swfsoundinstance.loopinpoint","purpose":"","prototype":"void SWFSoundInstance::loopInPoint(int $point)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSoundInstance::loopOutPoint":{"id":"swfsoundinstance.loopoutpoint","purpose":"","prototype":"void SWFSoundInstance::loopOutPoint(int $point)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSoundInstance::noMultiple":{"id":"swfsoundinstance.nomultiple","purpose":"","prototype":"void SWFSoundInstance::noMultiple()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::add":{"id":"swfsprite.add","purpose":"Adds an object to a sprite","prototype":"void SWFSprite::add(object $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::__construct":{"id":"swfsprite.construct","purpose":"Creates a movie clip (a sprite)","prototype":" SWFSprite::__construct()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::labelFrame":{"id":"swfsprite.labelframe","purpose":"Labels frame","prototype":"void SWFSprite::labelFrame(string $label)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::nextFrame":{"id":"swfsprite.nextframe","purpose":"Moves to the next frame of the animation","prototype":"void SWFSprite::nextFrame()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::remove":{"id":"swfsprite.remove","purpose":"Removes an object to a sprite","prototype":"void SWFSprite::remove(object $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::setFrames":{"id":"swfsprite.setframes","purpose":"Sets the total number of frames in the animation","prototype":"void SWFSprite::setFrames(int $number)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::startSound":{"id":"swfsprite.startsound","purpose":"","prototype":"SWFSoundInstance SWFSprite::startSound(SWFSound $sount)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFSprite::stopSound":{"id":"swfsprite.stopsound","purpose":"","prototype":"void SWFSprite::stopSound(SWFSound $sount)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::addString":{"id":"swftext.addstring","purpose":"Draws a string","prototype":"void SWFText::addString(string $string)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::addUTF8String":{"id":"swftext.addutf8string","purpose":"Writes the given text into this SWFText object at the current pen position, using the current font, height, spacing, and color","prototype":"void SWFText::addUTF8String(string $text)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::__construct":{"id":"swftext.construct","purpose":"Creates a new SWFText object","prototype":" SWFText::__construct()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::getAscent":{"id":"swftext.getascent","purpose":"Returns the ascent of the current font at its current size, or 0 if not available","prototype":"float SWFText::getAscent()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::getDescent":{"id":"swftext.getdescent","purpose":"Returns the descent of the current font at its current size, or 0 if not available","prototype":"float SWFText::getDescent()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::getLeading":{"id":"swftext.getleading","purpose":"Returns the leading of the current font at its current size, or 0 if not available","prototype":"float SWFText::getLeading()","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::getUTF8Width":{"id":"swftext.getutf8width","purpose":"Calculates the width of the given string in this text objects current font and size","prototype":"float SWFText::getUTF8Width(string $string)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::getWidth":{"id":"swftext.getwidth","purpose":"Computes string's width","prototype":"float SWFText::getWidth(string $string)","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::moveTo":{"id":"swftext.moveto","purpose":"Moves the pen","prototype":"void SWFText::moveTo(float $x, float $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::setColor":{"id":"swftext.setcolor","purpose":"Sets the current text color","prototype":"void SWFText::setColor(int $red, int $green, int $blue [, int $a = 255])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::setFont":{"id":"swftext.setfont","purpose":"Sets the current font","prototype":"void SWFText::setFont(SWFFont $font)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::setHeight":{"id":"swftext.setheight","purpose":"Sets the current font height","prototype":"void SWFText::setHeight(float $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFText::setSpacing":{"id":"swftext.setspacing","purpose":"Sets the current font spacing","prototype":"void SWFText::setSpacing(float $spacing)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::addChars":{"id":"swftextfield.addchars","purpose":"Adds characters to a font that will be available within a textfield","prototype":"void SWFTextField::addChars(string $chars)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::addString":{"id":"swftextfield.addstring","purpose":"Concatenates the given string to the text field","prototype":"void SWFTextField::addString(string $string)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::align":{"id":"swftextfield.align","purpose":"Sets the text field alignment","prototype":"void SWFTextField::align(int $alignement)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::__construct":{"id":"swftextfield.construct","purpose":"Creates a text field object","prototype":" SWFTextField::__construct([int $flags = ''])","return":"","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setBounds":{"id":"swftextfield.setbounds","purpose":"Sets the text field width and height","prototype":"void SWFTextField::setBounds(float $width, float $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setColor":{"id":"swftextfield.setcolor","purpose":"Sets the color of the text field","prototype":"void SWFTextField::setColor(int $red, int $green, int $blue [, int $a = 255])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setFont":{"id":"swftextfield.setfont","purpose":"Sets the text field font","prototype":"void SWFTextField::setFont(SWFFont $font)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setHeight":{"id":"swftextfield.setheight","purpose":"Sets the font height of this text field font","prototype":"void SWFTextField::setHeight(float $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setIndentation":{"id":"swftextfield.setindentation","purpose":"Sets the indentation of the first line","prototype":"void SWFTextField::setIndentation(float $width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setLeftMargin":{"id":"swftextfield.setleftmargin","purpose":"Sets the left margin width of the text field","prototype":"void SWFTextField::setLeftMargin(float $width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setLineSpacing":{"id":"swftextfield.setlinespacing","purpose":"Sets the line spacing of the text field","prototype":"void SWFTextField::setLineSpacing(float $height)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setMargins":{"id":"swftextfield.setmargins","purpose":"Sets the margins width of the text field","prototype":"void SWFTextField::setMargins(float $left, float $right)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setName":{"id":"swftextfield.setname","purpose":"Sets the variable name","prototype":"void SWFTextField::setName(string $name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setPadding":{"id":"swftextfield.setpadding","purpose":"Sets the padding of this textfield","prototype":"void SWFTextField::setPadding(float $padding)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFTextField::setRightMargin":{"id":"swftextfield.setrightmargin","purpose":"Sets the right margin width of the text field","prototype":"void SWFTextField::setRightMargin(float $width)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.3.0, PECL ming SVN"},"SWFVideoStream::__construct":{"id":"swfvideostream.construct","purpose":"Returns a SWFVideoStream object","prototype":" SWFVideoStream::__construct([string $file = ''])","return":"","versions":"PHP 5.0.5-5.3.0, PHP 7, PECL ming SVN"},"SWFVideoStream::getNumFrames":{"id":"swfvideostream.getnumframes","purpose":"Returns the number of frames in the video","prototype":"int SWFVideoStream::getNumFrames()","return":"<p class=\"para\">   Returns the number of frames, as an integer  <\/p>","versions":"PHP 5.0.5-5.3.0, PHP 7, PECL ming SVN"},"SWFVideoStream::setDimension":{"id":"swfvideostream.setdimension","purpose":"Sets video dimension","prototype":"void SWFVideoStream::setDimension(int $x, int $y)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5.0.5-5.3.0, PHP 7, PECL ming SVN"},"PDF_activate_item":{"id":"function.pdf-activate-item","purpose":"Activate structure element or other content item","prototype":"bool PDF_activate_item(resource $pdfdoc, int $id)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_add_annotation":{"id":"function.pdf-add-annotation","purpose":"Add annotation [deprecated]","prototype":" PDF_add_annotation()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_add_bookmark":{"id":"function.pdf-add-bookmark","purpose":"Add bookmark for current page [deprecated]","prototype":" PDF_add_bookmark()","return":"","versions":"PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0"},"PDF_add_launchlink":{"id":"function.pdf-add-launchlink","purpose":"Add launch annotation for current page [deprecated]","prototype":"bool PDF_add_launchlink(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_add_locallink":{"id":"function.pdf-add-locallink","purpose":"Add link annotation for current page [deprecated]","prototype":"bool PDF_add_locallink(resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_add_nameddest":{"id":"function.pdf-add-nameddest","purpose":"Create named destination","prototype":"bool PDF_add_nameddest(resource $pdfdoc, string $name, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_add_note":{"id":"function.pdf-add-note","purpose":"Set annotation for current page [deprecated]","prototype":"bool PDF_add_note(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_add_outline":{"id":"function.pdf-add-outline","purpose":"Add bookmark for current page [deprecated]","prototype":" PDF_add_outline()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_add_pdflink":{"id":"function.pdf-add-pdflink","purpose":"Add file link annotation for current page [deprecated]","prototype":"bool PDF_add_pdflink(resource $pdfdoc, float $bottom_left_x, float $bottom_left_y, float $up_right_x, float $up_right_y, string $filename, int $page, string $dest)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_add_table_cell":{"id":"function.pdf-add-table-cell","purpose":"Add a cell to a new or existing table","prototype":"int PDF_add_table_cell(resource $pdfdoc, int $table, int $column, int $row, string $text, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_add_textflow":{"id":"function.pdf-add-textflow","purpose":"Create Textflow or add text to existing Textflow","prototype":"int PDF_add_textflow(resource $pdfdoc, int $textflow, string $text, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_add_thumbnail":{"id":"function.pdf-add-thumbnail","purpose":"Add thumbnail for current page","prototype":"bool PDF_add_thumbnail(resource $pdfdoc, int $image)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_add_weblink":{"id":"function.pdf-add-weblink","purpose":"Add weblink for current page [deprecated]","prototype":"bool PDF_add_weblink(resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, string $url)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_arc":{"id":"function.pdf-arc","purpose":"Draw a counterclockwise circular arc segment","prototype":"bool PDF_arc(resource $p, float $x, float $y, float $r, float $alpha, float $beta)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_arcn":{"id":"function.pdf-arcn","purpose":"Draw a clockwise circular arc segment","prototype":"bool PDF_arcn(resource $p, float $x, float $y, float $r, float $alpha, float $beta)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_attach_file":{"id":"function.pdf-attach-file","purpose":"Add file attachment for current page [deprecated]","prototype":"bool PDF_attach_file(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename, string $description, string $author, string $mimetype, string $icon)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_begin_document":{"id":"function.pdf-begin-document","purpose":"Create new PDF file","prototype":"int PDF_begin_document(resource $pdfdoc, string $filename, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_begin_font":{"id":"function.pdf-begin-font","purpose":"Start a Type 3 font definition","prototype":"bool PDF_begin_font(resource $pdfdoc, string $filename, float $a, float $b, float $c, float $d, float $e, float $f, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_begin_glyph":{"id":"function.pdf-begin-glyph","purpose":"Start glyph definition for Type 3 font","prototype":"bool PDF_begin_glyph(resource $pdfdoc, string $glyphname, float $wx, float $llx, float $lly, float $urx, float $ury)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_begin_item":{"id":"function.pdf-begin-item","purpose":"Open structure element or other content item","prototype":"int PDF_begin_item(resource $pdfdoc, string $tag, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_begin_layer":{"id":"function.pdf-begin-layer","purpose":"Start layer","prototype":"bool PDF_begin_layer(resource $pdfdoc, int $layer)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_begin_page_ext":{"id":"function.pdf-begin-page-ext","purpose":"Start new page","prototype":"bool PDF_begin_page_ext(resource $pdfdoc, float $width, float $height, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_begin_page":{"id":"function.pdf-begin-page","purpose":"Start new page [deprecated]","prototype":"bool PDF_begin_page(resource $pdfdoc, float $width, float $height)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_begin_pattern":{"id":"function.pdf-begin-pattern","purpose":"Start pattern definition","prototype":"int PDF_begin_pattern(resource $pdfdoc, float $width, float $height, float $xstep, float $ystep, int $painttype)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_begin_template_ext":{"id":"function.pdf-begin-template-ext","purpose":"Start template definition","prototype":"int PDF_begin_template_ext(resource $pdfdoc, float $width, float $height, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_begin_template":{"id":"function.pdf-begin-template","purpose":"Start template definition [deprecated]","prototype":"int PDF_begin_template(resource $pdfdoc, float $width, float $height)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_circle":{"id":"function.pdf-circle","purpose":"Draw a circle","prototype":"bool PDF_circle(resource $pdfdoc, float $x, float $y, float $r)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_clip":{"id":"function.pdf-clip","purpose":"Clip to current path","prototype":"bool PDF_clip(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_close_image":{"id":"function.pdf-close-image","purpose":"Close image","prototype":"bool PDF_close_image(resource $p, int $image)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_close_pdi_page":{"id":"function.pdf-close-pdi-page","purpose":"Close the page handle","prototype":"bool PDF_close_pdi_page(resource $p, int $page)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_close_pdi":{"id":"function.pdf-close-pdi","purpose":"Close the input PDF document [deprecated]","prototype":"bool PDF_close_pdi(resource $p, int $doc)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_close":{"id":"function.pdf-close","purpose":"Close pdf resource [deprecated]","prototype":"bool PDF_close(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_closepath_fill_stroke":{"id":"function.pdf-closepath-fill-stroke","purpose":"Close, fill and stroke current path","prototype":"bool PDF_closepath_fill_stroke(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_closepath_stroke":{"id":"function.pdf-closepath-stroke","purpose":"Close and stroke path","prototype":"bool PDF_closepath_stroke(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_closepath":{"id":"function.pdf-closepath","purpose":"Close current path","prototype":"bool PDF_closepath(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_concat":{"id":"function.pdf-concat","purpose":"Concatenate a matrix to the CTM","prototype":"bool PDF_concat(resource $p, float $a, float $b, float $c, float $d, float $e, float $f)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_continue_text":{"id":"function.pdf-continue-text","purpose":"Output text in next line","prototype":"bool PDF_continue_text(resource $p, string $text)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_create_3dview":{"id":"function.pdf-create-3dview","purpose":"Create 3D view","prototype":"int PDF_create_3dview(resource $pdfdoc, string $username, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_create_action":{"id":"function.pdf-create-action","purpose":"Create action for objects or events","prototype":"int PDF_create_action(resource $pdfdoc, string $type, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_annotation":{"id":"function.pdf-create-annotation","purpose":"Create rectangular annotation","prototype":"bool PDF_create_annotation(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_bookmark":{"id":"function.pdf-create-bookmark","purpose":"Create bookmark","prototype":"int PDF_create_bookmark(resource $pdfdoc, string $text, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_field":{"id":"function.pdf-create-field","purpose":"Create form field","prototype":"bool PDF_create_field(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $name, string $type, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_fieldgroup":{"id":"function.pdf-create-fieldgroup","purpose":"Create form field group","prototype":"bool PDF_create_fieldgroup(resource $pdfdoc, string $name, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_gstate":{"id":"function.pdf-create-gstate","purpose":"Create graphics state object","prototype":"int PDF_create_gstate(resource $pdfdoc, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_pvf":{"id":"function.pdf-create-pvf","purpose":"Create PDFlib virtual file","prototype":"bool PDF_create_pvf(resource $pdfdoc, string $filename, string $data, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_create_textflow":{"id":"function.pdf-create-textflow","purpose":"Create textflow object","prototype":"int PDF_create_textflow(resource $pdfdoc, string $text, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_curveto":{"id":"function.pdf-curveto","purpose":"Draw Bezier curve","prototype":"bool PDF_curveto(resource $p, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_define_layer":{"id":"function.pdf-define-layer","purpose":"Create layer definition","prototype":"int PDF_define_layer(resource $pdfdoc, string $name, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_delete_pvf":{"id":"function.pdf-delete-pvf","purpose":"Delete PDFlib virtual file","prototype":"int PDF_delete_pvf(resource $pdfdoc, string $filename)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_delete_table":{"id":"function.pdf-delete-table","purpose":"Delete table object","prototype":"bool PDF_delete_table(resource $pdfdoc, int $table, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_delete_textflow":{"id":"function.pdf-delete-textflow","purpose":"Delete textflow object","prototype":"bool PDF_delete_textflow(resource $pdfdoc, int $textflow)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_delete":{"id":"function.pdf-delete","purpose":"Delete PDFlib object","prototype":"bool PDF_delete(resource $pdfdoc)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_encoding_set_char":{"id":"function.pdf-encoding-set-char","purpose":"Add glyph name and\/or Unicode value","prototype":"bool PDF_encoding_set_char(resource $pdfdoc, string $encoding, int $slot, string $glyphname, int $uv)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_document":{"id":"function.pdf-end-document","purpose":"Close PDF file","prototype":"bool PDF_end_document(resource $pdfdoc, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_font":{"id":"function.pdf-end-font","purpose":"Terminate Type 3 font definition","prototype":"bool PDF_end_font(resource $pdfdoc)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_glyph":{"id":"function.pdf-end-glyph","purpose":"Terminate glyph definition for Type 3 font","prototype":"bool PDF_end_glyph(resource $pdfdoc)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_item":{"id":"function.pdf-end-item","purpose":"Close structure element or other content item","prototype":"bool PDF_end_item(resource $pdfdoc, int $id)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_layer":{"id":"function.pdf-end-layer","purpose":"Deactivate all active layers","prototype":"bool PDF_end_layer(resource $pdfdoc)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_page_ext":{"id":"function.pdf-end-page-ext","purpose":"Finish page","prototype":"bool PDF_end_page_ext(resource $pdfdoc, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_end_page":{"id":"function.pdf-end-page","purpose":"Finish page","prototype":"bool PDF_end_page(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_end_pattern":{"id":"function.pdf-end-pattern","purpose":"Finish pattern","prototype":"bool PDF_end_pattern(resource $p)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_end_template":{"id":"function.pdf-end-template","purpose":"Finish template","prototype":"bool PDF_end_template(resource $p)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_endpath":{"id":"function.pdf-endpath","purpose":"End current path","prototype":"bool PDF_endpath(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_fill_imageblock":{"id":"function.pdf-fill-imageblock","purpose":"Fill image block with variable data","prototype":"int PDF_fill_imageblock(resource $pdfdoc, int $page, string $blockname, int $image, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_fill_pdfblock":{"id":"function.pdf-fill-pdfblock","purpose":"Fill PDF block with variable data","prototype":"int PDF_fill_pdfblock(resource $pdfdoc, int $page, string $blockname, int $contents, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_fill_stroke":{"id":"function.pdf-fill-stroke","purpose":"Fill and stroke path","prototype":"bool PDF_fill_stroke(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_fill_textblock":{"id":"function.pdf-fill-textblock","purpose":"Fill text block with variable data","prototype":"int PDF_fill_textblock(resource $pdfdoc, int $page, string $blockname, string $text, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_fill":{"id":"function.pdf-fill","purpose":"Fill current path","prototype":"bool PDF_fill(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_findfont":{"id":"function.pdf-findfont","purpose":"Prepare font for later use [deprecated]","prototype":"int PDF_findfont(resource $p, string $fontname, string $encoding, int $embed)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_fit_image":{"id":"function.pdf-fit-image","purpose":"Place image or template","prototype":"bool PDF_fit_image(resource $pdfdoc, int $image, float $x, float $y, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_fit_pdi_page":{"id":"function.pdf-fit-pdi-page","purpose":"Place imported PDF page","prototype":"bool PDF_fit_pdi_page(resource $pdfdoc, int $page, float $x, float $y, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_fit_table":{"id":"function.pdf-fit-table","purpose":"Place table on page","prototype":"string PDF_fit_table(resource $pdfdoc, int $table, float $llx, float $lly, float $urx, float $ury, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_fit_textflow":{"id":"function.pdf-fit-textflow","purpose":"Format textflow in rectangular area","prototype":"string PDF_fit_textflow(resource $pdfdoc, int $textflow, float $llx, float $lly, float $urx, float $ury, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_fit_textline":{"id":"function.pdf-fit-textline","purpose":"Place single line of text","prototype":"bool PDF_fit_textline(resource $pdfdoc, string $text, float $x, float $y, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_get_apiname":{"id":"function.pdf-get-apiname","purpose":"Get name of unsuccessfull API function","prototype":"string PDF_get_apiname(resource $pdfdoc)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_get_buffer":{"id":"function.pdf-get-buffer","purpose":"Get PDF output buffer","prototype":"string PDF_get_buffer(resource $p)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_get_errmsg":{"id":"function.pdf-get-errmsg","purpose":"Get error text","prototype":"string PDF_get_errmsg(resource $pdfdoc)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_get_errnum":{"id":"function.pdf-get-errnum","purpose":"Get error number","prototype":"int PDF_get_errnum(resource $pdfdoc)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_get_font":{"id":"function.pdf-get-font","purpose":"Get font [deprecated]","prototype":" PDF_get_font()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_get_fontname":{"id":"function.pdf-get-fontname","purpose":"Get font name [deprecated]","prototype":" PDF_get_fontname()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_get_fontsize":{"id":"function.pdf-get-fontsize","purpose":"Font handling [deprecated]","prototype":" PDF_get_fontsize()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_get_image_height":{"id":"function.pdf-get-image-height","purpose":"Get image height [deprecated]","prototype":" PDF_get_image_height()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_get_image_width":{"id":"function.pdf-get-image-width","purpose":"Get image width [deprecated]","prototype":" PDF_get_image_width()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_get_majorversion":{"id":"function.pdf-get-majorversion","purpose":"Get major version number [deprecated]","prototype":"int PDF_get_majorversion()","return":"","versions":"PHP 4 >= 4.2.0, PECL pdflib >= 1.0.0"},"PDF_get_minorversion":{"id":"function.pdf-get-minorversion","purpose":"Get minor version number [deprecated]","prototype":"int PDF_get_minorversion()","return":"","versions":"PHP 4 >= 4.2.0, PECL pdflib >= 1.0.0"},"PDF_get_parameter":{"id":"function.pdf-get-parameter","purpose":"Get string parameter","prototype":"string PDF_get_parameter(resource $p, string $key, float $modifier)","return":"","versions":"PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0"},"PDF_get_pdi_parameter":{"id":"function.pdf-get-pdi-parameter","purpose":"Get PDI string parameter [deprecated]","prototype":"string PDF_get_pdi_parameter(resource $p, string $key, int $doc, int $page, int $reserved)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_get_pdi_value":{"id":"function.pdf-get-pdi-value","purpose":"Get PDI numerical parameter [deprecated]","prototype":"float PDF_get_pdi_value(resource $p, string $key, int $doc, int $page, int $reserved)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_get_value":{"id":"function.pdf-get-value","purpose":"Get numerical parameter","prototype":"float PDF_get_value(resource $p, string $key, float $modifier)","return":"","versions":"PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0"},"PDF_info_font":{"id":"function.pdf-info-font","purpose":"Query detailed information about a loaded font","prototype":"float PDF_info_font(resource $pdfdoc, int $font, string $keyword, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_info_matchbox":{"id":"function.pdf-info-matchbox","purpose":"Query matchbox information","prototype":"float PDF_info_matchbox(resource $pdfdoc, string $boxname, int $num, string $keyword)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_info_table":{"id":"function.pdf-info-table","purpose":"Retrieve table information","prototype":"float PDF_info_table(resource $pdfdoc, int $table, string $keyword)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_info_textflow":{"id":"function.pdf-info-textflow","purpose":"Query textflow state","prototype":"float PDF_info_textflow(resource $pdfdoc, int $textflow, string $keyword)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_info_textline":{"id":"function.pdf-info-textline","purpose":"Perform textline formatting and query metrics","prototype":"float PDF_info_textline(resource $pdfdoc, string $text, string $keyword, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_initgraphics":{"id":"function.pdf-initgraphics","purpose":"Reset graphic state","prototype":"bool PDF_initgraphics(resource $p)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_lineto":{"id":"function.pdf-lineto","purpose":"Draw a line","prototype":"bool PDF_lineto(resource $p, float $x, float $y)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_load_3ddata":{"id":"function.pdf-load-3ddata","purpose":"Load 3D model","prototype":"int PDF_load_3ddata(resource $pdfdoc, string $filename, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_load_font":{"id":"function.pdf-load-font","purpose":"Search and prepare font","prototype":"int PDF_load_font(resource $pdfdoc, string $fontname, string $encoding, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_load_iccprofile":{"id":"function.pdf-load-iccprofile","purpose":"Search and prepare ICC profile","prototype":"int PDF_load_iccprofile(resource $pdfdoc, string $profilename, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_load_image":{"id":"function.pdf-load-image","purpose":"Open image file","prototype":"int PDF_load_image(resource $pdfdoc, string $imagetype, string $filename, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_makespotcolor":{"id":"function.pdf-makespotcolor","purpose":"Make spot color","prototype":"int PDF_makespotcolor(resource $p, string $spotname)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_moveto":{"id":"function.pdf-moveto","purpose":"Set current point","prototype":"bool PDF_moveto(resource $p, float $x, float $y)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_new":{"id":"function.pdf-new","purpose":"Create PDFlib object","prototype":"resource PDF_new()","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_open_ccitt":{"id":"function.pdf-open-ccitt","purpose":"Open raw CCITT image [deprecated]","prototype":"int PDF_open_ccitt(resource $pdfdoc, string $filename, int $width, int $height, int $BitReverse, int $k, int $Blackls1)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_open_file":{"id":"function.pdf-open-file","purpose":"Create PDF file [deprecated]","prototype":"bool PDF_open_file(resource $p, string $filename)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_open_gif":{"id":"function.pdf-open-gif","purpose":"Open GIF image [deprecated]","prototype":" PDF_open_gif()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_open_image_file":{"id":"function.pdf-open-image-file","purpose":"Read image from file [deprecated]","prototype":"int PDF_open_image_file(resource $p, string $imagetype, string $filename, string $stringparam, int $intparam)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_open_image":{"id":"function.pdf-open-image","purpose":"Use image data [deprecated]","prototype":"int PDF_open_image(resource $p, string $imagetype, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_open_jpeg":{"id":"function.pdf-open-jpeg","purpose":"Open JPEG image [deprecated]","prototype":" PDF_open_jpeg()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_open_memory_image":{"id":"function.pdf-open-memory-image","purpose":"Open image created with PHP's image functions [not supported]","prototype":"int PDF_open_memory_image(resource $p, resource $image)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_open_pdi_document":{"id":"function.pdf-open-pdi-document","purpose":"Prepare a pdi document","prototype":"int PDF_open_pdi_document(resource $p, string $filename, string $optlist)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_open_pdi_page":{"id":"function.pdf-open-pdi-page","purpose":"Prepare a page","prototype":"int PDF_open_pdi_page(resource $p, int $doc, int $pagenumber, string $optlist)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_open_pdi":{"id":"function.pdf-open-pdi","purpose":"Open PDF file [deprecated]","prototype":"int PDF_open_pdi(resource $pdfdoc, string $filename, string $optlist, int $len)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_open_tiff":{"id":"function.pdf-open-tiff","purpose":"Open TIFF image [deprecated]","prototype":" PDF_open_tiff()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_pcos_get_number":{"id":"function.pdf-pcos-get-number","purpose":"Get value of pCOS path with type number or boolean","prototype":"float PDF_pcos_get_number(resource $p, int $doc, string $path)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_pcos_get_stream":{"id":"function.pdf-pcos-get-stream","purpose":"Get contents of pCOS path with type stream, fstream, or string","prototype":"string PDF_pcos_get_stream(resource $p, int $doc, string $optlist, string $path)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_pcos_get_string":{"id":"function.pdf-pcos-get-string","purpose":"Get value of pCOS path with type name, string, or boolean","prototype":"string PDF_pcos_get_string(resource $p, int $doc, string $path)","return":"","versions":"PECL pdflib >= 2.1.0"},"PDF_place_image":{"id":"function.pdf-place-image","purpose":"Place image on the page [deprecated]","prototype":"bool PDF_place_image(resource $pdfdoc, int $image, float $x, float $y, float $scale)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_place_pdi_page":{"id":"function.pdf-place-pdi-page","purpose":"Place PDF page [deprecated]","prototype":"bool PDF_place_pdi_page(resource $pdfdoc, int $page, float $x, float $y, float $sx, float $sy)","return":"","versions":"PHP 4 >= 4.0.6, PECL pdflib >= 1.0.0"},"PDF_process_pdi":{"id":"function.pdf-process-pdi","purpose":"Process imported PDF document","prototype":"int PDF_process_pdi(resource $pdfdoc, int $doc, int $page, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_rect":{"id":"function.pdf-rect","purpose":"Draw rectangle","prototype":"bool PDF_rect(resource $p, float $x, float $y, float $width, float $height)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_restore":{"id":"function.pdf-restore","purpose":"Restore graphics state","prototype":"bool PDF_restore(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_resume_page":{"id":"function.pdf-resume-page","purpose":"Resume page","prototype":"bool PDF_resume_page(resource $pdfdoc, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_rotate":{"id":"function.pdf-rotate","purpose":"Rotate coordinate system","prototype":"bool PDF_rotate(resource $p, float $phi)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_save":{"id":"function.pdf-save","purpose":"Save graphics state","prototype":"bool PDF_save(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_scale":{"id":"function.pdf-scale","purpose":"Scale coordinate system","prototype":"bool PDF_scale(resource $p, float $sx, float $sy)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_border_color":{"id":"function.pdf-set-border-color","purpose":"Set border color of annotations [deprecated]","prototype":"bool PDF_set_border_color(resource $p, float $red, float $green, float $blue)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_border_dash":{"id":"function.pdf-set-border-dash","purpose":"Set border dash style of annotations [deprecated]","prototype":"bool PDF_set_border_dash(resource $pdfdoc, float $black, float $white)","return":"","versions":"PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0"},"PDF_set_border_style":{"id":"function.pdf-set-border-style","purpose":"Set border style of annotations [deprecated]","prototype":"bool PDF_set_border_style(resource $pdfdoc, string $style, float $width)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_char_spacing":{"id":"function.pdf-set-char-spacing","purpose":"Set character spacing [deprecated]","prototype":" PDF_set_char_spacing()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_duration":{"id":"function.pdf-set-duration","purpose":"Set duration between pages [deprecated]","prototype":" PDF_set_duration()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_gstate":{"id":"function.pdf-set-gstate","purpose":"Activate graphics state object","prototype":"bool PDF_set_gstate(resource $pdfdoc, int $gstate)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_set_horiz_scaling":{"id":"function.pdf-set-horiz-scaling","purpose":"Set horizontal text scaling [deprecated]","prototype":" PDF_set_horiz_scaling()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_info_author":{"id":"function.pdf-set-info-author","purpose":"Fill the author document info field [deprecated]","prototype":" PDF_set_info_author()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_info_creator":{"id":"function.pdf-set-info-creator","purpose":"Fill the creator document info field [deprecated]","prototype":" PDF_set_info_creator()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_info_keywords":{"id":"function.pdf-set-info-keywords","purpose":"Fill the keywords document info field [deprecated]","prototype":" PDF_set_info_keywords()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_info_subject":{"id":"function.pdf-set-info-subject","purpose":"Fill the subject document info field [deprecated]","prototype":" PDF_set_info_subject()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_info_title":{"id":"function.pdf-set-info-title","purpose":"Fill the title document info field [deprecated]","prototype":" PDF_set_info_title()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_info":{"id":"function.pdf-set-info","purpose":"Fill document info field","prototype":"bool PDF_set_info(resource $p, string $key, string $value)","return":"","versions":"PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0"},"PDF_set_layer_dependency":{"id":"function.pdf-set-layer-dependency","purpose":"Define relationships among layers","prototype":"bool PDF_set_layer_dependency(resource $pdfdoc, string $type, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_set_leading":{"id":"function.pdf-set-leading","purpose":"Set distance between text lines [deprecated]","prototype":" PDF_set_leading()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_parameter":{"id":"function.pdf-set-parameter","purpose":"Set string parameter","prototype":"bool PDF_set_parameter(resource $p, string $key, string $value)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_text_matrix":{"id":"function.pdf-set-text-matrix","purpose":"Set text matrix [deprecated]","prototype":" PDF_set_text_matrix()","return":"","versions":"PHP 4 <= 4.0.4"},"PDF_set_text_pos":{"id":"function.pdf-set-text-pos","purpose":"Set text position","prototype":"bool PDF_set_text_pos(resource $p, float $x, float $y)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_text_rendering":{"id":"function.pdf-set-text-rendering","purpose":"Determine text rendering [deprecated]","prototype":" PDF_set_text_rendering()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_text_rise":{"id":"function.pdf-set-text-rise","purpose":"Set text rise [deprecated]","prototype":" PDF_set_text_rise()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_set_value":{"id":"function.pdf-set-value","purpose":"Set numerical parameter","prototype":"bool PDF_set_value(resource $p, string $key, float $value)","return":"","versions":"PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0"},"PDF_set_word_spacing":{"id":"function.pdf-set-word-spacing","purpose":"Set spacing between words [deprecated]","prototype":" PDF_set_word_spacing()","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setcolor":{"id":"function.pdf-setcolor","purpose":"Set fill and stroke color","prototype":"bool PDF_setcolor(resource $p, string $fstype, string $colorspace, float $c1, float $c2, float $c3, float $c4)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_setdash":{"id":"function.pdf-setdash","purpose":"Set simple dash pattern","prototype":"bool PDF_setdash(resource $pdfdoc, float $b, float $w)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setdashpattern":{"id":"function.pdf-setdashpattern","purpose":"Set dash pattern","prototype":"bool PDF_setdashpattern(resource $pdfdoc, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_setflat":{"id":"function.pdf-setflat","purpose":"Set flatness","prototype":"bool PDF_setflat(resource $pdfdoc, float $flatness)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setfont":{"id":"function.pdf-setfont","purpose":"Set font","prototype":"bool PDF_setfont(resource $pdfdoc, int $font, float $fontsize)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_setgray_fill":{"id":"function.pdf-setgray-fill","purpose":"Set fill color to gray [deprecated]","prototype":"bool PDF_setgray_fill(resource $p, float $g)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setgray_stroke":{"id":"function.pdf-setgray-stroke","purpose":"Set stroke color to gray [deprecated]","prototype":"bool PDF_setgray_stroke(resource $p, float $g)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setgray":{"id":"function.pdf-setgray","purpose":"Set color to gray [deprecated]","prototype":"bool PDF_setgray(resource $p, float $g)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setlinecap":{"id":"function.pdf-setlinecap","purpose":"Set linecap parameter","prototype":"bool PDF_setlinecap(resource $p, int $linecap)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setlinejoin":{"id":"function.pdf-setlinejoin","purpose":"Set linejoin parameter","prototype":"bool PDF_setlinejoin(resource $p, int $value)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setlinewidth":{"id":"function.pdf-setlinewidth","purpose":"Set line width","prototype":"bool PDF_setlinewidth(resource $p, float $width)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setmatrix":{"id":"function.pdf-setmatrix","purpose":"Set current transformation matrix","prototype":"bool PDF_setmatrix(resource $p, float $a, float $b, float $c, float $d, float $e, float $f)","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_setmiterlimit":{"id":"function.pdf-setmiterlimit","purpose":"Set miter limit","prototype":"bool PDF_setmiterlimit(resource $pdfdoc, float $miter)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setpolydash":{"id":"function.pdf-setpolydash","purpose":"Set complicated dash pattern [deprecated]","prototype":" PDF_setpolydash()","return":"","versions":"PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0"},"PDF_setrgbcolor_fill":{"id":"function.pdf-setrgbcolor-fill","purpose":"Set fill rgb color values [deprecated]","prototype":"bool PDF_setrgbcolor_fill(resource $p, float $red, float $green, float $blue)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setrgbcolor_stroke":{"id":"function.pdf-setrgbcolor-stroke","purpose":"Set stroke rgb color values [deprecated]","prototype":"bool PDF_setrgbcolor_stroke(resource $p, float $red, float $green, float $blue)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_setrgbcolor":{"id":"function.pdf-setrgbcolor","purpose":"Set fill and stroke rgb color values [deprecated]","prototype":"bool PDF_setrgbcolor(resource $p, float $red, float $green, float $blue)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_shading_pattern":{"id":"function.pdf-shading-pattern","purpose":"Define shading pattern","prototype":"int PDF_shading_pattern(resource $pdfdoc, int $shading, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_shading":{"id":"function.pdf-shading","purpose":"Define blend","prototype":"int PDF_shading(resource $pdfdoc, string $shtype, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_shfill":{"id":"function.pdf-shfill","purpose":"Fill area with shading","prototype":"bool PDF_shfill(resource $pdfdoc, int $shading)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_show_boxed":{"id":"function.pdf-show-boxed","purpose":"Output text in a box [deprecated]","prototype":"int PDF_show_boxed(resource $p, string $text, float $left, float $top, float $width, float $height, string $mode, string $feature)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_show_xy":{"id":"function.pdf-show-xy","purpose":"Output text at given position","prototype":"bool PDF_show_xy(resource $p, string $text, float $x, float $y)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_show":{"id":"function.pdf-show","purpose":"Output text at current position","prototype":"bool PDF_show(resource $pdfdoc, string $text)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_skew":{"id":"function.pdf-skew","purpose":"Skew the coordinate system","prototype":"bool PDF_skew(resource $p, float $alpha, float $beta)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_stringwidth":{"id":"function.pdf-stringwidth","purpose":"Return width of text","prototype":"float PDF_stringwidth(resource $p, string $text, int $font, float $fontsize)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_stroke":{"id":"function.pdf-stroke","purpose":"Stroke path","prototype":"bool PDF_stroke(resource $p)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_suspend_page":{"id":"function.pdf-suspend-page","purpose":"Suspend page","prototype":"bool PDF_suspend_page(resource $pdfdoc, string $optlist)","return":"","versions":"PECL pdflib >= 2.0.0"},"PDF_translate":{"id":"function.pdf-translate","purpose":"Set origin of coordinate system","prototype":"bool PDF_translate(resource $p, float $tx, float $ty)","return":"","versions":"PHP 4, PECL pdflib >= 1.0.0"},"PDF_utf16_to_utf8":{"id":"function.pdf-utf16-to-utf8","purpose":"Convert string from UTF-16 to UTF-8","prototype":"string PDF_utf16_to_utf8(resource $pdfdoc, string $utf16string)","return":"","versions":"PECL pdflib >= 2.0.3"},"PDF_utf32_to_utf16":{"id":"function.pdf-utf32-to-utf16","purpose":"Convert string from UTF-32 to UTF-16","prototype":"string PDF_utf32_to_utf16(resource $pdfdoc, string $utf32string, string $ordering)","return":"","versions":"PECL pdflib >= Unknown future"},"PDF_utf8_to_utf16":{"id":"function.pdf-utf8-to-utf16","purpose":"Convert string from UTF-8 to UTF-16","prototype":"string PDF_utf8_to_utf16(resource $pdfdoc, string $utf8string, string $ordering)","return":"","versions":"PECL pdflib >= 2.0.3"},"wkhtmltox\\PDF\\Converter::add":{"id":"wkhtmltox-pdf-converter.add","purpose":"Add an object for conversion","prototype":"void wkhtmltox\\PDF\\Converter::add(wkhtmltox\\PDF\\Object $object)","return":"","versions":"wkhtmltox >= 0.1.0"},"wkhtmltox\\PDF\\Converter::__construct":{"id":"wkhtmltox-pdf-converter.construct","purpose":"Create a new PDF converter","prototype":" wkhtmltox\\PDF\\Converter::__construct([array $settings = ''])","return":"","versions":"wkhtmltox >= 0.1.0"},"wkhtmltox\\PDF\\Converter::convert":{"id":"wkhtmltox-pdf-converter.convert","purpose":"Perform PDF conversion","prototype":"?string wkhtmltox\\PDF\\Converter::convert()","return":"<p class=\"para\">   Where the return value is used, it will be populated with the contents of the conversion buffer  <\/p>","versions":"wkhtmltox >= 0.1.0"},"wkhtmltox\\PDF\\Converter::getVersion":{"id":"wkhtmltox-pdf-converter.getversion","purpose":"Determine version of Converter","prototype":"string wkhtmltox\\PDF\\Converter::getVersion()","return":"<p class=\"para\">   Returns a version string  <\/p>","versions":"wkhtmltox >= 0.3.2"},"wkhtmltox\\PDF\\Object::__construct":{"id":"wkhtmltox-pdf-object.construct","purpose":"Create a new PDF Object","prototype":" wkhtmltox\\PDF\\Object::__construct(string $buffer [, array $settings = ''])","return":"","versions":"wkhtmltox >= 0.1.0"},"wkhtmltox\\Image\\Converter::__construct":{"id":"wkhtmltox-image-converter.construct","purpose":"Create a new Image converter","prototype":" wkhtmltox\\Image\\Converter::__construct([string $buffer = '' [, array $settings = '']])","return":"","versions":"wkhtmltox >= 0.1.0"},"wkhtmltox\\Image\\Converter::convert":{"id":"wkhtmltox-image-converter.convert","purpose":"Perform Image conversion","prototype":"?string wkhtmltox\\Image\\Converter::convert()","return":"<p class=\"para\">   Where the return value is used, it will be populated with the contents of the conversion buffer  <\/p>","versions":"wkhtmltox >= 0.1.0"},"wkhtmltox\\Image\\Converter::getVersion":{"id":"wkhtmltox-image-converter.getversion","purpose":"Determine version of Converter","prototype":"string wkhtmltox\\Image\\Converter::getVersion()","return":"<p class=\"para\">   Returns a version string  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This is not yet implemented by libwkhtmltox   <\/p>  <\/div>","versions":"wkhtmltox >= 0.3.2"},"ps_add_bookmark":{"id":"function.ps-add-bookmark","purpose":"Add bookmark to current page","prototype":"int ps_add_bookmark(resource $psdoc, string $text [, int $parent = '' [, int $open = '']])","return":"<p class=\"para\">   The returned value is a reference for the bookmark. It is only used if   the bookmark shall be used as a parent. The value is greater zero if   the function succeeds. In case of an error zero will   be returned.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_add_launchlink":{"id":"function.ps-add-launchlink","purpose":"Adds link which launches file","prototype":"bool ps_add_launchlink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_add_locallink":{"id":"function.ps-add-locallink","purpose":"Adds link to a page in the same document","prototype":"bool ps_add_locallink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_add_note":{"id":"function.ps-add-note","purpose":"Adds note to current page","prototype":"bool ps_add_note(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_add_pdflink":{"id":"function.ps-add-pdflink","purpose":"Adds link to a page in a second pdf document","prototype":"bool ps_add_pdflink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_add_weblink":{"id":"function.ps-add-weblink","purpose":"Adds link to a web location","prototype":"bool ps_add_weblink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_arc":{"id":"function.ps-arc","purpose":"Draws an arc counterclockwise","prototype":"bool ps_arc(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_arcn":{"id":"function.ps-arcn","purpose":"Draws an arc clockwise","prototype":"bool ps_arcn(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_begin_page":{"id":"function.ps-begin-page","purpose":"Start a new page","prototype":"bool ps_begin_page(resource $psdoc, float $width, float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_begin_pattern":{"id":"function.ps-begin-pattern","purpose":"Start a new pattern","prototype":"int ps_begin_pattern(resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype)","return":"<p class=\"para\">   The identifier of the pattern  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_begin_template":{"id":"function.ps-begin-template","purpose":"Start a new template","prototype":"int ps_begin_template(resource $psdoc, float $width, float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_circle":{"id":"function.ps-circle","purpose":"Draws a circle","prototype":"bool ps_circle(resource $psdoc, float $x, float $y, float $radius)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_clip":{"id":"function.ps-clip","purpose":"Clips drawing to current path","prototype":"bool ps_clip(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_close_image":{"id":"function.ps-close-image","purpose":"Closes image and frees memory","prototype":"void ps_close_image(resource $psdoc, int $imageid)","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_close":{"id":"function.ps-close","purpose":"Closes a PostScript document","prototype":"bool ps_close(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_closepath_stroke":{"id":"function.ps-closepath-stroke","purpose":"Closes and strokes path","prototype":"bool ps_closepath_stroke(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_closepath":{"id":"function.ps-closepath","purpose":"Closes path","prototype":"bool ps_closepath(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_continue_text":{"id":"function.ps-continue-text","purpose":"Continue text in next line","prototype":"bool ps_continue_text(resource $psdoc, string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_curveto":{"id":"function.ps-curveto","purpose":"Draws a curve","prototype":"bool ps_curveto(resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_delete":{"id":"function.ps-delete","purpose":"Deletes all resources of a PostScript document","prototype":"bool ps_delete(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_end_page":{"id":"function.ps-end-page","purpose":"End a page","prototype":"bool ps_end_page(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_end_pattern":{"id":"function.ps-end-pattern","purpose":"End a pattern","prototype":"bool ps_end_pattern(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_end_template":{"id":"function.ps-end-template","purpose":"End a template","prototype":"bool ps_end_template(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_fill_stroke":{"id":"function.ps-fill-stroke","purpose":"Fills and strokes the current path","prototype":"bool ps_fill_stroke(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_fill":{"id":"function.ps-fill","purpose":"Fills the current path","prototype":"bool ps_fill(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_findfont":{"id":"function.ps-findfont","purpose":"Loads a font","prototype":"int ps_findfont(resource $psdoc, string $fontname, string $encoding [, bool $embed = ''])","return":"<p class=\"para\">   Returns the identifier of the font or zero in case of an error. The   identifier is a positive number.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_get_buffer":{"id":"function.ps-get-buffer","purpose":"Fetches the full buffer containig the generated PS data","prototype":"string ps_get_buffer(resource $psdoc)","return":"","versions":"PECL ps >= 1.1.0"},"ps_get_parameter":{"id":"function.ps-get-parameter","purpose":"Gets certain parameters","prototype":"string ps_get_parameter(resource $psdoc, string $name [, float $modifier = ''])","return":"<p class=\"para\">   Returns the value of the parameter  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_get_value":{"id":"function.ps-get-value","purpose":"Gets certain values","prototype":"float ps_get_value(resource $psdoc, string $name [, float $modifier = ''])","return":"<p class=\"para\">   Returns the value of the parameter or <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_hyphenate":{"id":"function.ps-hyphenate","purpose":"Hyphenates a word","prototype":"array ps_hyphenate(resource $psdoc, string $text)","return":"<p class=\"para\">   An array of integers indicating the position of possible breaks in   the text  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.1"},"ps_include_file":{"id":"function.ps-include-file","purpose":"Reads an external file with raw PostScript code","prototype":"bool ps_include_file(resource $psdoc, string $file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.3.4"},"ps_lineto":{"id":"function.ps-lineto","purpose":"Draws a line","prototype":"bool ps_lineto(resource $psdoc, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_makespotcolor":{"id":"function.ps-makespotcolor","purpose":"Create spot color","prototype":"int ps_makespotcolor(resource $psdoc, string $name [, int $reserved = ''])","return":"<p class=\"para\">   The id of the new spot color or 0 in case of an error.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_moveto":{"id":"function.ps-moveto","purpose":"Sets current point","prototype":"bool ps_moveto(resource $psdoc, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_new":{"id":"function.ps-new","purpose":"Creates a new PostScript document object","prototype":"resource ps_new()","return":"<p class=\"para\">   Resource of PostScript document or <strong><code>FALSE<\/code><\/strong> on failure. The return value   is passed to all other functions as the first argument.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_open_file":{"id":"function.ps-open-file","purpose":"Opens a file for output","prototype":"bool ps_open_file(resource $psdoc [, string $filename = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_open_image_file":{"id":"function.ps-open-image-file","purpose":"Opens image from file","prototype":"int ps_open_image_file(resource $psdoc, string $type, string $filename [, string $stringparam = '' [, int $intparam = '']])","return":"<p class=\"para\">   Returns identifier of image or zero in case of an error. The identifier is   a positive number greater than 0.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_open_image":{"id":"function.ps-open-image","purpose":"Reads an image for later placement","prototype":"int ps_open_image(resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params)","return":"<p class=\"para\">   Returns identifier of image or zero in case of an error. The identifier is   a positive number greater than 0.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_open_memory_image":{"id":"function.ps-open-memory-image","purpose":"Takes an GD image and returns an image for placement in a PS document","prototype":"int ps_open_memory_image(resource $psdoc, int $gd)","return":"","versions":"PECL ps >= 1.1.0"},"ps_place_image":{"id":"function.ps-place-image","purpose":"Places image on the page","prototype":"bool ps_place_image(resource $psdoc, int $imageid, float $x, float $y, float $scale)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_rect":{"id":"function.ps-rect","purpose":"Draws a rectangle","prototype":"bool ps_rect(resource $psdoc, float $x, float $y, float $width, float $height)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_restore":{"id":"function.ps-restore","purpose":"Restore previously save context","prototype":"bool ps_restore(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_rotate":{"id":"function.ps-rotate","purpose":"Sets rotation factor","prototype":"bool ps_rotate(resource $psdoc, float $rot)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_save":{"id":"function.ps-save","purpose":"Save current context","prototype":"bool ps_save(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_scale":{"id":"function.ps-scale","purpose":"Sets scaling factor","prototype":"bool ps_scale(resource $psdoc, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_border_color":{"id":"function.ps-set-border-color","purpose":"Sets color of border for annotations","prototype":"bool ps_set_border_color(resource $psdoc, float $red, float $green, float $blue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_border_dash":{"id":"function.ps-set-border-dash","purpose":"Sets length of dashes for border of annotations","prototype":"bool ps_set_border_dash(resource $psdoc, float $black, float $white)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_border_style":{"id":"function.ps-set-border-style","purpose":"Sets border style of annotations","prototype":"bool ps_set_border_style(resource $psdoc, string $style, float $width)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_info":{"id":"function.ps-set-info","purpose":"Sets information fields of document","prototype":"bool ps_set_info(resource $p, string $key, string $val)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_parameter":{"id":"function.ps-set-parameter","purpose":"Sets certain parameters","prototype":"bool ps_set_parameter(resource $psdoc, string $name, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_text_pos":{"id":"function.ps-set-text-pos","purpose":"Sets position for text output","prototype":"bool ps_set_text_pos(resource $psdoc, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_set_value":{"id":"function.ps-set-value","purpose":"Sets certain values","prototype":"bool ps_set_value(resource $psdoc, string $name, float $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setcolor":{"id":"function.ps-setcolor","purpose":"Sets current color","prototype":"bool ps_setcolor(resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setdash":{"id":"function.ps-setdash","purpose":"Sets appearance of a dashed line","prototype":"bool ps_setdash(resource $psdoc, float $on, float $off)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setflat":{"id":"function.ps-setflat","purpose":"Sets flatness","prototype":"bool ps_setflat(resource $psdoc, float $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setfont":{"id":"function.ps-setfont","purpose":"Sets font to use for following output","prototype":"bool ps_setfont(resource $psdoc, int $fontid, float $size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setgray":{"id":"function.ps-setgray","purpose":"Sets gray value","prototype":"bool ps_setgray(resource $psdoc, float $gray)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setlinecap":{"id":"function.ps-setlinecap","purpose":"Sets appearance of line ends","prototype":"bool ps_setlinecap(resource $psdoc, int $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setlinejoin":{"id":"function.ps-setlinejoin","purpose":"Sets how contected lines are joined","prototype":"bool ps_setlinejoin(resource $psdoc, int $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setlinewidth":{"id":"function.ps-setlinewidth","purpose":"Sets width of a line","prototype":"bool ps_setlinewidth(resource $psdoc, float $width)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setmiterlimit":{"id":"function.ps-setmiterlimit","purpose":"Sets the miter limit","prototype":"bool ps_setmiterlimit(resource $psdoc, float $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_setoverprintmode":{"id":"function.ps-setoverprintmode","purpose":"Sets overprint mode","prototype":"bool ps_setoverprintmode(resource $psdoc, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.3.0"},"ps_setpolydash":{"id":"function.ps-setpolydash","purpose":"Sets appearance of a dashed line","prototype":"bool ps_setpolydash(resource $psdoc, float $arr)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_shading_pattern":{"id":"function.ps-shading-pattern","purpose":"Creates a pattern based on a shading","prototype":"int ps_shading_pattern(resource $psdoc, int $shadingid, string $optlist)","return":"<p class=\"para\">   The identifier of the pattern  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.3.0"},"ps_shading":{"id":"function.ps-shading","purpose":"Creates a shading for later use","prototype":"int ps_shading(resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist)","return":"<p class=\"para\">   Returns the identifier of the pattern  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.3.0"},"ps_shfill":{"id":"function.ps-shfill","purpose":"Fills an area with a shading","prototype":"bool ps_shfill(resource $psdoc, int $shadingid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.3.0"},"ps_show_boxed":{"id":"function.ps-show-boxed","purpose":"Output text in a box","prototype":"int ps_show_boxed(resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode [, string $feature = ''])","return":"<p class=\"para\">   Number of characters that could not be written.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_show_xy2":{"id":"function.ps-show-xy2","purpose":"Output text at position","prototype":"bool ps_show_xy2(resource $psdoc, string $text, int $len, float $xcoor, float $ycoor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_show_xy":{"id":"function.ps-show-xy","purpose":"Output text at given position","prototype":"bool ps_show_xy(resource $psdoc, string $text, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_show2":{"id":"function.ps-show2","purpose":"Output a text at current position","prototype":"bool ps_show2(resource $psdoc, string $text, int $len)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_show":{"id":"function.ps-show","purpose":"Output text","prototype":"bool ps_show(resource $psdoc, string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_string_geometry":{"id":"function.ps-string-geometry","purpose":"Gets geometry of a string","prototype":"array ps_string_geometry(resource $psdoc, string $text [, int $fontid = '' [, float $size = 0.0]])","return":"<p class=\"para\">   An array of the dimensions of a string. The element &#039;width&#039; contains the   width of the string as returned by <span class=\"function\">ps_stringwidth<\/span>. The   element &#039;descender&#039; contains the maximum descender and &#039;ascender&#039; the   maximum ascender of the string.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_stringwidth":{"id":"function.ps-stringwidth","purpose":"Gets width of a string","prototype":"float ps_stringwidth(resource $psdoc, string $text [, int $fontid = '' [, float $size = 0.0]])","return":"<p class=\"para\">   Width of a string in points.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_stroke":{"id":"function.ps-stroke","purpose":"Draws the current path","prototype":"bool ps_stroke(resource $psdoc)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"ps_symbol_name":{"id":"function.ps-symbol-name","purpose":"Gets name of a glyph","prototype":"string ps_symbol_name(resource $psdoc, int $ord [, int $fontid = ''])","return":"<p class=\"para\">   The name of a glyph in the given font.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_symbol_width":{"id":"function.ps-symbol-width","purpose":"Gets width of a glyph","prototype":"float ps_symbol_width(resource $psdoc, int $ord [, int $fontid = '' [, float $size = 0.0]])","return":"<p class=\"para\">   The width of a glyph in points.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_symbol":{"id":"function.ps-symbol","purpose":"Output a glyph","prototype":"bool ps_symbol(resource $psdoc, int $ord)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.2.0"},"ps_translate":{"id":"function.ps-translate","purpose":"Sets translation","prototype":"bool ps_translate(resource $psdoc, float $x, float $y)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ps >= 1.1.0"},"rpm_close":{"id":"function.rpm-close","purpose":"Closes an RPM file","prototype":"bool rpm_close(resource $rpmr)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rpmreader >= 0.1.0"},"rpm_get_tag":{"id":"function.rpm-get-tag","purpose":"Retrieves a header tag from an RPM file","prototype":"mixed rpm_get_tag(resource $rpmr, int $tagnum)","return":"<p class=\"para\">    The return value can be of various types depending on the    <code class=\"parameter\">tagnum<\/code> supplied to the function.  <\/p>","versions":"PECL rpmreader >= 0.1.0"},"rpm_is_valid":{"id":"function.rpm-is-valid","purpose":"Tests a filename for validity as an RPM file","prototype":"bool rpm_is_valid(string $filename)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rpmreader >= 0.1.0"},"rpm_open":{"id":"function.rpm-open","purpose":"Opens an RPM file","prototype":"resource rpm_open(string $filename)","return":"<p class=\"para\">    If the open succeeds, then <span class=\"function\">rpm_open<\/span> will    return a file pointer resource to the newly opened file.  On    error, the function will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL rpmreader >= 0.1.0"},"rpm_version":{"id":"function.rpm-version","purpose":"Returns a string representing the current version of the   rpmreader extension","prototype":"string rpm_version()","return":"<p class=\"para\">    <span class=\"function\">rpm_version<\/span> will return a string representing the     rpmreader version currently loaded in PHP.  <\/p>","versions":"PECL rpmreader >= 0.3.0"},"eio_busy":{"id":"function.eio-busy","purpose":"Artificially increase load. Could be useful in tests,  benchmarking","prototype":"resource eio_busy(int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_busy<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_cancel":{"id":"function.eio-cancel","purpose":"Cancels a request","prototype":"void eio_cancel(resource $req)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_chmod":{"id":"function.eio-chmod","purpose":"Change file\/direcrory permissions","prototype":"resource eio_chmod(string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_chmod<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_chown":{"id":"function.eio-chown","purpose":"Change file\/direcrory permissions","prototype":"resource eio_chown(string $path, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]]])","return":"<p class=\"para\">   <span class=\"function\">eio_chown<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_close":{"id":"function.eio-close","purpose":"Close file","prototype":"resource eio_close(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_close<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_custom":{"id":"function.eio-custom","purpose":"Execute custom request like any other eio_* call","prototype":"resource eio_custom(callable $execute, int $pri, callable $callback [, mixed $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_custom<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_dup2":{"id":"function.eio-dup2","purpose":"Duplicate a file descriptor","prototype":"resource eio_dup2(mixed $fd, mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_dup2<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_event_loop":{"id":"function.eio-event-loop","purpose":"Polls libeio until all requests proceeded","prototype":"bool eio_event_loop()","return":"<p class=\"para\">   <span class=\"function\">eio_event_loop<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_fallocate":{"id":"function.eio-fallocate","purpose":"Allows the caller to directly manipulate the allocated disk  space for a file","prototype":"resource eio_fallocate(mixed $fd, int $mode, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_fallocate<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_fchmod":{"id":"function.eio-fchmod","purpose":"Change file permissions","prototype":"resource eio_fchmod(mixed $fd, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_fchmod<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_fchown":{"id":"function.eio-fchown","purpose":"Change file ownership","prototype":"resource eio_fchown(mixed $fd, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]]])","return":"","versions":"PECL eio >= 0.0.1dev"},"eio_fdatasync":{"id":"function.eio-fdatasync","purpose":"Synchronize a file's in-core state with storage device","prototype":"resource eio_fdatasync(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_fdatasync<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_fstat":{"id":"function.eio-fstat","purpose":"Get file status","prototype":"resource eio_fstat(mixed $fd, int $pri, callable $callback [, mixed $data = ''])","return":"<p class=\"para\">   <span class=\"function\">eio_busy<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_fstatvfs":{"id":"function.eio-fstatvfs","purpose":"Get file system statistics","prototype":"resource eio_fstatvfs(mixed $fd, int $pri, callable $callback [, mixed $data = ''])","return":"<p class=\"para\">   <span class=\"function\">eio_fstatvfs<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_fsync":{"id":"function.eio-fsync","purpose":"Synchronize a file's in-core state with storage device","prototype":"resource eio_fsync(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_fsync<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_ftruncate":{"id":"function.eio-ftruncate","purpose":"Truncate a file","prototype":"resource eio_ftruncate(mixed $fd [, int $offset = '' [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]]])","return":"<p class=\"para\">   <span class=\"function\">eio_ftruncate<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_futime":{"id":"function.eio-futime","purpose":"Change file last access and modification times","prototype":"resource eio_futime(mixed $fd, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_futime<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_get_event_stream":{"id":"function.eio-get-event-stream","purpose":"Get stream representing a variable used in internal communications with libeio","prototype":"mixed eio_get_event_stream()","return":"<p class=\"para\">   <span class=\"function\">eio_get_event_stream<\/span> returns stream on success;   otherwise, <strong><code>NULL<\/code><\/strong>  <\/p>","versions":"PECL eio >= 0.3.1b"},"eio_get_last_error":{"id":"function.eio-get-last-error","purpose":"Returns string describing the last error associated with a request resource","prototype":"string eio_get_last_error(resource $req)","return":"<p class=\"para\">   <span class=\"function\">eio_get_last_error<\/span> returns string describing the last error associated with the request resource specified by <code class=\"parameter\">req<\/code>.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function is<em class=\"emphasis\">EXPERIMENTAL<\/em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.<\/p><\/div>","versions":"PECL eio >= 1.0.0"},"eio_grp_add":{"id":"function.eio-grp-add","purpose":"Adds a request to the request group","prototype":"void eio_grp_add(resource $grp, resource $req)","return":"<p class=\"para\">  <span class=\"function\">eio_grp_add<\/span> doesn&#039;t return a value.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_grp_cancel":{"id":"function.eio-grp-cancel","purpose":"Cancels a request group","prototype":"void eio_grp_cancel(resource $grp)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_grp_limit":{"id":"function.eio-grp-limit","purpose":"Set group limit","prototype":"void eio_grp_limit(resource $grp, int $limit)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_grp":{"id":"function.eio-grp","purpose":"Creates a request group","prototype":"resource eio_grp(callable $callback [, string $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_grp<\/span> returns request group resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_init":{"id":"function.eio-init","purpose":"(Re-)initialize Eio","prototype":"void eio_init()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL eio = 1.0.0"},"eio_link":{"id":"function.eio-link","purpose":"Create a hardlink for file","prototype":"resource eio_link(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_lstat":{"id":"function.eio-lstat","purpose":"Get file status","prototype":"resource eio_lstat(string $path, int $pri, callable $callback [, mixed $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_lstat<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_mkdir":{"id":"function.eio-mkdir","purpose":"Create directory","prototype":"resource eio_mkdir(string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_mkdir<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_mknod":{"id":"function.eio-mknod","purpose":"Create a special or ordinary file","prototype":"resource eio_mknod(string $path, int $mode, int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_mknod<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_nop":{"id":"function.eio-nop","purpose":"Does nothing, except go through the whole request cycle","prototype":"resource eio_nop([int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_nop<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_npending":{"id":"function.eio-npending","purpose":"Returns number of finished, but unhandled requests","prototype":"int eio_npending()","return":"<p class=\"para\">   <span class=\"function\">eio_npending<\/span> returns number of finished, but unhandled   requests.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_nready":{"id":"function.eio-nready","purpose":"Returns number of not-yet handled requests","prototype":"int eio_nready()","return":"<p class=\"para\">   <span class=\"function\">eio_nready<\/span> returns number of not-yet handled requests  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_nreqs":{"id":"function.eio-nreqs","purpose":"Returns number of requests to be processed","prototype":"int eio_nreqs()","return":"<p class=\"para\">   <span class=\"function\">eio_nreqs<\/span> returns number of requests to be processed.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_nthreads":{"id":"function.eio-nthreads","purpose":"Returns number of threads currently in use","prototype":"int eio_nthreads()","return":"<p class=\"para\">   <span class=\"function\">eio_nthreads<\/span> returns number of threads currently in   use.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_open":{"id":"function.eio-open","purpose":"Opens a file","prototype":"resource eio_open(string $path, int $flags, int $mode, int $pri, callable $callback [, mixed $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_open<\/span> returns file descriptor in   <code class=\"parameter\">result<\/code> argument of <code class=\"parameter\">callback<\/code>   on success; otherwise, <code class=\"parameter\">result<\/code> is equal to <strong><code>-1<\/code><\/strong>.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_poll":{"id":"function.eio-poll","purpose":"Can be to be called whenever there are pending requests that need finishing","prototype":"int eio_poll()","return":"<p class=\"para\">  If any request invocation returns a non-zero value, returns that value.  Otherwise, it returns <strong><code>0<\/code><\/strong>.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_read":{"id":"function.eio-read","purpose":"Read from a file descriptor at given offset","prototype":"resource eio_read(mixed $fd, int $length, int $offset, int $pri, callable $callback [, mixed $data = null])","return":"<p class=\"para\">  <span class=\"function\">eio_read<\/span> stores read bytes in  <code class=\"parameter\">result<\/code> argument of <code class=\"parameter\">callback<\/code>  function.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_readahead":{"id":"function.eio-readahead","purpose":"Perform file readahead into page cache","prototype":"resource eio_readahead(mixed $fd, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_readahead<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_readdir":{"id":"function.eio-readdir","purpose":"Reads through a whole directory","prototype":"resource eio_readdir(string $path, int $flags, int $pri, callable $callback [, string $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_readdir<\/span> returns request resource on success, or   <strong><code>FALSE<\/code><\/strong> on error. Sets <code class=\"parameter\">result<\/code> argument of   <code class=\"parameter\">callback<\/code> function according to   <code class=\"parameter\">flags<\/code>:  <\/p>  <p class=\"para\">   <dl>             <dt>      <strong><code>EIO_READDIR_DENTS<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">       <span class=\"function\">eio_readdir<\/span> flag. If specified, the result argument of the callback       becomes an array with the following keys:       <em>&#039;names&#039;<\/em> - array of directory names       <em>&#039;dents&#039;<\/em> - array of <em>struct       eio_dirent<\/em>-like arrays having the following keys each:       <em>&#039;name&#039;<\/em> - the directory name;       <em>&#039;type&#039;<\/em> - one of <em class=\"emphasis\">EIO_DT_*<\/em>       constants;       <em>&#039;inode&#039;<\/em> - the inode number, if available, otherwise       unspecified;      <\/span>     <\/dd>             <dt>      <strong><code>EIO_READDIR_DIRS_FIRST<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      When this flag is specified, the names will be returned in an order      where likely directories come first, in optimal stat order.      <\/span>     <\/dd>             <dt>      <strong><code>EIO_READDIR_STAT_ORDER<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      When this flag is specified, then the names will be returned in an order      suitable for <em>stat<\/em>&#039;ing each one. When planning to      <span class=\"function\">stat<\/span> all files in the given directory, the      returned order will likely be      fastest.      <\/span>     <\/dd>             <dt>      <strong><code>EIO_READDIR_FOUND_UNKNOWN<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      <\/span>     <\/dd>       <\/dl>  <\/p>  <p class=\"para\">Node types:   <dl>         <dt>      <strong><code>EIO_DT_UNKNOWN<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Unknown node type(very common). Further <span class=\"function\">stat<\/span> needed.      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_FIFO<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      FIFO node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_CHR<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_MPC<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Multiplexed char device (v7+coherent) node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_DIR<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Directory node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_NAM<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Xenix special named file node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_BLK<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_MPB<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Multiplexed block device (v7+coherent)      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_REG<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_NWK<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_CMP<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      HP-UX network special node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_LNK<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Link node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_SOCK<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Socket node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_DOOR<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Solaris door node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_WHT<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Node type      <\/span>     <\/dd>             <dt>      <strong><code>EIO_DT_MAX<\/code><\/strong>      (<span class=\"type\">integer<\/span>)     <\/dt>     <dd>      <span class=\"simpara\">      Highest node type value      <\/span>     <\/dd>          <\/dl>  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_readlink":{"id":"function.eio-readlink","purpose":"Read value of a symbolic link","prototype":"resource eio_readlink(string $path, int $pri, callable $callback [, string $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_readlink<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_realpath":{"id":"function.eio-realpath","purpose":"Get the canonicalized absolute pathname","prototype":"resource eio_realpath(string $path, int $pri, callable $callback [, string $data = null])","return":"<p class=\"para\">  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_rename":{"id":"function.eio-rename","purpose":"Change the name or location of a file","prototype":"resource eio_rename(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_rename<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_rmdir":{"id":"function.eio-rmdir","purpose":"Remove a directory","prototype":"resource eio_rmdir(string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_rmdir<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_seek":{"id":"function.eio-seek","purpose":"Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence","prototype":"resource eio_seek(mixed $fd, int $offset, int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_seek<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.5.0b"},"eio_sendfile":{"id":"function.eio-sendfile","purpose":"Transfer data between file descriptors","prototype":"resource eio_sendfile(mixed $out_fd, mixed $in_fd, int $offset, int $length [, int $pri = '' [, callable $callback = '' [, string $data = '']]])","return":"<p class=\"para\">   <span class=\"function\">eio_sendfile<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_set_max_idle":{"id":"function.eio-set-max-idle","purpose":"Set maximum number of idle threads","prototype":"void eio_set_max_idle(int $nthreads)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_set_max_parallel":{"id":"function.eio-set-max-parallel","purpose":"Set maximum parallel threads","prototype":"void eio_set_max_parallel(int $nthreads)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_set_max_poll_reqs":{"id":"function.eio-set-max-poll-reqs","purpose":"Set maximum number of requests processed in a poll","prototype":"void eio_set_max_poll_reqs(int $nreqs)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_set_max_poll_time":{"id":"function.eio-set-max-poll-time","purpose":"Set maximum poll time","prototype":"void eio_set_max_poll_time(float $nseconds)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_set_min_parallel":{"id":"function.eio-set-min-parallel","purpose":"Set minimum parallel thread number","prototype":"void eio_set_min_parallel(string $nthreads)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_stat":{"id":"function.eio-stat","purpose":"Get file status","prototype":"resource eio_stat(string $path, int $pri, callable $callback [, mixed $data = null])","return":"<p class=\"para\">   <span class=\"function\">eio_stat<\/span> returns request resource on success or   <strong><code>FALSE<\/code><\/strong> on error. On success assigns <code class=\"parameter\">result<\/code> argument of   <code class=\"parameter\">callback<\/code> to an array.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_statvfs":{"id":"function.eio-statvfs","purpose":"Get file system statistics","prototype":"resource eio_statvfs(string $path, int $pri, callable $callback [, mixed $data = ''])","return":"<p class=\"para\">  <span class=\"function\">eio_statvfs<\/span> returns request resource on success or  <strong><code>FALSE<\/code><\/strong> on error. On success assigns <code class=\"parameter\">result<\/code> argument of  <code class=\"parameter\">callback<\/code> to an array.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_symlink":{"id":"function.eio-symlink","purpose":"Create a symbolic link","prototype":"resource eio_symlink(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_symlink<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_sync_file_range":{"id":"function.eio-sync-file-range","purpose":"Sync a file segment with disk","prototype":"resource eio_sync_file_range(mixed $fd, int $offset, int $nbytes, int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_sync_file_range<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_sync":{"id":"function.eio-sync","purpose":"Commit buffer cache to disk","prototype":"resource eio_sync([int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_sync<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_syncfs":{"id":"function.eio-syncfs","purpose":"Calls Linux' syncfs syscall, if available","prototype":"resource eio_syncfs(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_syncfs<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_truncate":{"id":"function.eio-truncate","purpose":"Truncate a file","prototype":"resource eio_truncate(string $path [, int $offset = '' [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]]])","return":"<p class=\"para\">   <span class=\"function\">eio_busy<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_unlink":{"id":"function.eio-unlink","purpose":"Delete a name and possibly the file it refers to","prototype":"resource eio_unlink(string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_unlink<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_utime":{"id":"function.eio-utime","purpose":"Change file last access and modification times","prototype":"resource eio_utime(string $path, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]])","return":"<p class=\"para\">   <span class=\"function\">eio_utime<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"eio_write":{"id":"function.eio-write","purpose":"Write to file","prototype":"resource eio_write(mixed $fd, string $str [, int $length = '' [, int $offset = '' [, int $pri = EIO_PRI_DEFAULT [, callable $callback = null [, mixed $data = null]]]]])","return":"<p class=\"para\">   <span class=\"function\">eio_write<\/span> returns request resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL eio >= 0.0.1dev"},"Ev::backend":{"id":"ev.backend","purpose":"Returns an integer describing the backend used by libev","prototype":"int Ev::backend()","return":"<p class=\"para\">   Returns an integer(bit mask) describing the backend used by   <em class=\"emphasis\">libev<\/em>   .  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::depth":{"id":"ev.depth","purpose":"Returns recursion depth","prototype":"int Ev::depth()","return":"<p class=\"para\">   <span class=\"function\">ev_depth<\/span>   returns recursion depth of the default loop.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::embeddableBackends":{"id":"ev.embeddablebackends","purpose":"Returns the set of backends that are embeddable in other event loops","prototype":"void Ev::embeddableBackends()","return":"<p class=\"para\">   Returns a bit mask which can containing   <a href=\"class.ev.html#ev.constants.watcher-backends\" class=\"link\">backend flags<\/a>   combined using bitwise   <em class=\"emphasis\">OR<\/em>   operator.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::feedSignal":{"id":"ev.feedsignal","purpose":"Feed a signal event info Ev","prototype":"void Ev::feedSignal(int $signum)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::feedSignalEvent":{"id":"ev.feedsignalevent","purpose":"Feed signal event into the default loop","prototype":"void Ev::feedSignalEvent(int $signum)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":""},"Ev::iteration":{"id":"ev.iteration","purpose":"Return the number of times the default event loop has polled for new  events","prototype":"int Ev::iteration()","return":"<p class=\"para\">   Returns number of polls of the default event loop.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::now":{"id":"ev.now","purpose":"Returns the time when the last iteration of the default event  loop has started","prototype":"float Ev::now()","return":"<p class=\"para\">   Returns number of seconds(fractional) representing the time when the last   iteration of the default event loop has started.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::nowUpdate":{"id":"ev.nowupdate","purpose":"Establishes the current time by querying the kernel, updating the time    returned by Ev::now in the progress","prototype":"void Ev::nowUpdate()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::recommendedBackends":{"id":"ev.recommendedbackends","purpose":"Returns a bit mask of recommended backends for current  platform","prototype":"void Ev::recommendedBackends()","return":"<p class=\"para\">   Returns a bit mask which can containing   <a href=\"class.ev.html#ev.constants.watcher-backends\" class=\"link\">backend flags<\/a>   combined using bitwise   <em class=\"emphasis\">OR<\/em>   operator.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::resume":{"id":"ev.resume","purpose":"Resume previously suspended default event loop","prototype":"void Ev::resume()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::run":{"id":"ev.run","purpose":"Begin checking for events and calling callbacks for the default  loop","prototype":"void Ev::run([int $flags = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::sleep":{"id":"ev.sleep","purpose":"Block the process for the given number of seconds","prototype":"void Ev::sleep(float $seconds)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::stop":{"id":"ev.stop","purpose":"Stops the default event loop","prototype":"void Ev::stop([int $how = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::supportedBackends":{"id":"ev.supportedbackends","purpose":"Returns the set of backends supported by current libev  configuration","prototype":"void Ev::supportedBackends()","return":"<p class=\"para\">   Returns a bit mask which can containing   <a href=\"class.ev.html#ev.constants.watcher-backends\" class=\"link\">backend flags<\/a>   combined using bitwise   <em class=\"emphasis\">OR<\/em>   operator.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::suspend":{"id":"ev.suspend","purpose":"Suspend the default event loop","prototype":"void Ev::suspend()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::time":{"id":"ev.time","purpose":"Returns the current time in fractional seconds since the epoch","prototype":"float Ev::time()","return":"<p class=\"para\">   Returns the current time in fractional seconds since the epoch.  <\/p>","versions":"PECL ev >= 0.2.0"},"Ev::verify":{"id":"ev.verify","purpose":"Performs internal consistency checks(for debugging)","prototype":"void Ev::verify()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvCheck::__construct":{"id":"evcheck.construct","purpose":"Constructs the EvCheck watcher object","prototype":" EvCheck::__construct(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvCheck object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvCheck::createStopped":{"id":"evcheck.createstopped","purpose":"Create instance of a stopped EvCheck watcher","prototype":"object EvCheck::createStopped(string $callback [, string $data = '' [, string $priority = '']])","return":"<p class=\"para\">   Returns EvCheck object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvChild::__construct":{"id":"evchild.construct","purpose":"Constructs the EvChild watcher object","prototype":" EvChild::__construct(int $pid, bool $trace, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvChild object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvChild::createStopped":{"id":"evchild.createstopped","purpose":"Create instance of a stopped EvCheck watcher","prototype":"object EvChild::createStopped(int $pid, bool $trace, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\"\/>","versions":"PECL ev >= 0.2.0"},"EvChild::set":{"id":"evchild.set","purpose":"Configures the watcher","prototype":"void EvChild::set(int $pid, bool $trace)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvEmbed::__construct":{"id":"evembed.construct","purpose":"Constructs the EvEmbed object","prototype":" EvEmbed::__construct(object $other [, callable $callback = '' [, mixed $data = '' [, int $priority = '']]])","return":"<p class=\"para\">   Returns EvEmbed object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvEmbed::createStopped":{"id":"evembed.createstopped","purpose":"Create stopped EvEmbed watcher object","prototype":"void EvEmbed::createStopped(object $other [, callable $callback = '' [, mixed $data = '' [, int $priority = '']]])","return":"<p class=\"para\">   Returns stopped EvEmbed object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvEmbed::set":{"id":"evembed.set","purpose":"Configures the watcher","prototype":"void EvEmbed::set(object $other)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvEmbed::sweep":{"id":"evembed.sweep","purpose":"Make a single, non-blocking sweep over the embedded loop","prototype":"void EvEmbed::sweep()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvFork::__construct":{"id":"evfork.construct","purpose":"Constructs the EvFork watcher object","prototype":" EvFork::__construct(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvFork object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvFork::createStopped":{"id":"evfork.createstopped","purpose":"Creates a stopped instance of EvFork watcher class","prototype":"object EvFork::createStopped(string $callback [, string $data = '' [, string $priority = '']])","return":"<p class=\"para\">   Returns EvFork(stopped) object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvIdle::__construct":{"id":"evidle.construct","purpose":"Constructs the EvIdle watcher object","prototype":" EvIdle::__construct(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvIdle object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvIdle::createStopped":{"id":"evidle.createstopped","purpose":"Creates instance of a stopped EvIdle watcher object","prototype":"object EvIdle::createStopped(string $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvIdle object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvIo::__construct":{"id":"evio.construct","purpose":"Constructs EvIo watcher object","prototype":" EvIo::__construct(mixed $fd, int $events, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvIo object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvIo::createStopped":{"id":"evio.createstopped","purpose":"Create stopped EvIo watcher object","prototype":"EvIo EvIo::createStopped(mixed $fd, int $events, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvIo object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvIo::set":{"id":"evio.set","purpose":"Configures the watcher","prototype":"void EvIo::set(mixed $fd, int $events)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::backend":{"id":"evloop.backend","purpose":"Returns an integer describing the backend used by libev","prototype":"int EvLoop::backend()","return":"<p class=\"para\">   Returns an integer describing the backend used by libev. See    <span class=\"methodname\">Ev::backend<\/span>   .  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::check":{"id":"evloop.check","purpose":"Creates EvCheck object associated with the current event loop  instance","prototype":"EvCheck EvLoop::check(string $callback [, string $data = '' [, string $priority = '']])","return":"<p class=\"para\">   Returns EvCheck object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::child":{"id":"evloop.child","purpose":"Creates EvChild object associated with the current event loop","prototype":"EvChild EvLoop::child(string $pid, string $trace, string $callback [, string $data = '' [, string $priority = '']])","return":"<p class=\"para\">   Returns EvChild object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::__construct":{"id":"evloop.construct","purpose":"Constructs the event loop object","prototype":" EvLoop::__construct([int $flags = '' [, mixed $data = null [, float $io_interval = 0.0 [, float $timeout_interval = 0.0]]]])","return":"<p class=\"para\">   Returns new EvLoop object.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::defaultLoop":{"id":"evloop.defaultloop","purpose":"Returns or creates the default event loop","prototype":"EvLoop EvLoop::defaultLoop([int $flags = Ev::FLAG_AUTO [, mixed $data = null [, float $io_interval = 0. [, float $timeout_interval = 0.]]]])","return":"<p class=\"para\">   Returns EvLoop object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::embed":{"id":"evloop.embed","purpose":"Creates an instance of EvEmbed watcher associated  with the current EvLoop object","prototype":"EvEmbed EvLoop::embed(string $other [, string $callback = '' [, string $data = '' [, string $priority = '']]])","return":"<p class=\"para\">   Returns EvEmbed object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::fork":{"id":"evloop.fork","purpose":"Creates EvFork watcher object associated with the current event  loop instance","prototype":"EvFork EvLoop::fork(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvFork object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::idle":{"id":"evloop.idle","purpose":"Creates EvIdle watcher object associated with the current event  loop instance","prototype":"EvIdle EvLoop::idle(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvIdle object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::invokePending":{"id":"evloop.invokepending","purpose":"Invoke all pending watchers while resetting their pending state","prototype":"void EvLoop::invokePending()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::io":{"id":"evloop.io","purpose":"Create EvIo watcher object associated with the current event  loop instance","prototype":"EvIo EvLoop::io(mixed $fd, int $events, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvIo object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::loopFork":{"id":"evloop.loopfork","purpose":"Must be called after a fork","prototype":"void EvLoop::loopFork()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::now":{"id":"evloop.now","purpose":"Returns the current \"event loop time\"","prototype":"float EvLoop::now()","return":"<p class=\"para\">   Returns time of the event loop in (fractional) seconds.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::nowUpdate":{"id":"evloop.nowupdate","purpose":"Establishes the current time by querying the kernel, updating the time    returned by EvLoop::now in the progress","prototype":"void EvLoop::nowUpdate()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::periodic":{"id":"evloop.periodic","purpose":"Creates EvPeriodic watcher object associated with the current  event loop instance","prototype":"EvPeriodic EvLoop::periodic(float $offset, float $interval, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvPeriodic object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::prepare":{"id":"evloop.prepare","purpose":"Creates EvPrepare watcher object associated with the current  event loop instance","prototype":"EvPrepare EvLoop::prepare(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvPrepare object on success  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::resume":{"id":"evloop.resume","purpose":"Resume previously suspended default event loop","prototype":"void EvLoop::resume()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::run":{"id":"evloop.run","purpose":"Begin checking for events and calling callbacks for the loop","prototype":"void EvLoop::run([int $flags = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::signal":{"id":"evloop.signal","purpose":"Creates EvSignal watcher object associated with the current  event loop instance","prototype":"EvSignal EvLoop::signal(int $signum, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvSignal object on success  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::stat":{"id":"evloop.stat","purpose":"Creates EvStat watcher object associated with the current event  loop instance","prototype":"EvStat EvLoop::stat(string $path, float $interval, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvStat object on success  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::stop":{"id":"evloop.stop","purpose":"Stops the event loop","prototype":"void EvLoop::stop([int $how = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::suspend":{"id":"evloop.suspend","purpose":"Suspend the loop","prototype":"void EvLoop::suspend()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::timer":{"id":"evloop.timer","purpose":"Creates EvTimer watcher object associated with the current event  loop instance","prototype":"EvTimer EvLoop::timer(float $after, float $repeat, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvTimer object on success  <\/p>","versions":"PECL ev >= 0.2.0"},"EvLoop::verify":{"id":"evloop.verify","purpose":"Performs internal consistency checks(for debugging)","prototype":"void EvLoop::verify()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPeriodic::again":{"id":"evperiodic.again","purpose":"Simply stops and restarts the periodic watcher again","prototype":"void EvPeriodic::again()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPeriodic::at":{"id":"evperiodic.at","purpose":"Returns the absolute time that this  watcher is supposed to trigger next","prototype":"float EvPeriodic::at()","return":"<p class=\"para\">   Returns the absolute time this watcher is supposed to trigger next in   seconds.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPeriodic::__construct":{"id":"evperiodic.construct","purpose":"Constructs EvPeriodic watcher object","prototype":" EvPeriodic::__construct(float $offset, string $interval, callable $reschedule_cb, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvPeriodic object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPeriodic::createStopped":{"id":"evperiodic.createstopped","purpose":"Create a stopped EvPeriodic watcher","prototype":"EvPeriodic EvPeriodic::createStopped(float $offset, float $interval, callable $reschedule_cb, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvPeriodic watcher object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPeriodic::set":{"id":"evperiodic.set","purpose":"Configures the watcher","prototype":"void EvPeriodic::set(float $offset, float $interval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPrepare::__construct":{"id":"evprepare.construct","purpose":"Constructs EvPrepare watcher object","prototype":" EvPrepare::__construct(string $callback [, string $data = '' [, string $priority = '']])","return":"<p class=\"para\">   Returns EvPrepare object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvPrepare::createStopped":{"id":"evprepare.createstopped","purpose":"Creates a stopped instance of EvPrepare watcher","prototype":"EvPrepare EvPrepare::createStopped(callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Return EvPrepare object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvSignal::__construct":{"id":"evsignal.construct","purpose":"Constructs EvSignal watcher object","prototype":" EvSignal::__construct(int $signum, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvSignal object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvSignal::createStopped":{"id":"evsignal.createstopped","purpose":"Create stopped EvSignal watcher object","prototype":"EvSignal EvSignal::createStopped(int $signum, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvSignal object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvSignal::set":{"id":"evsignal.set","purpose":"Configures the watcher","prototype":"void EvSignal::set(int $signum)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvStat::attr":{"id":"evstat.attr","purpose":"Returns the values most recently detected by Ev","prototype":"array EvStat::attr()","return":"<p class=\"para\">   Returns array with the values most recently detect by Ev(without actual   <em>stat<\/em>   &#039;ing):   <table class=\"doctable table\">    <caption><strong>    List for item keys of the array returned by  <span class=\"methodname\">EvStat::attr<\/span>    <\/strong><\/caption>         <thead>      <tr>       <th>Key<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>        <strong><code>&#039;dev&#039;<\/code><\/strong>       <\/td>       <td>ID of device containing file<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;ino&#039;<\/code><\/strong>       <\/td>       <td>inode number<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;mode&#039;<\/code><\/strong>       <\/td>       <td>protection<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;nlink&#039;<\/code><\/strong>       <\/td>       <td>number of hard links<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;uid&#039;<\/code><\/strong>       <\/td>       <td>user ID of owner<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;size&#039;<\/code><\/strong>       <\/td>       <td>total size, in bytes<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;gid&#039;<\/code><\/strong>       <\/td>       <td>group ID of owner<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;rdev&#039;<\/code><\/strong>       <\/td>       <td>device ID (if special file)<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;blksize&#039;<\/code><\/strong>       <\/td>       <td>blocksize for file system I\/O<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;blocks&#039;<\/code><\/strong>       <\/td>       <td>number of 512B blocks allocated<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;atime&#039;<\/code><\/strong>       <\/td>       <td>time of last access<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;ctime&#039;<\/code><\/strong>       <\/td>       <td>time of last status change<\/td>      <\/tr>      <tr>       <td>        <strong><code>&#039;mtime&#039;<\/code><\/strong>       <\/td>       <td>time of last modification<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   See   <em>stat(2)<\/em>   man page for details.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvStat::__construct":{"id":"evstat.construct","purpose":"Constructs EvStat watcher object","prototype":" EvStat::__construct(string $path, float $interval, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvStat watcher object on succes.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvStat::createStopped":{"id":"evstat.createstopped","purpose":"Create a stopped EvStat watcher object","prototype":"void EvStat::createStopped(string $path, float $interval, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns a stopped EvStat watcher object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvStat::prev":{"id":"evstat.prev","purpose":"Returns the previous set of values returned by EvStat::attr","prototype":"void EvStat::prev()","return":"<p class=\"para\">   Returns an array with the same structure as the array returned by    <span class=\"methodname\">EvStat::attr<\/span>   . The array contains previously detected values.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvStat::set":{"id":"evstat.set","purpose":"Configures the watcher","prototype":"void EvStat::set(string $path, float $interval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvStat::stat":{"id":"evstat.stat","purpose":"Initiates the stat call","prototype":"bool EvStat::stat()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if   <var class=\"varname\">path<\/var>   exists. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvTimer::again":{"id":"evtimer.again","purpose":"Restarts the timer watcher","prototype":"void EvTimer::again()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvTimer::__construct":{"id":"evtimer.construct","purpose":"Constructs an EvTimer watcher object","prototype":" EvTimer::__construct(float $after, float $repeat, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvTimer object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvTimer::createStopped":{"id":"evtimer.createstopped","purpose":"Creates EvTimer stopped watcher object","prototype":"EvTimer EvTimer::createStopped(float $after, float $repeat, callable $callback [, mixed $data = '' [, int $priority = '']])","return":"<p class=\"para\">   Returns EvTimer watcher object on success.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvTimer::set":{"id":"evtimer.set","purpose":"Configures the watcher","prototype":"void EvTimer::set(float $after, float $repeat)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::clear":{"id":"evwatcher.clear","purpose":"Clear watcher pending status","prototype":"int EvWatcher::clear()","return":"<p class=\"para\">   In case if the watcher is pending, returns   <var class=\"varname\">revents<\/var>   bitset as if the   <a href=\"ev.watcher-callbacks.html\" class=\"link\">watcher callback<\/a>   had been invoked. Otherwise returns   <strong><code>0<\/code><\/strong>   .  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::__construct":{"id":"evwatcher.construct","purpose":"Abstract constructor of a watcher object","prototype":" EvWatcher::__construct()","return":"","versions":"PECL ev >= 0.2.0"},"EvWatcher::feed":{"id":"evwatcher.feed","purpose":"Feeds the given revents set into the event loop","prototype":"void EvWatcher::feed(int $revents)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::getLoop":{"id":"evwatcher.getloop","purpose":"Returns the loop responsible for the watcher","prototype":"EvLoop EvWatcher::getLoop()","return":"<p class=\"para\">   Returns   <span class=\"classname\">EvLoop<\/span>   event loop object responsible for the watcher.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::invoke":{"id":"evwatcher.invoke","purpose":"Invokes the watcher callback with the given received events bit  mask","prototype":"void EvWatcher::invoke(int $revents)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::keepalive":{"id":"evwatcher.keepalive","purpose":"Configures whether to keep the loop from returning","prototype":"bool EvWatcher::keepalive([bool $value = ''])","return":"<p class=\"para\">   Returns the previous state.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::setCallback":{"id":"evwatcher.setcallback","purpose":"Sets new callback for the watcher","prototype":"void EvWatcher::setCallback(callable $callback)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::start":{"id":"evwatcher.start","purpose":"Starts the watcher","prototype":"void EvWatcher::start()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"EvWatcher::stop":{"id":"evwatcher.stop","purpose":"Stops the watcher","prototype":"void EvWatcher::stop()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ev >= 0.2.0"},"expect_expectl":{"id":"function.expect-expectl","purpose":"Waits until the output from a process matches one  of the patterns, a specified time period has passed, or an EOF is seen","prototype":"int expect_expectl(resource $expect, array $cases [, array $match = ''])","return":"<p class=\"para\">   Returns value associated with the pattern that was matched.  <\/p>  <p class=\"para\">   On failure this function returns:   <a href=\"expect.constants.html#constants.expect.exp-eof\" class=\"link\"><strong><code>EXP_EOF<\/code><\/strong><\/a>,   <a href=\"expect.constants.html#constants.expect.exp-timeout\" class=\"link\"><strong><code>EXP_TIMEOUT<\/code><\/strong><\/a>   or   <a href=\"expect.constants.html#constants.expect.exp-fullbuffer\" class=\"link\"><strong><code>EXP_FULLBUFFER<\/code><\/strong><\/a>  <\/p>","versions":"PECL expect >= 0.1.0"},"expect_popen":{"id":"function.expect-popen","purpose":"Execute command via Bourne shell, and open the PTY stream to  the process","prototype":"resource expect_popen(string $command)","return":"<p class=\"para\">   Returns an open PTY stream to the processes <em>stdio<\/em>,   <em>stdout<\/em>, and <em>stderr<\/em>.  <\/p>  <p class=\"para\">   On failure this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL expect >= 0.1.0"},"event_add":{"id":"function.event-add","purpose":"Add an event to the set of monitored events","prototype":"bool event_add(resource $event [, int $timeout = -1])","return":"<p class=\"para\">   <span class=\"function\">event_add<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_base_free":{"id":"function.event-base-free","purpose":"Destroy event base","prototype":"void event_base_free(resource $event_base)","return":"","versions":"PECL libevent >= 0.0.1"},"event_base_loop":{"id":"function.event-base-loop","purpose":"Handle events","prototype":"int event_base_loop(resource $event_base [, int $flags = ''])","return":"<p class=\"para\">   <span class=\"function\">event_base_loop<\/span> returns 0 on success, -1 on error and   1 if no events were registered.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_base_loopbreak":{"id":"function.event-base-loopbreak","purpose":"Abort event loop","prototype":"bool event_base_loopbreak(resource $event_base)","return":"<p class=\"para\">   <span class=\"function\">event_base_loopbreak<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_base_loopexit":{"id":"function.event-base-loopexit","purpose":"Exit loop after a time","prototype":"bool event_base_loopexit(resource $event_base [, int $timeout = -1])","return":"<p class=\"para\">   <span class=\"function\">event_base_loopexit<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_base_new":{"id":"function.event-base-new","purpose":"Create and initialize new event base","prototype":"resource event_base_new()","return":"<p class=\"para\">   <span class=\"function\">event_base_new<\/span> returns valid event base resource on   success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_base_priority_init":{"id":"function.event-base-priority-init","purpose":"Set the number of event priority levels","prototype":"bool event_base_priority_init(resource $event_base, int $npriorities)","return":"<p class=\"para\">   <span class=\"function\">event_base_priority_init<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.2"},"event_base_reinit":{"id":"function.event-base-reinit","purpose":"Reinitialize the event base after a fork","prototype":"bool event_base_reinit(resource $event_base)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL libevent >= 0.1.0"},"event_base_set":{"id":"function.event-base-set","purpose":"Associate event base with an event","prototype":"bool event_base_set(resource $event, resource $event_base)","return":"<p class=\"para\">   <span class=\"function\">event_base_set<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_buffer_base_set":{"id":"function.event-buffer-base-set","purpose":"Associate buffered event with an event base","prototype":"bool event_buffer_base_set(resource $bevent, resource $event_base)","return":"<p class=\"para\">   <span class=\"function\">event_buffer_base_set<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_buffer_disable":{"id":"function.event-buffer-disable","purpose":"Disable a buffered event","prototype":"bool event_buffer_disable(resource $bevent, int $events)","return":"<p class=\"para\">   <span class=\"function\">event_buffer_disable<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_buffer_enable":{"id":"function.event-buffer-enable","purpose":"Enable a buffered event","prototype":"bool event_buffer_enable(resource $bevent, int $events)","return":"<p class=\"para\">   <span class=\"function\">event_buffer_enable<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_buffer_fd_set":{"id":"function.event-buffer-fd-set","purpose":"Change a buffered event file descriptor","prototype":"void event_buffer_fd_set(resource $bevent, resource $fd)","return":"","versions":"PECL libevent >= 0.0.1"},"event_buffer_free":{"id":"function.event-buffer-free","purpose":"Destroy buffered event","prototype":"void event_buffer_free(resource $bevent)","return":"","versions":"PECL libevent >= 0.0.1"},"event_buffer_new":{"id":"function.event-buffer-new","purpose":"Create new buffered event","prototype":"resource event_buffer_new(resource $stream, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg = ''])","return":"<p class=\"para\">   <span class=\"function\">event_buffer_new<\/span> returns new buffered event resource   on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_buffer_priority_set":{"id":"function.event-buffer-priority-set","purpose":"Assign a priority to a buffered event","prototype":"bool event_buffer_priority_set(resource $bevent, int $priority)","return":"<p class=\"para\">   <span class=\"function\">event_buffer_priority_set<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_buffer_read":{"id":"function.event-buffer-read","purpose":"Read data from a buffered event","prototype":"string event_buffer_read(resource $bevent, int $data_size)","return":"","versions":"PECL libevent >= 0.0.1"},"event_buffer_set_callback":{"id":"function.event-buffer-set-callback","purpose":"Set or reset callbacks for a buffered event","prototype":"bool event_buffer_set_callback(resource $event, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL libevent >= 0.0.4"},"event_buffer_timeout_set":{"id":"function.event-buffer-timeout-set","purpose":"Set read and write timeouts for a buffered event","prototype":"void event_buffer_timeout_set(resource $bevent, int $read_timeout, int $write_timeout)","return":"","versions":"PECL libevent >= 0.0.1"},"event_buffer_watermark_set":{"id":"function.event-buffer-watermark-set","purpose":"Set the watermarks for read and write events","prototype":"void event_buffer_watermark_set(resource $bevent, int $events, int $lowmark, int $highmark)","return":"","versions":"PECL libevent >= 0.0.1"},"event_buffer_write":{"id":"function.event-buffer-write","purpose":"Write data to a buffered event","prototype":"bool event_buffer_write(resource $bevent, string $data [, int $data_size = -1])","return":"<p class=\"para\">   <span class=\"function\">event_buffer_write<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_del":{"id":"function.event-del","purpose":"Remove an event from the set of monitored events","prototype":"bool event_del(resource $event)","return":"<p class=\"para\">   <span class=\"function\">event_del<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_free":{"id":"function.event-free","purpose":"Free event resource","prototype":"void event_free(resource $event)","return":"","versions":"PECL libevent >= 0.0.1"},"event_new":{"id":"function.event-new","purpose":"Create new event","prototype":"resource event_new()","return":"<p class=\"para\">   <span class=\"function\">event_new<\/span> returns a new event resource on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_priority_set":{"id":"function.event-priority-set","purpose":"Assign a priority to an event","prototype":"bool event_priority_set(resource $event, int $priority)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL libevent >= 0.0.5"},"event_set":{"id":"function.event-set","purpose":"Prepare an event","prototype":"bool event_set(resource $event, mixed $fd, int $events, mixed $callback [, mixed $arg = ''])","return":"<p class=\"para\">   <span class=\"function\">event_set<\/span> returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL libevent >= 0.0.1"},"event_timer_add":{"id":"function.event-timer-add","purpose":"Alias of event_add","prototype":" event_timer_add()","return":"","versions":"PECL libevent >= 0.0.2"},"event_timer_del":{"id":"function.event-timer-del","purpose":"Alias of event_del","prototype":" event_timer_del()","return":"","versions":"PECL libevent >= 0.0.2"},"event_timer_new":{"id":"function.event-timer-new","purpose":"Alias of event_new","prototype":" event_timer_new()","return":"","versions":"PECL libevent >= 0.0.2"},"event_timer_set":{"id":"function.event-timer-set","purpose":"Prepare a timer event","prototype":"bool event_timer_set(resource $event, callable $callback [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL libevent >= 0.0.2"},"pcntl_alarm":{"id":"function.pcntl-alarm","purpose":"Set an alarm clock for delivery of a signal","prototype":"int pcntl_alarm(int $seconds)","return":"<p class=\"para\">   Returns the time in seconds that any previously scheduled alarm had   remaining before it was to be delivered, or <em>0<\/em> if there   was no previously scheduled alarm.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"pcntl_async_signals":{"id":"function.pcntl-async-signals","purpose":"Enable\/disable asynchronous signal handling or return the old setting","prototype":"bool pcntl_async_signals([bool $on = ''])","return":"<p class=\"para\">   When used as getter (that is without the optional parameter) it returns   whether asynchronous signal handling is enabled. When used as setter (that is   with the optional parameter given), it returns whether asynchronous signal   handling was enabled <em class=\"emphasis\">before<\/em> the function call.  <\/p>","versions":"PHP 7 >= 7.1.0"},"pcntl_errno":{"id":"function.pcntl-errno","purpose":"Alias of pcntl_get_last_error","prototype":" pcntl_errno()","return":"","versions":"PHP 5 >= 5.3.4, PHP 7"},"pcntl_exec":{"id":"function.pcntl-exec","purpose":"Executes specified program in current process space","prototype":"void pcntl_exec(string $path [, array $args = '' [, array $envs = '']])","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"pcntl_fork":{"id":"function.pcntl-fork","purpose":"Forks the currently running process","prototype":"int pcntl_fork()","return":"<p class=\"para\">   On success, the PID of the child process is returned in the   parent&#039;s thread of execution, and a 0 is returned in the child&#039;s   thread of execution.  On failure, a -1 will be returned in the   parent&#039;s context, no child process will be created, and a PHP   error is raised.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_get_last_error":{"id":"function.pcntl-get-last-error","purpose":"Retrieve the error number set by the last pcntl function which failed","prototype":"int pcntl_get_last_error()","return":"<p class=\"para\">   Returns error code.  <\/p>","versions":"PHP 5 >= 5.3.4, PHP 7"},"pcntl_getpriority":{"id":"function.pcntl-getpriority","purpose":"Get the priority of any process","prototype":"int pcntl_getpriority([int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]])","return":"<p class=\"para\">   <span class=\"function\">pcntl_getpriority<\/span> returns the priority of the process   or <strong><code>FALSE<\/code><\/strong> on error.  A lower numerical value causes more favorable   scheduling.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"pcntl_setpriority":{"id":"function.pcntl-setpriority","purpose":"Change the priority of any process","prototype":"bool pcntl_setpriority(int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"pcntl_signal_dispatch":{"id":"function.pcntl-signal-dispatch","purpose":"Calls signal handlers for pending signals","prototype":"bool pcntl_signal_dispatch()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"pcntl_signal_get_handler":{"id":"function.pcntl-signal-get-handler","purpose":"Get the current handler for specified signal","prototype":"mixed pcntl_signal_get_handler(int $signo)","return":"<p class=\"para\">   This function may return an integer value that refers to <strong><code>SIG_DFL<\/code><\/strong> or <strong><code>SIG_IGN<\/code><\/strong>.  If you set a custom handler a string value containing the function name is returned.  <\/p>","versions":"PHP 7 >= 7.1.0"},"pcntl_signal":{"id":"function.pcntl-signal","purpose":"Installs a signal handler","prototype":"bool pcntl_signal(int $signo, callable|int $handler [, bool $restart_syscalls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_sigprocmask":{"id":"function.pcntl-sigprocmask","purpose":"Sets and retrieves blocked signals","prototype":"bool pcntl_sigprocmask(int $how, array $set [, array $oldset = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"pcntl_sigtimedwait":{"id":"function.pcntl-sigtimedwait","purpose":"Waits for signals, with a timeout","prototype":"int pcntl_sigtimedwait(array $set [, array $siginfo = '' [, int $seconds = '' [, int $nanoseconds = '']]])","return":"<p class=\"para\">   On success, <span class=\"function\">pcntl_sigtimedwait<\/span> returns a signal number.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"pcntl_sigwaitinfo":{"id":"function.pcntl-sigwaitinfo","purpose":"Waits for signals","prototype":"int pcntl_sigwaitinfo(array $set [, array $siginfo = ''])","return":"<p class=\"para\">   On success, <span class=\"function\">pcntl_sigwaitinfo<\/span> returns a signal number.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"pcntl_strerror":{"id":"function.pcntl-strerror","purpose":"Retrieve the system error message associated with the given errno","prototype":"string pcntl_strerror(int $errno)","return":"<p class=\"para\">   Returns error description on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.4, PHP 7"},"pcntl_wait":{"id":"function.pcntl-wait","purpose":"Waits on or returns the status of a forked child","prototype":"int pcntl_wait(int $status [, int $options = '' [, array $rusage = '']])","return":"<p class=\"para\">   <span class=\"function\">pcntl_wait<\/span> returns the process ID of the   child which exited, -1 on error or zero if WNOHANG was provided as an   option (on wait3-available systems) and no child was available.  <\/p>","versions":"PHP 5, PHP 7"},"pcntl_waitpid":{"id":"function.pcntl-waitpid","purpose":"Waits on or returns the status of a forked child","prototype":"int pcntl_waitpid(int $pid, int $status [, int $options = '' [, array $rusage = '']])","return":"<p class=\"para\">   <span class=\"function\">pcntl_waitpid<\/span> returns the process ID of the   child which exited, -1 on error or zero if <strong><code>WNOHANG<\/code><\/strong> was used and no   child was available  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_wexitstatus":{"id":"function.pcntl-wexitstatus","purpose":"Returns the return code of a terminated child","prototype":"int pcntl_wexitstatus(int $status)","return":"<p class=\"para\">   Returns the return code, as an integer.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_wifexited":{"id":"function.pcntl-wifexited","purpose":"Checks if status code represents a normal exit","prototype":"bool pcntl_wifexited(int $status)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the child status code represents a normal exit, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_wifsignaled":{"id":"function.pcntl-wifsignaled","purpose":"Checks whether the status code represents a termination due to a signal","prototype":"bool pcntl_wifsignaled(int $status)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the child process exited because of a signal which was   not caught, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_wifstopped":{"id":"function.pcntl-wifstopped","purpose":"Checks whether the child process is currently stopped","prototype":"bool pcntl_wifstopped(int $status)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the child process which caused the return is   currently stopped, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_wstopsig":{"id":"function.pcntl-wstopsig","purpose":"Returns the signal which caused the child to stop","prototype":"int pcntl_wstopsig(int $status)","return":"<p class=\"para\">   Returns the signal number.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"pcntl_wtermsig":{"id":"function.pcntl-wtermsig","purpose":"Returns the signal which caused the child to terminate","prototype":"int pcntl_wtermsig(int $status)","return":"<p class=\"para\">   Returns the signal number, as an integer.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"posix_access":{"id":"function.posix-access","purpose":"Determine accessibility of a file","prototype":"bool posix_access(string $file [, int $mode = POSIX_F_OK])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"posix_ctermid":{"id":"function.posix-ctermid","purpose":"Get path name of controlling terminal","prototype":"string posix_ctermid()","return":"<p class=\"para\">   Upon successful completion, returns <span class=\"type\">string<\/span> of the pathname to    the current controlling terminal.  Otherwise <strong><code>FALSE<\/code><\/strong> is returned and errno   is set, which can be checked with <span class=\"function\">posix_get_last_error<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_errno":{"id":"function.posix-errno","purpose":"Alias of posix_get_last_error","prototype":" posix_errno()","return":"","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"posix_get_last_error":{"id":"function.posix-get-last-error","purpose":"Retrieve the error number set by the last posix function that failed","prototype":"int posix_get_last_error()","return":"<p class=\"para\">   Returns the errno (error number) set by the last posix function that   failed.  If no errors exist, 0 is returned.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"posix_getcwd":{"id":"function.posix-getcwd","purpose":"Pathname of current directory","prototype":"string posix_getcwd()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> of the absolute pathname on success.     On error, returns <strong><code>FALSE<\/code><\/strong> and sets errno which can be checked with   <span class=\"function\">posix_get_last_error<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getegid":{"id":"function.posix-getegid","purpose":"Return the effective group ID of the current process","prototype":"int posix_getegid()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span> of the effective group ID.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_geteuid":{"id":"function.posix-geteuid","purpose":"Return the effective user ID of the current process","prototype":"int posix_geteuid()","return":"<p class=\"para\">   Returns the user id, as an <span class=\"type\">integer<\/span>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getgid":{"id":"function.posix-getgid","purpose":"Return the real group ID of the current process","prototype":"int posix_getgid()","return":"<p class=\"para\">   Returns the real group id, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getgrgid":{"id":"function.posix-getgrgid","purpose":"Return info about a group by group id","prototype":"array posix_getgrgid(int $gid)","return":"<p class=\"para\">   The array elements returned are:   <table class=\"doctable table\">    <caption><strong>The group information array<\/strong><\/caption>         <thead>      <tr>       <th>Element<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>        The name element contains the name of the group. This is        a short, usually less than 16 character &quot;handle&quot; of the        group, not the real, full name.       <\/td>      <\/tr>      <tr>       <td>passwd<\/td>       <td>        The passwd element contains the group&#039;s password in an        encrypted format. Often, for example on a system employing        &quot;shadow&quot; passwords, an asterisk is returned instead.       <\/td>      <\/tr>      <tr>       <td>gid<\/td>       <td>        Group ID, should be the same as the        <code class=\"parameter\">gid<\/code> parameter used when calling the        function, and hence redundant.       <\/td>      <\/tr>      <tr>       <td>members<\/td>       <td>        This consists of an <span class=\"type\">array<\/span> of        <span class=\"type\">string<\/span>&#039;s for all the members in the group.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getgrnam":{"id":"function.posix-getgrnam","purpose":"Return info about a group by name","prototype":"array posix_getgrnam(string $name)","return":"<p class=\"para\">   The array elements returned are:   <table class=\"doctable table\">    <caption><strong>The group information array<\/strong><\/caption>         <thead>      <tr>       <th>Element<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>        The name element contains the name of the group. This is        a short, usually less than 16 character &quot;handle&quot; of the        group, not the real, full name.  This should be the same as        the <code class=\"parameter\">name<\/code> parameter used when        calling the function, and hence redundant.       <\/td>      <\/tr>      <tr>       <td>passwd<\/td>       <td>        The passwd element contains the group&#039;s password in an        encrypted format. Often, for example on a system employing        &quot;shadow&quot; passwords, an asterisk is returned instead.       <\/td>      <\/tr>      <tr>       <td>gid<\/td>       <td>        Group ID of the group in numeric form.       <\/td>      <\/tr>      <tr>       <td>members<\/td>       <td>        This consists of an <span class=\"type\">array<\/span> of        <span class=\"type\">string<\/span>&#039;s for all the members in the group.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getgroups":{"id":"function.posix-getgroups","purpose":"Return the group set of the current process","prototype":"array posix_getgroups()","return":"<p class=\"para\">   Returns an array of integers containing the numeric group ids of the group   set of the current process.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getlogin":{"id":"function.posix-getlogin","purpose":"Return login name","prototype":"string posix_getlogin()","return":"<p class=\"para\">   Returns the login name of the user, as a <span class=\"type\">string<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getpgid":{"id":"function.posix-getpgid","purpose":"Get process group id for job control","prototype":"int posix_getpgid(int $pid)","return":"<p class=\"para\">   Returns the identifier, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getpgrp":{"id":"function.posix-getpgrp","purpose":"Return the current process group identifier","prototype":"int posix_getpgrp()","return":"<p class=\"para\">   Returns the identifier, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getpid":{"id":"function.posix-getpid","purpose":"Return the current process identifier","prototype":"int posix_getpid()","return":"<p class=\"para\">   Returns the identifier, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getppid":{"id":"function.posix-getppid","purpose":"Return the parent process identifier","prototype":"int posix_getppid()","return":"<p class=\"para\">   Returns the identifier, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getpwnam":{"id":"function.posix-getpwnam","purpose":"Return info about a user by username","prototype":"array posix_getpwnam(string $username)","return":"<p class=\"para\">   On success an array with the following elements is returned, else    <strong><code>FALSE<\/code><\/strong> is returned:   <table class=\"doctable table\">    <caption><strong>The user information array<\/strong><\/caption>         <thead>      <tr>       <th>Element<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>        The name element contains the username of the user. This is        a short, usually less than 16 character &quot;handle&quot; of the        user, not the real, full name. This should be the same as        the <code class=\"parameter\">username<\/code> parameter used when        calling the function, and hence redundant.       <\/td>      <\/tr>      <tr>       <td>passwd<\/td>       <td>        The passwd element contains the user&#039;s password in an        encrypted format. Often, for example on a system employing        &quot;shadow&quot; passwords, an asterisk is returned instead.       <\/td>      <\/tr>      <tr>       <td>uid<\/td>       <td>        User ID of the user in numeric form.       <\/td>      <\/tr>      <tr>       <td>gid<\/td>       <td>        The group ID of the user. Use the function        <span class=\"function\">posix_getgrgid<\/span> to resolve the group        name and a list of its members.       <\/td>      <\/tr>      <tr>       <td>gecos<\/td>       <td>        GECOS is an obsolete term that refers to the finger        information field on a Honeywell batch processing system.        The field, however, lives on, and its contents have been        formalized by POSIX. The field contains a comma separated        list containing the user&#039;s full name, office phone, office        number, and home phone number. On most systems, only the        user&#039;s full name is available.       <\/td>      <\/tr>      <tr>       <td>dir<\/td>       <td>        This element contains the absolute path to the home        directory of the user.       <\/td>      <\/tr>      <tr>       <td>shell<\/td>       <td>        The shell element contains the absolute path to the        executable of the user&#039;s default shell.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getpwuid":{"id":"function.posix-getpwuid","purpose":"Return info about a user by user id","prototype":"array posix_getpwuid(int $uid)","return":"<p class=\"para\">   Returns an associative array with the following elements:   <table class=\"doctable table\">    <caption><strong>The user information array<\/strong><\/caption>         <thead>      <tr>       <th>Element<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>        The name element contains the username of the user. This is        a short, usually less than 16 character &quot;handle&quot; of the        user, not the real, full name.       <\/td>      <\/tr>      <tr>       <td>passwd<\/td>       <td>        The passwd element contains the user&#039;s password in an        encrypted format. Often, for example on a system employing        &quot;shadow&quot; passwords, an asterisk is returned instead.       <\/td>      <\/tr>      <tr>       <td>uid<\/td>       <td>        User ID, should be the same as the        <code class=\"parameter\">uid<\/code> parameter used when calling the        function, and hence redundant.       <\/td>      <\/tr>      <tr>       <td>gid<\/td>       <td>        The group ID of the user. Use the function        <span class=\"function\">posix_getgrgid<\/span> to resolve the group        name and a list of its members.       <\/td>      <\/tr>      <tr>       <td>gecos<\/td>       <td>        GECOS is an obsolete term that refers to the finger        information field on a Honeywell batch processing system.        The field, however, lives on, and its contents have been        formalized by POSIX. The field contains a comma separated        list containing the user&#039;s full name, office phone, office        number, and home phone number. On most systems, only the        user&#039;s full name is available.       <\/td>      <\/tr>      <tr>       <td>dir<\/td>       <td>        This element contains the absolute path to the        home directory of the user.       <\/td>      <\/tr>      <tr>       <td>shell<\/td>       <td>        The shell element contains the absolute path to the        executable of the user&#039;s default shell.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getrlimit":{"id":"function.posix-getrlimit","purpose":"Return info about system resource limits","prototype":"array posix_getrlimit()","return":"<p class=\"para\">   Returns an associative <span class=\"type\">array<\/span> of elements for each   limit that is defined. Each limit has a soft and a hard limit.   <table class=\"doctable table\">    <caption><strong>List of possible limits returned<\/strong><\/caption>         <thead>      <tr>       <th>Limit name<\/th>       <th>Limit description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>core<\/td>       <td>        The maximum size of the core file.  When 0, not core files are        created.  When core files are larger than this size, they will        be truncated at this size.       <\/td>      <\/tr>      <tr>       <td>totalmem<\/td>       <td>        The maximum size of the memory of the process, in bytes.       <\/td>      <\/tr>      <tr>       <td>virtualmem<\/td>       <td>        The maximum size of the virtual memory for the process, in bytes.       <\/td>      <\/tr>       <tr>       <td>data<\/td>       <td>        The maximum size of the data segment for the process, in bytes.       <\/td>      <\/tr>      <tr>       <td>stack<\/td>       <td>        The maximum size of the process stack, in bytes.       <\/td>      <\/tr>      <tr>       <td>rss<\/td>       <td>        The maximum number of virtual pages resident in RAM       <\/td>      <\/tr>      <tr>       <td>maxproc<\/td>       <td>        The maximum number of processes that can be created for the        real user ID of the calling process.       <\/td>      <\/tr>      <tr>       <td>memlock<\/td>       <td>        The maximum number of bytes of memory that may be locked into RAM.       <\/td>      <\/tr>      <tr>       <td>cpu<\/td>       <td>        The amount of time the process is allowed to use the CPU.       <\/td>      <\/tr>      <tr>       <td>filesize<\/td>       <td>        The maximum size of the data segment for the process, in bytes.       <\/td>      <\/tr>      <tr>       <td>openfiles<\/td>       <td>        One more than the maximum number of open file descriptors.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getsid":{"id":"function.posix-getsid","purpose":"Get the current sid of the process","prototype":"int posix_getsid(int $pid)","return":"<p class=\"para\">   Returns the identifier, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_getuid":{"id":"function.posix-getuid","purpose":"Return the real user ID of the current process","prototype":"int posix_getuid()","return":"<p class=\"para\">   Returns the user id, as an <span class=\"type\">integer<\/span>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_initgroups":{"id":"function.posix-initgroups","purpose":"Calculate the group access list","prototype":"bool posix_initgroups(string $name, int $base_group_id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"posix_isatty":{"id":"function.posix-isatty","purpose":"Determine if a file descriptor is an interactive terminal","prototype":"bool posix_isatty(mixed $fd)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">fd<\/code> is an open descriptor connected   to a terminal and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_kill":{"id":"function.posix-kill","purpose":"Send a signal to a process","prototype":"bool posix_kill(int $pid, int $sig)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_mkfifo":{"id":"function.posix-mkfifo","purpose":"Create a fifo special file (a named pipe)","prototype":"bool posix_mkfifo(string $pathname, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_mknod":{"id":"function.posix-mknod","purpose":"Create a special or ordinary file (POSIX.1)","prototype":"bool posix_mknod(string $pathname, int $mode [, int $major = '' [, int $minor = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"posix_setegid":{"id":"function.posix-setegid","purpose":"Set the effective GID of the current process","prototype":"bool posix_setegid(int $gid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"posix_seteuid":{"id":"function.posix-seteuid","purpose":"Set the effective UID of the current process","prototype":"bool posix_seteuid(int $uid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"posix_setgid":{"id":"function.posix-setgid","purpose":"Set the GID of the current process","prototype":"bool posix_setgid(int $gid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_setpgid":{"id":"function.posix-setpgid","purpose":"Set process group id for job control","prototype":"bool posix_setpgid(int $pid, int $pgid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_setrlimit":{"id":"function.posix-setrlimit","purpose":"Set system resource limits","prototype":"bool posix_setrlimit(int $resource, int $softlimit, int $hardlimit)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"posix_setsid":{"id":"function.posix-setsid","purpose":"Make the current process a session leader","prototype":"int posix_setsid()","return":"<p class=\"para\">   Returns the session id, or -1 on errors.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_setuid":{"id":"function.posix-setuid","purpose":"Set the UID of the current process","prototype":"bool posix_setuid(int $uid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_strerror":{"id":"function.posix-strerror","purpose":"Retrieve the system error message associated with the given errno","prototype":"string posix_strerror(int $errno)","return":"<p class=\"para\">   Returns the error message, as a string.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"posix_times":{"id":"function.posix-times","purpose":"Get process times","prototype":"array posix_times()","return":"<p class=\"para\">   Returns a hash of strings with information about the current   process CPU usage. The indices of the hash are:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      ticks - the number of clock ticks that have elapsed since      reboot.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      utime - user time used by the current process.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      stime - system time used by the current process.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      cutime - user time used by current process and children.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      cstime - system time used by current process and children.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_ttyname":{"id":"function.posix-ttyname","purpose":"Determine terminal device name","prototype":"string posix_ttyname(mixed $fd)","return":"<p class=\"para\">   On success, returns a <span class=\"type\">string<\/span> of the absolute path of the   <code class=\"parameter\">fd<\/code>. On failure, returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"posix_uname":{"id":"function.posix-uname","purpose":"Get system name","prototype":"array posix_uname()","return":"<p class=\"para\">   Returns a hash of strings with information about the   system. The indices of the hash are   <ul class=\"itemizedlist\">    <li class=\"listitem\"><span class=\"simpara\">      sysname - operating system name (e.g. Linux)     <\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">      nodename - system name (e.g. valiant)     <\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">      release - operating system release (e.g. 2.2.10)     <\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">      version - operating system version (e.g. #4 Tue Jul 20      17:01:36 MEST 1999)     <\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">      machine - system architecture (e.g. i586)     <\/span><\/li>    <li class=\"listitem\"><span class=\"simpara\">      domainname - DNS domainname (e.g. example.com)     <\/span><\/li>   <\/ul>  <\/p>  <p class=\"para\">   domainname is a GNU extension and not part of POSIX.1, so this   field is only available on GNU systems or when using the GNU   libc.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"escapeshellarg":{"id":"function.escapeshellarg","purpose":"Escape a string to be used as a shell argument","prototype":"string escapeshellarg(string $arg)","return":"<p class=\"para\">   The escaped string.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"escapeshellcmd":{"id":"function.escapeshellcmd","purpose":"Escape shell metacharacters","prototype":"string escapeshellcmd(string $command)","return":"<p class=\"para\">   The escaped string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"exec":{"id":"function.exec","purpose":"Execute an external program","prototype":"string exec(string $command [, array $output = '' [, int $return_var = '']])","return":"<p class=\"para\">   The last line from the result of the command.  If you need to execute a    command and have all the data from the command passed directly back without    any interference, use the <span class=\"function\">passthru<\/span> function.  <\/p>  <p class=\"para\">   To get the output of the executed command, be sure to set and use the   <code class=\"parameter\">output<\/code> parameter.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"passthru":{"id":"function.passthru","purpose":"Execute an external program and display raw output","prototype":"void passthru(string $command [, int $return_var = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"proc_close":{"id":"function.proc-close","purpose":"Close a process opened by proc_open and return the exit code of that process","prototype":"int proc_close(resource $process)","return":"<p class=\"para\">   Returns the termination status of the process that was run. In case of    an error then <em>-1<\/em> is returned.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:  <p class=\"para\">  If PHP has been compiled with --enable-sigchild, the return value of this function is undefined. <\/p><\/p><\/blockquote>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"proc_get_status":{"id":"function.proc-get-status","purpose":"Get information about a process opened by proc_open","prototype":"array proc_get_status(resource $process)","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of collected information on success, and <strong><code>FALSE<\/code><\/strong>   on failure. The returned array contains the following elements:  <\/p>  <p class=\"para\">  <table class=\"doctable informaltable\">       <thead>     <tr><th>element<\/th><th>type<\/th><th>description<\/th><\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td>command<\/td>      <td><span class=\"type\">string<\/span><\/td>      <td>       The command string that was passed to <span class=\"function\">proc_open<\/span>.      <\/td>     <\/tr>     <tr>      <td>pid<\/td>      <td><span class=\"type\">int<\/span><\/td>      <td>process id<\/td>     <\/tr>     <tr>      <td>running<\/td>      <td><span class=\"type\">bool<\/span><\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if the process is still running, <strong><code>FALSE<\/code><\/strong> if it has       terminated.      <\/td>     <\/tr>     <tr>      <td>signaled<\/td>      <td><span class=\"type\">bool<\/span><\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if the child process has been terminated by       an uncaught signal. Always set to <strong><code>FALSE<\/code><\/strong> on Windows.      <\/td>     <\/tr>     <tr>      <td>stopped<\/td>      <td><span class=\"type\">bool<\/span><\/td>      <td>       <strong><code>TRUE<\/code><\/strong> if the child process has been stopped by a       signal. Always set to <strong><code>FALSE<\/code><\/strong> on Windows.      <\/td>     <\/tr>     <tr>      <td>exitcode<\/td>      <td><span class=\"type\">int<\/span><\/td>      <td>       The exit code returned by the process (which is only       meaningful if <em>running<\/em> is <strong><code>FALSE<\/code><\/strong>).       Only first call of this function return real value, next calls return       <em>-1<\/em>.      <\/td>     <\/tr>     <tr>      <td>termsig<\/td>      <td><span class=\"type\">int<\/span><\/td>      <td>       The number of the signal that caused the child process to terminate       its execution (only meaningful if <em>signaled<\/em> is <strong><code>TRUE<\/code><\/strong>).      <\/td>     <\/tr>     <tr>      <td>stopsig<\/td>      <td><span class=\"type\">int<\/span><\/td>      <td>       The number of the signal that caused the child process to stop its       execution (only meaningful if <em>stopped<\/em> is <strong><code>TRUE<\/code><\/strong>).      <\/td>     <\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"proc_nice":{"id":"function.proc-nice","purpose":"Change the priority of the current process","prototype":"bool proc_nice(int $increment)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If an error occurs, like the user lacks permission to change the priority,    an error of level <strong><code>E_WARNING<\/code><\/strong> is also generated.  <\/p>","versions":"PHP 5, PHP 7"},"proc_open":{"id":"function.proc-open","purpose":"Execute a command and open file pointers for input\/output","prototype":"resource proc_open(string $cmd, array $descriptorspec, array $pipes [, string $cwd = '' [, array $env = '' [, array $other_options = '']]])","return":"<p class=\"para\">   Returns a resource representing the process, which should be freed using   <span class=\"function\">proc_close<\/span> when you are finished with it. On failure   returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"proc_terminate":{"id":"function.proc-terminate","purpose":"Kills a process opened by proc_open","prototype":"bool proc_terminate(resource $process [, int $signal = 15])","return":"<p class=\"para\">   Returns the termination status of the process that was run.  <\/p>","versions":"PHP 5, PHP 7"},"shell_exec":{"id":"function.shell-exec","purpose":"Execute command via shell and return the complete output as a string","prototype":"string shell_exec(string $cmd)","return":"<p class=\"para\">   The output from the executed command or <strong><code>NULL<\/code><\/strong> if an error occurred or the   command produces no output.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This function can return <strong><code>NULL<\/code><\/strong> both when an error occurs or the program    produces no output. It is not possible to detect execution failures using    this function. <span class=\"function\">exec<\/span> should be used when access to the    program exit code is required.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"system":{"id":"function.system","purpose":"Execute an external program and display the output","prototype":"string system(string $command [, int $return_var = ''])","return":"<p class=\"para\">   Returns the last line of the command output on success, and <strong><code>FALSE<\/code><\/strong>   on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"Threaded::chunk":{"id":"threaded.chunk","purpose":"Manipulation","prototype":"array Threaded::chunk(int $size, bool $preserve)","return":"<p class=\"para\">  An array of items from the objects property table  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::count":{"id":"threaded.count","purpose":"Manipulation","prototype":"int Threaded::count()","return":"<p class=\"para\">    <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::extend":{"id":"threaded.extend","purpose":"Runtime Manipulation","prototype":"bool Threaded::extend(string $class)","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads >= 2.0.8"},"Threaded::from":{"id":"threaded.from","purpose":"Creation","prototype":"Threaded Threaded::from(Closure $run [, Closure $construct = '' [, array $args = '']])","return":"<p class=\"para\">  A new anonymous Threaded object  <\/p>","versions":"PECL pthreads >= 2.0.9"},"Threaded::getTerminationInfo":{"id":"threaded.getterminationinfo","purpose":"Error Detection","prototype":"array Threaded::getTerminationInfo()","return":"<p class=\"para\"> array containing the termination conditions of the referenced object  <\/p>","versions":"PECL pthreads < 3.0.0"},"Threaded::isRunning":{"id":"thread.isrunning","purpose":"State Detection","prototype":"bool Threaded::isRunning()","return":"<p class=\"para\">  A boolean indication of state  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">     A object is considered running while executing the run method    <\/p>   <\/p><\/blockquote>  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::isTerminated":{"id":"threaded.isterminated","purpose":"State Detection","prototype":"bool Threaded::isTerminated()","return":"<p class=\"para\">  A boolean indication of state  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::isWaiting":{"id":"threaded.iswaiting","purpose":"State Detection","prototype":"bool Threaded::isWaiting()","return":"<p class=\"para\">  A boolean indication of state  <\/p>","versions":"PECL pthreads < 3.0.0"},"Threaded::lock":{"id":"threaded.lock","purpose":"Synchronization","prototype":"bool Threaded::lock()","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads < 3.0.0"},"Threaded::merge":{"id":"threaded.merge","purpose":"Manipulation","prototype":"bool Threaded::merge(mixed $from [, bool $overwrite = ''])","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::notify":{"id":"threaded.notify","purpose":"Synchronization","prototype":"bool Threaded::notify()","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::notifyOne":{"id":"threaded.notifyone","purpose":"Synchronization","prototype":"bool Threaded::notifyOne()","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads >= 3.0.0"},"Threaded::pop":{"id":"threaded.pop","purpose":"Manipulation","prototype":"bool Threaded::pop()","return":"<p class=\"para\">  The last item from the objects property table  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::run":{"id":"threaded.run","purpose":"Execution","prototype":"void Threaded::run()","return":"<p class=\"para\">  The methods return value, if used, will be ignored  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::shift":{"id":"threaded.shift","purpose":"Manipulation","prototype":"mixed Threaded::shift()","return":"<p class=\"para\">  The first item from the objects property table  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::synchronized":{"id":"threaded.synchronized","purpose":"Synchronization","prototype":"mixed Threaded::synchronized(Closure $block [, mixed $... = ''])","return":"<p class=\"para\">  The return value from the block  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Threaded::unlock":{"id":"threaded.unlock","purpose":"Synchronization","prototype":"bool Threaded::unlock()","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads < 3.0.0"},"Threaded::wait":{"id":"threaded.wait","purpose":"Synchronization","prototype":"bool Threaded::wait([int $timeout = ''])","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::detach":{"id":"thread.detach","purpose":"Execution","prototype":"void Thread::detach()","return":"<p class=\"para\">     <\/p>","versions":"PECL pthreads < 3.0.0"},"Thread::getCreatorId":{"id":"thread.getcreatorid","purpose":"Identification","prototype":"int Thread::getCreatorId()","return":"<p class=\"para\">  A numeric identity  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::getCurrentThread":{"id":"thread.getcurrentthread","purpose":"Identification","prototype":"Thread Thread::getCurrentThread()","return":"<p class=\"para\"> An object representing the currently executing Thread  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::getCurrentThreadId":{"id":"thread.getcurrentthreadid","purpose":"Identification","prototype":"int Thread::getCurrentThreadId()","return":"<p class=\"para\">  A numeric identity  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::getThreadId":{"id":"thread.getthreadid","purpose":"Identification","prototype":"int Thread::getThreadId()","return":"<p class=\"para\">  A numeric identity  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::globally":{"id":"thread.globally","purpose":"Execution","prototype":"mixed Thread::globally()","return":"<p class=\"para\">  The return value of the Callable  <\/p>","versions":"PECL pthreads < 3.0.0"},"Thread::isJoined":{"id":"thread.isjoined","purpose":"State Detection","prototype":"bool Thread::isJoined()","return":"<p class=\"para\">  A boolean indication of state  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::isStarted":{"id":"thread.isstarted","purpose":"State Detection","prototype":"bool Thread::isStarted()","return":"<p class=\"para\">   boolean indication of state  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::join":{"id":"thread.join","purpose":"Synchronization","prototype":"bool Thread::join()","return":"<p class=\"para\">   A boolean indication of success  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Thread::kill":{"id":"thread.kill","purpose":"Execution","prototype":"void Thread::kill()","return":"<p class=\"para\">   A boolean indication of success  <\/p>","versions":"PECL pthreads < 3.0.0"},"Thread::start":{"id":"thread.start","purpose":"Execution","prototype":"bool Thread::start([int $options = ''])","return":"<p class=\"para\">  A boolean indication of success  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Worker::collect":{"id":"worker.collect","purpose":"Collect references to completed tasks","prototype":"int Worker::collect([Callable $collector = ''])","return":"<p class=\"para\">   The number of remaining tasks on the worker&#039;s stack to be collected.  <\/p>","versions":"PECL pthreads >= 3.0.0"},"Worker::getStacked":{"id":"worker.getstacked","purpose":"Gets the remaining stack size","prototype":"int Worker::getStacked()","return":"<p class=\"para\">   Returns the number of tasks currently waiting to be executed by the worker  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Worker::isShutdown":{"id":"worker.isshutdown","purpose":"State Detection","prototype":"bool Worker::isShutdown()","return":"<p class=\"para\">   Returns whether the worker has been shutdown or not.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Worker::isWorking":{"id":"worker.isworking","purpose":"State Detection","prototype":"bool Worker::isWorking()","return":"<p class=\"para\">  A boolean indication of state  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Worker::shutdown":{"id":"worker.shutdown","purpose":"Shutdown the worker","prototype":"bool Worker::shutdown()","return":"<p class=\"para\">   Whether the worker was successfully shutdown or not.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Worker::stack":{"id":"worker.stack","purpose":"Stacking work","prototype":"int Worker::stack(Threaded $work)","return":"<p class=\"para\">   The new size of the stack.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Worker::unstack":{"id":"worker.unstack","purpose":"Unstacking work","prototype":"int Worker::unstack()","return":"<p class=\"para\">   The new size of the stack.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Collectable::isGarbage":{"id":"collectable.isgarbage","purpose":"Determine whether an object has been marked as garbage","prototype":"bool Collectable::isGarbage()","return":"","versions":"PECL pthreads >= 2.0.8"},"Collectable::setGarbage":{"id":"collectable.setgarbage","purpose":"Mark an object as garbage","prototype":"void Collectable::setGarbage()","return":"","versions":"PECL pthreads < 3.0.0"},"Pool::collect":{"id":"pool.collect","purpose":"Collect references to completed tasks","prototype":"int Pool::collect([Callable $collector = ''])","return":"<p class=\"para\">   The number of remaining tasks in the pool to be collected.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Pool::__construct":{"id":"pool.construct","purpose":"Creates a new Pool of Workers","prototype":"Pool Pool::__construct(int $size [, string $class = '' [, array $ctor = '']])","return":"<p class=\"para\">   The new pool  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Pool::resize":{"id":"pool.resize","purpose":"Resize the Pool","prototype":"void Pool::resize(int $size)","return":"<p class=\"para\">  void  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Pool::shutdown":{"id":"pool.shutdown","purpose":"Shutdown all workers","prototype":"void Pool::shutdown()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Pool::submit":{"id":"pool.submit","purpose":"Submits an object for execution","prototype":"int Pool::submit(Threaded $task)","return":"<p class=\"para\"> the identifier of the Worker executing the object  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Pool::submitTo":{"id":"pool.submitTo","purpose":"Submits a task to a specific worker for execution","prototype":"int Pool::submitTo(int $worker, Threaded $task)","return":"<p class=\"para\">   The identifier of the worker that accepted the task.  <\/p>","versions":"PECL pthreads >= 2.0.0"},"Mutex::create":{"id":"mutex.create","purpose":"Create a Mutex","prototype":"int Mutex::create([bool $lock = ''])","return":"<p class=\"para\">A newly created and optionally locked Mutex handle<\/p>","versions":"PECL pthreads < 3.0.0"},"Mutex::destroy":{"id":"mutex.destroy","purpose":"Destroy Mutex","prototype":"bool Mutex::destroy(int $mutex)","return":"<p class=\"para\">A boolean indication of success<\/p>","versions":"PECL pthreads < 3.0.0"},"Mutex::lock":{"id":"mutex.lock","purpose":"Acquire Mutex","prototype":"bool Mutex::lock(int $mutex)","return":"<p class=\"para\">A boolean indication of success.<\/p>","versions":"PECL pthreads < 3.0.0"},"Mutex::trylock":{"id":"mutex.trylock","purpose":"Attempt to Acquire Mutex","prototype":"bool Mutex::trylock(int $mutex)","return":"<p class=\"para\"> A boolean indication of success.  <\/p>","versions":"PECL pthreads < 3.0.0"},"Mutex::unlock":{"id":"mutex.unlock","purpose":"Release Mutex","prototype":"bool Mutex::unlock(int $mutex [, bool $destroy = ''])","return":"<p class=\"para\">A boolean indication of success.<\/p>","versions":"PECL pthreads < 3.0.0"},"Cond::broadcast":{"id":"cond.broadcast","purpose":"Broadcast a Condition","prototype":"bool Cond::broadcast(int $condition)","return":"<p class=\"para\"> A boolean indication of success.  <\/p>","versions":"PECL pthreads < 3.0.0"},"Cond::create":{"id":"cond.create","purpose":"Create a Condition","prototype":"int Cond::create()","return":"<p class=\"para\">A handle to a Condition Variable<\/p>","versions":"PECL pthreads < 3.0.0"},"Cond::destroy":{"id":"cond.destroy","purpose":"Destroy a Condition","prototype":"bool Cond::destroy(int $condition)","return":"<p class=\"para\"> A boolean indication of success.  <\/p>","versions":"PECL pthreads < 3.0.0"},"Cond::signal":{"id":"cond.signal","purpose":"Signal a Condition","prototype":"bool Cond::signal(int $condition)","return":"<p class=\"para\">A boolean indication of success.<\/p>","versions":"PECL pthreads < 3.0.0"},"Cond::wait":{"id":"cond.wait","purpose":"Wait for Condition","prototype":"bool Cond::wait(int $condition, int $mutex [, int $timeout = ''])","return":"<p class=\"para\">A boolean indication of success.<\/p>","versions":"PECL pthreads < 3.0.0"},"pht\\Thread::addClassTask":{"id":"pht-thread.addClassTask","purpose":"Class threading","prototype":"void pht\\Thread::addClassTask(string $className [, mixed $...ctorArgs = ''])","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Thread::addFileTask":{"id":"pht-thread.addFileTask","purpose":"File threading","prototype":"void pht\\Thread::addFileTask(string $fileName [, mixed $...globals = ''])","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Thread::addFunctionTask":{"id":"pht-thread.addFunctionTask","purpose":"Function threading","prototype":"void pht\\Thread::addFunctionTask(callable $func [, mixed $...funcArgs = ''])","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Thread::join":{"id":"pht-thread.join","purpose":"Joins a thread","prototype":"void pht\\Thread::join()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Thread::start":{"id":"pht-thread.start","purpose":"Starts the new thread","prototype":"void pht\\Thread::start()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Thread::taskCount":{"id":"pht-thread.taskCount","purpose":"Gets a thread's task count","prototype":"int pht\\Thread::taskCount()","return":"<p class=\"para\">   The number of tasks remaining to be processed.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Runnable::run":{"id":"pht-runnable.run","purpose":"The entry point of a threaded class","prototype":"void pht\\Runnable::run()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\HashTable::lock":{"id":"pht-hashtable.lock","purpose":"Acquires the hash table's mutex lock","prototype":"void pht\\HashTable::lock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\HashTable::size":{"id":"pht-hashtable.size","purpose":"Gets the size of the hash table","prototype":"int pht\\HashTable::size()","return":"<p class=\"para\">   The size of the hash table.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\HashTable::unlock":{"id":"pht-hashtable.unlock","purpose":"Releases the hash table's mutex lock","prototype":"void pht\\HashTable::unlock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::__construct":{"id":"pht-vector.construct","purpose":"Vector creation","prototype":"Vector pht\\Vector::__construct([int $size = '' [, mixed $value = '']])","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::deleteAt":{"id":"pht-vector.deleteAt","purpose":"Deletes a value in the vector","prototype":"void pht\\Vector::deleteAt(int $offset)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::insertAt":{"id":"pht-vector.insertAt","purpose":"Inserts a value into the vector","prototype":"void pht\\Vector::insertAt(mixed $value, int $offset)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::lock":{"id":"pht-vector.lock","purpose":"Acquires the vector's mutex lock","prototype":"void pht\\Vector::lock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::pop":{"id":"pht-vector.pop","purpose":"Pops a value to the vector","prototype":"mixed pht\\Vector::pop()","return":"<p class=\"para\">   The value from the end of the vector.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::push":{"id":"pht-vector.push","purpose":"Pushes a value to the vector","prototype":"void pht\\Vector::push(mixed $value)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::resize":{"id":"pht-vector.resize","purpose":"Resizes a vector","prototype":"void pht\\Vector::resize(int $size [, mixed $value = ''])","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::shift":{"id":"pht-vector.shift","purpose":"Shifts a value from the vector","prototype":"mixed pht\\Vector::shift()","return":"<p class=\"para\">   The value from the front of the vector.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::size":{"id":"pht-vector.size","purpose":"Gets the size of the vector","prototype":"int pht\\Vector::size()","return":"<p class=\"para\">   The size of the vector.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::unlock":{"id":"pht-vector.unlock","purpose":"Releases the vector's mutex lock","prototype":"void pht\\Vector::unlock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::unshift":{"id":"pht-vector.unshift","purpose":"Unshifts a value to the vector front","prototype":"void pht\\Vector::unshift(mixed $value)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Vector::updateAt":{"id":"pht-vector.updateAt","purpose":"Updates a value in the vector","prototype":"void pht\\Vector::updateAt(mixed $value, int $offset)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Queue::front":{"id":"pht-queue.front","purpose":"Returns the first value from a queue","prototype":"mixed pht\\Queue::front()","return":"<p class=\"para\">   The value on the front of the queue.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Queue::lock":{"id":"pht-queue.lock","purpose":"Acquires the queue's mutex lock","prototype":"void pht\\Queue::lock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Queue::pop":{"id":"pht-queue.pop","purpose":"Pops a value off of the front of a queue","prototype":"mixed pht\\Queue::pop()","return":"<p class=\"para\">   The value removed from the queue.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Queue::push":{"id":"pht-queue.push","purpose":"Pushes a value to the end of a queue","prototype":"void pht\\Queue::push(mixed $value)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Queue::size":{"id":"pht-queue.size","purpose":"Gets the size of the queue","prototype":"int pht\\Queue::size()","return":"<p class=\"para\">   The size of the queue.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Queue::unlock":{"id":"pht-queue.unlock","purpose":"Releases the queue's mutex lock","prototype":"void pht\\Queue::unlock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::__construct":{"id":"pht-atomicinteger.construct","purpose":"AtomicInteger creation","prototype":"AtomicInteger pht\\AtomicInteger::__construct([int $value = ''])","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::dec":{"id":"pht-atomicinteger.dec","purpose":"Decrements the atomic integer's value by one","prototype":"void pht\\AtomicInteger::dec()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::get":{"id":"pht-atomicinteger.get","purpose":"Gets the atomic integer's value","prototype":"int pht\\AtomicInteger::get()","return":"<p class=\"para\">   The current integer value of the atomic integer.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::inc":{"id":"pht-atomicinteger.inc","purpose":"Increments the atomic integer's value by one","prototype":"void pht\\AtomicInteger::inc()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::lock":{"id":"pht-atomicinteger.lock","purpose":"Acquires the atomic integer's mutex lock","prototype":"void pht\\AtomicInteger::lock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::set":{"id":"pht-atomicinteger.set","purpose":"Sets the atomic integer's value","prototype":"void pht\\AtomicInteger::set(int $value)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\AtomicInteger::unlock":{"id":"pht-atomicinteger.unlock","purpose":"Releases the atomic integer's mutex lock","prototype":"void pht\\AtomicInteger::unlock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Threaded::lock":{"id":"pht-threaded.lock","purpose":"Acquires the mutex lock","prototype":"void pht\\Threaded::lock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"pht\\Threaded::unlock":{"id":"pht-threaded.unlock","purpose":"Releases the mutex lock","prototype":"void pht\\Threaded::unlock()","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL pht >= 0.0.1"},"ftok":{"id":"function.ftok","purpose":"Convert a pathname and a project identifier to a System V IPC key","prototype":"int ftok(string $pathname, string $proj)","return":"<p class=\"para\">   On success the return value will be the created key value, otherwise   <em>-1<\/em> is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"msg_get_queue":{"id":"function.msg-get-queue","purpose":"Create or attach to a message queue","prototype":"resource msg_get_queue(int $key [, int $perms = 0666])","return":"<p class=\"para\">   Returns a resource handle that can be used to access the System V message queue.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"msg_queue_exists":{"id":"function.msg-queue-exists","purpose":"Check whether a message queue exists","prototype":"bool msg_queue_exists(int $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"msg_receive":{"id":"function.msg-receive","purpose":"Receive a message from a message queue","prototype":"bool msg_receive(resource $queue, int $desiredmsgtype, int $msgtype, int $maxsize, mixed $message [, bool $unserialize = '' [, int $flags = '' [, int $errorcode = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Upon successful completion the message queue data structure is updated as   follows: <em>msg_lrpid<\/em> is set to the process-ID of the   calling process, <em>msg_qnum<\/em> is decremented by 1 and   <em>msg_rtime<\/em> is set to the current time.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"msg_remove_queue":{"id":"function.msg-remove-queue","purpose":"Destroy a message queue","prototype":"bool msg_remove_queue(resource $queue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"msg_send":{"id":"function.msg-send","purpose":"Send a message to a message queue","prototype":"bool msg_send(resource $queue, int $msgtype, mixed $message [, bool $serialize = '' [, bool $blocking = '' [, int $errorcode = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Upon successful completion the message queue data structure is updated as   follows: <code class=\"parameter\">msg_lspid<\/code> is set to the process-ID of the   calling process, <code class=\"parameter\">msg_qnum<\/code> is incremented by 1 and   <code class=\"parameter\">msg_stime<\/code> is set to the current time.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"msg_set_queue":{"id":"function.msg-set-queue","purpose":"Set information in the message queue data structure","prototype":"bool msg_set_queue(resource $queue, array $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"msg_stat_queue":{"id":"function.msg-stat-queue","purpose":"Returns information from the message queue data structure","prototype":"array msg_stat_queue(resource $queue)","return":"<p class=\"para\">   The return value is an array whose keys and values have the following   meanings:   <table class=\"doctable table\">    <caption><strong>Array structure for msg_stat_queue<\/strong><\/caption>         <tbody class=\"tbody\">      <tr>       <td><em>msg_perm.uid<\/em><\/td>       <td>        The uid of the owner of the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_perm.gid<\/em><\/td>       <td>        The gid of the owner of the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_perm.mode<\/em><\/td>       <td>        The file access mode of the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_stime<\/em><\/td>       <td>        The time that the last message was sent to the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_rtime<\/em><\/td>       <td>        The time that the last message was received from the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_ctime<\/em><\/td>       <td>        The time that the queue was last changed.       <\/td>      <\/tr>      <tr>       <td><em>msg_qnum<\/em><\/td>       <td>        The number of messages waiting to be read from the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_qbytes<\/em><\/td>       <td>        The maximum number of bytes allowed in one message queue. On        Linux, this value may be read and modified via        <var class=\"filename\">\/proc\/sys\/kernel\/msgmnb<\/var>.       <\/td>      <\/tr>      <tr>       <td><em>msg_lspid<\/em><\/td>       <td>        The pid of the process that sent the last message to the queue.       <\/td>      <\/tr>      <tr>       <td><em>msg_lrpid<\/em><\/td>       <td>        The pid of the process that received the last message from the queue.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"sem_acquire":{"id":"function.sem-acquire","purpose":"Acquire a semaphore","prototype":"bool sem_acquire(resource $sem_identifier [, bool $nowait = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sem_get":{"id":"function.sem-get","purpose":"Get a semaphore id","prototype":"resource sem_get(int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1]]])","return":"<p class=\"para\">   Returns a positive semaphore identifier on success, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sem_release":{"id":"function.sem-release","purpose":"Release a semaphore","prototype":"bool sem_release(resource $sem_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sem_remove":{"id":"function.sem-remove","purpose":"Remove a semaphore","prototype":"bool sem_remove(resource $sem_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"shm_attach":{"id":"function.shm-attach","purpose":"Creates or open a shared memory segment","prototype":"resource shm_attach(int $key [, int $memsize = '' [, int $perm = 0666]])","return":"<p class=\"para\">   Returns a shared memory segment identifier.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shm_detach":{"id":"function.shm-detach","purpose":"Disconnects from shared memory segment","prototype":"bool shm_detach(resource $shm_identifier)","return":"<p class=\"para\">   <span class=\"function\">shm_detach<\/span> always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shm_get_var":{"id":"function.shm-get-var","purpose":"Returns a variable from shared memory","prototype":"mixed shm_get_var(resource $shm_identifier, int $variable_key)","return":"<p class=\"para\">   Returns the variable with the given key.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shm_has_var":{"id":"function.shm-has-var","purpose":"Check whether a specific entry exists","prototype":"bool shm_has_var(resource $shm_identifier, int $variable_key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the entry exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"shm_put_var":{"id":"function.shm-put-var","purpose":"Inserts or updates a variable in shared memory","prototype":"bool shm_put_var(resource $shm_identifier, int $variable_key, mixed $variable)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shm_remove_var":{"id":"function.shm-remove-var","purpose":"Removes a variable from shared memory","prototype":"bool shm_remove_var(resource $shm_identifier, int $variable_key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shm_remove":{"id":"function.shm-remove","purpose":"Removes shared memory from Unix systems","prototype":"bool shm_remove(resource $shm_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shmop_close":{"id":"function.shmop-close","purpose":"Close shared memory block","prototype":"void shmop_close(resource $shmid)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"shmop_delete":{"id":"function.shmop-delete","purpose":"Delete shared memory block","prototype":"bool shmop_delete(resource $shmid)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"shmop_open":{"id":"function.shmop-open","purpose":"Create or open shared memory block","prototype":"resource shmop_open(int $key, string $flags, int $mode, int $size)","return":"<p class=\"para\">   On success <span class=\"function\">shmop_open<\/span> will return an resource that you can   use to access the shared memory segment you&#039;ve created. <strong><code>FALSE<\/code><\/strong> is    returned on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"shmop_read":{"id":"function.shmop-read","purpose":"Read data from shared memory block","prototype":"string shmop_read(resource $shmid, int $start, int $count)","return":"<p class=\"para\">   Returns the data or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"shmop_size":{"id":"function.shmop-size","purpose":"Get size of shared memory block","prototype":"int shmop_size(resource $shmid)","return":"<p class=\"para\">   Returns an int, which represents the number of bytes the shared memory   block occupies.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"shmop_write":{"id":"function.shmop-write","purpose":"Write data into shared memory block","prototype":"int shmop_write(resource $shmid, string $data, int $offset)","return":"<p class=\"para\">   The size of the written <code class=\"parameter\">data<\/code>, or <strong><code>FALSE<\/code><\/strong> on    failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"SyncMutex::__construct":{"id":"syncmutex.construct","purpose":"Constructs a new SyncMutex object","prototype":" SyncMutex::__construct([string $name = ''])","return":"<p class=\"para\"> The new SyncMutex object.  An exception is thrown if the mutex cannot be created or opened.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncMutex::lock":{"id":"syncmutex.lock","purpose":"Waits for an exclusive lock","prototype":"bool SyncMutex::lock([int $wait = -1])","return":"<p class=\"para\"> A boolean of TRUE if the lock was obtained, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncMutex::unlock":{"id":"syncmutex.unlock","purpose":"Unlocks the mutex","prototype":"bool SyncMutex::unlock([bool $all = ''])","return":"<p class=\"para\"> A boolean of TRUE if the unlock operation was successful, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncSemaphore::__construct":{"id":"syncsemaphore.construct","purpose":"Constructs a new SyncSemaphore object","prototype":" SyncSemaphore::__construct([string $name = '' [, int $initialval = 1 [, bool $autounlock = '']]])","return":"<p class=\"para\"> The new SyncSemaphore object.  An exception is thrown if the semaphore cannot be created or opened.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncSemaphore::lock":{"id":"syncsemaphore.lock","purpose":"Decreases the count of the semaphore or waits","prototype":"bool SyncSemaphore::lock([int $wait = -1])","return":"<p class=\"para\"> A boolean of TRUE if the lock operation was successful, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncSemaphore::unlock":{"id":"syncsemaphore.unlock","purpose":"Increases the count of the semaphore","prototype":"bool SyncSemaphore::unlock([int $prevcount = ''])","return":"<p class=\"para\"> A boolean of TRUE if the unlock operation was successful, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncEvent::__construct":{"id":"syncevent.construct","purpose":"Constructs a new SyncEvent object","prototype":" SyncEvent::__construct([string $name = '' [, bool $manual = '' [, bool $prefire = '']]])","return":"<p class=\"para\"> The new SyncEvent object.  An exception is thrown if the event object cannot be created or opened.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncEvent::fire":{"id":"syncevent.fire","purpose":"Fires\/sets the event","prototype":"bool SyncEvent::fire()","return":"<p class=\"para\"> A boolean of TRUE if the event was fired, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncEvent::reset":{"id":"syncevent.reset","purpose":"Resets a manual event","prototype":"bool SyncEvent::reset()","return":"<p class=\"para\"> A boolean value of TRUE if the object was successfully reset, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncEvent::wait":{"id":"syncevent.wait","purpose":"Waits for the event to be fired\/set","prototype":"bool SyncEvent::wait([int $wait = -1])","return":"<p class=\"para\"> A boolean of TRUE if the event was fired, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncReaderWriter::__construct":{"id":"syncreaderwriter.construct","purpose":"Constructs a new SyncReaderWriter object","prototype":" SyncReaderWriter::__construct([string $name = '' [, bool $autounlock = '']])","return":"<p class=\"para\"> The new SyncReaderWriter object.  An exception is thrown if the reader-writer cannot be created or opened.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncReaderWriter::readlock":{"id":"syncreaderwriter.readlock","purpose":"Waits for a read lock","prototype":"bool SyncReaderWriter::readlock([int $wait = -1])","return":"<p class=\"para\"> A boolean of TRUE if the lock was obtained, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncReaderWriter::readunlock":{"id":"syncreaderwriter.readunlock","purpose":"Releases a read lock","prototype":"bool SyncReaderWriter::readunlock()","return":"<p class=\"para\"> A boolean of TRUE if the unlock operation was successful, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncReaderWriter::writelock":{"id":"syncreaderwriter.writelock","purpose":"Waits for an exclusive write lock","prototype":"bool SyncReaderWriter::writelock([int $wait = -1])","return":"<p class=\"para\"> A boolean of TRUE if the lock was obtained, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncReaderWriter::writeunlock":{"id":"syncreaderwriter.writeunlock","purpose":"Releases a write lock","prototype":"bool SyncReaderWriter::writeunlock()","return":"<p class=\"para\"> A boolean of TRUE if the unlock operation was successful, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.0.0"},"SyncSharedMemory::__construct":{"id":"syncsharedmemory.construct","purpose":"Constructs a new SyncSharedMemory object","prototype":" SyncSharedMemory::__construct(string $name, int $size)","return":"<p class=\"para\"> The new SyncSharedMemory object.  An exception is thrown if the shared memory object cannot be created or opened.  <\/p>","versions":"PECL sync >= 1.1.0"},"SyncSharedMemory::first":{"id":"syncsharedmemory.first","purpose":"Check to see if the object is the first instance system-wide of named shared memory","prototype":"bool SyncSharedMemory::first()","return":"<p class=\"para\"> A boolean of TRUE if the object is the first instance system-wide, FALSE otherwise.  <\/p>","versions":"PECL sync >= 1.1.0"},"SyncSharedMemory::read":{"id":"syncsharedmemory.read","purpose":"Copy data from named shared memory","prototype":" SyncSharedMemory::read([int $start = '' [, int $length = '']])","return":"<p class=\"para\"> A string containing the data read from shared memory.  <\/p>","versions":"PECL sync >= 1.1.0"},"SyncSharedMemory::size":{"id":"syncsharedmemory.size","purpose":"Returns the size of the named shared memory","prototype":"bool SyncSharedMemory::size()","return":"<p class=\"para\"> An integer containing the size of the shared memory.  This will be the same size that was passed to the constructor.  <\/p>","versions":"PECL sync >= 1.1.0"},"SyncSharedMemory::write":{"id":"syncsharedmemory.write","purpose":"Copy data to named shared memory","prototype":" SyncSharedMemory::write([string $string = '' [, int $start = '']])","return":"<p class=\"para\"> An integer containing the number of bytes written to shared memory.  <\/p>","versions":"PECL sync >= 1.1.0"},"geoip_asnum_by_name":{"id":"function.geoip-asnum-by-name","purpose":"Get the Autonomous System Numbers (ASN)","prototype":"string geoip_asnum_by_name(string $hostname)","return":"<p class=\"para\">   Returns the ASN on success, or <strong><code>FALSE<\/code><\/strong> if the address   cannot be found in the database.  <\/p>","versions":"PECL geoip >= 1.1.0"},"geoip_continent_code_by_name":{"id":"function.geoip-continent-code-by-name","purpose":"Get the two letter continent code","prototype":"string geoip_continent_code_by_name(string $hostname)","return":"<p class=\"para\">   Returns the two letter continent code on success, or <strong><code>FALSE<\/code><\/strong> if the   address cannot be found in the database.  <\/p>  <table class=\"doctable table\">   <caption><strong>Continent codes<\/strong><\/caption>       <thead>     <tr>      <th>Code<\/th>      <th>Continent name<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><em>AF<\/em><\/td>      <td>Africa<\/td>     <\/tr>     <tr>      <td><em>AN<\/em><\/td>      <td>Antarctica<\/td>     <\/tr>     <tr>      <td><em>AS<\/em><\/td>      <td>Asia<\/td>     <\/tr>     <tr>      <td><em>EU<\/em><\/td>      <td>Europe<\/td>     <\/tr>     <tr>      <td><em>NA<\/em><\/td>      <td>North america<\/td>     <\/tr>     <tr>      <td><em>OC<\/em><\/td>      <td>Oceania<\/td>     <\/tr>     <tr>      <td><em>SA<\/em><\/td>      <td>South america<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PECL geoip >= 1.0.3"},"geoip_country_code_by_name":{"id":"function.geoip-country-code-by-name","purpose":"Get the two letter country code","prototype":"string geoip_country_code_by_name(string $hostname)","return":"<p class=\"para\">   Returns the two letter ISO country code on success, or <strong><code>FALSE<\/code><\/strong>    if the address cannot be found in the database.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_country_code3_by_name":{"id":"function.geoip-country-code3-by-name","purpose":"Get the three letter country code","prototype":"string geoip_country_code3_by_name(string $hostname)","return":"<p class=\"para\">   Returns the three letter country code on success, or <strong><code>FALSE<\/code><\/strong>    if the address cannot be found in the database.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_country_name_by_name":{"id":"function.geoip-country-name-by-name","purpose":"Get the full country name","prototype":"string geoip_country_name_by_name(string $hostname)","return":"<p class=\"para\">   Returns the country name on success, or <strong><code>FALSE<\/code><\/strong> if the address cannot    be found in the database.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_database_info":{"id":"function.geoip-database-info","purpose":"Get GeoIP Database information","prototype":"string geoip_database_info([int $database = GEOIP_COUNTRY_EDITION])","return":"<p class=\"para\">   Returns the corresponding database version, or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_db_avail":{"id":"function.geoip-db-avail","purpose":"Determine if GeoIP Database is available","prototype":"bool geoip_db_avail(int $database)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> is database exists, <strong><code>FALSE<\/code><\/strong> if not found, or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PECL geoip >= 1.0.1"},"geoip_db_filename":{"id":"function.geoip-db-filename","purpose":"Returns the filename of the corresponding GeoIP Database","prototype":"string geoip_db_filename(int $database)","return":"<p class=\"para\">   Returns the filename of the corresponding database, or <strong><code>NULL<\/code><\/strong> on error.  <\/p>","versions":"PECL geoip >= 1.0.1"},"geoip_db_get_all_info":{"id":"function.geoip-db-get-all-info","purpose":"Returns detailed information about all GeoIP database types","prototype":"array geoip_db_get_all_info()","return":"<p class=\"para\">   Returns the associative array.  <\/p>","versions":"PECL geoip >= 1.0.1"},"geoip_domain_by_name":{"id":"function.geoip-domain-by-name","purpose":"Get the second level domain name","prototype":"string geoip_domain_by_name(string $hostname)","return":"<p class=\"para\">   Returns the domain name on success, or <strong><code>FALSE<\/code><\/strong> if the address   cannot be found in the database.  <\/p>","versions":"PECL geoip >= 1.1.0"},"geoip_id_by_name":{"id":"function.geoip-id-by-name","purpose":"Get the Internet connection type","prototype":"int geoip_id_by_name(string $hostname)","return":"<p class=\"para\">   Returns the connection type.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_isp_by_name":{"id":"function.geoip-isp-by-name","purpose":"Get the Internet Service Provider (ISP) name","prototype":"string geoip_isp_by_name(string $hostname)","return":"<p class=\"para\">   Returns the ISP name on success, or <strong><code>FALSE<\/code><\/strong> if the address   cannot be found in the database.  <\/p>","versions":"PECL geoip >= 1.0.2"},"geoip_netspeedcell_by_name":{"id":"function.geoip-netspeedcell-by-name","purpose":"Get the Internet connection speed","prototype":"string geoip_netspeedcell_by_name(string $hostname)","return":"<p class=\"para\">   Returns the connection speed on success, or <strong><code>FALSE<\/code><\/strong> if the address   cannot be found in the database.  <\/p>","versions":"PECL geoip >= 1.1.0"},"geoip_org_by_name":{"id":"function.geoip-org-by-name","purpose":"Get the organization name","prototype":"string geoip_org_by_name(string $hostname)","return":"<p class=\"para\">   Returns the organization name on success, or <strong><code>FALSE<\/code><\/strong> if the address   cannot be found in the database.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_record_by_name":{"id":"function.geoip-record-by-name","purpose":"Returns the detailed City information found in the GeoIP Database","prototype":"array geoip_record_by_name(string $hostname)","return":"<p class=\"para\">   Returns the associative array on success, or <strong><code>FALSE<\/code><\/strong> if the address    cannot be found in the database.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_region_by_name":{"id":"function.geoip-region-by-name","purpose":"Get the country code and region","prototype":"array geoip_region_by_name(string $hostname)","return":"<p class=\"para\">   Returns the associative array on success, or <strong><code>FALSE<\/code><\/strong> if the address    cannot be found in the database.  <\/p>","versions":"PECL geoip >= 0.2.0"},"geoip_region_name_by_code":{"id":"function.geoip-region-name-by-code","purpose":"Returns the region name for some country and region code combo","prototype":"string geoip_region_name_by_code(string $country_code, string $region_code)","return":"<p class=\"para\">   Returns the region name on success, or <strong><code>FALSE<\/code><\/strong> if the country and region code   combo cannot be found.  <\/p>","versions":"PECL geoip >= 1.0.4"},"geoip_setup_custom_directory":{"id":"function.geoip-setup-custom-directory","purpose":"Set a custom directory for the GeoIP database","prototype":"void geoip_setup_custom_directory(string $path)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL geoip >= 1.1.0"},"geoip_time_zone_by_country_and_region":{"id":"function.geoip-time-zone-by-country-and-region","purpose":"Returns the time zone for some country and region code combo","prototype":"string geoip_time_zone_by_country_and_region(string $country_code [, string $region_code = ''])","return":"<p class=\"para\">   Returns the time zone on success, or <strong><code>FALSE<\/code><\/strong> if the country and region code   combo cannot be found.  <\/p>","versions":"PECL geoip >= 1.0.4"},"fann_cascadetrain_on_data":{"id":"function.fann-cascadetrain-on-data","purpose":"Trains on an entire dataset, for a period of time using the Cascade2 training algorithm","prototype":"bool fann_cascadetrain_on_data(resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_cascadetrain_on_file":{"id":"function.fann-cascadetrain-on-file","purpose":"Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm","prototype":"bool fann_cascadetrain_on_file(resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_clear_scaling_params":{"id":"function.fann-clear-scaling-params","purpose":"Clears scaling parameters","prototype":"bool fann_clear_scaling_params(resource $ann)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_copy":{"id":"function.fann-copy","purpose":"Creates a copy of a fann structure","prototype":"resource fann_copy(resource $ann)","return":"<p class=\"para\">   Returns a copy of neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_from_file":{"id":"function.fann-create-from-file","purpose":"Constructs a backpropagation neural network from a configuration file","prototype":"resource fann_create_from_file(string $configuration_file)","return":"<p class=\"para\"> Returns a neural network <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_shortcut_array":{"id":"function.fann-create-shortcut-array","purpose":"Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections","prototype":"resource fann_create_shortcut_array(int $num_layers, array $layers)","return":"<p class=\"para\">   Returns a neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_shortcut":{"id":"function.fann-create-shortcut","purpose":"Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections","prototype":"resource fann_create_shortcut(int $num_layers, int $num_neurons1, int $num_neurons2 [, int $... = ''])","return":"<p class=\"para\">   Returns a neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_sparse_array":{"id":"function.fann-create-sparse-array","purpose":"Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes","prototype":"resource fann_create_sparse_array(float $connection_rate, int $num_layers, array $layers)","return":"<p class=\"para\">   Returns a neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_sparse":{"id":"function.fann-create-sparse","purpose":"Creates a standard backpropagation neural network, which is not fully connected","prototype":"resource fann_create_sparse(float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2 [, int $... = ''])","return":"<p class=\"para\">   Returns a neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_standard_array":{"id":"function.fann-create-standard-array","purpose":"Creates a standard fully connected backpropagation neural network using an array of layer sizes","prototype":"resource fann_create_standard_array(int $num_layers, array $layers)","return":"<p class=\"para\">   Returns a neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_standard":{"id":"function.fann-create-standard","purpose":"Creates a standard fully connected backpropagation neural network","prototype":"resource fann_create_standard(int $num_layers, int $num_neurons1, int $num_neurons2 [, int $... = ''])","return":"<p class=\"para\">   Returns a neural network resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_train_from_callback":{"id":"function.fann-create-train-from-callback","purpose":"Creates the training data struct from a user supplied function","prototype":"resource fann_create_train_from_callback(int $num_data, int $num_input, int $num_output, callable $user_function)","return":"<p class=\"para\"> Returns a train data <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_create_train":{"id":"function.fann-create-train","purpose":"Creates an empty training data struct","prototype":"resource fann_create_train(int $num_data, int $num_input, int $num_output)","return":"<p class=\"para\"> Returns a train data <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_descale_input":{"id":"function.fann-descale-input","purpose":"Scale data in input vector after get it from ann based on previously calculated parameters","prototype":"bool fann_descale_input(resource $ann, array $input_vector)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_descale_output":{"id":"function.fann-descale-output","purpose":"Scale data in output vector after get it from ann based on previously calculated parameters","prototype":"bool fann_descale_output(resource $ann, array $output_vector)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_descale_train":{"id":"function.fann-descale-train","purpose":"Descale input and output data based on previously calculated parameters","prototype":"bool fann_descale_train(resource $ann, resource $train_data)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_destroy_train":{"id":"function.fann-destroy-train","purpose":"Destructs the training data","prototype":"bool fann_destroy_train(resource $train_data)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_destroy":{"id":"function.fann-destroy","purpose":"Destroys the entire network and properly freeing all the associated memory","prototype":"bool fann_destroy(resource $ann)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_duplicate_train_data":{"id":"function.fann-duplicate-train-data","purpose":"Returns an exact copy of a fann train data","prototype":"resource fann_duplicate_train_data(resource $data)","return":"<p class=\"para\"> Returns a train data <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_activation_function":{"id":"function.fann-get-activation-function","purpose":"Returns the activation function","prototype":"int fann_get_activation_function(resource $ann, int $layer, int $neuron)","return":"<p class=\"para\">   <a href=\"fann.constants.html#constants.fann-train\" class=\"link\">Learning functions<\/a> constant or -1   if the neuron is not defined in the neural network, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_activation_steepness":{"id":"function.fann-get-activation-steepness","purpose":"Returns the activation steepness for supplied neuron and layer number","prototype":"float fann_get_activation_steepness(resource $ann, int $layer, int $neuron)","return":"<p class=\"para\">   The activation steepness for the neuron or -1 if the neuron is not defined in the neural network, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_bias_array":{"id":"function.fann-get-bias-array","purpose":"Get the number of bias in each layer in the network","prototype":"array fann_get_bias_array(resource $ann)","return":"<p class=\"para\">   An array of numbers of bias in each layer  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_bit_fail_limit":{"id":"function.fann-get-bit-fail-limit","purpose":"Returns the bit fail limit used during training","prototype":"float fann_get_bit_fail_limit(resource $ann)","return":"<p class=\"para\">   The bit fail limit, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_bit_fail":{"id":"function.fann-get-bit-fail","purpose":"The number of fail bits","prototype":"int fann_get_bit_fail(resource $ann)","return":"<p class=\"para\">   The number of bits fail, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_activation_functions_count":{"id":"function.fann-get-cascade-activation-functions-count","purpose":"Returns the number of cascade activation functions","prototype":"int fann_get_cascade_activation_functions_count(resource $ann)","return":"<p class=\"para\">   The number of cascade activation functions, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_activation_functions":{"id":"function.fann-get-cascade-activation-functions","purpose":"Returns the cascade activation functions","prototype":"array fann_get_cascade_activation_functions(resource $ann)","return":"<p class=\"para\">   The cascade activation functions, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_activation_steepnesses_count":{"id":"function.fann-get-cascade-activation-steepnesses-count","purpose":"The number of activation steepnesses","prototype":"int fann_get_cascade_activation_steepnesses_count(resource $ann)","return":"<p class=\"para\">   The number of activation steepnesses, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_activation_steepnesses":{"id":"function.fann-get-cascade-activation-steepnesses","purpose":"Returns the cascade activation steepnesses","prototype":"array fann_get_cascade_activation_steepnesses(resource $ann)","return":"<p class=\"para\">   The cascade activation steepnesses, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_candidate_change_fraction":{"id":"function.fann-get-cascade-candidate-change-fraction","purpose":"Returns the cascade candidate change fraction","prototype":"float fann_get_cascade_candidate_change_fraction(resource $ann)","return":"<p class=\"para\">   The cascade candidate change fraction, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_candidate_limit":{"id":"function.fann-get-cascade-candidate-limit","purpose":"Return the candidate limit","prototype":"float fann_get_cascade_candidate_limit(resource $ann)","return":"<p class=\"para\">   The candidate limit, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_candidate_stagnation_epochs":{"id":"function.fann-get-cascade-candidate-stagnation-epochs","purpose":"Returns the number of cascade candidate stagnation epochs","prototype":"int fann_get_cascade_candidate_stagnation_epochs(resource $ann)","return":"<p class=\"para\">   The number of cascade candidate stagnation epochs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_max_cand_epochs":{"id":"function.fann-get-cascade-max-cand-epochs","purpose":"Returns the maximum candidate epochs","prototype":"int fann_get_cascade_max_cand_epochs(resource $ann)","return":"<p class=\"para\">   The maximum candidate epochs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_max_out_epochs":{"id":"function.fann-get-cascade-max-out-epochs","purpose":"Returns the maximum out epochs","prototype":"int fann_get_cascade_max_out_epochs(resource $ann)","return":"<p class=\"para\">   The maximum out epochs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_min_cand_epochs":{"id":"function.fann-get-cascade-min-cand-epochs","purpose":"Returns the minimum candidate epochs","prototype":"int fann_get_cascade_min_cand_epochs(resource $ann)","return":"<p class=\"para\">   The minimum candidate epochs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_min_out_epochs":{"id":"function.fann-get-cascade-min-out-epochs","purpose":"Returns the minimum out epochs","prototype":"int fann_get_cascade_min_out_epochs(resource $ann)","return":"<p class=\"para\">   The minimum out epochs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_num_candidate_groups":{"id":"function.fann-get-cascade-num-candidate-groups","purpose":"Returns the number of candidate groups","prototype":"int fann_get_cascade_num_candidate_groups(resource $ann)","return":"<p class=\"para\">   The number of candidate groups, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_num_candidates":{"id":"function.fann-get-cascade-num-candidates","purpose":"Returns the number of candidates used during training","prototype":"int fann_get_cascade_num_candidates(resource $ann)","return":"<p class=\"para\">   The number of candidates used during training, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_output_change_fraction":{"id":"function.fann-get-cascade-output-change-fraction","purpose":"Returns the cascade output change fraction","prototype":"float fann_get_cascade_output_change_fraction(resource $ann)","return":"<p class=\"para\">   The cascade output change fraction, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_output_stagnation_epochs":{"id":"function.fann-get-cascade-output-stagnation-epochs","purpose":"Returns the number of cascade output stagnation epochs","prototype":"int fann_get_cascade_output_stagnation_epochs(resource $ann)","return":"<p class=\"para\">   The number of cascade output stagnation epochs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_cascade_weight_multiplier":{"id":"function.fann-get-cascade-weight-multiplier","purpose":"Returns the weight multiplier","prototype":"float fann_get_cascade_weight_multiplier(resource $ann)","return":"<p class=\"para\">   The weight multiplier, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_connection_array":{"id":"function.fann-get-connection-array","purpose":"Get connections in the network","prototype":"array fann_get_connection_array(resource $ann)","return":"<p class=\"para\">   An array of connections in the network  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_connection_rate":{"id":"function.fann-get-connection-rate","purpose":"Get the connection rate used when the network was created","prototype":"float fann_get_connection_rate(resource $ann)","return":"<p class=\"para\">   The connection rate used when the network was created, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_errno":{"id":"function.fann-get-errno","purpose":"Returns the last error number","prototype":"int fann_get_errno(resource $errdat)","return":"<p class=\"para\">   The error number, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_errstr":{"id":"function.fann-get-errstr","purpose":"Returns the last errstr","prototype":"string fann_get_errstr(resource $errdat)","return":"<p class=\"para\">   The last error string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_layer_array":{"id":"function.fann-get-layer-array","purpose":"Get the number of neurons in each layer in the network","prototype":"array fann_get_layer_array(resource $ann)","return":"<p class=\"para\">   An array of numbers of neurons in each leayer  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_learning_momentum":{"id":"function.fann-get-learning-momentum","purpose":"Returns the learning momentum","prototype":"float fann_get_learning_momentum(resource $ann)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>  <p class=\"para\">   The learning momentum, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_learning_rate":{"id":"function.fann-get-learning-rate","purpose":"Returns the learning rate","prototype":"float fann_get_learning_rate(resource $ann)","return":"<p class=\"para\">   The learning rate, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_MSE":{"id":"function.fann-get-mse","purpose":"Reads the mean square error from the network","prototype":"float fann_get_MSE(resource $ann)","return":"<p class=\"para\">   The mean square error, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_network_type":{"id":"function.fann-get-network-type","purpose":"Get the type of neural network it was created as","prototype":"int fann_get_network_type(resource $ann)","return":"<p class=\"para\">    <a href=\"fann.constants.html#constants.fann-nettype\" class=\"link\">Network type<\/a> constant, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_num_input":{"id":"function.fann-get-num-input","purpose":"Get the number of input neurons","prototype":"int fann_get_num_input(resource $ann)","return":"<p class=\"para\">   Number of input neurons, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_num_layers":{"id":"function.fann-get-num-layers","purpose":"Get the number of layers in the neural network","prototype":"int fann_get_num_layers(resource $ann)","return":"<p class=\"para\">   The number of leayers in the neural network, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_num_output":{"id":"function.fann-get-num-output","purpose":"Get the number of output neurons","prototype":"int fann_get_num_output(resource $ann)","return":"<p class=\"para\">   Number of output neurons, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_quickprop_decay":{"id":"function.fann-get-quickprop-decay","purpose":"Returns the decay which is a factor that weights should decrease in each iteration during quickprop training","prototype":"float fann_get_quickprop_decay(resource $ann)","return":"<p class=\"para\">   The decay, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_quickprop_mu":{"id":"function.fann-get-quickprop-mu","purpose":"Returns the mu factor","prototype":"float fann_get_quickprop_mu(resource $ann)","return":"<p class=\"para\">   The mu factor, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_rprop_decrease_factor":{"id":"function.fann-get-rprop-decrease-factor","purpose":"Returns the increase factor used during RPROP training","prototype":"float fann_get_rprop_decrease_factor(resource $ann)","return":"<p class=\"para\">   The decrease factor, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_rprop_delta_max":{"id":"function.fann-get-rprop-delta-max","purpose":"Returns the maximum step-size","prototype":"float fann_get_rprop_delta_max(resource $ann)","return":"<p class=\"para\">   The maximum step-size, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_rprop_delta_min":{"id":"function.fann-get-rprop-delta-min","purpose":"Returns the minimum step-size","prototype":"float fann_get_rprop_delta_min(resource $ann)","return":"<p class=\"para\">   The minimum step-size, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_rprop_delta_zero":{"id":"function.fann-get-rprop-delta-zero","purpose":"Returns the initial step-size","prototype":"int fann_get_rprop_delta_zero(resource $ann)","return":"<p class=\"para\">   The initial step-size, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_rprop_increase_factor":{"id":"function.fann-get-rprop-increase-factor","purpose":"Returns the increase factor used during RPROP training","prototype":"float fann_get_rprop_increase_factor(resource $ann)","return":"<p class=\"para\">   The increase factor, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_sarprop_step_error_shift":{"id":"function.fann-get-sarprop-step-error-shift","purpose":"Returns the sarprop step error shift","prototype":"float fann_get_sarprop_step_error_shift(resource $ann)","return":"<p class=\"para\">   The sarprop step error shift , or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_sarprop_step_error_threshold_factor":{"id":"function.fann-get-sarprop-step-error-threshold-factor","purpose":"Returns the sarprop step error threshold factor","prototype":"float fann_get_sarprop_step_error_threshold_factor(resource $ann)","return":"<p class=\"para\">    The sarprop step error threshold factor, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_sarprop_temperature":{"id":"function.fann-get-sarprop-temperature","purpose":"Returns the sarprop temperature","prototype":"float fann_get_sarprop_temperature(resource $ann)","return":"<p class=\"para\">   The sarprop temperature, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_sarprop_weight_decay_shift":{"id":"function.fann-get-sarprop-weight-decay-shift","purpose":"Returns the sarprop weight decay shift","prototype":"float fann_get_sarprop_weight_decay_shift(resource $ann)","return":"<p class=\"para\">   The sarprop weight decay shift, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_total_connections":{"id":"function.fann-get-total-connections","purpose":"Get the total number of connections in the entire network","prototype":"int fann_get_total_connections(resource $ann)","return":"<p class=\"para\">   Total number of connections in the entire network, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_total_neurons":{"id":"function.fann-get-total-neurons","purpose":"Get the total number of neurons in the entire network","prototype":"int fann_get_total_neurons(resource $ann)","return":"<p class=\"para\">   Total number of neurons in the entire network, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_train_error_function":{"id":"function.fann-get-train-error-function","purpose":"Returns the error function used during training","prototype":"int fann_get_train_error_function(resource $ann)","return":"<p class=\"para\">   The <a href=\"fann.constants.html#constants.fann-errorfunc\" class=\"link\">error function<\/a> constant, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_train_stop_function":{"id":"function.fann-get-train-stop-function","purpose":"Returns the stop function used during training","prototype":"int fann_get_train_stop_function(resource $ann)","return":"<p class=\"para\">   The <a href=\"fann.constants.html#constants.fann-stopfunc\" class=\"link\">stop function<\/a> constant, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_get_training_algorithm":{"id":"function.fann-get-training-algorithm","purpose":"Returns the training algorithm","prototype":"int fann_get_training_algorithm(resource $ann)","return":"<p class=\"para\">   <a href=\"fann.constants.html#constants.fann-train\" class=\"link\">Training algorithm<\/a> constant, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_init_weights":{"id":"function.fann-init-weights","purpose":"Initialize the weights using Widrow + Nguyen\u2019s algorithm","prototype":"bool fann_init_weights(resource $ann, resource $train_data)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_length_train_data":{"id":"function.fann-length-train-data","purpose":"Returns the number of training patterns in the train data","prototype":"resource fann_length_train_data(resource $data)","return":"<p class=\"para\">   Number of elements in the train data <span class=\"type\">resource<\/span>, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_merge_train_data":{"id":"function.fann-merge-train-data","purpose":"Merges the train data","prototype":"resource fann_merge_train_data(resource $data1, resource $data2)","return":"<p class=\"para\">   New merged train data <span class=\"type\">resource<\/span>, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_num_input_train_data":{"id":"function.fann-num-input-train-data","purpose":"Returns the number of inputs in each of the training patterns in the train data","prototype":"resource fann_num_input_train_data(resource $data)","return":"<p class=\"para\">    The number of inputs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_num_output_train_data":{"id":"function.fann-num-output-train-data","purpose":"Returns the number of outputs in each of the training patterns in the train data","prototype":"resource fann_num_output_train_data(resource $data)","return":"<p class=\"para\">   The number of outputs, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_print_error":{"id":"function.fann-print-error","purpose":"Prints the error string","prototype":"void fann_print_error(resource $errdat)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_randomize_weights":{"id":"function.fann-randomize-weights","purpose":"Give each connection a random weight between min_weight and max_weight","prototype":"bool fann_randomize_weights(resource $ann, float $min_weight, float $max_weight)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_read_train_from_file":{"id":"function.fann-read-train-from-file","purpose":"Reads a file that stores training data","prototype":"resource fann_read_train_from_file(string $filename)","return":"<p class=\"para\"> Returns a train data <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_reset_errno":{"id":"function.fann-reset-errno","purpose":"Resets the last error number","prototype":"void fann_reset_errno(resource $errdat)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_reset_errstr":{"id":"function.fann-reset-errstr","purpose":"Resets the last error string","prototype":"void fann_reset_errstr(resource $errdat)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_reset_MSE":{"id":"function.fann-reset-mse","purpose":"Resets the mean square error from the network","prototype":"bool fann_reset_MSE(string $ann)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_run":{"id":"function.fann-run","purpose":"Will run input through the neural network","prototype":"array fann_run(resource $ann, array $input)","return":"<p class=\"para\">   Array of output values, or <strong><code>FALSE<\/code><\/strong> on error  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_save_train":{"id":"function.fann-save-train","purpose":"Save the training structure to a file","prototype":"bool fann_save_train(resource $data, string $file_name)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_save":{"id":"function.fann-save","purpose":"Saves the entire network to a configuration file","prototype":"bool fann_save(resource $ann, string $configuration_file)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_scale_input_train_data":{"id":"function.fann-scale-input-train-data","purpose":"Scales the inputs in the training data to the specified range","prototype":"bool fann_scale_input_train_data(resource $train_data, float $new_min, float $new_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_scale_input":{"id":"function.fann-scale-input","purpose":"Scale data in input vector before feed it to ann based on previously calculated parameters","prototype":"bool fann_scale_input(resource $ann, array $input_vector)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_scale_output_train_data":{"id":"function.fann-scale-output-train-data","purpose":"Scales the outputs in the training data to the specified range","prototype":"bool fann_scale_output_train_data(resource $train_data, float $new_min, float $new_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_scale_output":{"id":"function.fann-scale-output","purpose":"Scale data in output vector before feed it to ann based on previously calculated parameters","prototype":"bool fann_scale_output(resource $ann, array $output_vector)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_scale_train_data":{"id":"function.fann-scale-train-data","purpose":"Scales the inputs and outputs in the training data to the specified range","prototype":"bool fann_scale_train_data(resource $train_data, float $new_min, float $new_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_scale_train":{"id":"function.fann-scale-train","purpose":"Scale input and output data based on previously calculated parameters","prototype":"bool fann_scale_train(resource $ann, resource $train_data)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_function_hidden":{"id":"function.fann-set-activation-function-hidden","purpose":"Sets the activation function for all of the hidden layers","prototype":"bool fann_set_activation_function_hidden(resource $ann, int $activation_function)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_function_layer":{"id":"function.fann-set-activation-function-layer","purpose":"Sets the activation function for all the neurons in the supplied layer","prototype":"bool fann_set_activation_function_layer(resource $ann, int $activation_function, int $layer)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_function_output":{"id":"function.fann-set-activation-function-output","purpose":"Sets the activation function for the output layer","prototype":"bool fann_set_activation_function_output(resource $ann, int $activation_function)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_function":{"id":"function.fann-set-activation-function","purpose":"Sets the activation function for supplied neuron and layer","prototype":"bool fann_set_activation_function(resource $ann, int $activation_function, int $layer, int $neuron)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_steepness_hidden":{"id":"function.fann-set-activation-steepness-hidden","purpose":"Sets the steepness of the activation steepness for all neurons in the all hidden layers","prototype":"bool fann_set_activation_steepness_hidden(resource $ann, float $activation_steepness)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_steepness_layer":{"id":"function.fann-set-activation-steepness-layer","purpose":"Sets the activation steepness for all of the neurons in the supplied layer number","prototype":"bool fann_set_activation_steepness_layer(resource $ann, float $activation_steepness, int $layer)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_steepness_output":{"id":"function.fann-set-activation-steepness-output","purpose":"Sets the steepness of the activation steepness in the output layer","prototype":"bool fann_set_activation_steepness_output(resource $ann, float $activation_steepness)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_activation_steepness":{"id":"function.fann-set-activation-steepness","purpose":"Sets the activation steepness for supplied neuron and layer number","prototype":"bool fann_set_activation_steepness(resource $ann, float $activation_steepness, int $layer, int $neuron)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_bit_fail_limit":{"id":"function.fann-set-bit-fail-limit","purpose":"Set the bit fail limit used during training","prototype":"bool fann_set_bit_fail_limit(resource $ann, float $bit_fail_limit)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_callback":{"id":"function.fann-set-callback","purpose":"Sets the callback function for use during training","prototype":"bool fann_set_callback(resource $ann, collable $callback)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_activation_functions":{"id":"function.fann-set-cascade-activation-functions","purpose":"Sets the array of cascade candidate activation functions","prototype":"bool fann_set_cascade_activation_functions(resource $ann, array $cascade_activation_functions)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_activation_steepnesses":{"id":"function.fann-set-cascade-activation-steepnesses","purpose":"Sets the array of cascade candidate activation steepnesses","prototype":"bool fann_set_cascade_activation_steepnesses(resource $ann, array $cascade_activation_steepnesses_count)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_candidate_change_fraction":{"id":"function.fann-set-cascade-candidate-change-fraction","purpose":"Sets the cascade candidate change fraction","prototype":"bool fann_set_cascade_candidate_change_fraction(resource $ann, float $cascade_candidate_change_fraction)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_candidate_limit":{"id":"function.fann-set-cascade-candidate-limit","purpose":"Sets the candidate limit","prototype":"bool fann_set_cascade_candidate_limit(resource $ann, float $cascade_candidate_limit)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_candidate_stagnation_epochs":{"id":"function.fann-set-cascade-candidate-stagnation-epochs","purpose":"Sets the number of cascade candidate stagnation epochs","prototype":"bool fann_set_cascade_candidate_stagnation_epochs(resource $ann, int $cascade_candidate_stagnation_epochs)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_max_cand_epochs":{"id":"function.fann-set-cascade-max-cand-epochs","purpose":"Sets the max candidate epochs","prototype":"bool fann_set_cascade_max_cand_epochs(resource $ann, int $cascade_max_cand_epochs)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_max_out_epochs":{"id":"function.fann-set-cascade-max-out-epochs","purpose":"Sets the maximum out epochs","prototype":"bool fann_set_cascade_max_out_epochs(resource $ann, int $cascade_max_out_epochs)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_min_cand_epochs":{"id":"function.fann-set-cascade-min-cand-epochs","purpose":"Sets the min candidate epochs","prototype":"bool fann_set_cascade_min_cand_epochs(resource $ann, int $cascade_min_cand_epochs)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_min_out_epochs":{"id":"function.fann-set-cascade-min-out-epochs","purpose":"Sets the minimum out epochs","prototype":"bool fann_set_cascade_min_out_epochs(resource $ann, int $cascade_min_out_epochs)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_num_candidate_groups":{"id":"function.fann-set-cascade-num-candidate-groups","purpose":"Sets the number of candidate groups","prototype":"bool fann_set_cascade_num_candidate_groups(resource $ann, int $cascade_num_candidate_groups)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_output_change_fraction":{"id":"function.fann-set-cascade-output-change-fraction","purpose":"Sets the cascade output change fraction","prototype":"bool fann_set_cascade_output_change_fraction(resource $ann, float $cascade_output_change_fraction)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_output_stagnation_epochs":{"id":"function.fann-set-cascade-output-stagnation-epochs","purpose":"Sets the number of cascade output stagnation epochs","prototype":"bool fann_set_cascade_output_stagnation_epochs(resource $ann, int $cascade_output_stagnation_epochs)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_cascade_weight_multiplier":{"id":"function.fann-set-cascade-weight-multiplier","purpose":"Sets the weight multiplier","prototype":"bool fann_set_cascade_weight_multiplier(resource $ann, float $cascade_weight_multiplier)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_error_log":{"id":"function.fann-set-error-log","purpose":"Sets where the errors are logged to","prototype":"void fann_set_error_log(resource $errdat, string $log_file)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_input_scaling_params":{"id":"function.fann-set-input-scaling-params","purpose":"Calculate input scaling parameters for future use based on training data","prototype":"bool fann_set_input_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_learning_momentum":{"id":"function.fann-set-learning-momentum","purpose":"Sets the learning momentum","prototype":"bool fann_set_learning_momentum(resource $ann, float $learning_momentum)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_learning_rate":{"id":"function.fann-set-learning-rate","purpose":"Sets the learning rate","prototype":"bool fann_set_learning_rate(resource $ann, float $learning_rate)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_output_scaling_params":{"id":"function.fann-set-output-scaling-params","purpose":"Calculate output scaling parameters for future use based on training data","prototype":"bool fann_set_output_scaling_params(resource $ann, resource $train_data, float $new_output_min, float $new_output_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_quickprop_decay":{"id":"function.fann-set-quickprop-decay","purpose":"Sets the quickprop decay factor","prototype":"bool fann_set_quickprop_decay(resource $ann, float $quickprop_decay)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_quickprop_mu":{"id":"function.fann-set-quickprop-mu","purpose":"Sets the quickprop mu factor","prototype":"bool fann_set_quickprop_mu(resource $ann, float $quickprop_mu)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_rprop_decrease_factor":{"id":"function.fann-set-rprop-decrease-factor","purpose":"Sets the decrease factor used during RPROP training","prototype":"bool fann_set_rprop_decrease_factor(resource $ann, float $rprop_decrease_factor)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_rprop_delta_max":{"id":"function.fann-set-rprop-delta-max","purpose":"Sets the maximum step-size","prototype":"bool fann_set_rprop_delta_max(resource $ann, float $rprop_delta_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_rprop_delta_min":{"id":"function.fann-set-rprop-delta-min","purpose":"Sets the minimum step-size","prototype":"bool fann_set_rprop_delta_min(resource $ann, float $rprop_delta_min)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_rprop_delta_zero":{"id":"function.fann-set-rprop-delta-zero","purpose":"Sets the initial step-size","prototype":"bool fann_set_rprop_delta_zero(resource $ann, float $rprop_delta_zero)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_rprop_increase_factor":{"id":"function.fann-set-rprop-increase-factor","purpose":"Sets the increase factor used during RPROP training","prototype":"bool fann_set_rprop_increase_factor(resource $ann, float $rprop_increase_factor)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_sarprop_step_error_shift":{"id":"function.fann-set-sarprop-step-error-shift","purpose":"Sets the sarprop step error shift","prototype":"bool fann_set_sarprop_step_error_shift(resource $ann, float $sarprop_step_error_shift)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_sarprop_step_error_threshold_factor":{"id":"function.fann-set-sarprop-step-error-threshold-factor","purpose":"Sets the sarprop step error threshold factor","prototype":"bool fann_set_sarprop_step_error_threshold_factor(resource $ann, float $sarprop_step_error_threshold_factor)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_sarprop_temperature":{"id":"function.fann-set-sarprop-temperature","purpose":"Sets the sarprop temperature","prototype":"bool fann_set_sarprop_temperature(resource $ann, float $sarprop_temperature)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_sarprop_weight_decay_shift":{"id":"function.fann-set-sarprop-weight-decay-shift","purpose":"Sets the sarprop weight decay shift","prototype":"bool fann_set_sarprop_weight_decay_shift(resource $ann, float $sarprop_weight_decay_shift)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_scaling_params":{"id":"function.fann-set-scaling-params","purpose":"Calculate input and output scaling parameters for future use based on training data","prototype":"bool fann_set_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_train_error_function":{"id":"function.fann-set-train-error-function","purpose":"Sets the error function used during training","prototype":"bool fann_set_train_error_function(resource $ann, int $error_function)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_train_stop_function":{"id":"function.fann-set-train-stop-function","purpose":"Sets the stop function used during training","prototype":"bool fann_set_train_stop_function(resource $ann, int $stop_function)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_training_algorithm":{"id":"function.fann-set-training-algorithm","purpose":"Sets the training algorithm","prototype":"bool fann_set_training_algorithm(resource $ann, int $training_algorithm)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_weight_array":{"id":"function.fann-set-weight-array","purpose":"Set connections in the network","prototype":"bool fann_set_weight_array(resource $ann, array $connections)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_set_weight":{"id":"function.fann-set-weight","purpose":"Set a connection in the network","prototype":"bool fann_set_weight(resource $ann, int $from_neuron, int $to_neuron, float $weight)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_shuffle_train_data":{"id":"function.fann-shuffle-train-data","purpose":"Shuffles training data, randomizing the order","prototype":"bool fann_shuffle_train_data(resource $train_data)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_subset_train_data":{"id":"function.fann-subset-train-data","purpose":"Returns an copy of a subset of the train data","prototype":"resource fann_subset_train_data(resource $data, int $pos, int $length)","return":"<p class=\"para\"> Returns a train data <span class=\"type\">resource<\/span> on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_test_data":{"id":"function.fann-test-data","purpose":"Test a set of training data and calculates the MSE for the training data","prototype":"float fann_test_data(resource $ann, resource $data)","return":"<p class=\"para\">   The updated MSE, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_test":{"id":"function.fann-test","purpose":"Test with a set of inputs, and a set of desired outputs","prototype":"array fann_test(resource $ann, array $input, array $desired_output)","return":"<p class=\"para\">Returns test outputs on success, or <strong><code>FALSE<\/code><\/strong> on error.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_train_epoch":{"id":"function.fann-train-epoch","purpose":"Train one epoch with a set of training data","prototype":"float fann_train_epoch(resource $ann, resource $data)","return":"<p class=\"para\">   The MSE, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL fann >= 1.0.0"},"fann_train_on_data":{"id":"function.fann-train-on-data","purpose":"Trains on an entire dataset for a period of time","prototype":"bool fann_train_on_data(resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_train_on_file":{"id":"function.fann-train-on-file","purpose":"Trains on an entire dataset, which is read from file, for a period of time","prototype":"bool fann_train_on_file(resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"fann_train":{"id":"function.fann-train","purpose":"Train one iteration with a set of inputs, and a set of desired outputs","prototype":"bool fann_train(resource $ann, array $input, array $desired_output)","return":"<p class=\"para\">Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> otherwise.<\/p>","versions":"PECL fann >= 1.0.0"},"FANNConnection::__construct":{"id":"fannconnection.construct","purpose":"The connection constructor","prototype":" FANNConnection::__construct(int $from_neuron, int $to_neuron, float $weight)","return":"","versions":"PECL fann >= 1.0.0"},"FANNConnection::getFromNeuron":{"id":"fannconnection.getfromneuron","purpose":"Returns the postions of starting neuron","prototype":"int FANNConnection::getFromNeuron()","return":"<p class=\"para\">   The postions of starting neuron.  <\/p>","versions":"PECL fann >= 1.0.0"},"FANNConnection::getToNeuron":{"id":"fannconnection.gettoneuron","purpose":"Returns the postions of terminating neuron","prototype":"int FANNConnection::getToNeuron()","return":"<p class=\"para\">   The postions of terminating neuron.  <\/p>","versions":"PECL fann >= 1.0.0"},"FANNConnection::getWeight":{"id":"fannconnection.getweight","purpose":"Returns the connection weight","prototype":"void FANNConnection::getWeight()","return":"<p class=\"para\">   The connection weight.  <\/p>","versions":"PECL fann >= 1.0.0"},"FANNConnection::setWeight":{"id":"fannconnection.setweight","purpose":"Sets the connections weight","prototype":"void FANNConnection::setWeight(float $weight)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL fann >= 1.0.0"},"JsonSerializable::jsonSerialize":{"id":"jsonserializable.jsonserialize","purpose":"Specify data which should be serialized to JSON","prototype":"mixed JsonSerializable::jsonSerialize()","return":"<p class=\"para\">   Returns data which can be serialized by <span class=\"function\">json_encode<\/span>,   which is a value of any type other than a <span class=\"type\">resource<\/span>.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"json_decode":{"id":"function.json-decode","purpose":"Decodes a JSON string","prototype":"mixed json_decode(string $json [, bool $assoc = '' [, int $depth = 512 [, int $options = '']]])","return":"<p class=\"para\">   Returns the value encoded in <code class=\"parameter\">json<\/code> in appropriate   PHP type. Values <em>true<\/em>, <em>false<\/em> and   <em>null<\/em> are returned as <strong><code>TRUE<\/code><\/strong>, <strong><code>FALSE<\/code><\/strong> and <strong><code>NULL<\/code><\/strong>   respectively. <strong><code>NULL<\/code><\/strong> is returned if the <code class=\"parameter\">json<\/code> cannot   be decoded or if the encoded data is deeper than the recursion limit.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL json >= 1.2.0"},"json_encode":{"id":"function.json-encode","purpose":"Returns the JSON representation of a value","prototype":"string json_encode(mixed $value [, int $options = '' [, int $depth = 512]])","return":"<p class=\"para\">   Returns a JSON encoded <span class=\"type\">string<\/span> on success  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL json >= 1.2.0"},"json_last_error_msg":{"id":"function.json-last-error-msg","purpose":"Returns the error string of the last json_encode() or json_decode() call","prototype":"string json_last_error_msg()","return":"<p class=\"para\">   Returns the error message on success, <em>&quot;No error&quot;<\/em> if no   error has occurred,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"json_last_error":{"id":"function.json-last-error","purpose":"Returns the last error occurred","prototype":"int json_last_error()","return":"<p class=\"para\">   Returns an integer, the value can be one of the following    constants:   <\/p>  <table class=\"doctable table\">   <caption><strong>JSON error codes<\/strong><\/caption>       <thead>     <tr>      <th>Constant<\/th>      <th>Meaning<\/th>      <th>Availability<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><strong><code>JSON_ERROR_NONE<\/code><\/strong><\/td>      <td>No error has occurred<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_DEPTH<\/code><\/strong><\/td>      <td>The maximum stack depth has been exceeded<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_STATE_MISMATCH<\/code><\/strong><\/td>      <td>Invalid or malformed JSON<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_CTRL_CHAR<\/code><\/strong><\/td>      <td>Control character error, possibly incorrectly encoded<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_SYNTAX<\/code><\/strong><\/td>      <td>Syntax error<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_UTF8<\/code><\/strong><\/td>      <td>Malformed UTF-8 characters, possibly incorrectly encoded<\/td>      <td>PHP 5.3.3<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_RECURSION<\/code><\/strong><\/td>      <td>One or more recursive references in the value to be encoded<\/td>      <td>PHP 5.5.0<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_INF_OR_NAN<\/code><\/strong><\/td>      <td>       One or more       <a href=\"language.types.float.html#language.types.float.nan\" class=\"link\"><strong><code>NAN<\/code><\/strong><\/a>       or <a href=\"function.is-infinite.html\" class=\"link\"><strong><code>INF<\/code><\/strong><\/a>       values in the value to be encoded      <\/td>      <td>PHP 5.5.0<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_UNSUPPORTED_TYPE<\/code><\/strong><\/td>      <td>A value of a type that cannot be encoded was given<\/td>      <td>PHP 5.5.0<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_INVALID_PROPERTY_NAME<\/code><\/strong><\/td>      <td>A property name that cannot be encoded was given<\/td>      <td>PHP 7.0.0<\/td>     <\/tr>     <tr>      <td><strong><code>JSON_ERROR_UTF16<\/code><\/strong><\/td>      <td>Malformed UTF-16 characters, possibly incorrectly encoded<\/td>      <td>PHP 7.0.0<\/td>     <\/tr>    <\/tbody>     <\/table>","versions":"PHP 5 >= 5.3.0, PHP 7"},"Judy::byCount":{"id":"judy.bycount","purpose":"Locate the Nth index present in the Judy array","prototype":"int Judy::byCount(int $nth_index)","return":"<p class=\"para\">   Return the index at the given Nth position.   <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::__construct":{"id":"judy.construct","purpose":"Construct a new Judy object","prototype":" Judy::__construct(int $judy_type)","return":"<p class=\"para\">   Return the new Judy instance.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::count":{"id":"judy.count","purpose":"Count the number of elements in the Judy array","prototype":"int Judy::count([int $index_start = '' [, int $index_end = -1]])","return":"<p class=\"para\">   Return the number of elements.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::__destruct":{"id":"judy.destruct","purpose":"Destruct a Judy object","prototype":"void Judy::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::first":{"id":"judy.first","purpose":"Search for the first index in the Judy array","prototype":"mixed Judy::first([mixed $index = ''])","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::firstEmpty":{"id":"judy.firstempty","purpose":"Search for the first absent index in the Judy array","prototype":"int Judy::firstEmpty([mixed $index = ''])","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::free":{"id":"judy.free","purpose":"Free the entire Judy array","prototype":"int Judy::free()","return":"<p class=\"para\">     <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::getType":{"id":"judy.gettype","purpose":"Return the type of the current Judy array","prototype":"int Judy::getType()","return":"<p class=\"para\">   Return an integer corresponding to a Judy <a href=\"class.judy.html#judy.types\" class=\"link\">type<\/a>.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::last":{"id":"judy.last","purpose":"Search for the last index in the Judy array","prototype":"void Judy::last([string $index = ''])","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::lastEmpty":{"id":"judy.lastempty","purpose":"Search for the last absent index in the Judy array","prototype":"int Judy::lastEmpty([int $index = -1])","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::memoryUsage":{"id":"judy.memoryusage","purpose":"Return the memory used by the Judy array","prototype":"int Judy::memoryUsage()","return":"<p class=\"para\">   Return the memory used in bytes.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::next":{"id":"judy.next","purpose":"Search for the next index in the Judy array","prototype":"mixed Judy::next(mixed $index)","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::nextEmpty":{"id":"judy.nextempty","purpose":"Search for the next absent index in the Judy array","prototype":"int Judy::nextEmpty(int $index)","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::offsetExists":{"id":"judy.offsetexists","purpose":"Whether a offset exists","prototype":"bool Judy::offsetExists(mixed $offset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::offsetGet":{"id":"judy.offsetget","purpose":"Offset to retrieve","prototype":"mixed Judy::offsetGet(mixed $offset)","return":"<p class=\"para\">   Can return all value types.   <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::offsetSet":{"id":"judy.offsetset","purpose":"Offset to set","prototype":"bool Judy::offsetSet(mixed $offset, mixed $value)","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::offsetUnset":{"id":"judy.offsetunset","purpose":"Offset to unset","prototype":"bool Judy::offsetUnset(mixed $offset)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::prev":{"id":"judy.prev","purpose":"Search for the previous index in the Judy array","prototype":"mixed Judy::prev(mixed $index)","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::prevEmpty":{"id":"judy.prevempty","purpose":"Search for the previous absent index in the Judy array","prototype":"int Judy::prevEmpty(mixed $index)","return":"<p class=\"para\">   Return the corresponding index in the array.  <\/p>","versions":"PECL judy >= 0.1.1"},"Judy::size":{"id":"judy.size","purpose":"Return the size of the current Judy array","prototype":"void Judy::size()","return":"<p class=\"para\">   Return an integer.  <\/p>","versions":"PECL judy >= 0.1.1"},"judy_type":{"id":"function.judy-type","purpose":"Return the type of a Judy array","prototype":"int judy_type(Judy $array)","return":"<p class=\"para\">   Return an integer corresponding to a Judy <a href=\"class.judy.html#judy.types\" class=\"link\">type<\/a>.  <\/p>","versions":"PECL judy >= 0.1.1"},"judy_version":{"id":"function.judy-version","purpose":"Return or print the current PHP Judy version","prototype":"string judy_version()","return":"<p class=\"para\">   Return a string of the PHP Judy version.   <\/p>","versions":"PECL judy >= 0.1.1"},"Lua::assign":{"id":"lua.assign","purpose":"Assign a PHP variable to Lua","prototype":"mixed Lua::assign(string $name, string $value)","return":"<p class=\"para\">   Returns <var class=\"varname\">$this<\/var> or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PECL lua >=0.9.0"},"Lua::call":{"id":"lua.call","purpose":"Call Lua functions","prototype":"mixed Lua::call(callable $lua_func [, array $args = '' [, int $use_self = '']])","return":"<p class=\"para\">   Returns result of the called function, <strong><code>NULL<\/code><\/strong> for wrong arguments or   <strong><code>FALSE<\/code><\/strong> on other failure.  <\/p>","versions":"PECL lua >=0.9.0"},"Lua::__call":{"id":"lua.call","purpose":"Call Lua functions","prototype":"mixed Lua::__call(callable $lua_func [, array $args = '' [, int $use_self = '']])","return":"<p class=\"para\">   Returns result of the called function, <strong><code>NULL<\/code><\/strong> for wrong arguments or   <strong><code>FALSE<\/code><\/strong> on other failure.  <\/p>","versions":"PECL lua >=0.9.0"},"Lua::__construct":{"id":"lua.construct","purpose":"Lua constructor","prototype":" Lua::__construct(string $lua_script_file)","return":"<p class=\"para\">   <\/p>","versions":"PECL lua >=0.9.0"},"Lua::eval":{"id":"lua.eval","purpose":"Evaluate a string as Lua code","prototype":"mixed Lua::eval(string $statements)","return":"<p class=\"para\">   Returns result of evaled code, <strong><code>NULL<\/code><\/strong> for wrong arguments or <strong><code>FALSE<\/code><\/strong> on   other failure.  <\/p>","versions":"PECL lua >=0.9.0"},"Lua::getVersion":{"id":"lua.getversion","purpose":"The getversion purpose","prototype":"string Lua::getVersion()","return":"<p class=\"para\">   Returns <var class=\"varname\">Lua::LUA_VERSION<\/var>.  <\/p>","versions":"PECL lua >=0.9.0"},"Lua::include":{"id":"lua.include","purpose":"Parse a Lua script file","prototype":"mixed Lua::include(string $file)","return":"<p class=\"para\">   Returns result of included code, <strong><code>NULL<\/code><\/strong> for wrong arguments or <strong><code>FALSE<\/code><\/strong> on   other failure.  <\/p>","versions":"PECL lua >=0.9.0"},"Lua::registerCallback":{"id":"lua.registercallback","purpose":"Register a PHP function to Lua","prototype":"mixed Lua::registerCallback(string $name, callable $function)","return":"<p class=\"para\">   Returns <var class=\"varname\">$this<\/var>, <strong><code>NULL<\/code><\/strong> for wrong arguments or <strong><code>FALSE<\/code><\/strong> on   other failure.  <\/p>","versions":""},"LuaClosure::__invoke":{"id":"luaclosure.invoke","purpose":"Invoke luaclosure","prototype":"void LuaClosure::__invoke(mixed $arg [, mixed $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL lua >=0.9.0"},"connection_aborted":{"id":"function.connection-aborted","purpose":"Check whether client disconnected","prototype":"int connection_aborted()","return":"<p class=\"para\">   Returns 1 if client disconnected, 0 otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"connection_status":{"id":"function.connection-status","purpose":"Returns connection status bitfield","prototype":"int connection_status()","return":"<p class=\"para\">   Returns the connection status bitfield, which can be used against the   <em>CONNECTION_XXX<\/em> constants to determine the connection   status.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"constant":{"id":"function.constant","purpose":"Returns the value of a constant","prototype":"mixed constant(string $name)","return":"<p class=\"para\">   Returns the value of the constant, or <strong><code>NULL<\/code><\/strong> if the constant is not   defined.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"define":{"id":"function.define","purpose":"Defines a named constant","prototype":"bool define(string $name, mixed $value [, bool $case_insensitive = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"defined":{"id":"function.defined","purpose":"Checks whether a given named constant exists","prototype":"bool defined(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the named constant given by <code class=\"parameter\">name<\/code>   has been defined, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"die":{"id":"function.die","purpose":"Equivalent to exit","prototype":" die()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"eval":{"id":"function.eval","purpose":"Evaluate a string as PHP code","prototype":"mixed eval(string $code)","return":"<p class=\"para\">   <span class=\"function\">eval<\/span> returns <strong><code>NULL<\/code><\/strong> unless    <em>return<\/em> is called in the evaluated code, in which case   the value passed to <em>return<\/em> is returned. As of PHP 7, if there is a   parse error in the evaluated code, <span class=\"function\">eval<\/span> throws a ParseError exception.   Before PHP 7, in this case <span class=\"function\">eval<\/span> returned   <strong><code>FALSE<\/code><\/strong> and execution of the following code continued normally. It is   not possible to catch a parse error in <span class=\"function\">eval<\/span>   using <span class=\"function\">set_error_handler<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"exit":{"id":"function.exit","purpose":"Output a message and terminate the current script","prototype":"void exit(int $status)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_browser":{"id":"function.get-browser","purpose":"Tells what the user's browser is capable of","prototype":"mixed get_browser([string $user_agent = '' [, bool $return_array = '']])","return":"<p class=\"para\">   The information is returned in an object or an array which will contain   various data elements representing, for instance, the browser&#039;s major and   minor version numbers and ID string; <strong><code>TRUE<\/code><\/strong>\/<strong><code>FALSE<\/code><\/strong> values for features   such as frames, JavaScript, and cookies; and so forth.  <\/p>  <p class=\"para\">   The <em>cookies<\/em> value simply means that the browser   itself is capable of accepting cookies and does not mean the user has   enabled the browser to accept cookies or not. The only way to test if   cookies are accepted is to set one with <span class=\"function\">setcookie<\/span>,   reload, and check for the value.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"__halt_compiler":{"id":"function.halt-compiler","purpose":"Halts the compiler execution","prototype":"void __halt_compiler()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"highlight_file":{"id":"function.highlight-file","purpose":"Syntax highlighting of a file","prototype":"mixed highlight_file(string $filename [, bool $return = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">return<\/code> is set to <strong><code>TRUE<\/code><\/strong>, returns the highlighted   code as a string instead of printing it out. Otherwise, it will return   <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"highlight_string":{"id":"function.highlight-string","purpose":"Syntax highlighting of a string","prototype":"mixed highlight_string(string $str [, bool $return = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">return<\/code> is set to <strong><code>TRUE<\/code><\/strong>, returns the highlighted   code as a string instead of printing it out. Otherwise, it will return   <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ignore_user_abort":{"id":"function.ignore-user-abort","purpose":"Set whether a client disconnect should abort script execution","prototype":"int ignore_user_abort([bool $value = ''])","return":"<p class=\"para\">   Returns the previous setting, as an integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pack":{"id":"function.pack","purpose":"Pack data into binary string","prototype":"string pack(string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns a binary string containing data.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"php_check_syntax":{"id":"function.php-check-syntax","purpose":"Check the PHP syntax of (and execute) the specified file","prototype":"bool php_check_syntax(string $filename [, string $error_message = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the lint check passed, and <strong><code>FALSE<\/code><\/strong> if the link check   failed or if <code class=\"parameter\">filename<\/code> cannot be opened.  <\/p>","versions":"PHP 5 < 5.0.5"},"php_strip_whitespace":{"id":"function.php-strip-whitespace","purpose":"Return source with stripped comments and whitespace","prototype":"string php_strip_whitespace(string $filename)","return":"<p class=\"para\">   The stripped source code will be returned on success, or an empty string   on failure.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This function respects the value of the    <a href=\"ini.core.html#ini.short-open-tag\" class=\"link\">short_open_tag<\/a>    ini directive.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This function works as described as of PHP 5.0.1. Before this it would    only return an empty string. For more information on this bug and its    prior behavior, see bug report    <a href=\"http:\/\/bugs.php.net\/29606\" class=\"link external\">&raquo;&nbsp;#29606<\/a>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"sapi_windows_cp_conv":{"id":"function.sapi-windows-cp-conv","purpose":"Convert string from one codepage to another","prototype":"string sapi_windows_cp_conv(int|string $in_codepage, int|string $out_codepage, string $subject)","return":"<p class=\"para\">   The <code class=\"parameter\">subject<\/code> string converted to   <code class=\"parameter\">out_codepage<\/code>, or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.0"},"sapi_windows_cp_get":{"id":"function.sapi-windows-cp-get","purpose":"Get process codepage","prototype":"int sapi_windows_cp_get(string $kind)","return":"<p class=\"para\">   Returns the codepage identifier.  <\/p>","versions":"PHP 7 >= 7.1.0"},"sapi_windows_cp_is_utf8":{"id":"function.sapi-windows-cp-is-utf8","purpose":"Indicates whether the codepage is UTF-8 compatible","prototype":"bool sapi_windows_cp_is_utf8()","return":"<p class=\"para\">   Returns whether the codepage of the current process is UTF-8 compatible.  <\/p>","versions":"PHP 7 >= 7.1.0"},"sapi_windows_cp_set":{"id":"function.sapi-windows-cp-set","purpose":"Set process codepage","prototype":"bool sapi_windows_cp_set(int $cp)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.0"},"show_source":{"id":"function.show-source","purpose":"Alias of highlight_file","prototype":" show_source()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"sleep":{"id":"function.sleep","purpose":"Delay execution","prototype":"int sleep(int $seconds)","return":"<p class=\"para\">   Returns zero on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   If the call was interrupted by a signal, <span class=\"function\">sleep<\/span> returns   a non-zero value. On Windows, this value will always be   <em>192<\/em> (the value of the   <strong><code>WAIT_IO_COMPLETION<\/code><\/strong> constant within the Windows API).   On other platforms, the return value will be the number of seconds left to   sleep.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sys_getloadavg":{"id":"function.sys-getloadavg","purpose":"Gets system load average","prototype":"array sys_getloadavg()","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> with three samples (last 1, 5 and 15   minutes).  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"time_nanosleep":{"id":"function.time-nanosleep","purpose":"Delay for a number of seconds and nanoseconds","prototype":"mixed time_nanosleep(int $seconds, int $nanoseconds)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If the delay was interrupted by a signal, an associative array will be   returned with the components:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>seconds<\/em> - number of seconds remaining in      the delay     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>nanoseconds<\/em> - number of nanoseconds      remaining in the delay     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 5, PHP 7"},"time_sleep_until":{"id":"function.time-sleep-until","purpose":"Make the script sleep until the specified time","prototype":"bool time_sleep_until(float $timestamp)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"uniqid":{"id":"function.uniqid","purpose":"Generate a unique ID","prototype":"string uniqid([string $prefix = \"\" [, bool $more_entropy = '']])","return":"<p class=\"para\">   Returns timestamp based unique identifier as a string.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">     This function tries to create unique identifier, but it does not     guarantee 100% uniqueness of return value.   <\/p>  <\/div>","versions":"PHP 4, PHP 5, PHP 7"},"unpack":{"id":"function.unpack","purpose":"Unpack data from binary string","prototype":"array unpack(string $format, string $data [, int $offset = ''])","return":"<p class=\"para\">   Returns an associative array containing unpacked elements of binary   string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"usleep":{"id":"function.usleep","purpose":"Delay execution in microseconds","prototype":"void usleep(int $micro_seconds)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"parsekit_compile_file":{"id":"function.parsekit-compile-file","purpose":"Compile a PHP file and return the resulting op array","prototype":"array parsekit_compile_file(string $filename [, array $errors = '' [, int $options = PARSEKIT_QUIET]])","return":"<p class=\"para\">   Returns a complex multi-layer array structure as detailed below.  <\/p>","versions":"PECL parsekit >= 0.2.0"},"parsekit_compile_string":{"id":"function.parsekit-compile-string","purpose":"Compile a string of PHP code and return the resulting op array","prototype":"array parsekit_compile_string(string $phpcode [, array $errors = '' [, int $options = PARSEKIT_QUIET]])","return":"<p class=\"para\">   Returns a complex multi-layer array structure as detailed below.  <\/p>","versions":"PECL parsekit >= 0.2.0"},"parsekit_func_arginfo":{"id":"function.parsekit-func-arginfo","purpose":"Return information regarding function argument(s)","prototype":"array parsekit_func_arginfo(mixed $function)","return":"<p class=\"para\">   Returns an array containing argument information.  <\/p>","versions":"PECL parsekit >= 0.3.0"},"SplDoublyLinkedList::add":{"id":"spldoublylinkedlist.add","purpose":"Add\/insert a new value at the specified index","prototype":"void SplDoublyLinkedList::add(mixed $index, mixed $newval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"SplDoublyLinkedList::bottom":{"id":"spldoublylinkedlist.bottom","purpose":"Peeks at the node from the beginning of the doubly linked list","prototype":"mixed SplDoublyLinkedList::bottom()","return":"<p class=\"para\">   The value of the first node.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::__construct":{"id":"spldoublylinkedlist.construct","purpose":"Constructs a new doubly linked list","prototype":" SplDoublyLinkedList::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::count":{"id":"spldoublylinkedlist.count","purpose":"Counts the number of elements in the doubly linked list","prototype":"int SplDoublyLinkedList::count()","return":"<p class=\"para\">   Returns the number of elements in the doubly linked list.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::current":{"id":"spldoublylinkedlist.current","purpose":"Return current array entry","prototype":"mixed SplDoublyLinkedList::current()","return":"<p class=\"para\">   The current node value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::getIteratorMode":{"id":"spldoublylinkedlist.getiteratormode","purpose":"Returns the mode of iteration","prototype":"int SplDoublyLinkedList::getIteratorMode()","return":"<p class=\"para\">   Returns the different modes and flags that affect the iteration.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::isEmpty":{"id":"spldoublylinkedlist.isempty","purpose":"Checks whether the doubly linked list is empty","prototype":"bool SplDoublyLinkedList::isEmpty()","return":"<p class=\"para\">   Returns whether the doubly linked list is empty.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::key":{"id":"spldoublylinkedlist.key","purpose":"Return current node index","prototype":"mixed SplDoublyLinkedList::key()","return":"<p class=\"para\">   The current node index.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::next":{"id":"spldoublylinkedlist.next","purpose":"Move to next entry","prototype":"void SplDoublyLinkedList::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::offsetExists":{"id":"spldoublylinkedlist.offsetexists","purpose":"Returns whether the requested $index exists","prototype":"bool SplDoublyLinkedList::offsetExists(mixed $index)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the requested <code class=\"parameter\">index<\/code> exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::offsetGet":{"id":"spldoublylinkedlist.offsetget","purpose":"Returns the value at the specified $index","prototype":"mixed SplDoublyLinkedList::offsetGet(mixed $index)","return":"<p class=\"para\">   The value at the specified <code class=\"parameter\">index<\/code>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::offsetSet":{"id":"spldoublylinkedlist.offsetset","purpose":"Sets the value at the specified $index to $newval","prototype":"void SplDoublyLinkedList::offsetSet(mixed $index, mixed $newval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::offsetUnset":{"id":"spldoublylinkedlist.offsetunset","purpose":"Unsets the value at the specified $index","prototype":"void SplDoublyLinkedList::offsetUnset(mixed $index)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::pop":{"id":"spldoublylinkedlist.pop","purpose":"Pops a node from the end of the doubly linked list","prototype":"mixed SplDoublyLinkedList::pop()","return":"<p class=\"para\">   The value of the popped node.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::prev":{"id":"spldoublylinkedlist.prev","purpose":"Move to previous entry","prototype":"void SplDoublyLinkedList::prev()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::push":{"id":"spldoublylinkedlist.push","purpose":"Pushes an element at the end of the doubly linked list","prototype":"void SplDoublyLinkedList::push(mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::rewind":{"id":"spldoublylinkedlist.rewind","purpose":"Rewind iterator back to the start","prototype":"void SplDoublyLinkedList::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::serialize":{"id":"spldoublylinkedlist.serialize","purpose":"Serializes the storage","prototype":"string SplDoublyLinkedList::serialize()","return":"<p class=\"para\">   The serialized string.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SplDoublyLinkedList::setIteratorMode":{"id":"spldoublylinkedlist.setiteratormode","purpose":"Sets the mode of iteration","prototype":"void SplDoublyLinkedList::setIteratorMode(int $mode)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::shift":{"id":"spldoublylinkedlist.shift","purpose":"Shifts a node from the beginning of the doubly linked list","prototype":"mixed SplDoublyLinkedList::shift()","return":"<p class=\"para\">   The value of the shifted node.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::top":{"id":"spldoublylinkedlist.top","purpose":"Peeks at the node from the end of the doubly linked list","prototype":"mixed SplDoublyLinkedList::top()","return":"<p class=\"para\">   The value of the last node.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::unserialize":{"id":"spldoublylinkedlist.unserialize","purpose":"Unserializes the storage","prototype":"void SplDoublyLinkedList::unserialize(string $serialized)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SplDoublyLinkedList::unshift":{"id":"spldoublylinkedlist.unshift","purpose":"Prepends the doubly linked list with an element","prototype":"void SplDoublyLinkedList::unshift(mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplDoublyLinkedList::valid":{"id":"spldoublylinkedlist.valid","purpose":"Check whether the doubly linked list contains more nodes","prototype":"bool SplDoublyLinkedList::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the doubly linked list contains any more nodes, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplStack::__construct":{"id":"splstack.construct","purpose":"Constructs a new stack implemented using a doubly linked list","prototype":" SplStack::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplStack::setIteratorMode":{"id":"splstack.setiteratormode","purpose":"Sets the mode of iteration","prototype":"void SplStack::setIteratorMode(int $mode)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplQueue::__construct":{"id":"splqueue.construct","purpose":"Constructs a new queue implemented using a doubly linked list","prototype":" SplQueue::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplQueue::dequeue":{"id":"splqueue.dequeue","purpose":"Dequeues a node from the queue","prototype":"mixed SplQueue::dequeue()","return":"<p class=\"para\">   The value of the dequeued node.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplQueue::enqueue":{"id":"splqueue.enqueue","purpose":"Adds an element to the queue","prototype":"void SplQueue::enqueue(mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplQueue::setIteratorMode":{"id":"splqueue.setiteratormode","purpose":"Sets the mode of iteration","prototype":"void SplQueue::setIteratorMode(int $mode)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::compare":{"id":"splheap.compare","purpose":"Compare elements in order to place them correctly in the heap while sifting up","prototype":"int SplHeap::compare(mixed $value1, mixed $value2)","return":"<p class=\"para\">   Result of the comparison, positive integer if <code class=\"parameter\">value1<\/code> is greater than <code class=\"parameter\">value2<\/code>, 0 if they are equal, negative integer otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::__construct":{"id":"splheap.construct","purpose":"Constructs a new empty heap","prototype":" SplHeap::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::count":{"id":"splheap.count","purpose":"Counts the number of elements in the heap","prototype":"int SplHeap::count()","return":"<p class=\"para\">   Returns the number of elements in the heap.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::current":{"id":"splheap.current","purpose":"Return current node pointed by the iterator","prototype":"mixed SplHeap::current()","return":"<p class=\"para\">   The current node value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::extract":{"id":"splheap.extract","purpose":"Extracts a node from top of the heap and sift up","prototype":"mixed SplHeap::extract()","return":"<p class=\"para\">   The value of the extracted node.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::insert":{"id":"splheap.insert","purpose":"Inserts an element in the heap by sifting it up","prototype":"void SplHeap::insert(mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::isCorrupted":{"id":"splheap.iscorrupted","purpose":"Tells if the heap is in a corrupted state","prototype":"bool SplHeap::isCorrupted()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the heap is corrupted, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7"},"SplHeap::isEmpty":{"id":"splheap.isempty","purpose":"Checks whether the heap is empty","prototype":"bool SplHeap::isEmpty()","return":"<p class=\"para\">   Returns whether the heap is empty.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::key":{"id":"splheap.key","purpose":"Return current node index","prototype":"mixed SplHeap::key()","return":"<p class=\"para\">   The current node index.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::next":{"id":"splheap.next","purpose":"Move to the next node","prototype":"void SplHeap::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::recoverFromCorruption":{"id":"splheap.recoverfromcorruption","purpose":"Recover from the corrupted state and allow further actions on the heap","prototype":"void SplHeap::recoverFromCorruption()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::rewind":{"id":"splheap.rewind","purpose":"Rewind iterator back to the start (no-op)","prototype":"void SplHeap::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::top":{"id":"splheap.top","purpose":"Peeks at the node from the top of the heap","prototype":"mixed SplHeap::top()","return":"<p class=\"para\">   The value of the node on the top.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplHeap::valid":{"id":"splheap.valid","purpose":"Check whether the heap contains more nodes","prototype":"bool SplHeap::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the heap contains any more nodes, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplMaxHeap::compare":{"id":"splmaxheap.compare","purpose":"Compare elements in order to place them correctly in the heap while sifting up","prototype":"int SplMaxHeap::compare(mixed $value1, mixed $value2)","return":"<p class=\"para\">   Result of the comparison, positive integer if <code class=\"parameter\">value1<\/code> is greater than <code class=\"parameter\">value2<\/code>, 0 if they are equal, negative integer otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplMinHeap::compare":{"id":"splminheap.compare","purpose":"Compare elements in order to place them correctly in the heap while sifting up","prototype":"int SplMinHeap::compare(mixed $value1, mixed $value2)","return":"<p class=\"para\">   Result of the comparison, positive integer if <code class=\"parameter\">value1<\/code> is lower than <code class=\"parameter\">value2<\/code>, 0 if they are equal, negative integer otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::compare":{"id":"splpriorityqueue.compare","purpose":"Compare priorities in order to place elements correctly in the heap while sifting up","prototype":"int SplPriorityQueue::compare(mixed $priority1, mixed $priority2)","return":"<p class=\"para\">   Result of the comparison, positive integer if <code class=\"parameter\">priority1<\/code> is greater than <code class=\"parameter\">priority2<\/code>, 0 if they are equal, negative integer otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Multiple elements with the same priority will get dequeued in no particular order.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::__construct":{"id":"splpriorityqueue.construct","purpose":"Constructs a new empty queue","prototype":" SplPriorityQueue::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::count":{"id":"splpriorityqueue.count","purpose":"Counts the number of elements in the queue","prototype":"int SplPriorityQueue::count()","return":"<p class=\"para\">   Returns the number of elements in the queue.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::current":{"id":"splpriorityqueue.current","purpose":"Return current node pointed by the iterator","prototype":"mixed SplPriorityQueue::current()","return":"<p class=\"para\">   The value or priority (or both) of the current node, depending on the extract flag.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::extract":{"id":"splpriorityqueue.extract","purpose":"Extracts a node from top of the heap and shift up","prototype":"mixed SplPriorityQueue::extract()","return":"<p class=\"para\">   The value or priority (or both) of the extracted node, depending on the extract flag.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::getExtractFlags":{"id":"splpriorityqueue.getextractflags","purpose":"Get the flags of extraction","prototype":"int SplPriorityQueue::getExtractFlags()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7"},"SplPriorityQueue::insert":{"id":"splpriorityqueue.insert","purpose":"Inserts an element in the queue by sifting it up","prototype":"void SplPriorityQueue::insert(mixed $value, mixed $priority)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::isCorrupted":{"id":"splpriorityqueue.iscorrupted","purpose":"Tells if the priority queue is in a corrupted state","prototype":"bool SplPriorityQueue::isCorrupted()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the priority queue is corrupted, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":""},"SplPriorityQueue::isEmpty":{"id":"splpriorityqueue.isempty","purpose":"Checks whether the queue is empty","prototype":"bool SplPriorityQueue::isEmpty()","return":"<p class=\"para\">   Returns whether the queue is empty.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::key":{"id":"splpriorityqueue.key","purpose":"Return current node index","prototype":"mixed SplPriorityQueue::key()","return":"<p class=\"para\">   The current node index.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::next":{"id":"splpriorityqueue.next","purpose":"Move to the next node","prototype":"void SplPriorityQueue::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::recoverFromCorruption":{"id":"splpriorityqueue.recoverfromcorruption","purpose":"Recover from the corrupted state and allow further actions on the queue","prototype":"void SplPriorityQueue::recoverFromCorruption()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::rewind":{"id":"splpriorityqueue.rewind","purpose":"Rewind iterator back to the start (no-op)","prototype":"void SplPriorityQueue::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::setExtractFlags":{"id":"splpriorityqueue.setextractflags","purpose":"Sets the mode of extraction","prototype":"void SplPriorityQueue::setExtractFlags(int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::top":{"id":"splpriorityqueue.top","purpose":"Peeks at the node from the top of the queue","prototype":"mixed SplPriorityQueue::top()","return":"<p class=\"para\">   The value or priority (or both) of the top node, depending on the extract flag.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplPriorityQueue::valid":{"id":"splpriorityqueue.valid","purpose":"Check whether the queue contains more nodes","prototype":"bool SplPriorityQueue::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the queue contains any more nodes, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::__construct":{"id":"splfixedarray.construct","purpose":"Constructs a new fixed array","prototype":" SplFixedArray::__construct([int $size = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::count":{"id":"splfixedarray.count","purpose":"Returns the size of the array","prototype":"int SplFixedArray::count()","return":"<p class=\"para\">   Returns the size of the array.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::current":{"id":"splfixedarray.current","purpose":"Return current array entry","prototype":"mixed SplFixedArray::current()","return":"<p class=\"para\">   The current element value.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::fromArray":{"id":"splfixedarray.fromarray","purpose":"Import a PHP array in a SplFixedArray instance","prototype":"SplFixedArray SplFixedArray::fromArray(array $array [, bool $save_indexes = ''])","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">SplFixedArray<\/span>    containing the array content.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::getSize":{"id":"splfixedarray.getsize","purpose":"Gets the size of the array","prototype":"int SplFixedArray::getSize()","return":"<p class=\"para\">   Returns the size of the array, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::key":{"id":"splfixedarray.key","purpose":"Return current array index","prototype":"int SplFixedArray::key()","return":"<p class=\"para\">   The current array index.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::next":{"id":"splfixedarray.next","purpose":"Move to next entry","prototype":"void SplFixedArray::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::offsetExists":{"id":"splfixedarray.offsetexists","purpose":"Returns whether the requested index exists","prototype":"bool SplFixedArray::offsetExists(int $index)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the requested <code class=\"parameter\">index<\/code> exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::offsetGet":{"id":"splfixedarray.offsetget","purpose":"Returns the value at the specified index","prototype":"mixed SplFixedArray::offsetGet(int $index)","return":"<p class=\"para\">   The value at the specified <code class=\"parameter\">index<\/code>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::offsetSet":{"id":"splfixedarray.offsetset","purpose":"Sets a new value at a specified index","prototype":"void SplFixedArray::offsetSet(int $index, mixed $newval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::offsetUnset":{"id":"splfixedarray.offsetunset","purpose":"Unsets the value at the specified $index","prototype":"void SplFixedArray::offsetUnset(int $index)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::rewind":{"id":"splfixedarray.rewind","purpose":"Rewind iterator back to the start","prototype":"void SplFixedArray::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::setSize":{"id":"splfixedarray.setsize","purpose":"Change the size of an array","prototype":"bool SplFixedArray::setSize(int $size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::toArray":{"id":"splfixedarray.toarray","purpose":"Returns a PHP array from the fixed array","prototype":"array SplFixedArray::toArray()","return":"<p class=\"para\">   Returns a PHP <span class=\"type\">array<\/span>, similar to the fixed array.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::valid":{"id":"splfixedarray.valid","purpose":"Check whether the array contains more elements","prototype":"bool SplFixedArray::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the array contains any more elements, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplFixedArray::__wakeup":{"id":"splfixedarray.wakeup","purpose":"Reinitialises the array after being unserialised","prototype":"void SplFixedArray::__wakeup()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"SplObjectStorage::addAll":{"id":"splobjectstorage.addall","purpose":"Adds all objects from another storage","prototype":"void SplObjectStorage::addAll(SplObjectStorage $storage)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::attach":{"id":"splobjectstorage.attach","purpose":"Adds an object in the storage","prototype":"object SplObjectStorage::attach(object $object [, mixed $data = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::contains":{"id":"splobjectstorage.contains","purpose":"Checks if the storage contains a specific object","prototype":"object SplObjectStorage::contains(object $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the <span class=\"type\">object<\/span> is in the storage, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::count":{"id":"splobjectstorage.count","purpose":"Returns the number of objects in the storage","prototype":"int SplObjectStorage::count()","return":"<p class=\"para\">   The number of objects in the storage.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::current":{"id":"splobjectstorage.current","purpose":"Returns the current storage entry","prototype":"object SplObjectStorage::current()","return":"<p class=\"para\">   The <span class=\"type\">object<\/span> at the current iterator position.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::detach":{"id":"splobjectstorage.detach","purpose":"Removes an object from the storage","prototype":"object SplObjectStorage::detach(object $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::getHash":{"id":"splobjectstorage.gethash","purpose":"Calculate a unique identifier for the contained objects","prototype":"string SplObjectStorage::getHash(object $object)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> with the calculated identifier.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SplObjectStorage::getInfo":{"id":"splobjectstorage.getinfo","purpose":"Returns the data associated with the current iterator entry","prototype":"mixed SplObjectStorage::getInfo()","return":"<p class=\"para\">   The data associated with the current iterator position.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::key":{"id":"splobjectstorage.key","purpose":"Returns the index at which the iterator currently is","prototype":"int SplObjectStorage::key()","return":"<p class=\"para\">   The index corresponding to the position of the iterator.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::next":{"id":"splobjectstorage.next","purpose":"Move to the next entry","prototype":"object SplObjectStorage::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::offsetExists":{"id":"splobjectstorage.offsetexists","purpose":"Checks whether an object exists in the storage","prototype":"object SplObjectStorage::offsetExists(object $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the <span class=\"type\">object<\/span> exists in the storage,   and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::offsetGet":{"id":"splobjectstorage.offsetget","purpose":"Returns the data associated with an object","prototype":"object SplObjectStorage::offsetGet(object $object)","return":"<p class=\"para\">   The data previously associated with the <span class=\"type\">object<\/span> in the storage.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::offsetSet":{"id":"splobjectstorage.offsetset","purpose":"Associates data to an object in the storage","prototype":"object SplObjectStorage::offsetSet(object $object [, mixed $data = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::offsetUnset":{"id":"splobjectstorage.offsetunset","purpose":"Removes an object from the storage","prototype":"object SplObjectStorage::offsetUnset(object $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::removeAll":{"id":"splobjectstorage.removeall","purpose":"Removes objects contained in another storage from the current storage","prototype":"void SplObjectStorage::removeAll(SplObjectStorage $storage)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::removeAllExcept":{"id":"splobjectstorage.removeallexcept","purpose":"Removes all objects except for those contained in another storage from the current storage","prototype":"void SplObjectStorage::removeAllExcept(SplObjectStorage $storage)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.6, PHP 7"},"SplObjectStorage::rewind":{"id":"splobjectstorage.rewind","purpose":"Rewind the iterator to the first storage element","prototype":"void SplObjectStorage::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplObjectStorage::serialize":{"id":"splobjectstorage.serialize","purpose":"Serializes the storage","prototype":"string SplObjectStorage::serialize()","return":"<p class=\"para\">   A string representing the storage.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"SplObjectStorage::setInfo":{"id":"splobjectstorage.setinfo","purpose":"Sets the data associated with the current iterator entry","prototype":"void SplObjectStorage::setInfo(mixed $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObjectStorage::unserialize":{"id":"splobjectstorage.unserialize","purpose":"Unserializes a storage from its string representation","prototype":"void SplObjectStorage::unserialize(string $serialized)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"SplObjectStorage::valid":{"id":"splobjectstorage.valid","purpose":"Returns if the current iterator entry is valid","prototype":"bool SplObjectStorage::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the iterator entry is valid, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::append":{"id":"appenditerator.append","purpose":"Appends an iterator","prototype":"void AppendIterator::append(Iterator $iterator)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::__construct":{"id":"appenditerator.construct","purpose":"Constructs an AppendIterator","prototype":" AppendIterator::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::current":{"id":"appenditerator.current","purpose":"Gets the current value","prototype":"mixed AppendIterator::current()","return":"<p class=\"para\">   The current value if it is valid or <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::getArrayIterator":{"id":"appenditerator.getarrayiterator","purpose":"Gets the ArrayIterator","prototype":"ArrayIterator AppendIterator::getArrayIterator()","return":"<p class=\"para\">   Returns an <span class=\"classname\">ArrayIterator<\/span> containing   the appended iterators.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"AppendIterator::getInnerIterator":{"id":"appenditerator.getinneriterator","purpose":"Gets the inner iterator","prototype":"Iterator AppendIterator::getInnerIterator()","return":"<p class=\"para\">   The current inner iterator, or <strong><code>NULL<\/code><\/strong> if there is not one.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::getIteratorIndex":{"id":"appenditerator.getiteratorindex","purpose":"Gets an index of iterators","prototype":"int AppendIterator::getIteratorIndex()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span>, which is the zero-based index   of the current inner iterator.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"AppendIterator::key":{"id":"appenditerator.key","purpose":"Gets the current key","prototype":"scalar AppendIterator::key()","return":"<p class=\"para\">   The current key if it is valid or <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::next":{"id":"appenditerator.next","purpose":"Moves to the next element","prototype":"void AppendIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::rewind":{"id":"appenditerator.rewind","purpose":"Rewinds the Iterator","prototype":"void AppendIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"AppendIterator::valid":{"id":"appenditerator.valid","purpose":"Checks validity of the current element","prototype":"bool AppendIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current iteration is valid, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayIterator::append":{"id":"arrayiterator.append","purpose":"Append an element","prototype":"void ArrayIterator::append(mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::asort":{"id":"arrayiterator.asort","purpose":"Sort array by values","prototype":"void ArrayIterator::asort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayIterator::__construct":{"id":"arrayiterator.construct","purpose":"Construct an ArrayIterator","prototype":"object ArrayIterator::__construct([mixed $array = array() [, int $flags = '']])","return":"<p class=\"para\">   An <span class=\"classname\">ArrayIterator<\/span> <span class=\"type\">object<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::count":{"id":"arrayiterator.count","purpose":"Count elements","prototype":"object ArrayIterator::count()","return":"<p class=\"para\">   The number of elements or public properties in the associated   <span class=\"type\">array<\/span> or <span class=\"type\">object<\/span>, respectively.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::current":{"id":"arrayiterator.current","purpose":"Return current array entry","prototype":"array ArrayIterator::current()","return":"<p class=\"para\">   The current <span class=\"type\">array<\/span> entry.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::getArrayCopy":{"id":"arrayiterator.getarraycopy","purpose":"Get array copy","prototype":"array ArrayIterator::getArrayCopy()","return":"<p class=\"para\">   A copy of the <span class=\"type\">array<\/span>, or array of public properties   if ArrayIterator refers to an <span class=\"type\">object<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::getFlags":{"id":"arrayiterator.getflags","purpose":"Get flags","prototype":"void ArrayIterator::getFlags()","return":"<p class=\"para\">   The current flags.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayIterator::key":{"id":"arrayiterator.key","purpose":"Return current array key","prototype":"mixed ArrayIterator::key()","return":"<p class=\"para\">   The current <span class=\"type\">array<\/span> key.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::ksort":{"id":"arrayiterator.ksort","purpose":"Sort array by keys","prototype":"void ArrayIterator::ksort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayIterator::natcasesort":{"id":"arrayiterator.natcasesort","purpose":"Sort an array naturally, case insensitive","prototype":"void ArrayIterator::natcasesort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayIterator::natsort":{"id":"arrayiterator.natsort","purpose":"Sort an array naturally","prototype":"void ArrayIterator::natsort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayIterator::next":{"id":"arrayiterator.next","purpose":"Move to next entry","prototype":"void ArrayIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::offsetExists":{"id":"arrayiterator.offsetexists","purpose":"Check if offset exists","prototype":"void ArrayIterator::offsetExists(string $index)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the offset exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::offsetGet":{"id":"arrayiterator.offsetget","purpose":"Get value for an offset","prototype":"mixed ArrayIterator::offsetGet(string $index)","return":"<p class=\"para\">   The value at offset <code class=\"parameter\">index<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::offsetSet":{"id":"arrayiterator.offsetset","purpose":"Set value for an offset","prototype":"void ArrayIterator::offsetSet(string $index, string $newval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::offsetUnset":{"id":"arrayiterator.offsetunset","purpose":"Unset value for an offset","prototype":"void ArrayIterator::offsetUnset(string $index)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::rewind":{"id":"arrayiterator.rewind","purpose":"Rewind array back to the start","prototype":"void ArrayIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::seek":{"id":"arrayiterator.seek","purpose":"Seek to position","prototype":"void ArrayIterator::seek(int $position)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayIterator::serialize":{"id":"arrayiterator.serialize","purpose":"Serialize","prototype":"string ArrayIterator::serialize()","return":"<p class=\"para\">   The serialized <span class=\"classname\">ArrayIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ArrayIterator::setFlags":{"id":"arrayiterator.setflags","purpose":"Set behaviour flags","prototype":"void ArrayIterator::setFlags(string $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayIterator::uasort":{"id":"arrayiterator.uasort","purpose":"Sort with a user-defined comparison function and maintain index association","prototype":"void ArrayIterator::uasort(callable $cmp_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayIterator::uksort":{"id":"arrayiterator.uksort","purpose":"Sort by keys using a user-defined comparison function","prototype":"void ArrayIterator::uksort(callable $cmp_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayIterator::unserialize":{"id":"arrayiterator.unserialize","purpose":"Unserialize","prototype":"string ArrayIterator::unserialize(string $serialized)","return":"<p class=\"para\">   The <span class=\"classname\">ArrayIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ArrayIterator::valid":{"id":"arrayiterator.valid","purpose":"Check whether array contains more entries","prototype":"array ArrayIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the iterator is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::__construct":{"id":"cachingiterator.construct","purpose":"Construct a new CachingIterator object for the iterator","prototype":" CachingIterator::__construct(Iterator $iterator [, int $flags = self::CALL_TOSTRING])","return":"","versions":"PHP 5, PHP 7"},"CachingIterator::count":{"id":"cachingiterator.count","purpose":"The number of elements in the iterator","prototype":"int CachingIterator::count()","return":"<p class=\"para\">   The count of the elements iterated over.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"CachingIterator::current":{"id":"cachingiterator.current","purpose":"Return the current element","prototype":"void CachingIterator::current()","return":"<p class=\"para\">   Mixed  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::getCache":{"id":"cachingiterator.getcache","purpose":"Retrieve the contents of the cache","prototype":"array CachingIterator::getCache()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing the cache items.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::getFlags":{"id":"cachingiterator.getflags","purpose":"Get flags used","prototype":"int CachingIterator::getFlags()","return":"<p class=\"para\">   Description...  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::getInnerIterator":{"id":"cachingiterator.getinneriterator","purpose":"Returns the inner iterator","prototype":"Iterator CachingIterator::getInnerIterator()","return":"<p class=\"para\">   Returns an object implementing the Iterator interface.  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::hasNext":{"id":"cachingiterator.hasnext","purpose":"Check whether the inner iterator has a valid next element","prototype":"void CachingIterator::hasNext()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::key":{"id":"cachingiterator.key","purpose":"Return the key for the current element","prototype":"scalar CachingIterator::key()","return":"","versions":"PHP 5, PHP 7"},"CachingIterator::next":{"id":"cachingiterator.next","purpose":"Move the iterator forward","prototype":"void CachingIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::offsetExists":{"id":"cachingiterator.offsetexists","purpose":"The offsetExists purpose","prototype":"void CachingIterator::offsetExists(string $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if an entry referenced by the offset exists, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::offsetGet":{"id":"cachingiterator.offsetget","purpose":"The offsetGet purpose","prototype":"void CachingIterator::offsetGet(string $index)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::offsetSet":{"id":"cachingiterator.offsetset","purpose":"The offsetSet purpose","prototype":"void CachingIterator::offsetSet(string $index, string $newval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::offsetUnset":{"id":"cachingiterator.offsetunset","purpose":"The offsetUnset purpose","prototype":"void CachingIterator::offsetUnset(string $index)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::rewind":{"id":"cachingiterator.rewind","purpose":"Rewind the iterator","prototype":"void CachingIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::setFlags":{"id":"cachingiterator.setflags","purpose":"The setFlags purpose","prototype":"void CachingIterator::setFlags(int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"CachingIterator::__toString":{"id":"cachingiterator.tostring","purpose":"Return the string representation of the current element","prototype":"void CachingIterator::__toString()","return":"<p class=\"para\">   The <span class=\"type\">string<\/span> representation of the current element.  <\/p>","versions":"PHP 5, PHP 7"},"CachingIterator::valid":{"id":"cachingiterator.valid","purpose":"Check whether the current element is valid","prototype":"void CachingIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"CallbackFilterIterator::accept":{"id":"callbackfilteriterator.accept","purpose":"Calls the callback with the current value, the current key and the inner iterator as arguments","prototype":"string CallbackFilterIterator::accept()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> to accept the current item, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"CallbackFilterIterator::__construct":{"id":"callbackfilteriterator.construct","purpose":"Create a filtered iterator from another iterator","prototype":" CallbackFilterIterator::__construct(Iterator $iterator, callable $callback)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"DirectoryIterator::__construct":{"id":"directoryiterator.construct","purpose":"Constructs a new directory iterator from a path","prototype":" DirectoryIterator::__construct(string $path)","return":"","versions":"PHP 5, PHP 7"},"DirectoryIterator::current":{"id":"directoryiterator.current","purpose":"Return the current DirectoryIterator item","prototype":"DirectoryIterator DirectoryIterator::current()","return":"<p class=\"para\">   The current <span class=\"classname\">DirectoryIterator<\/span> item.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getATime":{"id":"directoryiterator.getatime","purpose":"Get last access time of the current DirectoryIterator item","prototype":"int DirectoryIterator::getATime()","return":"<p class=\"para\">   Returns the time the file was last accessed, as a Unix timestamp.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getBasename":{"id":"directoryiterator.getbasename","purpose":"Get base name of current DirectoryIterator item","prototype":"string DirectoryIterator::getBasename([string $suffix = ''])","return":"<p class=\"para\">   The base name of the current <span class=\"classname\">DirectoryIterator<\/span> item.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"DirectoryIterator::getCTime":{"id":"directoryiterator.getctime","purpose":"Get inode change time of the current DirectoryIterator item","prototype":"int DirectoryIterator::getCTime()","return":"<p class=\"para\">   Returns the last change time of the file, as a Unix timestamp.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getExtension":{"id":"directoryiterator.getextension","purpose":"Gets the file extension","prototype":"string DirectoryIterator::getExtension()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> containing the file extension, or an   empty <span class=\"type\">string<\/span> if the file has no extension.  <\/p>","versions":"PHP 5 >= 5.3.6, PHP 7"},"DirectoryIterator::getFilename":{"id":"directoryiterator.getfilename","purpose":"Return file name of current DirectoryIterator item","prototype":"string DirectoryIterator::getFilename()","return":"<p class=\"para\">   Returns the file name of the current <span class=\"classname\">DirectoryIterator<\/span> item.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getGroup":{"id":"directoryiterator.getgroup","purpose":"Get group for the current DirectoryIterator item","prototype":"int DirectoryIterator::getGroup()","return":"<p class=\"para\">   Returns the group id of the current    <span class=\"classname\">DirectoryIterator<\/span> item   in numerical format.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getInode":{"id":"directoryiterator.getinode","purpose":"Get inode for the current DirectoryIterator item","prototype":"int DirectoryIterator::getInode()","return":"<p class=\"para\">   Returns the inode number for the file.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getMTime":{"id":"directoryiterator.getmtime","purpose":"Get last modification time of current DirectoryIterator item","prototype":"int DirectoryIterator::getMTime()","return":"<p class=\"para\">   The last modification time of the file, as a Unix timestamp.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getOwner":{"id":"directoryiterator.getowner","purpose":"Get owner of current DirectoryIterator item","prototype":"int DirectoryIterator::getOwner()","return":"<p class=\"para\">   The file owner of the file, in numerical format.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getPath":{"id":"directoryiterator.getpath","purpose":"Get path of current Iterator item without filename","prototype":"string DirectoryIterator::getPath()","return":"<p class=\"para\">   Returns the path to the file, omitting the file name and any trailing slash.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getPathname":{"id":"directoryiterator.getpathname","purpose":"Return path and file name of current DirectoryIterator item","prototype":"string DirectoryIterator::getPathname()","return":"<p class=\"para\">   Returns the path and file name of current file. Directories do not have a trailing slash.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getPerms":{"id":"directoryiterator.getperms","purpose":"Get the permissions of current DirectoryIterator item","prototype":"int DirectoryIterator::getPerms()","return":"<p class=\"para\">   Returns the permissions of the file, as a decimal <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getSize":{"id":"directoryiterator.getsize","purpose":"Get size of current DirectoryIterator item","prototype":"int DirectoryIterator::getSize()","return":"<p class=\"para\">   Returns the size of the file, in bytes.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::getType":{"id":"directoryiterator.gettype","purpose":"Determine the type of the current DirectoryIterator item","prototype":"string DirectoryIterator::getType()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> representing the type of the file.   May be one of <em>file<\/em>, <em>link<\/em>,   or <em>dir<\/em>.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isDir":{"id":"directoryiterator.isdir","purpose":"Determine if current DirectoryIterator item is a directory","prototype":"bool DirectoryIterator::isDir()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if it is a directory, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isDot":{"id":"directoryiterator.isdot","purpose":"Determine if current DirectoryIterator item is '.' or '..'","prototype":"bool DirectoryIterator::isDot()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the entry is <em>.<\/em> or <em>..<\/em>,   otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isExecutable":{"id":"directoryiterator.isexecutable","purpose":"Determine if current DirectoryIterator item is executable","prototype":"bool DirectoryIterator::isExecutable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the entry is executable, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isFile":{"id":"directoryiterator.isfile","purpose":"Determine if current DirectoryIterator item is a regular file","prototype":"bool DirectoryIterator::isFile()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file exists and is a regular file    (not a <em>link<\/em> or <em>dir<\/em>),    otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isLink":{"id":"directoryiterator.islink","purpose":"Determine if current DirectoryIterator item is a symbolic link","prototype":"bool DirectoryIterator::isLink()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the item is a symbolic link, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isReadable":{"id":"directoryiterator.isreadable","purpose":"Determine if current DirectoryIterator item can be read","prototype":"bool DirectoryIterator::isReadable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file is readable, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::isWritable":{"id":"directoryiterator.iswritable","purpose":"Determine if current DirectoryIterator item can be written to","prototype":"bool DirectoryIterator::isWritable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file\/directory is writable, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::key":{"id":"directoryiterator.key","purpose":"Return the key for the current DirectoryIterator item","prototype":"string DirectoryIterator::key()","return":"<p class=\"para\">   The key for the current <span class=\"classname\">DirectoryIterator<\/span> item.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::next":{"id":"directoryiterator.next","purpose":"Move forward to next DirectoryIterator item","prototype":"void DirectoryIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::rewind":{"id":"directoryiterator.rewind","purpose":"Rewind the DirectoryIterator back to the start","prototype":"void DirectoryIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::seek":{"id":"directoryiterator.seek","purpose":"Seek to a DirectoryIterator item","prototype":"void DirectoryIterator::seek(int $position)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"DirectoryIterator::__toString":{"id":"directoryiterator.tostring","purpose":"Get file name as a string","prototype":"string DirectoryIterator::__toString()","return":"<p class=\"para\">   Returns the file name of the current <span class=\"classname\">DirectoryIterator<\/span> item.  <\/p>","versions":"PHP 5, PHP 7"},"DirectoryIterator::valid":{"id":"directoryiterator.valid","purpose":"Check whether current DirectoryIterator position is a valid file","prototype":"bool DirectoryIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the position is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"EmptyIterator::current":{"id":"emptyiterator.current","purpose":"The current() method","prototype":"mixed EmptyIterator::current()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"EmptyIterator::key":{"id":"emptyiterator.key","purpose":"The key() method","prototype":"scalar EmptyIterator::key()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"EmptyIterator::next":{"id":"emptyiterator.next","purpose":"The next() method","prototype":"void EmptyIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"EmptyIterator::rewind":{"id":"emptyiterator.rewind","purpose":"The rewind() method","prototype":"void EmptyIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"EmptyIterator::valid":{"id":"emptyiterator.valid","purpose":"The valid() method","prototype":"bool EmptyIterator::valid()","return":"<p class=\"para\">   <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilesystemIterator::__construct":{"id":"filesystemiterator.construct","purpose":"Constructs a new filesystem iterator","prototype":" FilesystemIterator::__construct(string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilesystemIterator::current":{"id":"filesystemiterator.current","purpose":"The current file","prototype":"mixed FilesystemIterator::current()","return":"<p class=\"para\">   The filename, file information, or $this depending on the set flags.   See the <a href=\"class.filesystemiterator.html#filesystemiterator.constants\" class=\"link\">FilesystemIterator constants<\/a>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilesystemIterator::getFlags":{"id":"filesystemiterator.getflags","purpose":"Get the handling flags","prototype":"int FilesystemIterator::getFlags()","return":"<p class=\"para\">   The integer value of the set flags.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilesystemIterator::key":{"id":"filesystemiterator.key","purpose":"Retrieve the key for the current file","prototype":"string FilesystemIterator::key()","return":"<p class=\"para\">   Returns the pathname or filename depending on the set flags.   See the <a href=\"class.filesystemiterator.html#filesystemiterator.constants\" class=\"link\">FilesystemIterator constants<\/a>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilesystemIterator::next":{"id":"filesystemiterator.next","purpose":"Move to the next file","prototype":"void FilesystemIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilesystemIterator::rewind":{"id":"filesystemiterator.rewind","purpose":"Rewinds back to the beginning","prototype":"void FilesystemIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilesystemIterator::setFlags":{"id":"filesystemiterator.setflags","purpose":"Sets handling flags","prototype":"void FilesystemIterator::setFlags([int $flags = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"FilterIterator::accept":{"id":"filteriterator.accept","purpose":"Check whether the current element of the iterator is acceptable","prototype":"bool FilterIterator::accept()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current element is acceptable, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::__construct":{"id":"filteriterator.construct","purpose":"Construct a filterIterator","prototype":" FilterIterator::__construct(Iterator $iterator)","return":"<p class=\"para\">   The <span class=\"classname\">FilterIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::current":{"id":"filteriterator.current","purpose":"Get the current element value","prototype":"mixed FilterIterator::current()","return":"<p class=\"para\">   The current element value.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::getInnerIterator":{"id":"filteriterator.getinneriterator","purpose":"Get the inner iterator","prototype":"Iterator FilterIterator::getInnerIterator()","return":"<p class=\"para\">   The inner iterator.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::key":{"id":"filteriterator.key","purpose":"Get the current key","prototype":"mixed FilterIterator::key()","return":"<p class=\"para\">   The current key.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::next":{"id":"filteriterator.next","purpose":"Move the iterator forward","prototype":"void FilterIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::rewind":{"id":"filteriterator.rewind","purpose":"Rewind the iterator","prototype":"void FilterIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"FilterIterator::valid":{"id":"filteriterator.valid","purpose":"Check whether the current element is valid","prototype":"bool FilterIterator::valid()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current element is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"GlobIterator::__construct":{"id":"globiterator.construct","purpose":"Construct a directory using glob","prototype":" GlobIterator::__construct(string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO])","return":"","versions":"PHP 5 >= 5.3.0, PHP 7"},"GlobIterator::count":{"id":"globiterator.count","purpose":"Get the number of directories and files","prototype":"int GlobIterator::count()","return":"<p class=\"para\">   The number of returned directories and files, as an   <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"InfiniteIterator::__construct":{"id":"infiniteiterator.construct","purpose":"Constructs an InfiniteIterator","prototype":" InfiniteIterator::__construct(Iterator $iterator)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"InfiniteIterator::next":{"id":"infiniteiterator.next","purpose":"Moves the inner Iterator forward or rewinds it","prototype":"void InfiniteIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::__construct":{"id":"iteratoriterator.construct","purpose":"Create an iterator from anything that is traversable","prototype":" IteratorIterator::__construct(Traversable $iterator)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::current":{"id":"iteratoriterator.current","purpose":"Get the current value","prototype":"mixed IteratorIterator::current()","return":"<p class=\"para\">   The value of the current element.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::getInnerIterator":{"id":"iteratoriterator.getinneriterator","purpose":"Get the inner iterator","prototype":"Traversable IteratorIterator::getInnerIterator()","return":"<p class=\"para\">   The inner iterator as passed to  <span class=\"methodname\">IteratorIterator::__construct<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::key":{"id":"iteratoriterator.key","purpose":"Get the key of the current element","prototype":"scalar IteratorIterator::key()","return":"<p class=\"para\">   The key of the current element.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::next":{"id":"iteratoriterator.next","purpose":"Forward to the next element","prototype":"void IteratorIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::rewind":{"id":"iteratoriterator.rewind","purpose":"Rewind to the first element","prototype":"void IteratorIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"IteratorIterator::valid":{"id":"iteratoriterator.valid","purpose":"Checks if the iterator is valid","prototype":"bool IteratorIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the iterator is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::__construct":{"id":"limititerator.construct","purpose":"Construct a LimitIterator","prototype":" LimitIterator::__construct(Iterator $iterator [, int $offset = '' [, int $count = -1]])","return":"<p class=\"para\">   The new <span class=\"classname\">LimitIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::current":{"id":"limititerator.current","purpose":"Get current element","prototype":"mixed LimitIterator::current()","return":"<p class=\"para\">   Returns the current element or <strong><code>NULL<\/code><\/strong> if there is none.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::getInnerIterator":{"id":"limititerator.getinneriterator","purpose":"Get inner iterator","prototype":"Iterator LimitIterator::getInnerIterator()","return":"<p class=\"para\">   The inner iterator passed to  <span class=\"methodname\">LimitIterator::__construct<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::getPosition":{"id":"limititerator.getposition","purpose":"Return the current position","prototype":"int LimitIterator::getPosition()","return":"<p class=\"para\">   The current position.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::key":{"id":"limititerator.key","purpose":"Get current key","prototype":"mixed LimitIterator::key()","return":"<p class=\"para\">   Returns the key for the current item.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::next":{"id":"limititerator.next","purpose":"Move the iterator forward","prototype":"void LimitIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::rewind":{"id":"limititerator.rewind","purpose":"Rewind the iterator to the specified starting offset","prototype":"void LimitIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::seek":{"id":"limititerator.seek","purpose":"Seek to the given position","prototype":"int LimitIterator::seek(int $position)","return":"<p class=\"para\">   Returns the offset position after seeking.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"LimitIterator::valid":{"id":"limititerator.valid","purpose":"Check whether the current element is valid","prototype":"bool LimitIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"MultipleIterator::attachIterator":{"id":"multipleiterator.attachiterator","purpose":"Attaches iterator information","prototype":"void MultipleIterator::attachIterator(Iterator $iterator [, string $infos = ''])","return":"<p class=\"para\">   Description...  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::__construct":{"id":"multipleiterator.construct","purpose":"Constructs a new MultipleIterator","prototype":" MultipleIterator::__construct([int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::containsIterator":{"id":"multipleiterator.containsiterator","purpose":"Checks if an iterator is attached","prototype":"bool MultipleIterator::containsIterator(Iterator $iterator)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::countIterators":{"id":"multipleiterator.countiterators","purpose":"Gets the number of attached iterator instances","prototype":"int MultipleIterator::countIterators()","return":"<p class=\"para\">   The number of attached iterator instances (as an <span class=\"type\">integer<\/span>).  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::current":{"id":"multipleiterator.current","purpose":"Gets the registered iterator instances","prototype":"array MultipleIterator::current()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing the current values of each attached iterator,   or <strong><code>FALSE<\/code><\/strong> if no iterators are attached.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::detachIterator":{"id":"multipleiterator.detachiterator","purpose":"Detaches an iterator","prototype":"void MultipleIterator::detachIterator(Iterator $iterator)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::getFlags":{"id":"multipleiterator.getflags","purpose":"Gets the flag information","prototype":"int MultipleIterator::getFlags()","return":"<p class=\"para\">   Information about the flags, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::key":{"id":"multipleiterator.key","purpose":"Gets the registered iterator instances","prototype":"array MultipleIterator::key()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of all registered iterator instances,   or <strong><code>FALSE<\/code><\/strong> if no sub iterator is attached.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::next":{"id":"multipleiterator.next","purpose":"Moves all attached iterator instances forward","prototype":"void MultipleIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::rewind":{"id":"multipleiterator.rewind","purpose":"Rewinds all attached iterator instances","prototype":"void MultipleIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::setFlags":{"id":"multipleiterator.setflags","purpose":"Sets flags","prototype":"void MultipleIterator::setFlags(int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"MultipleIterator::valid":{"id":"multipleiterator.valid","purpose":"Checks the validity of sub iterators","prototype":"bool MultipleIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if one or all sub iterators are valid depending on flags,   otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"NoRewindIterator::__construct":{"id":"norewinditerator.construct","purpose":"Construct a NoRewindIterator","prototype":" NoRewindIterator::__construct(Iterator $iterator)","return":"<p class=\"para\">   A  <span class=\"methodname\">NoRewindIterator<\/span> based on the passed in   <code class=\"parameter\">iterator<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"NoRewindIterator::current":{"id":"norewinditerator.current","purpose":"Get the current value","prototype":"mixed NoRewindIterator::current()","return":"<p class=\"para\">   The current value.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"NoRewindIterator::getInnerIterator":{"id":"norewinditerator.getinneriterator","purpose":"Get the inner iterator","prototype":"iterator NoRewindIterator::getInnerIterator()","return":"<p class=\"para\">   The inner iterator, as passed to  <span class=\"methodname\">NoRewindIterator::__construct<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"NoRewindIterator::key":{"id":"norewinditerator.key","purpose":"Get the current key","prototype":"mixed NoRewindIterator::key()","return":"<p class=\"para\">   The current key.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"NoRewindIterator::next":{"id":"norewinditerator.next","purpose":"Forward to the next element","prototype":"void NoRewindIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"NoRewindIterator::rewind":{"id":"norewinditerator.rewind","purpose":"Prevents the rewind operation on the inner iterator","prototype":"void NoRewindIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"NoRewindIterator::valid":{"id":"norewinditerator.valid","purpose":"Validates the iterator","prototype":"bool NoRewindIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ParentIterator::accept":{"id":"parentiterator.accept","purpose":"Determines acceptability","prototype":"bool ParentIterator::accept()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current element is acceptable, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ParentIterator::__construct":{"id":"parentiterator.construct","purpose":"Constructs a ParentIterator","prototype":" ParentIterator::__construct(RecursiveIterator $iterator)","return":"<p class=\"para\">   The <span class=\"classname\">ParentIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ParentIterator::getChildren":{"id":"parentiterator.getchildren","purpose":"Return the inner iterator's children contained in a ParentIterator","prototype":"ParentIterator ParentIterator::getChildren()","return":"<p class=\"para\">   An <span class=\"type\">object<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ParentIterator::hasChildren":{"id":"parentiterator.haschildren","purpose":"Check whether the inner iterator's current element has children","prototype":"bool ParentIterator::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ParentIterator::next":{"id":"parentiterator.next","purpose":"Move the iterator forward","prototype":"void ParentIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ParentIterator::rewind":{"id":"parentiterator.rewind","purpose":"Rewind the iterator","prototype":"void ParentIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveArrayIterator::getChildren":{"id":"recursivearrayiterator.getchildren","purpose":"Returns an iterator for the current entry if it is an array or an object","prototype":"RecursiveArrayIterator RecursiveArrayIterator::getChildren()","return":"<p class=\"para\">   An iterator for the current entry, if it is an <span class=\"type\">array<\/span> or <span class=\"type\">object<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveArrayIterator::hasChildren":{"id":"recursivearrayiterator.haschildren","purpose":"Returns whether current entry is an array or an object","prototype":"object RecursiveArrayIterator::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current entry is an <span class=\"type\">array<\/span> or an <span class=\"type\">object<\/span>,   otherwise <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveCachingIterator::__construct":{"id":"recursivecachingiterator.construct","purpose":"Construct","prototype":" RecursiveCachingIterator::__construct(Iterator $iterator [, string $flags = self::CALL_TOSTRING])","return":"<p class=\"para\">   The <span class=\"classname\">RecursiveCachingIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveCachingIterator::getChildren":{"id":"recursivecachingiterator.getchildren","purpose":"Return the inner iterator's children as a RecursiveCachingIterator","prototype":"RecursiveCachingIterator RecursiveCachingIterator::getChildren()","return":"<p class=\"para\">   The inner iterator&#039;s children, as a RecursiveCachingIterator.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveCachingIterator::hasChildren":{"id":"recursivecachingiterator.haschildren","purpose":"Check whether the current element of the inner iterator has children","prototype":"bool RecursiveCachingIterator::hasChildren()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the inner iterator has children, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveCallbackFilterIterator::__construct":{"id":"recursivecallbackfilteriterator.construct","purpose":"Create a RecursiveCallbackFilterIterator from a RecursiveIterator","prototype":" RecursiveCallbackFilterIterator::__construct(RecursiveIterator $iterator, string $callback)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"RecursiveCallbackFilterIterator::getChildren":{"id":"recursivecallbackfilteriterator.getchildren","purpose":"Return the inner iterator's children contained in a RecursiveCallbackFilterIterator","prototype":"RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren()","return":"<p class=\"para\">   Returns a <span class=\"classname\">RecursiveCallbackFilterIterator<\/span> containing   the children.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"RecursiveCallbackFilterIterator::hasChildren":{"id":"recursivecallbackfilteriterator.haschildren","purpose":"Check whether the inner iterator's current element has children","prototype":"bool RecursiveCallbackFilterIterator::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current element has children, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"RecursiveDirectoryIterator::__construct":{"id":"recursivedirectoryiterator.construct","purpose":"Constructs a RecursiveDirectoryIterator","prototype":" RecursiveDirectoryIterator::__construct(string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO])","return":"<p class=\"para\">   Returns the newly created <span class=\"classname\">RecursiveDirectoryIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"RecursiveDirectoryIterator::getChildren":{"id":"recursivedirectoryiterator.getchildren","purpose":"Returns an iterator for the current entry if it is a directory","prototype":"mixed RecursiveDirectoryIterator::getChildren()","return":"<p class=\"para\">   The filename, file information, or $this depending on the set flags.   See the <a href=\"class.filesystemiterator.html#filesystemiterator.constants\" class=\"link\">FilesystemIterator   constants<\/a>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveDirectoryIterator::getSubPath":{"id":"recursivedirectoryiterator.getsubpath","purpose":"Get sub path","prototype":"string RecursiveDirectoryIterator::getSubPath()","return":"<p class=\"para\">   The sub path.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveDirectoryIterator::getSubPathname":{"id":"recursivedirectoryiterator.getsubpathname","purpose":"Get sub path and name","prototype":"string RecursiveDirectoryIterator::getSubPathname()","return":"<p class=\"para\">   The sub path (sub directory) and filename.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveDirectoryIterator::hasChildren":{"id":"recursivedirectoryiterator.haschildren","purpose":"Returns whether current entry is a directory and not '.' or '..'","prototype":"bool RecursiveDirectoryIterator::hasChildren([bool $allow_links = ''])","return":"<p class=\"para\">   Returns whether the current entry is a directory, but not &#039;.&#039; or &#039;..&#039;  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveDirectoryIterator::key":{"id":"recursivedirectoryiterator.key","purpose":"Return path and filename of current dir entry","prototype":"string RecursiveDirectoryIterator::key()","return":"<p class=\"para\">   The path and filename of the current dir entry.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveDirectoryIterator::next":{"id":"recursivedirectoryiterator.next","purpose":"Move to next entry","prototype":"void RecursiveDirectoryIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveDirectoryIterator::rewind":{"id":"recursivedirectoryiterator.rewind","purpose":"Rewind dir back to the start","prototype":"void RecursiveDirectoryIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveFilterIterator::__construct":{"id":"recursivefilteriterator.construct","purpose":"Create a RecursiveFilterIterator from a RecursiveIterator","prototype":" RecursiveFilterIterator::__construct(RecursiveIterator $iterator)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveFilterIterator::getChildren":{"id":"recursivefilteriterator.getchildren","purpose":"Return the inner iterator's children contained in a RecursiveFilterIterator","prototype":"RecursiveFilterIterator RecursiveFilterIterator::getChildren()","return":"<p class=\"para\">   Returns a <span class=\"classname\">RecursiveFilterIterator<\/span> containing the inner iterator&#039;s children.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveFilterIterator::hasChildren":{"id":"recursivefilteriterator.haschildren","purpose":"Check whether the inner iterator's current element has children","prototype":"bool RecursiveFilterIterator::hasChildren()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the inner iterator has children, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::beginChildren":{"id":"recursiveiteratoriterator.beginchildren","purpose":"Begin children","prototype":"void RecursiveIteratorIterator::beginChildren()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::beginIteration":{"id":"recursiveiteratoriterator.beginiteration","purpose":"Begin Iteration","prototype":"void RecursiveIteratorIterator::beginIteration()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::callGetChildren":{"id":"recursiveiteratoriterator.callgetchildren","purpose":"Get children","prototype":"RecursiveIterator RecursiveIteratorIterator::callGetChildren()","return":"<p class=\"para\">   A  <span class=\"methodname\">RecursiveIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::callHasChildren":{"id":"recursiveiteratoriterator.callhaschildren","purpose":"Has children","prototype":"bool RecursiveIteratorIterator::callHasChildren()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the element has children, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::__construct":{"id":"recursiveiteratoriterator.construct","purpose":"Construct a RecursiveIteratorIterator","prototype":" RecursiveIteratorIterator::__construct(Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"RecursiveIteratorIterator::current":{"id":"recursiveiteratoriterator.current","purpose":"Access the current element value","prototype":"mixed RecursiveIteratorIterator::current()","return":"<p class=\"para\">   The current elements value.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveIteratorIterator::endChildren":{"id":"recursiveiteratoriterator.endchildren","purpose":"End children","prototype":"void RecursiveIteratorIterator::endChildren()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::endIteration":{"id":"recursiveiteratoriterator.enditeration","purpose":"End Iteration","prototype":"void RecursiveIteratorIterator::endIteration()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::getDepth":{"id":"recursiveiteratoriterator.getdepth","purpose":"Get the current depth of the recursive iteration","prototype":"int RecursiveIteratorIterator::getDepth()","return":"<p class=\"para\">   The current depth of the recursive iteration.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveIteratorIterator::getInnerIterator":{"id":"recursiveiteratoriterator.getinneriterator","purpose":"Get inner iterator","prototype":"iterator RecursiveIteratorIterator::getInnerIterator()","return":"<p class=\"para\">   The current active sub iterator.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::getMaxDepth":{"id":"recursiveiteratoriterator.getmaxdepth","purpose":"Get max depth","prototype":"mixed RecursiveIteratorIterator::getMaxDepth()","return":"<p class=\"para\">   The maximum accepted depth, or <strong><code>FALSE<\/code><\/strong> if any depth is allowed.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::getSubIterator":{"id":"recursiveiteratoriterator.getsubiterator","purpose":"The current active sub iterator","prototype":"RecursiveIterator RecursiveIteratorIterator::getSubIterator([int $level = ''])","return":"<p class=\"para\">   The current active sub iterator.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveIteratorIterator::key":{"id":"recursiveiteratoriterator.key","purpose":"Access the current key","prototype":"mixed RecursiveIteratorIterator::key()","return":"<p class=\"para\">   The current key.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveIteratorIterator::next":{"id":"recursiveiteratoriterator.next","purpose":"Move forward to the next element","prototype":"void RecursiveIteratorIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveIteratorIterator::nextElement":{"id":"recursiveiteratoriterator.nextelement","purpose":"Next element","prototype":"void RecursiveIteratorIterator::nextElement()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::rewind":{"id":"recursiveiteratoriterator.rewind","purpose":"Rewind the iterator to the first element of the top level inner iterator","prototype":"void RecursiveIteratorIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveIteratorIterator::setMaxDepth":{"id":"recursiveiteratoriterator.setmaxdepth","purpose":"Set max depth","prototype":"void RecursiveIteratorIterator::setMaxDepth([int $max_depth = -1])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIteratorIterator::valid":{"id":"recursiveiteratoriterator.valid","purpose":"Check whether the current position is valid","prototype":"bool RecursiveIteratorIterator::valid()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current position is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"RecursiveRegexIterator::__construct":{"id":"recursiveregexiterator.construct","purpose":"Creates a new RecursiveRegexIterator","prototype":" RecursiveRegexIterator::__construct(RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = '' [, int $preg_flags = '']]])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"RecursiveRegexIterator::getChildren":{"id":"recursiveregexiterator.getchildren","purpose":"Returns an iterator for the current entry","prototype":"RecursiveRegexIterator RecursiveRegexIterator::getChildren()","return":"<p class=\"para\">   An iterator for the current entry, if it can be iterated over by the inner iterator.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RecursiveRegexIterator::hasChildren":{"id":"recursiveregexiterator.haschildren","purpose":"Returns whether an iterator can be obtained for the current entry","prototype":"bool RecursiveRegexIterator::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if an iterator can be obtained for the current entry, otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RecursiveTreeIterator::beginChildren":{"id":"recursivetreeiterator.beginchildren","purpose":"Begin children","prototype":"void RecursiveTreeIterator::beginChildren()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::beginIteration":{"id":"recursivetreeiterator.beginiteration","purpose":"Begin iteration","prototype":"RecursiveIterator RecursiveTreeIterator::beginIteration()","return":"<p class=\"para\">   A <span class=\"classname\">RecursiveIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::callGetChildren":{"id":"recursivetreeiterator.callgetchildren","purpose":"Get children","prototype":"RecursiveIterator RecursiveTreeIterator::callGetChildren()","return":"<p class=\"para\">   A <span class=\"classname\">RecursiveIterator<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::callHasChildren":{"id":"recursivetreeiterator.callhaschildren","purpose":"Has children","prototype":"bool RecursiveTreeIterator::callHasChildren()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if there are children, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::__construct":{"id":"recursivetreeiterator.construct","purpose":"Construct a RecursiveTreeIterator","prototype":" RecursiveTreeIterator::__construct(RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST]]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::current":{"id":"recursivetreeiterator.current","purpose":"Get current element","prototype":"string RecursiveTreeIterator::current()","return":"<p class=\"para\">   Returns the current element prefixed and postfixed.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::endChildren":{"id":"recursivetreeiterator.endchildren","purpose":"End children","prototype":"void RecursiveTreeIterator::endChildren()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::endIteration":{"id":"recursivetreeiterator.enditeration","purpose":"End iteration","prototype":"void RecursiveTreeIterator::endIteration()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::getEntry":{"id":"recursivetreeiterator.getentry","purpose":"Get current entry","prototype":"string RecursiveTreeIterator::getEntry()","return":"<p class=\"para\">   Returns the part of the tree built for the current element.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::getPostfix":{"id":"recursivetreeiterator.getpostfix","purpose":"Get the postfix","prototype":"string RecursiveTreeIterator::getPostfix()","return":"<p class=\"para\">    Returns the string to place after the current element.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::getPrefix":{"id":"recursivetreeiterator.getprefix","purpose":"Get the prefix","prototype":"string RecursiveTreeIterator::getPrefix()","return":"<p class=\"para\">   Returns the string to place in front of current element  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::key":{"id":"recursivetreeiterator.key","purpose":"Get the key of the current element","prototype":"string RecursiveTreeIterator::key()","return":"<p class=\"para\">   Returns the current key prefixed and postfixed.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::next":{"id":"recursivetreeiterator.next","purpose":"Move to next element","prototype":"void RecursiveTreeIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::nextElement":{"id":"recursivetreeiterator.nextelement","purpose":"Next element","prototype":"void RecursiveTreeIterator::nextElement()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::rewind":{"id":"recursivetreeiterator.rewind","purpose":"Rewind iterator","prototype":"void RecursiveTreeIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::setPostfix":{"id":"recursivetreeiterator.setpostfix","purpose":"Set postfix","prototype":"void RecursiveTreeIterator::setPostfix(string $postfix)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.3, PHP 7"},"RecursiveTreeIterator::setPrefixPart":{"id":"recursivetreeiterator.setprefixpart","purpose":"Set a part of the prefix","prototype":"void RecursiveTreeIterator::setPrefixPart(int $part, string $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RecursiveTreeIterator::valid":{"id":"recursivetreeiterator.valid","purpose":"Check validity","prototype":"bool RecursiveTreeIterator::valid()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current position is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"RegexIterator::accept":{"id":"regexiterator.accept","purpose":"Get accept status","prototype":"bool RegexIterator::accept()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if a match, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::__construct":{"id":"regexiterator.construct","purpose":"Create a new RegexIterator","prototype":" RegexIterator::__construct(Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = '' [, int $preg_flags = '']]])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::getFlags":{"id":"regexiterator.getflags","purpose":"Get flags","prototype":"int RegexIterator::getFlags()","return":"<p class=\"para\">   Returns the set flags.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::getMode":{"id":"regexiterator.getmode","purpose":"Returns operation mode","prototype":"int RegexIterator::getMode()","return":"<p class=\"para\">   Returns the operation mode.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::getPregFlags":{"id":"regexiterator.getpregflags","purpose":"Returns the regular expression flags","prototype":"int RegexIterator::getPregFlags()","return":"<p class=\"para\">   Returns a bitmask of the regular expression flags.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::getRegex":{"id":"regexiterator.getregex","purpose":"Returns current regular expression","prototype":"string RegexIterator::getRegex()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"RegexIterator::setFlags":{"id":"regexiterator.setflags","purpose":"Sets the flags","prototype":"void RegexIterator::setFlags(int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::setMode":{"id":"regexiterator.setmode","purpose":"Sets the operation mode","prototype":"void RegexIterator::setMode(int $mode)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"RegexIterator::setPregFlags":{"id":"regexiterator.setpregflags","purpose":"Sets the regular expression flags","prototype":"void RegexIterator::setPregFlags(int $preg_flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"Countable::count":{"id":"countable.count","purpose":"Count elements of an object","prototype":"int Countable::count()","return":"<p class=\"para\">   The custom count as an <span class=\"type\">integer<\/span>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The return value is cast to an <span class=\"type\">integer<\/span>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.1.0, PHP 7"},"OuterIterator::getInnerIterator":{"id":"outeriterator.getinneriterator","purpose":"Returns the inner iterator for the current entry","prototype":"Iterator OuterIterator::getInnerIterator()","return":"<p class=\"para\">   The inner iterator for the current entry.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIterator::getChildren":{"id":"recursiveiterator.getchildren","purpose":"Returns an iterator for the current entry","prototype":"RecursiveIterator RecursiveIterator::getChildren()","return":"<p class=\"para\">   An iterator for the current entry.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"RecursiveIterator::hasChildren":{"id":"recursiveiterator.haschildren","purpose":"Returns if an iterator can be created for the current entry","prototype":"bool RecursiveIterator::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current entry can be iterated over, otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SeekableIterator::seek":{"id":"seekableiterator.seek","purpose":"Seeks to a position","prototype":"void SeekableIterator::seek(int $position)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"class_implements":{"id":"function.class-implements","purpose":"Return the interfaces which are implemented by the given class or interface","prototype":"array class_implements(mixed $class [, bool $autoload = ''])","return":"<p class=\"para\">   An array on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"class_parents":{"id":"function.class-parents","purpose":"Return the parent classes of the given class","prototype":"array class_parents(mixed $class [, bool $autoload = ''])","return":"<p class=\"para\">   An array on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"class_uses":{"id":"function.class-uses","purpose":"Return the traits used by the given class","prototype":"array class_uses(mixed $class [, bool $autoload = ''])","return":"<p class=\"para\">   An array on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"iterator_apply":{"id":"function.iterator-apply","purpose":"Call a function for every element in an iterator","prototype":"int iterator_apply(Traversable $iterator, callable $function [, array $args = ''])","return":"<p class=\"para\">   Returns the iteration count.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"iterator_count":{"id":"function.iterator-count","purpose":"Count the elements in an iterator","prototype":"int iterator_count(Traversable $iterator)","return":"<p class=\"para\">   The number of elements in <code class=\"parameter\">iterator<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"iterator_to_array":{"id":"function.iterator-to-array","purpose":"Copy the iterator into an array","prototype":"array iterator_to_array(Traversable $iterator [, bool $use_keys = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> containing the elements of the <code class=\"parameter\">iterator<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_autoload_call":{"id":"function.spl-autoload-call","purpose":"Try all registered __autoload() functions to load the requested class","prototype":"void spl_autoload_call(string $class_name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_autoload_extensions":{"id":"function.spl-autoload-extensions","purpose":"Register and return default file extensions for spl_autoload","prototype":"string spl_autoload_extensions([string $file_extensions = ''])","return":"<p class=\"para\">   A comma delimited list of default file extensions for   <span class=\"function\">spl_autoload<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_autoload_functions":{"id":"function.spl-autoload-functions","purpose":"Return all registered __autoload() functions","prototype":"array spl_autoload_functions()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of all registered __autoload functions.   If the autoload queue is not activated then the return value is <strong><code>FALSE<\/code><\/strong>.   If no function is registered the return value will be an empty array.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_autoload_register":{"id":"function.spl-autoload-register","purpose":"Register given function as __autoload() implementation","prototype":"bool spl_autoload_register([callable $autoload_function = '' [, bool $throw = '' [, bool $prepend = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_autoload_unregister":{"id":"function.spl-autoload-unregister","purpose":"Unregister given function as __autoload() implementation","prototype":"bool spl_autoload_unregister(mixed $autoload_function)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_autoload":{"id":"function.spl-autoload","purpose":"Default implementation for __autoload()","prototype":"void spl_autoload(string $class_name [, string $file_extensions = spl_autoload_extensions()])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"spl_classes":{"id":"function.spl-classes","purpose":"Return available SPL classes","prototype":"array spl_classes()","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing the currently available SPL classes.  <\/p>","versions":"PHP 5, PHP 7"},"spl_object_hash":{"id":"function.spl-object-hash","purpose":"Return hash id for given object","prototype":"string spl_object_hash(object $obj)","return":"<p class=\"para\">   A string that is unique for each currently existing object and is always   the same for each object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"spl_object_id":{"id":"function.spl-object-id","purpose":"Return the integer object handle for given object","prototype":"int spl_object_id(object $obj)","return":"<p class=\"para\">   An integer identifier that is unique for each currently existing object and   is always the same for each object.  <\/p>","versions":"PHP 7 >= 7.2.0"},"SplFileInfo::__construct":{"id":"splfileinfo.construct","purpose":"Construct a new SplFileInfo object","prototype":" SplFileInfo::__construct(string $file_name)","return":"","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getATime":{"id":"splfileinfo.getatime","purpose":"Gets last access time of the file","prototype":"int SplFileInfo::getATime()","return":"<p class=\"para\">   Returns the time the file was last accessed.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getBasename":{"id":"splfileinfo.getbasename","purpose":"Gets the base name of the file","prototype":"string SplFileInfo::getBasename([string $suffix = ''])","return":"<p class=\"para\">   Returns the base name without path information.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"SplFileInfo::getCTime":{"id":"splfileinfo.getctime","purpose":"Gets the inode change time","prototype":"int SplFileInfo::getCTime()","return":"<p class=\"para\">   The last change time, in a Unix timestamp.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getExtension":{"id":"splfileinfo.getextension","purpose":"Gets the file extension","prototype":"string SplFileInfo::getExtension()","return":"<p class=\"para\">    Returns a <span class=\"type\">string<\/span> containing the file extension, or an    empty <span class=\"type\">string<\/span> if the file has no extension.  <\/p>","versions":"PHP 5 >= 5.3.6, PHP 7"},"SplFileInfo::getFileInfo":{"id":"splfileinfo.getfileinfo","purpose":"Gets an SplFileInfo object for the file","prototype":"SplFileInfo SplFileInfo::getFileInfo([string $class_name = ''])","return":"<p class=\"para\">   An <span class=\"classname\">SplFileInfo<\/span> object created for the file.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getFilename":{"id":"splfileinfo.getfilename","purpose":"Gets the filename","prototype":"string SplFileInfo::getFilename()","return":"<p class=\"para\">   The filename.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getGroup":{"id":"splfileinfo.getgroup","purpose":"Gets the file group","prototype":"int SplFileInfo::getGroup()","return":"<p class=\"para\">   The group id in numerical format.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getInode":{"id":"splfileinfo.getinode","purpose":"Gets the inode for the file","prototype":"int SplFileInfo::getInode()","return":"<p class=\"para\">   Returns the inode number for the filesystem object.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getLinkTarget":{"id":"splfileinfo.getlinktarget","purpose":"Gets the target of a link","prototype":"string SplFileInfo::getLinkTarget()","return":"<p class=\"para\">   Returns the target of the filesystem link.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"SplFileInfo::getMTime":{"id":"splfileinfo.getmtime","purpose":"Gets the last modified time","prototype":"int SplFileInfo::getMTime()","return":"<p class=\"para\">   Returns the last modified time for the file, in a Unix timestamp.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getOwner":{"id":"splfileinfo.getowner","purpose":"Gets the owner of the file","prototype":"int SplFileInfo::getOwner()","return":"<p class=\"para\">   The owner id in numerical format.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getPath":{"id":"splfileinfo.getpath","purpose":"Gets the path without filename","prototype":"string SplFileInfo::getPath()","return":"<p class=\"para\">   Returns the path to the file.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getPathInfo":{"id":"splfileinfo.getpathinfo","purpose":"Gets an SplFileInfo object for the path","prototype":"SplFileInfo SplFileInfo::getPathInfo([string $class_name = ''])","return":"<p class=\"para\">   Returns an <span class=\"classname\">SplFileInfo<\/span> object for the parent path of the file.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getPathname":{"id":"splfileinfo.getpathname","purpose":"Gets the path to the file","prototype":"string SplFileInfo::getPathname()","return":"<p class=\"para\">   The path to the file.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getPerms":{"id":"splfileinfo.getperms","purpose":"Gets file permissions","prototype":"int SplFileInfo::getPerms()","return":"<p class=\"para\">   Returns the file permissions.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getRealPath":{"id":"splfileinfo.getrealpath","purpose":"Gets absolute path to file","prototype":"string SplFileInfo::getRealPath()","return":"<p class=\"para\">   Returns the path to the file, or <strong><code>FALSE<\/code><\/strong> if the file does not exist.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"SplFileInfo::getSize":{"id":"splfileinfo.getsize","purpose":"Gets file size","prototype":"int SplFileInfo::getSize()","return":"<p class=\"para\">   The filesize in bytes.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::getType":{"id":"splfileinfo.gettype","purpose":"Gets file type","prototype":"string SplFileInfo::getType()","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> representing the type of the entry.   May be one of <em>file<\/em>, <em>link<\/em>,   or <em>dir<\/em>  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::isDir":{"id":"splfileinfo.isdir","purpose":"Tells if the file is a directory","prototype":"bool SplFileInfo::isDir()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a directory, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::isExecutable":{"id":"splfileinfo.isexecutable","purpose":"Tells if the file is executable","prototype":"bool SplFileInfo::isExecutable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if executable, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::isFile":{"id":"splfileinfo.isfile","purpose":"Tells if the object references a regular file","prototype":"bool SplFileInfo::isFile()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file exists and is a regular file (not a link), <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::isLink":{"id":"splfileinfo.islink","purpose":"Tells if the file is a link","prototype":"bool SplFileInfo::isLink()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the file is a link, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::isReadable":{"id":"splfileinfo.isreadable","purpose":"Tells if file is readable","prototype":"bool SplFileInfo::isReadable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if readable, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::isWritable":{"id":"splfileinfo.iswritable","purpose":"Tells if the entry is writable","prototype":"bool SplFileInfo::isWritable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if writable, <strong><code>FALSE<\/code><\/strong> otherwise;  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::openFile":{"id":"splfileinfo.openfile","purpose":"Gets an SplFileObject object for the file","prototype":"object SplFileInfo::openFile([string $open_mode = \"r\" [, bool $use_include_path = '' [, resource $context = '']]])","return":"<p class=\"para\">   The opened file as an <span class=\"classname\">SplFileObject<\/span> <span class=\"type\">object<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::setFileClass":{"id":"splfileinfo.setfileclass","purpose":"Sets the class used with SplFileInfo::openFile","prototype":"void SplFileInfo::setFileClass([string $class_name = \"SplFileObject\"])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::setInfoClass":{"id":"splfileinfo.setinfoclass","purpose":"Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo","prototype":"void SplFileInfo::setInfoClass([string $class_name = \"SplFileInfo\"])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileInfo::__toString":{"id":"splfileinfo.tostring","purpose":"Returns the path to the file as a string","prototype":"void SplFileInfo::__toString()","return":"<p class=\"para\">   Returns the path to the file.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileObject::__construct":{"id":"splfileobject.construct","purpose":"Construct a new file object","prototype":" SplFileObject::__construct(string $filename [, string $open_mode = \"r\" [, bool $use_include_path = '' [, resource $context = '']]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::current":{"id":"splfileobject.current","purpose":"Retrieve current line of file","prototype":"string|array SplFileObject::current()","return":"<p class=\"para\">   Retrieves the current line of the file. If the <strong><code>SplFileObject::READ_CSV<\/code><\/strong> flag is set, this method returns an array containing the current line parsed as CSV data.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::eof":{"id":"splfileobject.eof","purpose":"Reached end of file","prototype":"bool SplFileObject::eof()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if file is at EOF, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fflush":{"id":"splfileobject.fflush","purpose":"Flushes the output to the file","prototype":"bool SplFileObject::fflush()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fgetc":{"id":"splfileobject.fgetc","purpose":"Gets character from file","prototype":"string SplFileObject::fgetc()","return":"<p class=\"para\">   Returns a string containing a single character read from the file or <strong><code>FALSE<\/code><\/strong> on EOF.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fgetcsv":{"id":"splfileobject.fgetcsv","purpose":"Gets line from file and parse as CSV fields","prototype":"array SplFileObject::fgetcsv([string $delimiter = \",\" [, string $enclosure = \"\\\"\" [, string $escape = \"\\\\\"]]])","return":"<p class=\"para\">   Returns an indexed array containing the fields read, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    A blank line in a CSV file will be returned as an array    comprising a single <strong><code>NULL<\/code><\/strong> field unless using <strong><code>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE<\/code><\/strong>,     in which case empty lines are skipped.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fgets":{"id":"splfileobject.fgets","purpose":"Gets line from file","prototype":"string SplFileObject::fgets()","return":"<p class=\"para\">   Returns a string containing the next line from the file, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fgetss":{"id":"splfileobject.fgetss","purpose":"Gets line from file and strip HTML tags","prototype":"string SplFileObject::fgetss([string $allowable_tags = ''])","return":"<p class=\"para\">   Returns a string containing the next line of the file with HTML and PHP   code stripped, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::flock":{"id":"splfileobject.flock","purpose":"Portable file locking","prototype":"bool SplFileObject::flock(int $operation [, int $wouldblock = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fpassthru":{"id":"splfileobject.fpassthru","purpose":"Output all remaining data on a file pointer","prototype":"int SplFileObject::fpassthru()","return":"<p class=\"para\">   Returns the number of characters read from <code class=\"parameter\">handle<\/code>   and passed through to the output.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fputcsv":{"id":"splfileobject.fputcsv","purpose":"Write a field array as a CSV line","prototype":"int SplFileObject::fputcsv(array $fields [, string $delimiter = \",\" [, string $enclosure = '\"' [, string $escape = \"\\\\\"]]])","return":"<p class=\"para\">   Returns the length of the written string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong>, and does not write the CSV line to the file, if the   <code class=\"parameter\">delimiter<\/code> or <code class=\"parameter\">enclosure<\/code>   parameter is not a single character.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SplFileObject::fread":{"id":"splfileobject.fread","purpose":"Read from file","prototype":"string SplFileObject::fread(int $length)","return":"<p class=\"para\">   Returns the string read from the file  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.11, PHP 7"},"SplFileObject::fscanf":{"id":"splfileobject.fscanf","purpose":"Parses input from file according to a format","prototype":"mixed SplFileObject::fscanf(string $format [, mixed $... = ''])","return":"<p class=\"para\">   If only one parameter is passed to this method, the values parsed will be   returned as an array. Otherwise, if optional parameters are passed, the   function will return the number of assigned values. The optional   parameters must be passed by reference.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fseek":{"id":"splfileobject.fseek","purpose":"Seek to a position","prototype":"int SplFileObject::fseek(int $offset [, int $whence = SEEK_SET])","return":"<p class=\"para\">   Returns 0 if the seek was successful, -1 otherwise. Note that seeking   past EOF is not considered an error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fstat":{"id":"splfileobject.fstat","purpose":"Gets information about the file","prototype":"array SplFileObject::fstat()","return":"<p class=\"para\">   Returns an array with the statistics of the file; the format of the array   is described in detail on the <span class=\"function\">stat<\/span> manual page.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::ftell":{"id":"splfileobject.ftell","purpose":"Return current file position","prototype":"int SplFileObject::ftell()","return":"<p class=\"para\">    Returns the position of the file pointer as an integer, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::ftruncate":{"id":"splfileobject.ftruncate","purpose":"Truncates the file to a given length","prototype":"bool SplFileObject::ftruncate(int $size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::fwrite":{"id":"splfileobject.fwrite","purpose":"Write to file","prototype":"int SplFileObject::fwrite(string $str [, int $length = ''])","return":"<p class=\"para\">   Returns the number of bytes written, or 0 on error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::getChildren":{"id":"splfileobject.getchildren","purpose":"No purpose","prototype":"void SplFileObject::getChildren()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::getCsvControl":{"id":"splfileobject.getcsvcontrol","purpose":"Get the delimiter, enclosure and escape character for CSV","prototype":"array SplFileObject::getCsvControl()","return":"<p class=\"para\">   Returns an indexed array containing the delimiter, enclosure and escape character.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"SplFileObject::getCurrentLine":{"id":"splfileobject.getcurrentline","purpose":"Alias of SplFileObject::fgets","prototype":" SplFileObject::getCurrentLine()","return":"","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileObject::getFlags":{"id":"splfileobject.getflags","purpose":"Gets flags for the SplFileObject","prototype":"integer SplFileObject::getFlags()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span> representing the flags.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::getMaxLineLen":{"id":"splfileobject.getmaxlinelen","purpose":"Get maximum line length","prototype":"int SplFileObject::getMaxLineLen()","return":"<p class=\"para\">   Returns the maximum line length if one has been set with    <span class=\"methodname\">SplFileObject::setMaxLineLen<\/span>, default is <em>0<\/em>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::hasChildren":{"id":"splfileobject.haschildren","purpose":"SplFileObject does not have children","prototype":"bool SplFileObject::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SplFileObject::key":{"id":"splfileobject.key","purpose":"Get line number","prototype":"int SplFileObject::key()","return":"<p class=\"para\">   Returns the current line number.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::next":{"id":"splfileobject.next","purpose":"Read next line","prototype":"void SplFileObject::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::rewind":{"id":"splfileobject.rewind","purpose":"Rewind the file to the first line","prototype":"void SplFileObject::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::seek":{"id":"splfileobject.seek","purpose":"Seek to specified line","prototype":"void SplFileObject::seek(int $line_pos)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::setCsvControl":{"id":"splfileobject.setcsvcontrol","purpose":"Set the delimiter, enclosure and escape character for CSV","prototype":"void SplFileObject::setCsvControl([string $delimiter = \",\" [, string $enclosure = \"\\\"\" [, string $escape = \"\\\\\"]]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"SplFileObject::setFlags":{"id":"splfileobject.setflags","purpose":"Sets flags for the SplFileObject","prototype":"void SplFileObject::setFlags(int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::setMaxLineLen":{"id":"splfileobject.setmaxlinelen","purpose":"Set maximum line length","prototype":"void SplFileObject::setMaxLineLen(int $max_len)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::__toString":{"id":"splfileobject.tostring","purpose":"Alias of SplFileObject::current","prototype":"void SplFileObject::__toString()","return":"","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplFileObject::valid":{"id":"splfileobject.valid","purpose":"Not at EOF","prototype":"bool SplFileObject::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if not reached EOF, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplTempFileObject::__construct":{"id":"spltempfileobject.construct","purpose":"Construct a new temporary file object","prototype":" SplTempFileObject::__construct([int $max_memory = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ArrayObject::append":{"id":"arrayobject.append","purpose":"Appends the value","prototype":"void ArrayObject::append(mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::asort":{"id":"arrayobject.asort","purpose":"Sort the entries by value","prototype":"void ArrayObject::asort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayObject::__construct":{"id":"arrayobject.construct","purpose":"Construct a new array object","prototype":"object ArrayObject::__construct([mixed $input = array() [, int $flags = '' [, string $iterator_class = \"ArrayIterator\"]]])","return":"<p class=\"para\">   Returns an ArrayObject object on success.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::count":{"id":"arrayobject.count","purpose":"Get the number of public properties in the ArrayObject","prototype":"int ArrayObject::count()","return":"<p class=\"para\">   The number of public properties in the <span class=\"classname\">ArrayObject<\/span>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    When the <span class=\"classname\">ArrayObject<\/span> is constructed from an array all properties are public.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"ArrayObject::exchangeArray":{"id":"arrayobject.exchangearray","purpose":"Exchange the array for another one","prototype":"object ArrayObject::exchangeArray(mixed $input)","return":"<p class=\"para\">   Returns the old <span class=\"type\">array<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayObject::getArrayCopy":{"id":"arrayobject.getarraycopy","purpose":"Creates a copy of the ArrayObject","prototype":"array ArrayObject::getArrayCopy()","return":"<p class=\"para\">   Returns a copy of the array. When the <span class=\"classname\">ArrayObject<\/span> refers to an object,   an array of the public properties of that object will be returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::getFlags":{"id":"arrayobject.getflags","purpose":"Gets the behavior flags","prototype":"int ArrayObject::getFlags()","return":"<p class=\"para\">   Returns the behavior flags of the ArrayObject.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayObject::getIterator":{"id":"arrayobject.getiterator","purpose":"Create a new iterator from an ArrayObject instance","prototype":"ArrayIterator ArrayObject::getIterator()","return":"<p class=\"para\">   An iterator from an <span class=\"classname\">ArrayObject<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::getIteratorClass":{"id":"arrayobject.getiteratorclass","purpose":"Gets the iterator classname for the ArrayObject","prototype":"string ArrayObject::getIteratorClass()","return":"<p class=\"para\">   Returns the iterator class name that is used to iterate over this object.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayObject::ksort":{"id":"arrayobject.ksort","purpose":"Sort the entries by key","prototype":"void ArrayObject::ksort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayObject::natcasesort":{"id":"arrayobject.natcasesort","purpose":"Sort an array using a case insensitive \"natural order\" algorithm","prototype":"void ArrayObject::natcasesort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayObject::natsort":{"id":"arrayobject.natsort","purpose":"Sort entries using a \"natural order\" algorithm","prototype":"void ArrayObject::natsort()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayObject::offsetExists":{"id":"arrayobject.offsetexists","purpose":"Returns whether the requested index exists","prototype":"bool ArrayObject::offsetExists(mixed $index)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the requested index exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::offsetGet":{"id":"arrayobject.offsetget","purpose":"Returns the value at the specified index","prototype":"mixed ArrayObject::offsetGet(mixed $index)","return":"<p class=\"para\">   The value at the specified index or <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::offsetSet":{"id":"arrayobject.offsetset","purpose":"Sets the value at the specified index to newval","prototype":"void ArrayObject::offsetSet(mixed $index, mixed $newval)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::offsetUnset":{"id":"arrayobject.offsetunset","purpose":"Unsets the value at the specified index","prototype":"void ArrayObject::offsetUnset(mixed $index)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ArrayObject::serialize":{"id":"arrayobject.serialize","purpose":"Serialize an ArrayObject","prototype":"string ArrayObject::serialize()","return":"<p class=\"para\">   The serialized representation of the <span class=\"classname\">ArrayObject<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ArrayObject::setFlags":{"id":"arrayobject.setflags","purpose":"Sets the behavior flags","prototype":"void ArrayObject::setFlags(int $flags)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayObject::setIteratorClass":{"id":"arrayobject.setiteratorclass","purpose":"Sets the iterator classname for the ArrayObject","prototype":"void ArrayObject::setIteratorClass(string $iterator_class)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ArrayObject::uasort":{"id":"arrayobject.uasort","purpose":"Sort the entries with a user-defined comparison function and maintain key association","prototype":"void ArrayObject::uasort(callable $cmp_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayObject::uksort":{"id":"arrayobject.uksort","purpose":"Sort the entries by keys using a user-defined comparison function","prototype":"void ArrayObject::uksort(callable $cmp_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ArrayObject::unserialize":{"id":"arrayobject.unserialize","purpose":"Unserialize an ArrayObject","prototype":"void ArrayObject::unserialize(string $serialized)","return":"<p class=\"para\">   The unserialized <span class=\"classname\">ArrayObject<\/span>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SplObserver::update":{"id":"splobserver.update","purpose":"Receive update from subject","prototype":"void SplObserver::update(SplSubject $subject)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplSubject::attach":{"id":"splsubject.attach","purpose":"Attach an SplObserver","prototype":"void SplSubject::attach(SplObserver $observer)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplSubject::detach":{"id":"splsubject.detach","purpose":"Detach an observer","prototype":"void SplSubject::detach(SplObserver $observer)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplSubject::notify":{"id":"splsubject.notify","purpose":"Notify an observer","prototype":"void SplSubject::notify()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SplType::__construct":{"id":"spltype.construct","purpose":"Creates a new value of some type","prototype":" SplType::__construct([mixed $initial_value = '' [, bool $strict = '']])","return":"","versions":"PECL spl_types >= 0.1.0"},"SplEnum::getConstList":{"id":"splenum.getconstlist","purpose":"Returns all consts (possible values) as an array","prototype":"array SplEnum::getConstList([bool $include_default = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL spl_types >= 0.1.0"},"php_user_filter::filter":{"id":"php-user-filter.filter","purpose":"Called when applying the filter","prototype":"int php_user_filter::filter(resource $in, resource $out, int $consumed, bool $closing)","return":"<p class=\"para\">   The  <span class=\"methodname\">filter<\/span> method must return one of   three values upon completion.   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Return Value<\/th>       <th>Meaning<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><strong><code>PSFS_PASS_ON<\/code><\/strong><\/td>       <td>        Filter processed successfully with data available in the        <code class=\"parameter\">out<\/code> <em>bucket brigade<\/em>.       <\/td>      <\/tr>      <tr>       <td><strong><code>PSFS_FEED_ME<\/code><\/strong><\/td>       <td>        Filter processed successfully, however no data was available to        return. More data is required from the stream or prior filter.       <\/td>      <\/tr>      <tr>       <td><strong><code>PSFS_ERR_FATAL<\/code><\/strong> (default)<\/td>       <td>        The filter experienced an unrecoverable error and cannot continue.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"php_user_filter::onClose":{"id":"php-user-filter.onclose","purpose":"Called when closing the filter","prototype":"void php_user_filter::onClose()","return":"<p class=\"para\">   Return value is ignored.  <\/p>","versions":"PHP 5, PHP 7"},"php_user_filter::onCreate":{"id":"php-user-filter.oncreate","purpose":"Called when creating the filter","prototype":"bool php_user_filter::onCreate()","return":"<p class=\"para\">   Your implementation of   this method should return <strong><code>FALSE<\/code><\/strong> on failure, or <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PHP 5, PHP 7"},"streamWrapper::__construct":{"id":"streamwrapper.construct","purpose":"Constructs a new stream wrapper","prototype":" streamWrapper::__construct()","return":"","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::__destruct":{"id":"streamwrapper.destruct","purpose":"Destructs an existing stream wrapper","prototype":" streamWrapper::__destruct()","return":"","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::dir_closedir":{"id":"streamwrapper.dir-closedir","purpose":"Close directory handle","prototype":"bool streamWrapper::dir_closedir()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::dir_opendir":{"id":"streamwrapper.dir-opendir","purpose":"Open directory handle","prototype":"bool streamWrapper::dir_opendir(string $path, int $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::dir_readdir":{"id":"streamwrapper.dir-readdir","purpose":"Read entry from directory handle","prototype":"string streamWrapper::dir_readdir()","return":"<p class=\"para\">   Should return <span class=\"type\">string<\/span> representing the next filename, or   <strong><code>FALSE<\/code><\/strong> if there is no next file.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The return value will be casted to <span class=\"type\">string<\/span>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::dir_rewinddir":{"id":"streamwrapper.dir-rewinddir","purpose":"Rewind directory handle","prototype":"bool streamWrapper::dir_rewinddir()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::mkdir":{"id":"streamwrapper.mkdir","purpose":"Create a directory","prototype":"bool streamWrapper::mkdir(string $path, int $mode, int $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"streamWrapper::rename":{"id":"streamwrapper.rename","purpose":"Renames a file or directory","prototype":"bool streamWrapper::rename(string $path_from, string $path_to)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"streamWrapper::rmdir":{"id":"streamwrapper.rmdir","purpose":"Removes a directory","prototype":"bool streamWrapper::rmdir(string $path, int $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"streamWrapper::stream_cast":{"id":"streamwrapper.stream-cast","purpose":"Retrieve the underlaying resource","prototype":"resource streamWrapper::stream_cast(int $cast_as)","return":"<p class=\"para\">   Should return the underlying stream resource used by the wrapper, or <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"streamWrapper::stream_close":{"id":"streamwrapper.stream-close","purpose":"Close a resource","prototype":"void streamWrapper::stream_close()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_eof":{"id":"streamwrapper.stream-eof","purpose":"Tests for end-of-file on a file pointer","prototype":"bool streamWrapper::stream_eof()","return":"<p class=\"para\">   Should return <strong><code>TRUE<\/code><\/strong> if the read\/write position is at the end of the stream and if no more data is available to be read, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_flush":{"id":"streamwrapper.stream-flush","purpose":"Flushes the output","prototype":"bool streamWrapper::stream_flush()","return":"<p class=\"para\">   Should return <strong><code>TRUE<\/code><\/strong> if the cached data was successfully stored (or   if there was no data to store), or <strong><code>FALSE<\/code><\/strong> if the data could   not be stored.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_lock":{"id":"streamwrapper.stream-lock","purpose":"Advisory file locking","prototype":"bool streamWrapper::stream_lock(int $operation)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"streamWrapper::stream_metadata":{"id":"streamwrapper.stream-metadata","purpose":"Change stream metadata","prototype":"bool streamWrapper::stream_metadata(string $path, int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If <code class=\"parameter\">option<\/code> is not implemented, <strong><code>FALSE<\/code><\/strong> should be   returned.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"streamWrapper::stream_open":{"id":"streamwrapper.stream-open","purpose":"Opens file or URL","prototype":"bool streamWrapper::stream_open(string $path, string $mode, int $options, string $opened_path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_read":{"id":"streamwrapper.stream-read","purpose":"Read from stream","prototype":"string streamWrapper::stream_read(int $count)","return":"<p class=\"para\">   If there are less than <code class=\"parameter\">count<\/code>   bytes available, return as many as are available.  If no   more data is available, return either <strong><code>FALSE<\/code><\/strong> or an   empty string.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_seek":{"id":"streamwrapper.stream-seek","purpose":"Seeks to specific location in a stream","prototype":"bool streamWrapper::stream_seek(int $offset, int $whence)","return":"<p class=\"para\">   Return <strong><code>TRUE<\/code><\/strong> if the position was updated, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_set_option":{"id":"streamwrapper.stream-set-option","purpose":"Change stream options","prototype":"bool streamWrapper::stream_set_option(int $option, int $arg1, int $arg2)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If <code class=\"parameter\">option<\/code> is not implemented, <strong><code>FALSE<\/code><\/strong> should be   returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"streamWrapper::stream_stat":{"id":"streamwrapper.stream-stat","purpose":"Retrieve information about a file resource","prototype":"array streamWrapper::stream_stat()","return":"<p class=\"para\">   See <span class=\"function\">stat<\/span>.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_tell":{"id":"streamwrapper.stream-tell","purpose":"Retrieve the current position of a stream","prototype":"int streamWrapper::stream_tell()","return":"<p class=\"para\">   Should return the current position of the stream.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::stream_truncate":{"id":"streamwrapper.stream-truncate","purpose":"Truncate stream","prototype":"bool streamWrapper::stream_truncate(int $new_size)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"streamWrapper::stream_write":{"id":"streamwrapper.stream-write","purpose":"Write to stream","prototype":"int streamWrapper::stream_write(string $data)","return":"<p class=\"para\">   Should return the number of bytes that were successfully stored, or 0 if   none could be stored.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"streamWrapper::unlink":{"id":"streamwrapper.unlink","purpose":"Delete a file","prototype":"bool streamWrapper::unlink(string $path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"streamWrapper::url_stat":{"id":"streamwrapper.url-stat","purpose":"Retrieve information about a file","prototype":"array streamWrapper::url_stat(string $path, int $flags)","return":"<p class=\"para\">   Should return as many elements as <span class=\"function\">stat<\/span> does.   Unknown or unavailable values should be set to a rational value   (usually <strong><code>0<\/code><\/strong>).  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"set_socket_blocking":{"id":"function.set-socket-blocking","purpose":"Alias of stream_set_blocking","prototype":" set_socket_blocking()","return":"","versions":"PHP 4, PHP 5"},"stream_bucket_append":{"id":"function.stream-bucket-append","purpose":"Append bucket to brigade","prototype":"void stream_bucket_append(resource $brigade, object $bucket)","return":"","versions":"PHP 5, PHP 7"},"stream_bucket_make_writeable":{"id":"function.stream-bucket-make-writeable","purpose":"Return a bucket object from the brigade for operating on","prototype":"object stream_bucket_make_writeable(resource $brigade)","return":"","versions":"PHP 5, PHP 7"},"stream_bucket_new":{"id":"function.stream-bucket-new","purpose":"Create a new bucket for use on the current stream","prototype":"object stream_bucket_new(resource $stream, string $buffer)","return":"","versions":"PHP 5, PHP 7"},"stream_bucket_prepend":{"id":"function.stream-bucket-prepend","purpose":"Prepend bucket to brigade","prototype":"void stream_bucket_prepend(resource $brigade, object $bucket)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"stream_context_create":{"id":"function.stream-context-create","purpose":"Creates a stream context","prototype":"resource stream_context_create([array $options = '' [, array $params = '']])","return":"<p class=\"para\">   A stream context <span class=\"type\">resource<\/span>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_context_get_default":{"id":"function.stream-context-get-default","purpose":"Retrieve the default stream context","prototype":"resource stream_context_get_default([array $options = ''])","return":"<p class=\"para\">   A stream context <span class=\"type\">resource<\/span>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"stream_context_get_options":{"id":"function.stream-context-get-options","purpose":"Retrieve options for a stream\/wrapper\/context","prototype":"array stream_context_get_options(resource $stream_or_context)","return":"<p class=\"para\">   Returns an associative array with the options.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_context_get_params":{"id":"function.stream-context-get-params","purpose":"Retrieves parameters from a context","prototype":"array stream_context_get_params(resource $stream_or_context)","return":"<p class=\"para\">   Returns an associate array containing all context options and parameters.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"stream_context_set_default":{"id":"function.stream-context-set-default","purpose":"Set the default stream context","prototype":"resource stream_context_set_default(array $options)","return":"<p class=\"para\">   Returns the default stream context.   <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"stream_context_set_option":{"id":"function.stream-context-set-option","purpose":"Sets an option for a stream\/wrapper\/context","prototype":"bool stream_context_set_option(resource $stream_or_context, string $wrapper, string $option, mixed $value, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_context_set_params":{"id":"function.stream-context-set-params","purpose":"Set parameters for a stream\/wrapper\/context","prototype":"bool stream_context_set_params(resource $stream_or_context, array $params)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_copy_to_stream":{"id":"function.stream-copy-to-stream","purpose":"Copies data from one stream to another","prototype":"int stream_copy_to_stream(resource $source, resource $dest [, int $maxlength = -1 [, int $offset = '']])","return":"<p class=\"para\">   Returns the total count of bytes copied,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"stream_encoding":{"id":"function.stream-encoding","purpose":"Set character set for stream encoding","prototype":"bool stream_encoding(resource $stream [, string $encoding = ''])","return":"","versions":""},"stream_filter_append":{"id":"function.stream-filter-append","purpose":"Attach a filter to a stream","prototype":"resource stream_filter_append(resource $stream, string $filtername [, int $read_write = '' [, mixed $params = '']])","return":"<p class=\"para\">   Returns a resource on success or <strong><code>FALSE<\/code><\/strong> on failure. The resource can be   used to refer to this filter instance during a call to   <span class=\"function\">stream_filter_remove<\/span>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">stream<\/code> is not a resource or   if <code class=\"parameter\">filtername<\/code> cannot be located.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_filter_prepend":{"id":"function.stream-filter-prepend","purpose":"Attach a filter to a stream","prototype":"resource stream_filter_prepend(resource $stream, string $filtername [, int $read_write = '' [, mixed $params = '']])","return":"<p class=\"para\">   Returns a resource on success or <strong><code>FALSE<\/code><\/strong> on failure. The resource can be   used to refer to this filter instance during a call to   <span class=\"function\">stream_filter_remove<\/span>.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">stream<\/code> is not a resource or   if <code class=\"parameter\">filtername<\/code> cannot be located.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_filter_register":{"id":"function.stream-filter-register","purpose":"Register a user defined stream filter","prototype":"bool stream_filter_register(string $filtername, string $classname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   <span class=\"function\">stream_filter_register<\/span> will return <strong><code>FALSE<\/code><\/strong> if the   <code class=\"parameter\">filtername<\/code> is already defined.  <\/p>","versions":"PHP 5, PHP 7"},"stream_filter_remove":{"id":"function.stream-filter-remove","purpose":"Remove a filter from a stream","prototype":"bool stream_filter_remove(resource $stream_filter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"stream_get_contents":{"id":"function.stream-get-contents","purpose":"Reads remainder of a stream into a string","prototype":"string stream_get_contents(resource $handle [, int $maxlength = -1 [, int $offset = -1]])","return":"<p class=\"para\">   Returns a string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"stream_get_filters":{"id":"function.stream-get-filters","purpose":"Retrieve list of registered filters","prototype":"array stream_get_filters()","return":"<p class=\"para\">   Returns an indexed array containing the name of all stream filters   available.  <\/p>","versions":"PHP 5, PHP 7"},"stream_get_line":{"id":"function.stream-get-line","purpose":"Gets line from stream resource up to a given delimiter","prototype":"string stream_get_line(resource $handle, int $length [, string $ending = ''])","return":"<p class=\"para\">   Returns a string of up to <code class=\"parameter\">length<\/code> bytes read from the file   pointed to by <code class=\"parameter\">handle<\/code>.  <\/p>  <p class=\"para\">   If an error occurs, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"stream_get_meta_data":{"id":"function.stream-get-meta-data","purpose":"Retrieves header\/meta data from streams\/file pointers","prototype":"array stream_get_meta_data(resource $stream)","return":"<p class=\"para\">   The result array contains the following items:  <\/p>  <ul class=\"itemizedlist\">   <li class=\"listitem\">    <p class=\"para\">     <em>timed_out<\/em> (bool) - <strong><code>TRUE<\/code><\/strong> if the stream     timed out while waiting for data on the last call to     <span class=\"function\">fread<\/span> or <span class=\"function\">fgets<\/span>.    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>blocked<\/em> (bool) - <strong><code>TRUE<\/code><\/strong> if the stream is     in blocking IO mode. See <span class=\"function\">stream_set_blocking<\/span>.    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>eof<\/em> (bool) - <strong><code>TRUE<\/code><\/strong> if the stream has reached     end-of-file.  Note that for socket streams this member can be <strong><code>TRUE<\/code><\/strong>     even when <em>unread_bytes<\/em> is non-zero.  To     determine if there is more data to be read, use     <span class=\"function\">feof<\/span> instead of reading this item.    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>unread_bytes<\/em> (int) - the number of bytes     currently contained in the PHP&#039;s own internal buffer.    <\/p>    <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:      <span class=\"simpara\">      You shouldn&#039;t use this value in a script.     <\/span>    <\/p><\/blockquote>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>stream_type<\/em> (string) - a label describing     the underlying implementation of the stream.    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>wrapper_type<\/em> (string) - a label describing     the protocol wrapper implementation layered over the stream.     See <a href=\"wrappers.html\" class=\"xref\">Supported Protocols and Wrappers<\/a> for more information about wrappers.    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>wrapper_data<\/em> (mixed) - wrapper specific     data attached to this stream.  See <a href=\"wrappers.html\" class=\"xref\">Supported Protocols and Wrappers<\/a> for     more information about wrappers and their wrapper data.    <\/p>   <\/li>      <li class=\"listitem\">    <p class=\"para\">     <em>mode<\/em> (string) - the type of access required for     this stream (see Table 1 of the <a href=\"function.fopen.html\" class=\"link\">fopen()<\/a> reference)    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>seekable<\/em> (bool) - whether the current stream can     be seeked.    <\/p>   <\/li>   <li class=\"listitem\">    <p class=\"para\">     <em>uri<\/em> (string) - the URI\/filename associated with this     stream.    <\/p>   <\/li>  <\/ul>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_get_transports":{"id":"function.stream-get-transports","purpose":"Retrieve list of registered socket transports","prototype":"array stream_get_transports()","return":"<p class=\"para\">   Returns an indexed array of socket transports names.  <\/p>","versions":"PHP 5, PHP 7"},"stream_get_wrappers":{"id":"function.stream-get-wrappers","purpose":"Retrieve list of registered streams","prototype":"array stream_get_wrappers()","return":"<p class=\"para\">   Returns an indexed array containing the name of all stream wrappers   available on the running system.  <\/p>","versions":"PHP 5, PHP 7"},"stream_is_local":{"id":"function.stream-is-local","purpose":"Checks if a stream is a local stream","prototype":"bool stream_is_local(mixed $stream_or_url)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.4, PHP 7"},"stream_isatty":{"id":"function.stream-isatty","purpose":"Check if a stream is a TTY","prototype":"bool stream_isatty(resource $stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"stream_notification_callback":{"id":"function.stream-notification-callback","purpose":"A callback function for the notification context parameter","prototype":"callable stream_notification_callback(int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"stream_register_wrapper":{"id":"function.stream-register-wrapper","purpose":"Alias of stream_wrapper_register","prototype":" stream_register_wrapper()","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_resolve_include_path":{"id":"function.stream-resolve-include-path","purpose":"Resolve filename against the include path","prototype":"string stream_resolve_include_path(string $filename)","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> containing the resolved absolute filename,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7"},"stream_select":{"id":"function.stream-select","purpose":"Runs the equivalent of the select() system call on the given   arrays of streams with a timeout specified by tv_sec and tv_usec","prototype":"int stream_select(array $read, array $write, array $except, int $tv_sec [, int $tv_usec = ''])","return":"<p class=\"para\">   On success <span class=\"function\">stream_select<\/span> returns the number of   stream resources contained in the modified arrays, which may be zero if   the timeout expires before anything interesting happens. On error <strong><code>FALSE<\/code><\/strong>   is returned and a warning raised (this can happen if the system call is   interrupted by an incoming signal).  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_set_blocking":{"id":"function.stream-set-blocking","purpose":"Set blocking\/non-blocking mode on a stream","prototype":"bool stream_set_blocking(resource $stream, bool $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_set_chunk_size":{"id":"function.stream-set-chunk-size","purpose":"Set the stream chunk size","prototype":"int stream_set_chunk_size(resource $fp, int $chunk_size)","return":"<p class=\"para\">   Returns the previous chunk size on success.  <\/p>  <p class=\"para\">   Will return <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">chunk_size<\/code> is less than 1 or   greater than <strong><code>PHP_INT_MAX<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"stream_set_read_buffer":{"id":"function.stream-set-read-buffer","purpose":"Set read file buffering on the given stream","prototype":"int stream_set_read_buffer(resource $stream, int $buffer)","return":"<p class=\"para\">   Returns 0 on success, or another value if the request   cannot be honored.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"stream_set_timeout":{"id":"function.stream-set-timeout","purpose":"Set timeout period on a stream","prototype":"bool stream_set_timeout(resource $stream, int $seconds [, int $microseconds = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_set_write_buffer":{"id":"function.stream-set-write-buffer","purpose":"Sets write file buffering on the given stream","prototype":"int stream_set_write_buffer(resource $stream, int $buffer)","return":"<p class=\"para\">   Returns 0 on success, or another value if the request cannot be honored.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"stream_socket_accept":{"id":"function.stream-socket-accept","purpose":"Accept a connection on a socket created by stream_socket_server","prototype":"resource stream_socket_accept(resource $server_socket [, float $timeout = ini_get(\"default_socket_timeout\") [, string $peername = '']])","return":"<p class=\"para\">   Returns a stream to the accepted socket connection or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"stream_socket_client":{"id":"function.stream-socket-client","purpose":"Open Internet or Unix domain socket connection","prototype":"resource stream_socket_client(string $remote_socket [, int $errno = '' [, string $errstr = '' [, float $timeout = ini_get(\"default_socket_timeout\") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context = '']]]]])","return":"<p class=\"para\">   On success a stream resource is returned which may   be used together with the other file functions (such as   <span class=\"function\">fgets<\/span>, <span class=\"function\">fgetss<\/span>,   <span class=\"function\">fwrite<\/span>, <span class=\"function\">fclose<\/span>, and   <span class=\"function\">feof<\/span>), <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"stream_socket_enable_crypto":{"id":"function.stream-socket-enable-crypto","purpose":"Turns encryption on\/off on an already connected socket","prototype":"mixed stream_socket_enable_crypto(resource $stream, bool $enable [, int $crypto_type = '' [, resource $session_stream = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if negotiation has failed or   <em>0<\/em> if there isn&#039;t enough data and you should try again   (only for non-blocking sockets).  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"stream_socket_get_name":{"id":"function.stream-socket-get-name","purpose":"Retrieve the name of the local or remote sockets","prototype":"string stream_socket_get_name(resource $handle, bool $want_peer)","return":"<p class=\"para\">   The name of the socket.  <\/p>","versions":"PHP 5, PHP 7"},"stream_socket_pair":{"id":"function.stream-socket-pair","purpose":"Creates a pair of connected, indistinguishable socket streams","prototype":"array stream_socket_pair(int $domain, int $type, int $protocol)","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> with the two socket resources on success, or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"stream_socket_recvfrom":{"id":"function.stream-socket-recvfrom","purpose":"Receives data from a socket, connected or not","prototype":"string stream_socket_recvfrom(resource $socket, int $length [, int $flags = '' [, string $address = '']])","return":"<p class=\"para\">   Returns the read data, as a string  <\/p>","versions":"PHP 5, PHP 7"},"stream_socket_sendto":{"id":"function.stream-socket-sendto","purpose":"Sends a message to a socket, whether it is connected or not","prototype":"int stream_socket_sendto(resource $socket, string $data [, int $flags = '' [, string $address = '']])","return":"<p class=\"para\">   Returns a result code, as an integer.  <\/p>","versions":"PHP 5, PHP 7"},"stream_socket_server":{"id":"function.stream-socket-server","purpose":"Create an Internet or Unix domain server socket","prototype":"resource stream_socket_server(string $local_socket [, int $errno = '' [, string $errstr = '' [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context = '']]]])","return":"<p class=\"para\">   Returns the created stream, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"stream_socket_shutdown":{"id":"function.stream-socket-shutdown","purpose":"Shutdown a full-duplex connection","prototype":"bool stream_socket_shutdown(resource $stream, int $how)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.1, PHP 7"},"stream_supports_lock":{"id":"function.stream-supports-lock","purpose":"Tells whether the stream supports locking","prototype":"bool stream_supports_lock(resource $stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"stream_wrapper_register":{"id":"function.stream-wrapper-register","purpose":"Register a URL wrapper implemented as a PHP class","prototype":"bool stream_wrapper_register(string $protocol, string $classname [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   <span class=\"function\">stream_wrapper_register<\/span> will return <strong><code>FALSE<\/code><\/strong> if the   <code class=\"parameter\">protocol<\/code> already has a handler.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"stream_wrapper_restore":{"id":"function.stream-wrapper-restore","purpose":"Restores a previously unregistered built-in wrapper","prototype":"bool stream_wrapper_restore(string $protocol)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"stream_wrapper_unregister":{"id":"function.stream-wrapper-unregister","purpose":"Unregister a URL wrapper","prototype":"bool stream_wrapper_unregister(string $protocol)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"swoole_async_dns_lookup":{"id":"function.swoole-async-dns-lookup","purpose":"Async and non-blocking hostname to IP lookup","prototype":"bool swoole_async_dns_lookup(string $hostname, callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_async_read":{"id":"function.swoole-async-read","purpose":"Read file stream asynchronously","prototype":"bool swoole_async_read(string $filename, callable $callback [, int $chunk_size = 65536 [, int $offset = '']])","return":"<p class=\"para\">   Whether the read is succeed.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_async_readfile":{"id":"function.swoole-async-readfile","purpose":"Read a file asynchronously","prototype":"bool swoole_async_readfile(string $filename, callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_async_set":{"id":"function.swoole-async-set","purpose":"Update the async I\/O options","prototype":"void swoole_async_set(array $settings)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_async_write":{"id":"function.swoole-async-write","purpose":"Write data to a file stream asynchronously","prototype":"bool swoole_async_write(string $filename, string $content [, integer $offset = '' [, callable $callback = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_async_writefile":{"id":"function.swoole-async-writefile","purpose":"Write data to a file asynchronously","prototype":"bool swoole_async_writefile(string $filename, string $content [, callable $callback = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_client_select":{"id":"function.swoole-client-select","purpose":"Get the file description which are ready to read\/write or error","prototype":"int swoole_client_select(array $read_array, array $write_array, array $error_array [, float $timeout = 0.5])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_cpu_num":{"id":"function.swoole-cpu-num","purpose":"Get the number of CPU","prototype":"int swoole_cpu_num()","return":"<p class=\"para\">    The number of CPU.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_errno":{"id":"function.swoole-errno","purpose":"Get the error code of the latest system call","prototype":"int swoole_errno()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_add":{"id":"function.swoole-event-add","purpose":"Add new callback functions of a socket into the EventLoop","prototype":"int swoole_event_add(int $fd [, callable $read_callback = '' [, callable $write_callback = '' [, int $events = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_defer":{"id":"function.swoole-event-defer","purpose":"Add callback function to the next event loop","prototype":"bool swoole_event_defer(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_del":{"id":"function.swoole-event-del","purpose":"Remove all event callback functions of a socket","prototype":"bool swoole_event_del(int $fd)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_exit":{"id":"function.swoole-event-exit","purpose":"Exit the eventloop, only available at the client side","prototype":"void swoole_event_exit()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_set":{"id":"function.swoole-event-set","purpose":"Update the event callback functions of a socket","prototype":"bool swoole_event_set(int $fd [, callable $read_callback = '' [, callable $write_callback = '' [, int $events = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_wait":{"id":"function.swoole-event-wait","purpose":"Start the event loop","prototype":"void swoole_event_wait()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_event_write":{"id":"function.swoole-event-write","purpose":"Write data to a socket","prototype":"bool swoole_event_write(int $fd, string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_get_local_ip":{"id":"function.swoole-get-local-ip","purpose":"Get the IPv4 IP addresses of each NIC on the machine","prototype":"array swoole_get_local_ip()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_last_error":{"id":"function.swoole-last-error","purpose":"Get the lastest error message","prototype":"int swoole_last_error()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_load_module":{"id":"function.swoole-load-module","purpose":"Load a swoole extension","prototype":"mixed swoole_load_module(string $filename)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_select":{"id":"function.swoole-select","purpose":"Select the file descriptions which are ready to read\/write or error in the eventloop","prototype":"int swoole_select(array $read_array, array $write_array, array $error_array [, float $timeout = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_set_process_name":{"id":"function.swoole-set-process-name","purpose":"Set the process name","prototype":"void swoole_set_process_name(string $process_name [, int $size = 128])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_strerror":{"id":"function.swoole-strerror","purpose":"Convert the Errno into error messages","prototype":"string swoole_strerror(int $errno [, int $error_type = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_timer_after":{"id":"function.swoole-timer-after","purpose":"Trigger a one time callback function in the future","prototype":"int swoole_timer_after(int $ms, callable $callback [, mixed $param = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_timer_exists":{"id":"function.swoole-timer-exists","purpose":"Check if a timer callback function is existed","prototype":"bool swoole_timer_exists(int $timer_id)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_timer_tick":{"id":"function.swoole-timer-tick","purpose":"Trigger a timer tick callback function by time interval","prototype":"int swoole_timer_tick(int $ms, callable $callback [, mixed $param = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_version":{"id":"function.swoole-version","purpose":"Get the version of Swoole","prototype":"string swoole_version()","return":"<p class=\"para\">   The version of Swoole.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Async::dnsLookup":{"id":"swoole-async.dnslookup","purpose":"Async and non-blocking hostname to IP lookup.","prototype":"void Swoole\\Async::dnsLookup(string $hostname, callable $callback)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Async::read":{"id":"swoole-async.read","purpose":"Read file stream asynchronously.","prototype":"bool Swoole\\Async::read(string $filename, callable $callback [, integer $chunk_size = '' [, integer $offset = '']])","return":"<p class=\"para\">   Whether the read is succeed.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Async::readFile":{"id":"swoole-async.readfile","purpose":"Read a file asynchronously.","prototype":"void Swoole\\Async::readFile(string $filename, callable $callback)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Async::set":{"id":"swoole-async.set","purpose":"Update the async I\/O options.","prototype":"void Swoole\\Async::set(array $settings)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Async::write":{"id":"swoole-async.write","purpose":"Write data to a file stream asynchronously.","prototype":"void Swoole\\Async::write(string $filename, string $content [, integer $offset = '' [, callable $callback = '']])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Async::writeFile":{"id":"swoole-async.writefile","purpose":"Description","prototype":"void Swoole\\Async::writeFile(string $filename, string $content [, callable $callback = '' [, string $flags = '']])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Atomic::add":{"id":"swoole-atomic.add","purpose":"Add a number to the value to the atomic object.","prototype":"integer Swoole\\Atomic::add([integer $add_value = ''])","return":"<p class=\"para\">   The new value of the atomic object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Atomic::cmpset":{"id":"swoole-atomic.cmpset","purpose":"Compare and set the value of the atomic object.","prototype":"integer Swoole\\Atomic::cmpset(integer $cmp_value, integer $new_value)","return":"<p class=\"para\">   The new value of the atomic object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Atomic::__construct":{"id":"swoole-atomic.construct","purpose":"Construct a swoole atomic object.","prototype":" Swoole\\Atomic::__construct([integer $value = ''])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Atomic::get":{"id":"swoole-atomic.get","purpose":"Get the current value of the atomic object.","prototype":"integer Swoole\\Atomic::get()","return":"<p class=\"para\">   The current value of the atomic object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Atomic::set":{"id":"swoole-atomic.set","purpose":"Set a new value to the atomic object.","prototype":"integer Swoole\\Atomic::set(integer $value)","return":"<p class=\"para\">   The current value of the atomic object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Atomic::sub":{"id":"swoole-atomic.sub","purpose":"Subtract a number to the value of the atomic object.","prototype":"integer Swoole\\Atomic::sub([integer $sub_value = ''])","return":"<p class=\"para\">    The current value of the atomic object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::append":{"id":"swoole-buffer.append","purpose":"Append the string or binary data at the end of the memory buffer and return the new size of memory allocated.","prototype":"integer Swoole\\Buffer::append(string $data)","return":"<p class=\"para\">   The new size of the memory buffer.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::clear":{"id":"swoole-buffer.clear","purpose":"Reset the memory buffer.","prototype":"void Swoole\\Buffer::clear()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::__construct":{"id":"swoole-buffer.construct","purpose":"Fixed size memory blocks allocation.","prototype":" Swoole\\Buffer::__construct([integer $size = ''])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::__destruct":{"id":"swoole-buffer.destruct","purpose":"Destruct the Swoole memory buffer.","prototype":"void Swoole\\Buffer::__destruct()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::expand":{"id":"swoole-buffer.expand","purpose":"Expand the size of memory buffer.","prototype":"integer Swoole\\Buffer::expand(integer $size)","return":"<p class=\"para\">   The new size of the memory buffer.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::read":{"id":"swoole-buffer.read","purpose":"Read data from the memory buffer based on offset and length.","prototype":"string Swoole\\Buffer::read(integer $offset, integer $length)","return":"<p class=\"para\">   The data readed from the memory buffer.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::recycle":{"id":"swoole-buffer.recycle","purpose":"Release the memory to OS which is not used by the memory buffer.","prototype":"void Swoole\\Buffer::recycle()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::substr":{"id":"swoole-buffer.substr","purpose":"Read data from the memory buffer based on offset and length. Or remove data from the memory buffer.","prototype":"string Swoole\\Buffer::substr(integer $offset [, integer $length = '' [, bool $remove = '']])","return":"<p class=\"para\">   The data or string readed from the memory buffer.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::__toString":{"id":"swoole-buffer.tostring","purpose":"Get the string value of the memory buffer.","prototype":"string Swoole\\Buffer::__toString()","return":"<p class=\"para\">   The string value of the memory buffer.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Buffer::write":{"id":"swoole-buffer.write","purpose":"Write data to the memory buffer. The memory allocated for the buffer will not be changed.","prototype":"void Swoole\\Buffer::write(integer $offset, string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Channel::__construct":{"id":"swoole-channel.construct","purpose":"Construct a Swoole Channel","prototype":" Swoole\\Channel::__construct(string $size)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Channel::__destruct":{"id":"swoole-channel.destruct","purpose":"Destruct a Swoole channel.","prototype":"void Swoole\\Channel::__destruct()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Channel::pop":{"id":"swoole-channel.pop","purpose":"Read and pop data from swoole channel.","prototype":"mixed Swoole\\Channel::pop()","return":"<p class=\"para\">    If the channel is empty, the function will return false, or return the unserialized data.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Channel::push":{"id":"swoole-channel.push","purpose":"Write and push data into Swoole channel.","prototype":"bool Swoole\\Channel::push(string $data)","return":"<p class=\"para\">   Wheter the data is pushed into he Swoole channel.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Channel::stats":{"id":"swoole-channel.stats","purpose":"Get stats of swoole channel.","prototype":"array Swoole\\Channel::stats()","return":"<p class=\"para\">   The stats of the Swoole channel.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::close":{"id":"swoole-client.close","purpose":"Close the connection established.","prototype":"bool Swoole\\Client::close([bool $force = ''])","return":"<p class=\"para\">   Whether the connection is closed.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::connect":{"id":"swoole-client.connect","purpose":"Connect to the remote TCP or UDP port.","prototype":"bool Swoole\\Client::connect(string $host [, integer $port = '' [, integer $timeout = '' [, integer $flag = '']]])","return":"<p class=\"para\">   Whether the connection is established.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::__construct":{"id":"swoole-client.construct","purpose":"Create Swoole sync or async TCP\/UDP client, with or without SSL.","prototype":" Swoole\\Client::__construct(int $sock_type [, integer $is_async = ''])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::__destruct":{"id":"swoole-client.destruct","purpose":"Destruct the Swoole client.","prototype":"void Swoole\\Client::__destruct()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::getpeername":{"id":"swoole-client.getpeername","purpose":"Get the remote socket name of the connection.","prototype":"array Swoole\\Client::getpeername()","return":"<p class=\"para\">   The host and port of the remote socket.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::getsockname":{"id":"swoole-client.getsockname","purpose":"Get the local socket name of the connection.","prototype":"array Swoole\\Client::getsockname()","return":"<p class=\"para\">   The host and port of the local socket.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::isConnected":{"id":"swoole-client.isconnected","purpose":"Check if the connection is established.","prototype":"bool Swoole\\Client::isConnected()","return":"<p class=\"para\">   Whether the connection is established.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::on":{"id":"swoole-client.on","purpose":"Add callback functions triggered by events.","prototype":"void Swoole\\Client::on(string $event, callable $callback)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::pause":{"id":"swoole-client.pause","purpose":"Pause receiving data.","prototype":"void Swoole\\Client::pause()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::pipe":{"id":"swoole-client.pipe","purpose":"Redirect the data to another file descriptor.","prototype":"void Swoole\\Client::pipe(string $socket)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::recv":{"id":"swoole-client.recv","purpose":"Receive data from the remote socket.","prototype":"void Swoole\\Client::recv([string $size = '' [, string $flag = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::resume":{"id":"swoole-client.resume","purpose":"Resume receiving data.","prototype":"void Swoole\\Client::resume()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::send":{"id":"swoole-client.send","purpose":"Send data to the remote TCP socket.","prototype":"integer Swoole\\Client::send(string $data [, string $flag = ''])","return":"<p class=\"para\">   If the client sends data successfully, it returns the length of data sent.    Or it returns false and sets $swoole_client-&gt;errCode. For sync client,    there is no limit for the data to send. For async client, The limit    for the data to send is socket_buffer_size.   <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::sendfile":{"id":"swoole-client.sendfile","purpose":"Send file to the remote TCP socket.","prototype":"boolean Swoole\\Client::sendfile(string $filename [, int $offset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::sendto":{"id":"swoole-client.sendto","purpose":"Send data to the remote UDP address.","prototype":"boolean Swoole\\Client::sendto(string $ip, integer $port, string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::set":{"id":"swoole-client.set","purpose":"Set the Swoole client parameters before the connection is established.","prototype":"void Swoole\\Client::set(array $settings)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::sleep":{"id":"swoole-client.sleep","purpose":"Remove the TCP client from system event loop.","prototype":"void Swoole\\Client::sleep()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Client::wakeup":{"id":"swoole-client.wakeup","purpose":"Add the TCP client back into the system event loop.","prototype":"void Swoole\\Client::wakeup()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::count":{"id":"swoole-connection-iterator.count","purpose":"Count connections.","prototype":"int Swoole\\Connection\\Iterator::count()","return":"<p class=\"para\">   The number of connections.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::current":{"id":"swoole-connection-iterator.current","purpose":"Return current connection entry.","prototype":"Connection Swoole\\Connection\\Iterator::current()","return":"<p class=\"para\">   The current connection entry.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::key":{"id":"swoole-connection-iterator.key","purpose":"Return key of the current connection.","prototype":"int Swoole\\Connection\\Iterator::key()","return":"<p class=\"para\">   Key of the current connection.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::next":{"id":"swoole-connection-iterator.next","purpose":"Move to the next connection.","prototype":"Connection Swoole\\Connection\\Iterator::next()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::offsetExists":{"id":"swoole-connection-iterator.offsetexists","purpose":"Check if offet exists.","prototype":"boolean Swoole\\Connection\\Iterator::offsetExists(int $index)","return":"<p class=\"para\">   Returns TRUE if the offset exists, otherwise FALSE.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::offsetGet":{"id":"swoole-connection-iterator.offsetget","purpose":"Offset to retrieve.","prototype":"Connection Swoole\\Connection\\Iterator::offsetGet(string $index)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::offsetSet":{"id":"swoole-connection-iterator.offsetset","purpose":"Assign a Connection to the specified offset.","prototype":"void Swoole\\Connection\\Iterator::offsetSet(int $offset, mixed $connection)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::offsetUnset":{"id":"swoole-connection-iterator.offsetunset","purpose":"Unset an offset.","prototype":"void Swoole\\Connection\\Iterator::offsetUnset(int $offset)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::rewind":{"id":"swoole-connection-iterator.rewind","purpose":"Rewinds iterator","prototype":"void Swoole\\Connection\\Iterator::rewind()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Connection\\Iterator::valid":{"id":"swoole-connection-iterator.valid","purpose":"Check if current position is valid.","prototype":"boolean Swoole\\Connection\\Iterator::valid()","return":"<p class=\"para\">   Returns TRUE if the current iterator position is valid, otherwise FALSE.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Coroutine::call_user_func_array":{"id":"swoole-coroutine.call-user-func-array","purpose":"Call a callback with an array of parameters","prototype":"mixed Swoole\\Coroutine::call_user_func_array(callable $callback, array $param_array)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine::call_user_func":{"id":"swoole-coroutine.call-user-func","purpose":"Call a callback given by the first parameter","prototype":"mixed Swoole\\Coroutine::call_user_func(callable $callback [, mixed $parameter = '' [, mixed $... = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine::cli_wait":{"id":"swoole-coroutine.cli-wait","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine::cli_wait()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine::create":{"id":"swoole-coroutine.create","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine::create()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::close":{"id":"swoole-coroutine-client.close","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::close()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::connect":{"id":"swoole-coroutine-client.connect","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::connect()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::__construct":{"id":"swoole-coroutine-client.construct","purpose":"Description","prototype":" Swoole\\Coroutine\\Client::__construct()","return":"","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::__destruct":{"id":"swoole-coroutine-client.destruct","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::getpeername":{"id":"swoole-coroutine-client.getpeername","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::getpeername()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::getsockname":{"id":"swoole-coroutine-client.getsockname","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::getsockname()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::isConnected":{"id":"swoole-coroutine-client.isconnected","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::isConnected()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::recv":{"id":"swoole-coroutine-client.recv","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::recv()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::send":{"id":"swoole-coroutine-client.send","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::send()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::sendfile":{"id":"swoole-coroutine-client.sendfile","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::sendfile()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::sendto":{"id":"swoole-coroutine-client.sendto","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::sendto()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Client::set":{"id":"swoole-coroutine-client.set","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Client::set()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::addFile":{"id":"swoole-coroutine-http-client.addfile","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::addFile()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::close":{"id":"swoole-coroutine-http-client.close","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::close()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::__construct":{"id":"swoole-coroutine-http-client.construct","purpose":"Description","prototype":" Swoole\\Coroutine\\Http\\Client::__construct()","return":"","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::__destruct":{"id":"swoole-coroutine-http-client.destruct","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::execute":{"id":"swoole-coroutine-http-client.execute","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::execute()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::get":{"id":"swoole-coroutine-http-client.get","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::get()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::getDefer":{"id":"swoole-coroutine-http-client.getdefer","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::getDefer()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::isConnected":{"id":"swoole-coroutine-http-client.isconnected","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::isConnected()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::post":{"id":"swoole-coroutine-http-client.post","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::post()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::recv":{"id":"swoole-coroutine-http-client.recv","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::recv()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::set":{"id":"swoole-coroutine-http-client.set","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::set()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::setCookies":{"id":"swoole-coroutine-http-client.setcookies","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::setCookies()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::setData":{"id":"swoole-coroutine-http-client.setdata","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::setData()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::setDefer":{"id":"swoole-coroutine-http-client.setdefer","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::setDefer()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::setHeaders":{"id":"swoole-coroutine-http-client.setheaders","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::setHeaders()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\Http\\Client::setMethod":{"id":"swoole-coroutine-http-client.setmethod","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\Http\\Client::setMethod()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::close":{"id":"swoole-coroutine-mysql.close","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::close()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::connect":{"id":"swoole-coroutine-mysql.connect","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::connect()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::__construct":{"id":"swoole-coroutine-mysql.construct","purpose":"Description","prototype":" Swoole\\Coroutine\\MySQL::__construct()","return":"","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::__destruct":{"id":"swoole-coroutine-mysql.destruct","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::getDefer":{"id":"swoole-coroutine-mysql.getdefer","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::getDefer()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::query":{"id":"swoole-coroutine-mysql.query","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::query()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::recv":{"id":"swoole-coroutine-mysql.recv","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::recv()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine\\MySQL::setDefer":{"id":"swoole-coroutine-mysql.setdefer","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine\\MySQL::setDefer()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine::getuid":{"id":"swoole-coroutine.getuid","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine::getuid()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine::resume":{"id":"swoole-coroutine.resume","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine::resume()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Coroutine::suspend":{"id":"swoole-coroutine.suspend","purpose":"Description","prototype":"ReturnType Swoole\\Coroutine::suspend()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, PECL swoole >= 2.0.0"},"Swoole\\Event::add":{"id":"swoole-event.add","purpose":"Add new callback functions of a socket into the EventLoop.","prototype":"boolean Swoole\\Event::add(int $fd, callable $read_callback [, callable $write_callback = '' [, string $events = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Event::defer":{"id":"swoole-event.defer","purpose":"Add a callback function to the next event loop.","prototype":"void Swoole\\Event::defer(mixed $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Event::del":{"id":"swoole-event.del","purpose":"Remove all event callback functions of a socket.","prototype":"boolean Swoole\\Event::del(string $fd)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Event::exit":{"id":"swoole-event.exit","purpose":"Exit the eventloop, only available at client side.","prototype":"void Swoole\\Event::exit()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Event::set":{"id":"swoole-event.set","purpose":"Update the event callback functions of a socket.","prototype":"boolean Swoole\\Event::set(int $fd [, string $read_callback = '' [, string $write_callback = '' [, string $events = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Event::wait":{"id":"swoole-event.wait","purpose":"Description","prototype":"void Swoole\\Event::wait()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Event::write":{"id":"swoole-event.write","purpose":"Write data to the socket.","prototype":"void Swoole\\Event::write(string $fd, string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::addFile":{"id":"swoole-http-client.addfile","purpose":"Add a file to the post form.","prototype":"void Swoole\\Http\\Client::addFile(string $path, string $name [, string $type = '' [, string $filename = '' [, string $offset = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::close":{"id":"swoole-http-client.close","purpose":"Close the http connection.","prototype":"void Swoole\\Http\\Client::close()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::__construct":{"id":"swoole-http-client.construct","purpose":"Construct the async HTTP client.","prototype":" Swoole\\Http\\Client::__construct(string $host [, string $port = '' [, boolean $ssl = '']])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::__destruct":{"id":"swoole-http-client.destruct","purpose":"Destruct the HTTP client.","prototype":"void Swoole\\Http\\Client::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::download":{"id":"swoole-http-client.download","purpose":"Download a file from the remote server.","prototype":"void Swoole\\Http\\Client::download(string $path, string $file, callable $callback [, integer $offset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::execute":{"id":"swoole-http-client.execute","purpose":"Send the HTTP request after setting the parameters.","prototype":"void Swoole\\Http\\Client::execute(string $path, string $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::get":{"id":"swoole-http-client.get","purpose":"Send GET http request to the remote server.","prototype":"void Swoole\\Http\\Client::get(string $path, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::isConnected":{"id":"swoole-http-client.isconnected","purpose":"Check if the HTTP connection is connected.","prototype":"boolean Swoole\\Http\\Client::isConnected()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::on":{"id":"swoole-http-client.on","purpose":"Register callback function by event name.","prototype":"void Swoole\\Http\\Client::on(string $event_name, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::post":{"id":"swoole-http-client.post","purpose":"Send POST http request to the remote server.","prototype":"void Swoole\\Http\\Client::post(string $path, string $data, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::push":{"id":"swoole-http-client.push","purpose":"Push data to websocket client.","prototype":"void Swoole\\Http\\Client::push(string $data [, string $opcode = '' [, string $finish = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::set":{"id":"swoole-http-client.set","purpose":"Update the HTTP client paramters.","prototype":"void Swoole\\Http\\Client::set(array $settings)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::setCookies":{"id":"swoole-http-client.setcookies","purpose":"Set the http request cookies.","prototype":"void Swoole\\Http\\Client::setCookies(array $cookies)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::setData":{"id":"swoole-http-client.setdata","purpose":"Set the HTTP request body data.","prototype":"ReturnType Swoole\\Http\\Client::setData(string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::setHeaders":{"id":"swoole-http-client.setheaders","purpose":"Set the HTTP request headers.","prototype":"void Swoole\\Http\\Client::setHeaders(array $headers)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::setMethod":{"id":"swoole-http-client.setmethod","purpose":"Set the HTTP request method.","prototype":"void Swoole\\Http\\Client::setMethod(string $method)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Client::upgrade":{"id":"swoole-http-client.upgrade","purpose":"Upgrade to websocket protocol.","prototype":"void Swoole\\Http\\Client::upgrade(string $path, string $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Request::__destruct":{"id":"swoole-http-request.destruct","purpose":"Destruct the HTTP request.","prototype":"void Swoole\\Http\\Request::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Request::rawcontent":{"id":"swoole-http-request.rawcontent","purpose":"Get the raw HTTP POST body.","prototype":"string Swoole\\Http\\Request::rawcontent()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::cookie":{"id":"swoole-http-response.cookie","purpose":"Set the cookies of the HTTP response.","prototype":"string Swoole\\Http\\Response::cookie(string $name [, string $value = '' [, string $expires = '' [, string $path = '' [, string $domain = '' [, string $secure = '' [, string $httponly = '']]]]]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::__destruct":{"id":"swoole-http-response.destruct","purpose":"Destruct the HTTP response.","prototype":"void Swoole\\Http\\Response::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::end":{"id":"swoole-http-response.end","purpose":"Send data for the HTTP request and finish the response.","prototype":"void Swoole\\Http\\Response::end([string $content = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::gzip":{"id":"swoole-http-response.gzip","purpose":"Enable the gzip of response content.","prototype":"ReturnType Swoole\\Http\\Response::gzip([string $compress_level = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::header":{"id":"swoole-http-response.header","purpose":"Set the HTTP response headers.","prototype":"void Swoole\\Http\\Response::header(string $key, string $value [, string $ucwords = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::initHeader":{"id":"swoole-http-response.initheader","purpose":"Init the HTTP response header.","prototype":"ReturnType Swoole\\Http\\Response::initHeader()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::rawcookie":{"id":"swoole-http-response.rawcookie","purpose":"Set the raw cookies to the HTTP response.","prototype":"ReturnType Swoole\\Http\\Response::rawcookie(string $name [, string $value = '' [, string $expires = '' [, string $path = '' [, string $domain = '' [, string $secure = '' [, string $httponly = '']]]]]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::sendfile":{"id":"swoole-http-response.sendfile","purpose":"Send file through the HTTP response.","prototype":"ReturnType Swoole\\Http\\Response::sendfile(string $filename [, int $offset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::status":{"id":"swoole-http-response.status","purpose":"Set the status code of the HTTP response.","prototype":"ReturnType Swoole\\Http\\Response::status(string $http_code)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Response::write":{"id":"swoole-http-response.write","purpose":"Append HTTP body content to the HTTP response.","prototype":"void Swoole\\Http\\Response::write(string $content)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Server::on":{"id":"swoole-http-server.on","purpose":"Bind callback function to HTTP server by event name.","prototype":"void Swoole\\Http\\Server::on(string $event_name, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Http\\Server::start":{"id":"swoole-http-server.start","purpose":"Start the swoole http server.","prototype":"void Swoole\\Http\\Server::start()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::__construct":{"id":"swoole-lock.construct","purpose":"Construct a memory lock.","prototype":" Swoole\\Lock::__construct([string $type = '' [, string $file_lock_location = '']])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::__destruct":{"id":"swoole-lock.destruct","purpose":"Destory a Swoole memory lock.","prototype":"void Swoole\\Lock::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::lock_read":{"id":"swoole-lock.lock-read","purpose":"Lock a read-write lock for reading.","prototype":"void Swoole\\Lock::lock_read()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::lock":{"id":"swoole-lock.lock","purpose":"Try to acquire the lock. It will block if the lock is not available.","prototype":"void Swoole\\Lock::lock()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::trylock_read":{"id":"swoole-lock.trylock-read","purpose":"Try to lock a read-write lock for reading and return straight away even the lock is not available.","prototype":"void Swoole\\Lock::trylock_read()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::trylock":{"id":"swoole-lock.trylock","purpose":"Try to acquire the lock and return straight away even the lock is not available.","prototype":"void Swoole\\Lock::trylock()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Lock::unlock":{"id":"swoole-lock.unlock","purpose":"Release the lock.","prototype":"void Swoole\\Lock::unlock()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Mmap::open":{"id":"swoole-mmap.open","purpose":"Map a file into memory and return the stream resource which can be used by PHP stream operations.","prototype":"ReturnType Swoole\\Mmap::open(string $filename [, string $size = '' [, string $offset = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::close":{"id":"swoole-mysql.close","purpose":"Close the async MySQL connection.","prototype":"void Swoole\\MySQL::close()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::connect":{"id":"swoole-mysql.connect","purpose":"Connect to the remote MySQL server.","prototype":"void Swoole\\MySQL::connect(array $server_config, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::__construct":{"id":"swoole-mysql.construct","purpose":"Construct an async MySQL client.","prototype":" Swoole\\MySQL::__construct()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::__destruct":{"id":"swoole-mysql.destruct","purpose":"Destory the async MySQL client.","prototype":"void Swoole\\MySQL::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::getBuffer":{"id":"swoole-mysql.getbuffer","purpose":"Description","prototype":"ReturnType Swoole\\MySQL::getBuffer()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::on":{"id":"swoole-mysql.on","purpose":"Register callback function based on event name.","prototype":"void Swoole\\MySQL::on(string $event_name, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\MySQL::query":{"id":"swoole-mysql.query","purpose":"Run the SQL query.","prototype":"ReturnType Swoole\\MySQL::query(string $sql, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::alarm":{"id":"swoole-process.alarm","purpose":"High precision timer which triggers signal with fixed interval.","prototype":"void Swoole\\Process::alarm(integer $interval_usec)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::close":{"id":"swoole-process.close","purpose":"Close the pipe to the child process.","prototype":"void Swoole\\Process::close()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::__construct":{"id":"swoole-process.construct","purpose":"Construct a process.","prototype":" Swoole\\Process::__construct(callable $callback [, boolean $redirect_stdin_and_stdout = '' [, integer $pipe_type = '']])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::daemon":{"id":"swoole-process.daemon","purpose":"Change the process to be a daemon process.","prototype":"void Swoole\\Process::daemon([boolean $nochdir = '' [, boolean $noclose = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::__destruct":{"id":"swoole-process.destruct","purpose":"Destory the process.","prototype":"void Swoole\\Process::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::exec":{"id":"swoole-process.exec","purpose":"Execute system commands.","prototype":"ReturnType Swoole\\Process::exec(string $exec_file, string $args)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::exit":{"id":"swoole-process.exit","purpose":"Stop the child processes.","prototype":"void Swoole\\Process::exit([string $exit_code = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::freeQueue":{"id":"swoole-process.freequeue","purpose":"Destory the message queue created by swoole_process::useQueue.","prototype":"void Swoole\\Process::freeQueue()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::kill":{"id":"swoole-process.kill","purpose":"Send signal to the child process.","prototype":"void Swoole\\Process::kill(integer $pid [, string $signal_no = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::name":{"id":"swoole-process.name","purpose":"Set name of the process.","prototype":"void Swoole\\Process::name(string $process_name)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::pop":{"id":"swoole-process.pop","purpose":"Read and pop data from the message queue.","prototype":"mixed Swoole\\Process::pop([integer $maxsize = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::push":{"id":"swoole-process.push","purpose":"Write and push data into the message queue.","prototype":"boolean Swoole\\Process::push(string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::read":{"id":"swoole-process.read","purpose":"Read data sending to the process.","prototype":"string Swoole\\Process::read([integer $maxsize = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::signal":{"id":"swoole-process.signal","purpose":"Send signal to the child processes.","prototype":"void Swoole\\Process::signal(string $signal_no, callable $callback)","return":"<p class=\"para\">   If signal sent successfully, it returns TRUE, otherwise it returns FALSE.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::start":{"id":"swoole-process.start","purpose":"Start the process.","prototype":"void Swoole\\Process::start()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::statQueue":{"id":"swoole-process.statqueue","purpose":"Get the stats of the message queue used as the communication method between processes.","prototype":"array Swoole\\Process::statQueue()","return":"<p class=\"para\">   The array of status of the message queue.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::useQueue":{"id":"swoole-process.usequeue","purpose":"Create a message queue as the communication method between the parent process and child processes.","prototype":"boolean Swoole\\Process::useQueue(integer $key [, integer $mode = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::wait":{"id":"swoole-process.wait","purpose":"Wait for the events of child processes.","prototype":"array Swoole\\Process::wait([boolean $blocking = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Process::write":{"id":"swoole-process.write","purpose":"Write data into the pipe and communicate with the parent process or child processes.","prototype":"integer Swoole\\Process::write(string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Redis\\Server::format":{"id":"swoole-redis-server.format","purpose":"Description","prototype":"ReturnType Swoole\\Redis\\Server::format(string $type [, string $value = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Redis\\Server::setHandler":{"id":"swoole-redis-server.sethandler","purpose":"Description","prototype":"ReturnType Swoole\\Redis\\Server::setHandler(string $command, string $callback [, string $number_of_string_param = '' [, string $type_of_array_param = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Redis\\Server::start":{"id":"swoole-redis-server.start","purpose":"Description","prototype":"ReturnType Swoole\\Redis\\Server::start()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Serialize::pack":{"id":"swoole-serialize.pack","purpose":"Serialize the data.","prototype":"ReturnType Swoole\\Serialize::pack(string $data [, int $is_fast = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Serialize::unpack":{"id":"swoole-serialize.unpack","purpose":"Unserialize the data.","prototype":"ReturnType Swoole\\Serialize::unpack(string $data [, string $args = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::addlistener":{"id":"swoole-server.addlistener","purpose":"Add a new listener to the server.","prototype":"void Swoole\\Server::addlistener(string $host, integer $port, string $socket_type)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::addProcess":{"id":"swoole-server.addprocess","purpose":"Add a user defined swoole_process to the server.","prototype":"boolean Swoole\\Server::addProcess(swoole_process $process)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::after":{"id":"swoole-server.after","purpose":"Trigger a callback function after a period of time.","prototype":"ReturnType Swoole\\Server::after(integer $after_time_ms, callable $callback [, string $param = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::bind":{"id":"swoole-server.bind","purpose":"Bind the connection to a user defined user ID.","prototype":"boolean Swoole\\Server::bind(integer $fd, integer $uid)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::clearTimer":{"id":"swoole-server.cleartimer","purpose":"Stop and destory a timer.","prototype":"void Swoole\\Server::clearTimer(integer $timer_id)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"swoole_timer_clear":{"id":"swoole-server.cleartimer","purpose":"Stop and destory a timer.","prototype":"void Swoole\\Server.clearTimer(integer $timer_id)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::close":{"id":"swoole-server.close","purpose":"Close a connection to the client.","prototype":"boolean Swoole\\Server::close(integer $fd [, boolean $reset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::confirm":{"id":"swoole-server.confirm","purpose":"Check status of the connection.","prototype":"boolean Swoole\\Server::confirm(integer $fd)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::connection_info":{"id":"swoole-server.connection-info","purpose":"Get the connection info by file description.","prototype":"array Swoole\\Server::connection_info(integer $fd [, integer $reactor_id = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::connection_list":{"id":"swoole-server.connection-list","purpose":"Get all of the established connections.","prototype":"array Swoole\\Server::connection_list(integer $start_fd [, integer $pagesize = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::__construct":{"id":"swoole-server.construct","purpose":"Construct a Swoole server.","prototype":" Swoole\\Server::__construct(string $host [, integer $port = '' [, integr $mode = '' [, integer $sock_type = '']]])","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::defer":{"id":"swoole-server.defer","purpose":"Delay execution of the callback function at the end of current EventLoop.","prototype":"void Swoole\\Server::defer(callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server\\Port::__construct":{"id":"swoole-server-port.construct","purpose":"Construct a server port","prototype":" Swoole\\Server\\Port::__construct()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server\\Port::__destruct":{"id":"swoole-server-port.destruct","purpose":"Destory server port","prototype":"void Swoole\\Server\\Port::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server\\Port::on":{"id":"swoole-server-port.on","purpose":"Register callback functions by event.","prototype":"ReturnType Swoole\\Server\\Port::on(string $event_name, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server\\Port::set":{"id":"swoole-server-port.set","purpose":"Set protocol of the server port.","prototype":"void Swoole\\Server\\Port::set(array $settings)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::exist":{"id":"swoole-server.exist","purpose":"Check if the connection is existed.","prototype":"boolean Swoole\\Server::exist(integer $fd)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::finish":{"id":"swoole-server.finish","purpose":"Used in task process for sending result to the worker process when the task is finished.","prototype":"void Swoole\\Server::finish(string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::getClientInfo":{"id":"swoole-server.getclientinfo","purpose":"Get the connection info by file description.","prototype":"ReturnType Swoole\\Server::getClientInfo(integer $fd [, integer $reactor_id = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::getClientList":{"id":"swoole-server.getclientlist","purpose":"Get all of the established connections.","prototype":"array Swoole\\Server::getClientList(integer $start_fd [, integer $pagesize = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::getLastError":{"id":"swoole-server.getlasterror","purpose":"Get the error code of the most recent error.","prototype":"integer Swoole\\Server::getLastError()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::heartbeat":{"id":"swoole-server.heartbeat","purpose":"Check all the connections on the server.","prototype":"mixed Swoole\\Server::heartbeat(boolean $if_close_connection)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::listen":{"id":"swoole-server.listen","purpose":"Listen on the given IP and port, socket type.","prototype":"boolean Swoole\\Server::listen(string $host, integer $port, string $socket_type)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::on":{"id":"swoole-server.on","purpose":"Register a callback function by event name.","prototype":"void Swoole\\Server::on(string $event_name, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::pause":{"id":"swoole-server.pause","purpose":"Stop receiving data from the connection.","prototype":"void Swoole\\Server::pause(integer $fd)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::protect":{"id":"swoole-server.protect","purpose":"Set the connection to be protected mode.","prototype":"void Swoole\\Server::protect(integer $fd [, boolean $is_protected = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::reload":{"id":"swoole-server.reload","purpose":"Restart all the worker process.","prototype":"boolean Swoole\\Server::reload()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::resume":{"id":"swoole-server.resume","purpose":"Start receving data from the connection.","prototype":"void Swoole\\Server::resume(integer $fd)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::send":{"id":"swoole-server.send","purpose":"Send data to the client.","prototype":"boolean Swoole\\Server::send(integer $fd, string $data [, integer $reactor_id = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::sendfile":{"id":"swoole-server.sendfile","purpose":"Send file to the connection.","prototype":"boolean Swoole\\Server::sendfile(integer $fd, string $filename [, integer $offset = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::sendMessage":{"id":"swoole-server.sendmessage","purpose":"Send message to worker processes by ID.","prototype":"boolean Swoole\\Server::sendMessage(integer $worker_id, string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::sendto":{"id":"swoole-server.sendto","purpose":"Send data to the remote UDP address.","prototype":"boolean Swoole\\Server::sendto(string $ip, integer $port, string $data [, string $server_socket = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::sendwait":{"id":"swoole-server.sendwait","purpose":"Send data to the remote socket in the blocking way.","prototype":"boolean Swoole\\Server::sendwait(integer $fd, string $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::set":{"id":"swoole-server.set","purpose":"Set the runtime settings of the swoole server.","prototype":"ReturnType Swoole\\Server::set(array $settings)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::shutdown":{"id":"swoole-server.shutdown","purpose":"Shutdown the master server process, this function can be called in worker processes.","prototype":"void Swoole\\Server::shutdown()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::start":{"id":"swoole-server.start","purpose":"Start the Swoole server.","prototype":"void Swoole\\Server::start()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::stats":{"id":"swoole-server.stats","purpose":"Get the stats of the Swoole server.","prototype":"array Swoole\\Server::stats()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::stop":{"id":"swoole-server.stop","purpose":"Stop the Swoole server.","prototype":"boolean Swoole\\Server::stop([integer $worker_id = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::task":{"id":"swoole-server.task","purpose":"Send data to the task worker processes.","prototype":"mixed Swoole\\Server::task(string $data [, integer $dst_worker_id = '' [, callable $callback = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::taskwait":{"id":"swoole-server.taskwait","purpose":"Send data to the task worker processes in blocking way.","prototype":"void Swoole\\Server::taskwait(string $data [, float $timeout = '' [, integer $worker_id = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::taskWaitMulti":{"id":"swoole-server.taskwaitmulti","purpose":"Execute multiple tasks concurrently.","prototype":"void Swoole\\Server::taskWaitMulti(array $tasks [, double $timeout_ms = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Server::tick":{"id":"swoole-server.tick","purpose":"Repeats a given function at every given time-interval.","prototype":"void Swoole\\Server::tick(integer $interval_ms, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::column":{"id":"swoole-table.column","purpose":"Set the data type and size of the columns.","prototype":"ReturnType Swoole\\Table::column(string $name, string $type [, integer $size = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::__construct":{"id":"swoole-table.construct","purpose":"Construct a Swoole memory table with fixed size.","prototype":" Swoole\\Table::__construct(integer $table_size)","return":"","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::count":{"id":"swoole-table.count","purpose":"Count the rows in the table, or count all the elements in the table if $mode = 1.","prototype":"integer Swoole\\Table::count()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::create":{"id":"swoole-table.create","purpose":"Create the swoole memory table.","prototype":"void Swoole\\Table::create()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::current":{"id":"swoole-table.current","purpose":"Get the current row.","prototype":"array Swoole\\Table::current()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::decr":{"id":"swoole-table.decr","purpose":"Decrement the value in the Swoole table by $row_key and $column_key.","prototype":"ReturnType Swoole\\Table::decr(string $key, string $column [, integer $decrby = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::del":{"id":"swoole-table.del","purpose":"Delete a row in the Swoole table by $row_key.","prototype":"void Swoole\\Table::del(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::destroy":{"id":"swoole-table.destroy","purpose":"Destroy the Swoole table.","prototype":"void Swoole\\Table::destroy()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::exist":{"id":"swoole-table.exist","purpose":"Check if a row is existed by $row_key.","prototype":"boolean Swoole\\Table::exist(string $key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::get":{"id":"swoole-table.get","purpose":"Get the value in the Swoole table by $row_key and $column_key.","prototype":"integer Swoole\\Table::get(string $row_key, string $column_key)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::incr":{"id":"swoole-table.incr","purpose":"Increment the value by $row_key and $column_key.","prototype":"void Swoole\\Table::incr(string $key, string $column [, integer $incrby = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::key":{"id":"swoole-table.key","purpose":"Get the key of current row.","prototype":"string Swoole\\Table::key()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::next":{"id":"swoole-table.next","purpose":"Iterator the next row.","prototype":"ReturnType Swoole\\Table::next()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::rewind":{"id":"swoole-table.rewind","purpose":"Rewind the iterator.","prototype":"void Swoole\\Table::rewind()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::set":{"id":"swoole-table.set","purpose":"Update a row of the table by $row_key.","prototype":"VOID Swoole\\Table::set(string $key, array $value)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Table::valid":{"id":"swoole-table.valid","purpose":"Check current if the current row is valid.","prototype":"boolean Swoole\\Table::valid()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Timer::after":{"id":"swoole-timer.after","purpose":"Trigger a callback function after a period of time.","prototype":"void Swoole\\Timer::after(int $after_time_ms, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Timer::clear":{"id":"swoole-timer.clear","purpose":"Delete a timer by timer ID.","prototype":"void Swoole\\Timer::clear(integer $timer_id)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Timer::exists":{"id":"swoole-timer.exists","purpose":"Check if a timer is existed.","prototype":"boolean Swoole\\Timer::exists(integer $timer_id)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\Timer::tick":{"id":"swoole-timer.tick","purpose":"Repeats a given function at every given time-interval.","prototype":"void Swoole\\Timer::tick(integer $interval_ms, callable $callback [, string $param = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\WebSocket\\Server::exist":{"id":"swoole-websocket-server.exist","purpose":"Check if the the file description is existed.","prototype":"boolean Swoole\\WebSocket\\Server::exist(integer $fd)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\WebSocket\\Server::on":{"id":"swoole-websocket-server.on","purpose":"Register event callback function","prototype":"ReturnType Swoole\\WebSocket\\Server::on(string $event_name, callable $callback)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\WebSocket\\Server::pack":{"id":"swoole-websocket-server.pack","purpose":"Get a pack of binary data to send in a single frame.","prototype":"binary Swoole\\WebSocket\\Server::pack(string $data [, string $opcode = '' [, string $finish = '' [, string $mask = '']]])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\WebSocket\\Server::push":{"id":"swoole-websocket-server.push","purpose":"Push data to the remote client.","prototype":"void Swoole\\WebSocket\\Server::push(string $fd, string $data [, string $opcode = '' [, string $finish = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"Swoole\\WebSocket\\Server::unpack":{"id":"swoole-websocket-server.unpack","purpose":"Unpack the binary data received from the client.","prototype":"string Swoole\\WebSocket\\Server::unpack(binary $data)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL swoole >= 1.9.0"},"tidy::body":{"id":"tidy.body","purpose":"Returns a tidyNode object starting from the <body> tag of the tidy parse tree","prototype":"tidyNode tidy::body(tidy $object)","return":"<p class=\"para\">   Returns a <span class=\"classname\">tidyNode<\/span> object starting from the    &lt;body&gt; tag of the tidy parse tree.  <\/p>","versions":""},"tidy_get_body":{"id":"tidy.body","purpose":"Returns a tidyNode object starting from the <body> tag of the tidy parse tree","prototype":"tidyNode tidy_get_body(tidy $object)","return":"<p class=\"para\">   Returns a <span class=\"classname\">tidyNode<\/span> object starting from the    &lt;body&gt; tag of the tidy parse tree.  <\/p>","versions":""},"tidy::cleanRepair":{"id":"tidy.cleanrepair","purpose":"Execute configured cleanup and repair operations on parsed markup","prototype":"bool tidy::cleanRepair(tidy $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"tidy_clean_repair":{"id":"tidy.cleanrepair","purpose":"Execute configured cleanup and repair operations on parsed markup","prototype":"bool tidy_clean_repair(tidy $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"tidy::__construct":{"id":"tidy.construct","purpose":"Constructs a new tidy object","prototype":" tidy::__construct([string $filename = '' [, mixed $config = '' [, string $encoding = '' [, bool $use_include_path = '']]]])","return":"<p class=\"para\">   Returns the new <span class=\"classname\">tidy<\/span> instance.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy::diagnose":{"id":"tidy.diagnose","purpose":"Run configured diagnostics on parsed and repaired markup","prototype":"bool tidy::diagnose(tidy $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy_diagnose":{"id":"tidy.diagnose","purpose":"Run configured diagnostics on parsed and repaired markup","prototype":"bool tidy_diagnose(tidy $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy::$errorBuffer":{"id":"tidy.props.errorbuffer","purpose":"Return warnings and errors which occurred parsing the specified document","prototype":"string tidy::$errorBuffer(tidy $tidy)","return":"<p class=\"para\">   Returns the error buffer as a string.  <\/p>","versions":""},"tidy_get_error_buffer":{"id":"tidy.props.errorbuffer","purpose":"Return warnings and errors which occurred parsing the specified document","prototype":"string tidy.$errorBuffer(tidy $tidy)","return":"<p class=\"para\">   Returns the error buffer as a string.  <\/p>","versions":""},"tidy::getConfig":{"id":"tidy.getconfig","purpose":"Get current Tidy configuration","prototype":"array tidy::getConfig(tidy $object)","return":"<p class=\"para\">   Returns an array of configuration options.  <\/p>  <p class=\"para\">   For an explanation about each option, visit <a href=\"http:\/\/tidy.sourceforge.net\/docs\/quickref.html\" class=\"link external\">&raquo;&nbsp;http:\/\/tidy.sourceforge.net\/docs\/quickref.html<\/a>.  <\/p>","versions":""},"tidy_get_config":{"id":"tidy.getconfig","purpose":"Get current Tidy configuration","prototype":"array tidy_get_config(tidy $object)","return":"<p class=\"para\">   Returns an array of configuration options.  <\/p>  <p class=\"para\">   For an explanation about each option, visit <a href=\"http:\/\/tidy.sourceforge.net\/docs\/quickref.html\" class=\"link external\">&raquo;&nbsp;http:\/\/tidy.sourceforge.net\/docs\/quickref.html<\/a>.  <\/p>","versions":""},"tidy::getHtmlVer":{"id":"tidy.gethtmlver","purpose":"Get the Detected HTML version for the specified document","prototype":"int tidy::getHtmlVer(tidy $object)","return":"<p class=\"para\">   Returns the detected HTML version.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function is not yet implemented in the Tidylib itself, so it always    return <em>0<\/em>.   <\/p>  <\/div>","versions":""},"tidy_get_html_ver":{"id":"tidy.gethtmlver","purpose":"Get the Detected HTML version for the specified document","prototype":"int tidy_get_html_ver(tidy $object)","return":"<p class=\"para\">   Returns the detected HTML version.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function is not yet implemented in the Tidylib itself, so it always    return <em>0<\/em>.   <\/p>  <\/div>","versions":""},"tidy::getOpt":{"id":"tidy.getopt","purpose":"Returns the value of the specified configuration option for the tidy document","prototype":"mixed tidy::getOpt(string $option, tidy $object)","return":"<p class=\"para\">   Returns the value of the specified <code class=\"parameter\">option<\/code>.   The return type depends on the type of the specified one.   <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy_getopt":{"id":"tidy.getopt","purpose":"Returns the value of the specified configuration option for the tidy document","prototype":"mixed tidy_getopt(string $option, tidy $object)","return":"<p class=\"para\">   Returns the value of the specified <code class=\"parameter\">option<\/code>.   The return type depends on the type of the specified one.   <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy::getOptDoc":{"id":"tidy.getoptdoc","purpose":"Returns the documentation for the given option name","prototype":"string tidy::getOptDoc(string $optname, tidy $object)","return":"<p class=\"para\">   Returns a string if the option exists and has documentation available, or   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":""},"tidy_get_opt_doc":{"id":"tidy.getoptdoc","purpose":"Returns the documentation for the given option name","prototype":"string tidy_get_opt_doc(string $optname, tidy $object)","return":"<p class=\"para\">   Returns a string if the option exists and has documentation available, or   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":""},"tidy::getRelease":{"id":"tidy.getrelease","purpose":"Get release date (version) for Tidy library","prototype":"string tidy::getRelease()","return":"<p class=\"para\">   Returns a string with the release date of the Tidy library.  <\/p>","versions":""},"tidy_get_release":{"id":"tidy.getrelease","purpose":"Get release date (version) for Tidy library","prototype":"string tidy_get_release()","return":"<p class=\"para\">   Returns a string with the release date of the Tidy library.  <\/p>","versions":""},"tidy::getStatus":{"id":"tidy.getstatus","purpose":"Get status of specified document","prototype":"int tidy::getStatus(tidy $object)","return":"<p class=\"para\">   Returns 0 if no error\/warning was raised, 1 for warnings or accessibility   errors, or 2 for errors.  <\/p>","versions":""},"tidy_get_status":{"id":"tidy.getstatus","purpose":"Get status of specified document","prototype":"int tidy_get_status(tidy $object)","return":"<p class=\"para\">   Returns 0 if no error\/warning was raised, 1 for warnings or accessibility   errors, or 2 for errors.  <\/p>","versions":""},"tidy::head":{"id":"tidy.head","purpose":"Returns a tidyNode object starting from the <head> tag of the tidy parse tree","prototype":"tidyNode tidy::head(tidy $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">tidyNode<\/span> object.  <\/p>","versions":""},"tidy_get_head":{"id":"tidy.head","purpose":"Returns a tidyNode object starting from the <head> tag of the tidy parse tree","prototype":"tidyNode tidy_get_head(tidy $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">tidyNode<\/span> object.  <\/p>","versions":""},"tidy::html":{"id":"tidy.html","purpose":"Returns a tidyNode object starting from the <html> tag of the tidy parse tree","prototype":"tidyNode tidy::html(tidy $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">tidyNode<\/span> object.  <\/p>","versions":""},"tidy_get_html":{"id":"tidy.html","purpose":"Returns a tidyNode object starting from the <html> tag of the tidy parse tree","prototype":"tidyNode tidy_get_html(tidy $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">tidyNode<\/span> object.  <\/p>","versions":""},"tidy::isXhtml":{"id":"tidy.isxhtml","purpose":"Indicates if the document is a XHTML document","prototype":"bool tidy::isXhtml(tidy $object)","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the specified tidy   <code class=\"parameter\">object<\/code> is a XHTML document, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function is not yet implemented in the Tidylib itself, so it always    return <strong><code>FALSE<\/code><\/strong>.   <\/p>  <\/div>","versions":""},"tidy_is_xhtml":{"id":"tidy.isxhtml","purpose":"Indicates if the document is a XHTML document","prototype":"bool tidy_is_xhtml(tidy $object)","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the specified tidy   <code class=\"parameter\">object<\/code> is a XHTML document, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function is not yet implemented in the Tidylib itself, so it always    return <strong><code>FALSE<\/code><\/strong>.   <\/p>  <\/div>","versions":""},"tidy::isXml":{"id":"tidy.isxml","purpose":"Indicates if the document is a generic (non HTML\/XHTML) XML document","prototype":"bool tidy::isXml(tidy $object)","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the specified tidy   <code class=\"parameter\">object<\/code> is a generic XML document (non HTML\/XHTML),   or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function is not yet implemented in the Tidylib itself, so it always    return <strong><code>FALSE<\/code><\/strong>.   <\/p>  <\/div>","versions":""},"tidy_is_xml":{"id":"tidy.isxml","purpose":"Indicates if the document is a generic (non HTML\/XHTML) XML document","prototype":"bool tidy_is_xml(tidy $object)","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the specified tidy   <code class=\"parameter\">object<\/code> is a generic XML document (non HTML\/XHTML),   or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"para\">    This function is not yet implemented in the Tidylib itself, so it always    return <strong><code>FALSE<\/code><\/strong>.   <\/p>  <\/div>","versions":""},"tidy::parseFile":{"id":"tidy.parsefile","purpose":"Parse markup in file or URI","prototype":"tidy tidy::parseFile(string $filename [, mixed $config = '' [, string $encoding = '' [, bool $use_include_path = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"tidy_parse_file":{"id":"tidy.parsefile","purpose":"Parse markup in file or URI","prototype":"tidy tidy_parse_file(string $filename [, mixed $config = '' [, string $encoding = '' [, bool $use_include_path = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"tidy::parseString":{"id":"tidy.parsestring","purpose":"Parse a document stored in a string","prototype":"tidy tidy::parseString(string $input [, mixed $config = '' [, string $encoding = '']])","return":"<p class=\"para\">   Returns a new <span class=\"classname\">tidy<\/span> instance.  <\/p>","versions":""},"tidy_parse_string":{"id":"tidy.parsestring","purpose":"Parse a document stored in a string","prototype":"tidy tidy_parse_string(string $input [, mixed $config = '' [, string $encoding = '']])","return":"<p class=\"para\">   Returns a new <span class=\"classname\">tidy<\/span> instance.  <\/p>","versions":""},"tidy::repairFile":{"id":"tidy.repairfile","purpose":"Repair a file and return it as a string","prototype":"string tidy::repairFile(string $filename [, mixed $config = '' [, string $encoding = '' [, bool $use_include_path = '']]])","return":"<p class=\"para\">   Returns the repaired contents as a string.  <\/p>","versions":""},"tidy_repair_file":{"id":"tidy.repairfile","purpose":"Repair a file and return it as a string","prototype":"string tidy_repair_file(string $filename [, mixed $config = '' [, string $encoding = '' [, bool $use_include_path = '']]])","return":"<p class=\"para\">   Returns the repaired contents as a string.  <\/p>","versions":""},"tidy::repairString":{"id":"tidy.repairstring","purpose":"Repair a string using an optionally provided configuration file","prototype":"string tidy::repairString(string $data [, mixed $config = '' [, string $encoding = '']])","return":"<p class=\"para\">   Returns the repaired string.  <\/p>","versions":""},"tidy_repair_string":{"id":"tidy.repairstring","purpose":"Repair a string using an optionally provided configuration file","prototype":"string tidy_repair_string(string $data [, mixed $config = '' [, string $encoding = '']])","return":"<p class=\"para\">   Returns the repaired string.  <\/p>","versions":""},"tidy::root":{"id":"tidy.root","purpose":"Returns a tidyNode object representing the root of the tidy parse tree","prototype":"tidyNode tidy::root(tidy $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">tidyNode<\/span> object.  <\/p>","versions":""},"tidy_get_root":{"id":"tidy.root","purpose":"Returns a tidyNode object representing the root of the tidy parse tree","prototype":"tidyNode tidy_get_root(tidy $object)","return":"<p class=\"para\">   Returns the <span class=\"classname\">tidyNode<\/span> object.  <\/p>","versions":""},"tidyNode::getParent":{"id":"tidynode.getparent","purpose":"Returns the parent node of the current node","prototype":"tidyNode tidyNode::getParent()","return":"<p class=\"para\">   Returns a <span class=\"type\">tidyNode<\/span> if the node has a parent, or <strong><code>NULL<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 5 >= 5.2.2, PHP 7"},"tidyNode::hasChildren":{"id":"tidynode.haschildren","purpose":"Checks if a node has children","prototype":"bool tidyNode::hasChildren()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node has children, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::hasSiblings":{"id":"tidynode.hassiblings","purpose":"Checks if a node has siblings","prototype":"bool tidyNode::hasSiblings()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node has siblings, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::isAsp":{"id":"tidynode.isasp","purpose":"Checks if this node is ASP","prototype":"bool tidyNode::isAsp()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node is ASP, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::isComment":{"id":"tidynode.iscomment","purpose":"Checks if a node represents a comment","prototype":"bool tidyNode::isComment()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node is a comment, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::isHtml":{"id":"tidynode.ishtml","purpose":"Checks if a node is part of a HTML document","prototype":"bool tidyNode::isHtml()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node is part of a HTML document, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::isJste":{"id":"tidynode.isjste","purpose":"Checks if this node is JSTE","prototype":"bool tidyNode::isJste()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node is JSTE, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::isPhp":{"id":"tidynode.isphp","purpose":"Checks if a node is PHP","prototype":"bool tidyNode::isPhp()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current node is PHP code, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"tidyNode::isText":{"id":"tidynode.istext","purpose":"Checks if a node represents text (no markup)","prototype":"bool tidyNode::isText()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the node represent a text, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"ob_tidyhandler":{"id":"function.ob-tidyhandler","purpose":"ob_start callback function to repair the buffer","prototype":"string ob_tidyhandler(string $input [, int $mode = ''])","return":"<p class=\"para\">   Returns the modified buffer.  <\/p>","versions":"PHP 5, PHP 7"},"tidy_access_count":{"id":"function.tidy-access-count","purpose":"Returns the Number of Tidy accessibility warnings encountered for specified document","prototype":"int tidy_access_count(tidy $object)","return":"<p class=\"para\">   Returns the number of warnings.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy_config_count":{"id":"function.tidy-config-count","purpose":"Returns the Number of Tidy configuration errors encountered for specified document","prototype":"int tidy_config_count(tidy $object)","return":"<p class=\"para\">   Returns the number of errors.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy_error_count":{"id":"function.tidy-error-count","purpose":"Returns the Number of Tidy errors encountered for specified document","prototype":"int tidy_error_count(tidy $object)","return":"<p class=\"para\">   Returns the number of errors.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy_get_output":{"id":"function.tidy-get-output","purpose":"Return a string representing the parsed tidy markup","prototype":"string tidy_get_output(tidy $object)","return":"<p class=\"para\">   Returns the parsed tidy markup.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"tidy_load_config":{"id":"function.tidy-load-config","purpose":"Load an ASCII Tidy configuration file with the specified encoding","prototype":"void tidy_load_config(string $filename, string $encoding)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL tidy >= 0.5.2"},"tidy_reset_config":{"id":"function.tidy-reset-config","purpose":"Restore Tidy configuration to default values","prototype":"bool tidy_reset_config()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.2.0, PECL tidy >= 0.7.0"},"tidy_save_config":{"id":"function.tidy-save-config","purpose":"Save current settings to named file","prototype":"bool tidy_save_config(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL tidy >= 0.5.2"},"tidy_set_encoding":{"id":"function.tidy-set-encoding","purpose":"Set the input\/output character encoding for parsing markup","prototype":"bool tidy_set_encoding(string $encoding)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL tidy >= 0.5.2"},"tidy_setopt":{"id":"function.tidy-setopt","purpose":"Updates the configuration settings for the specified tidy document","prototype":"bool tidy_setopt(string $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL tidy >= 0.5.2"},"tidy_warning_count":{"id":"function.tidy-warning-count","purpose":"Returns the Number of Tidy warnings encountered for specified document","prototype":"int tidy_warning_count(tidy $object)","return":"<p class=\"para\">   Returns the number of warnings.  <\/p>","versions":"PHP 5, PHP 7, PECL tidy >= 0.5.2"},"token_get_all":{"id":"function.token-get-all","purpose":"Split given source into PHP tokens","prototype":"array token_get_all(string $source [, int $flags = ''])","return":"<p class=\"para\">   An array of token identifiers. Each individual token identifier is either   a single character (i.e.: <em>;<\/em>, <em>.<\/em>,    <em>&gt;<\/em>, <em>!<\/em>, etc...),   or a three element array containing the token index in element 0, the string   content of the original token in element 1 and the line number in element 2.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"token_name":{"id":"function.token-name","purpose":"Get the symbolic name of a given PHP token","prototype":"string token_name(int $token)","return":"<p class=\"para\">   The symbolic name of the given <code class=\"parameter\">token<\/code>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"base64_decode":{"id":"function.base64-decode","purpose":"Decodes data encoded with MIME base64","prototype":"string base64_decode(string $data [, bool $strict = ''])","return":"<p class=\"para\">   Returns the decoded data or <strong><code>FALSE<\/code><\/strong> on failure. The returned data may be   binary.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"base64_encode":{"id":"function.base64-encode","purpose":"Encodes data with MIME base64","prototype":"string base64_encode(string $data)","return":"<p class=\"para\">   The encoded data, as a string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_headers":{"id":"function.get-headers","purpose":"Fetches all the headers sent by the server in response to a HTTP request","prototype":"array get_headers(string $url [, int $format = '' [, resource $context = '']])","return":"<p class=\"para\">   Returns an indexed or associative array with the headers, or <strong><code>FALSE<\/code><\/strong> on   failure.  <\/p>","versions":"PHP 5, PHP 7"},"get_meta_tags":{"id":"function.get-meta-tags","purpose":"Extracts all meta tag content attributes from a file and returns an array","prototype":"array get_meta_tags(string $filename [, bool $use_include_path = ''])","return":"<p class=\"para\">   Returns an array with all the parsed meta tags.  <\/p>  <p class=\"para\">   The value of the name property becomes the key, the value of the content   property becomes the value of the returned array, so you can easily use   standard array functions to traverse it or access single values.    Special characters in the value of the name property are substituted with   &#039;_&#039;, the rest is converted to lower case.  If two meta tags have the same   name, only the last one is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"http_build_query":{"id":"function.http-build-query","purpose":"Generate URL-encoded query string","prototype":"string http_build_query(mixed $query_data [, string $numeric_prefix = '' [, string $arg_separator = '' [, int $enc_type = '']]])","return":"<p class=\"para\">   Returns a URL-encoded string.  <\/p>","versions":"PHP 5, PHP 7"},"parse_url":{"id":"function.parse-url","purpose":"Parse a URL and return its components","prototype":"mixed parse_url(string $url [, int $component = -1])","return":"<p class=\"para\">   On seriously malformed URLs, <span class=\"function\">parse_url<\/span> may return   <strong><code>FALSE<\/code><\/strong>.  <\/p>  <p class=\"para\">   If the <code class=\"parameter\">component<\/code> parameter is omitted, an   associative <span class=\"type\">array<\/span> is returned. At least one element will be   present within the array. Potential keys within this array are:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">scheme<\/var> - e.g. http     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">host<\/var>      <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">port<\/var>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">user<\/var>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">pass<\/var>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">path<\/var>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">query<\/var> - after the question mark <em>?<\/em>     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <var class=\"varname\">fragment<\/var> - after the hashmark <em>#<\/em>     <\/span>    <\/li>   <\/ul>  <\/p>  <p class=\"para\">   If the <code class=\"parameter\">component<\/code> parameter is specified,   <span class=\"function\">parse_url<\/span> returns a <span class=\"type\">string<\/span> (or an   <span class=\"type\">integer<\/span>, in the case of <strong><code>PHP_URL_PORT<\/code><\/strong>)   instead of an <span class=\"type\">array<\/span>. If the requested component doesn&#039;t exist   within the given URL, <strong><code>NULL<\/code><\/strong> will be returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rawurldecode":{"id":"function.rawurldecode","purpose":"Decode URL-encoded strings","prototype":"string rawurldecode(string $str)","return":"<p class=\"para\">   Returns the decoded URL, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rawurlencode":{"id":"function.rawurlencode","purpose":"URL-encode according to RFC 3986","prototype":"string rawurlencode(string $str)","return":"<p class=\"para\">   Returns a string in which all non-alphanumeric characters except   <em>-_.~<\/em> have been replaced with a percent   (<em>%<\/em>) sign followed by two hex digits.  This is the   encoding described in <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc3986\" class=\"link external\">&raquo;&nbsp;RFC 3986<\/a> for   protecting literal characters from being interpreted as special URL   delimiters, and for protecting URLs from being mangled by transmission   media with character conversions (like some email systems).   <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">     Prior to PHP 5.3.0, rawurlencode encoded tildes (<em>~<\/em>) as per     <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc1738\" class=\"link external\">&raquo;&nbsp;RFC 1738<\/a>.    <\/p>   <\/p><\/blockquote>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"urldecode":{"id":"function.urldecode","purpose":"Decodes URL-encoded string","prototype":"string urldecode(string $str)","return":"<p class=\"para\">   Returns the decoded string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"urlencode":{"id":"function.urlencode","purpose":"URL-encodes string","prototype":"string urlencode(string $str)","return":"<p class=\"para\">   Returns a string in which all non-alphanumeric characters except   <em>-_.<\/em> have been replaced with a percent   (<em>%<\/em>) sign followed by two hex digits and spaces encoded   as plus (<em>+<\/em>) signs.  It is encoded the same way that the   posted data from a WWW form is encoded, that is the same way as in   <em>application\/x-www-form-urlencoded<\/em> media type. This   differs from the <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc3986\" class=\"link external\">&raquo;&nbsp;RFC 3986<\/a> encoding (see   <span class=\"function\">rawurlencode<\/span>) in that for historical reasons, spaces   are encoded as plus (+) signs.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"V8Js::__construct":{"id":"v8js.construct","purpose":"Construct a new V8Js object","prototype":" V8Js::__construct([string $object_name = \"PHP\" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = '']]]])","return":"<p class=\"para\">   Returns a new V8Js context object.  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8Js::executeString":{"id":"v8js.executestring","purpose":"Execute a string as Javascript code","prototype":"mixed V8Js::executeString(string $script [, string $identifier = \"V8Js::executeString()\" [, int $flags = '']])","return":"<p class=\"para\">   Returns the last variable instantiated in the Javascript code converted to matching PHP variable type.  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8Js::getExtensions":{"id":"v8js.getextensions","purpose":"Return an array of registered extensions","prototype":"array V8Js::getExtensions()","return":"<p class=\"para\">   Returns an array of registered extensions or an empty array if there are none.  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8Js::getPendingException":{"id":"v8js.getpendingexception","purpose":"Return pending uncaught Javascript exception","prototype":"V8JsException V8Js::getPendingException()","return":"<p class=\"para\">   Either <span class=\"classname\">V8JsException<\/span> or <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8Js::registerExtension":{"id":"v8js.registerextension","purpose":"Register Javascript extensions for V8Js","prototype":"bool V8Js::registerExtension(string $extension_name, string $script [, array $dependencies = array() [, bool $auto_enable = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if extension was registered successfully, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8JsException::getJsFileName":{"id":"v8jsexception.getjsfilename","purpose":"The getJsFileName purpose","prototype":"string V8JsException::getJsFileName()","return":"<p class=\"para\">  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8JsException::getJsLineNumber":{"id":"v8jsexception.getjslinenumber","purpose":"The getJsLineNumber purpose","prototype":"int V8JsException::getJsLineNumber()","return":"<p class=\"para\">  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8JsException::getJsSourceLine":{"id":"v8jsexception.getjssourceline","purpose":"The getJsSourceLine purpose","prototype":"string V8JsException::getJsSourceLine()","return":"<p class=\"para\">  <\/p>","versions":"PECL v8js >= 0.1.0"},"V8JsException::getJsTrace":{"id":"v8jsexception.getjstrace","purpose":"The getJsTrace purpose","prototype":"string V8JsException::getJsTrace()","return":"<p class=\"para\">  <\/p>","versions":"PECL v8js >= 0.1.0"},"yaml_emit_file":{"id":"function.yaml-emit-file","purpose":"Send the YAML representation of a value to a file","prototype":"bool yaml_emit_file(string $filename, mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = '']]])","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success.  <\/p>","versions":"PECL yaml >= 0.5.0"},"yaml_emit":{"id":"function.yaml-emit","purpose":"Returns the YAML representation of a value","prototype":"string yaml_emit(mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = '']]])","return":"<p class=\"para\">   Returns a YAML encoded <span class=\"type\">string<\/span> on success.  <\/p>","versions":"PECL yaml >= 0.5.0"},"yaml_parse_file":{"id":"function.yaml-parse-file","purpose":"Parse a YAML stream from a file","prototype":"mixed yaml_parse_file(string $filename [, int $pos = '' [, int $ndocs = '' [, array $callbacks = '']]])","return":"<p class=\"para\">   Returns the value encoded in <code class=\"parameter\">input<\/code> in appropriate   PHP type or <strong><code>FALSE<\/code><\/strong> on failure. If <code class=\"parameter\">pos<\/code> is <em>-1<\/em> an   <span class=\"type\">array<\/span> will be returned with one entry for each document found   in the stream.  <\/p>","versions":"PECL yaml >= 0.4.0"},"yaml_parse_url":{"id":"function.yaml-parse-url","purpose":"Parse a Yaml stream from a URL","prototype":"mixed yaml_parse_url(string $url [, int $pos = '' [, int $ndocs = '' [, array $callbacks = '']]])","return":"<p class=\"para\">   Returns the value encoded in <code class=\"parameter\">input<\/code> in appropriate   PHP type or <strong><code>FALSE<\/code><\/strong> on failure. If <code class=\"parameter\">pos<\/code> is   <em>-1<\/em> an <span class=\"type\">array<\/span> will be returned with one entry   for each document found in the stream.  <\/p>","versions":"PECL yaml >= 0.4.0"},"yaml_parse":{"id":"function.yaml-parse","purpose":"Parse a YAML stream","prototype":"mixed yaml_parse(string $input [, int $pos = '' [, int $ndocs = '' [, array $callbacks = '']]])","return":"<p class=\"para\">   Returns the value encoded in <code class=\"parameter\">input<\/code> in appropriate   PHP type or <strong><code>FALSE<\/code><\/strong> on failure. If <code class=\"parameter\">pos<\/code> is <em>-1<\/em> an   <span class=\"type\">array<\/span> will be returned with one entry for each document found   in the stream.  <\/p>","versions":"PECL yaml >= 0.4.0"},"Yaf_Application::app":{"id":"yaf-application.app","purpose":"Retrieve an Application instance","prototype":"mixed Yaf_Application::app()","return":"<p class=\"para\">   A Yaf_Application instance, if no Yaf_Application was initialized before,   <strong><code>NULL<\/code><\/strong> will be returned.  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::bootstrap":{"id":"yaf-application.bootstrap","purpose":"Call bootstrap","prototype":"void Yaf_Application::bootstrap([Yaf_Bootstrap_Abstract $bootstrap = ''])","return":"<p class=\"para\">   <span class=\"classname\">Yaf_Application<\/span> instance  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::clearLastError":{"id":"yaf-application.clearlasterror","purpose":"Clear the last error info","prototype":"Yaf_Application Yaf_Application::clearLastError()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.2"},"Yaf_Application::__clone":{"id":"yaf-application.clone","purpose":"Yaf_Application can not be cloned","prototype":"void Yaf_Application::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::__construct":{"id":"yaf-application.construct","purpose":"Yaf_Application constructor","prototype":" Yaf_Application::__construct(mixed $config [, string $envrion = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::__destruct":{"id":"yaf-application.destruct","purpose":"The __destruct purpose","prototype":"void Yaf_Application::__destruct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::environ":{"id":"yaf-application.environ","purpose":"Retrive environ","prototype":"void Yaf_Application::environ()","return":"<p class=\"para\">     <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::execute":{"id":"yaf-application.execute","purpose":"Execute a callback","prototype":"void Yaf_Application::execute(callable $entry, string $...)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::getAppDirectory":{"id":"yaf-application.getappdirectory","purpose":"Get the application directory","prototype":"Yaf_Application Yaf_Application::getAppDirectory()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.4"},"Yaf_Application::getConfig":{"id":"yaf-application.getconfig","purpose":"Retrive the config instance","prototype":"Yaf_Config_Abstract Yaf_Application::getConfig()","return":"<p class=\"para\">    A <span class=\"classname\">Yaf_Config_Abstract<\/span> instance  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::getDispatcher":{"id":"yaf-application.getdispatcher","purpose":"Get Yaf_Dispatcher instance","prototype":"Yaf_Dispatcher Yaf_Application::getDispatcher()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::getLastErrorMsg":{"id":"yaf-application.getlasterrormsg","purpose":"Get message of the last occurred error","prototype":"string Yaf_Application::getLastErrorMsg()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.2"},"Yaf_Application::getLastErrorNo":{"id":"yaf-application.getlasterrorno","purpose":"Get code of last occurred error","prototype":"int Yaf_Application::getLastErrorNo()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.2"},"Yaf_Application::getModules":{"id":"yaf-application.getmodules","purpose":"Get defined module names","prototype":"array Yaf_Application::getModules()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::run":{"id":"yaf-application.run","purpose":"Start Yaf_Application","prototype":"void Yaf_Application::run()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::setAppDirectory":{"id":"yaf-application.setappdirectory","purpose":"Change the application directory","prototype":"Yaf_Application Yaf_Application::setAppDirectory(string $directory)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.4"},"Yaf_Application::__sleep":{"id":"yaf-application.sleep","purpose":"Yaf_Application can not be serialized","prototype":"void Yaf_Application::__sleep()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Application::__wakeup":{"id":"yaf-application.wakeup","purpose":"Yaf_Application can not be unserialized","prototype":"void Yaf_Application::__wakeup()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::autoRender":{"id":"yaf-dispatcher.autorender","purpose":"Switch on\/off autorendering","prototype":"Yaf_Dispatcher Yaf_Dispatcher::autoRender([bool $flag = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::catchException":{"id":"yaf-dispatcher.catchexception","purpose":"Switch on\/off exception catching","prototype":"Yaf_Dispatcher Yaf_Dispatcher::catchException([bool $flag = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::__clone":{"id":"yaf-dispatcher.clone","purpose":"Yaf_Dispatcher can not be cloned","prototype":"void Yaf_Dispatcher::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::__construct":{"id":"yaf-dispatcher.construct","purpose":"Yaf_Dispatcher constructor","prototype":" Yaf_Dispatcher::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::disableView":{"id":"yaf-dispatcher.disableview","purpose":"Disable view rendering","prototype":"bool Yaf_Dispatcher::disableView()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::dispatch":{"id":"yaf-dispatcher.dispatch","purpose":"Dispatch a request","prototype":"Yaf_Response_Abstract Yaf_Dispatcher::dispatch(Yaf_Request_Abstract $request)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::enableView":{"id":"yaf-dispatcher.enableview","purpose":"Enable view rendering","prototype":"Yaf_Dispatcher Yaf_Dispatcher::enableView()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::flushInstantly":{"id":"yaf-dispatcher.flushinstantly","purpose":"Switch on\/off the instant flushing","prototype":"Yaf_Dispatcher Yaf_Dispatcher::flushInstantly([bool $flag = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::getApplication":{"id":"yaf-dispatcher.getapplication","purpose":"Retrive the application","prototype":"Yaf_Application Yaf_Dispatcher::getApplication()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::getInstance":{"id":"yaf-dispatcher.getinstance","purpose":"Retrive the dispatcher instance","prototype":"Yaf_Dispatcher Yaf_Dispatcher::getInstance()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::getRequest":{"id":"yaf-dispatcher.getrequest","purpose":"Retrive the request instance","prototype":"Yaf_Request_Abstract Yaf_Dispatcher::getRequest()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::getRouter":{"id":"yaf-dispatcher.getrouter","purpose":"Retrive router instance","prototype":"Yaf_Router Yaf_Dispatcher::getRouter()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::initView":{"id":"yaf-dispatcher.initview","purpose":"Initialize view and return it","prototype":"Yaf_View_Interface Yaf_Dispatcher::initView(string $templates_dir [, array $options = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::registerPlugin":{"id":"yaf-dispatcher.registerplugin","purpose":"Register a plugin","prototype":"Yaf_Dispatcher Yaf_Dispatcher::registerPlugin(Yaf_Plugin_Abstract $plugin)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::returnResponse":{"id":"yaf-dispatcher.returnresponse","purpose":"The returnResponse purpose","prototype":"Yaf_Dispatcher Yaf_Dispatcher::returnResponse(bool $flag)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::setDefaultAction":{"id":"yaf-dispatcher.setdefaultaction","purpose":"Change default action name","prototype":"Yaf_Dispatcher Yaf_Dispatcher::setDefaultAction(string $action)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::setDefaultController":{"id":"yaf-dispatcher.setdefaultcontroller","purpose":"Change default controller name","prototype":"Yaf_Dispatcher Yaf_Dispatcher::setDefaultController(string $controller)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::setDefaultModule":{"id":"yaf-dispatcher.setdefaultmodule","purpose":"Change default module name","prototype":"Yaf_Dispatcher Yaf_Dispatcher::setDefaultModule(string $module)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::setErrorHandler":{"id":"yaf-dispatcher.seterrorhandler","purpose":"Set error handler","prototype":"Yaf_Dispatcher Yaf_Dispatcher::setErrorHandler(call $callback, int $error_types)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::setRequest":{"id":"yaf-dispatcher.setrequest","purpose":"The setRequest purpose","prototype":"Yaf_Dispatcher Yaf_Dispatcher::setRequest(Yaf_Request_Abstract $request)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::setView":{"id":"yaf-dispatcher.setview","purpose":"Set a custom view engine","prototype":"Yaf_Dispatcher Yaf_Dispatcher::setView(Yaf_View_Interface $view)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::__sleep":{"id":"yaf-dispatcher.sleep","purpose":"Yaf_Dispatcher can not be serialized","prototype":"void Yaf_Dispatcher::__sleep()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::throwException":{"id":"yaf-dispatcher.throwexception","purpose":"Switch on\/off exception throwing","prototype":"Yaf_Dispatcher Yaf_Dispatcher::throwException([bool $flag = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Dispatcher::__wakeup":{"id":"yaf-dispatcher.wakeup","purpose":"Yaf_Dispatcher can not be unserialized","prototype":"void Yaf_Dispatcher::__wakeup()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Abstract::get":{"id":"yaf-config-abstract.get","purpose":"Getter","prototype":"mixed Yaf_Config_Abstract::get(string $name, mixed $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Abstract::readonly":{"id":"yaf-config-abstract.readonly","purpose":"Find a config whether readonly","prototype":"bool Yaf_Config_Abstract::readonly()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Abstract::set":{"id":"yaf-config-abstract.set","purpose":"Setter","prototype":"Yaf_Config_Abstract Yaf_Config_Abstract::set()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Abstract::toArray":{"id":"yaf-config-abstract.toarray","purpose":"Cast to array","prototype":"array Yaf_Config_Abstract::toArray()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::__construct":{"id":"yaf-config-ini.construct","purpose":"Yaf_Config_Ini constructor","prototype":" Yaf_Config_Ini::__construct(string $config_file [, string $section = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::count":{"id":"yaf-config-ini.count","purpose":"Count all elements in Yaf_Config.ini","prototype":"void Yaf_Config_Ini::count()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::current":{"id":"yaf-config-ini.current","purpose":"Retrieve the current value","prototype":"void Yaf_Config_Ini::current()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::__get":{"id":"yaf-config-ini.get","purpose":"Retrieve a element","prototype":"void Yaf_Config_Ini::__get([string $name = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::__isset":{"id":"yaf-config-ini.isset","purpose":"Determine if a key is exists","prototype":"void Yaf_Config_Ini::__isset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::key":{"id":"yaf-config-ini.key","purpose":"Fetch current element's key","prototype":"void Yaf_Config_Ini::key()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::next":{"id":"yaf-config-ini.next","purpose":"Advance the internal pointer","prototype":"void Yaf_Config_Ini::next()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::offsetExists":{"id":"yaf-config-ini.offsetexists","purpose":"The offsetExists purpose","prototype":"void Yaf_Config_Ini::offsetExists(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::offsetGet":{"id":"yaf-config-ini.offsetget","purpose":"The offsetGet purpose","prototype":"void Yaf_Config_Ini::offsetGet(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::offsetSet":{"id":"yaf-config-ini.offsetset","purpose":"The offsetSet purpose","prototype":"void Yaf_Config_Ini::offsetSet(string $name, string $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::offsetUnset":{"id":"yaf-config-ini.offsetunset","purpose":"The offsetUnset purpose","prototype":"void Yaf_Config_Ini::offsetUnset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::readonly":{"id":"yaf-config-ini.readonly","purpose":"The readonly purpose","prototype":"void Yaf_Config_Ini::readonly()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::rewind":{"id":"yaf-config-ini.rewind","purpose":"The rewind purpose","prototype":"void Yaf_Config_Ini::rewind()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::__set":{"id":"yaf-config-ini.set","purpose":"The __set purpose","prototype":"void Yaf_Config_Ini::__set(string $name, mixed $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::toArray":{"id":"yaf-config-ini.toarray","purpose":"Return config as a PHP array","prototype":"array Yaf_Config_Ini::toArray()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Ini::valid":{"id":"yaf-config-ini.valid","purpose":"The valid purpose","prototype":"void Yaf_Config_Ini::valid()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::__construct":{"id":"yaf-config-simple.construct","purpose":"The __construct purpose","prototype":" Yaf_Config_Simple::__construct(string $config_file [, string $section = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::count":{"id":"yaf-config-simple.count","purpose":"The count purpose","prototype":"void Yaf_Config_Simple::count()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::current":{"id":"yaf-config-simple.current","purpose":"The current purpose","prototype":"void Yaf_Config_Simple::current()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::__get":{"id":"yaf-config-simple.get","purpose":"The __get purpose","prototype":"void Yaf_Config_Simple::__get([string $name = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::__isset":{"id":"yaf-config-simple.isset","purpose":"The __isset purpose","prototype":"void Yaf_Config_Simple::__isset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::key":{"id":"yaf-config-simple.key","purpose":"The key purpose","prototype":"void Yaf_Config_Simple::key()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::next":{"id":"yaf-config-simple.next","purpose":"The next purpose","prototype":"void Yaf_Config_Simple::next()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::offsetExists":{"id":"yaf-config-simple.offsetexists","purpose":"The offsetExists purpose","prototype":"void Yaf_Config_Simple::offsetExists(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::offsetGet":{"id":"yaf-config-simple.offsetget","purpose":"The offsetGet purpose","prototype":"void Yaf_Config_Simple::offsetGet(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::offsetSet":{"id":"yaf-config-simple.offsetset","purpose":"The offsetSet purpose","prototype":"void Yaf_Config_Simple::offsetSet(string $name, string $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::offsetUnset":{"id":"yaf-config-simple.offsetunset","purpose":"The offsetUnset purpose","prototype":"void Yaf_Config_Simple::offsetUnset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::readonly":{"id":"yaf-config-simple.readonly","purpose":"The readonly purpose","prototype":"void Yaf_Config_Simple::readonly()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::rewind":{"id":"yaf-config-simple.rewind","purpose":"The rewind purpose","prototype":"void Yaf_Config_Simple::rewind()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::__set":{"id":"yaf-config-simple.set","purpose":"The __set purpose","prototype":"void Yaf_Config_Simple::__set(string $name, string $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::toArray":{"id":"yaf-config-simple.toarray","purpose":"Returns a PHP array","prototype":"array Yaf_Config_Simple::toArray()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Config_Simple::valid":{"id":"yaf-config-simple.valid","purpose":"The valid purpose","prototype":"void Yaf_Config_Simple::valid()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::__clone":{"id":"yaf-controller-abstract.clone","purpose":"Yaf_Controller_Abstract can not be cloned","prototype":"void Yaf_Controller_Abstract::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::__construct":{"id":"yaf-controller-abstract.construct","purpose":"Yaf_Controller_Abstract constructor","prototype":" Yaf_Controller_Abstract::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::display":{"id":"yaf-controller-abstract.display","purpose":"The display purpose","prototype":"bool Yaf_Controller_Abstract::display(string $tpl [, array $parameters = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::forward":{"id":"yaf-controller-abstract.forward","purpose":"Foward to another action","prototype":"void Yaf_Controller_Abstract::forward(string $action [, array $paramters = '', string $controller, string $module])","return":"<p class=\"para\">    return FALSE on failure  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getInvokeArg":{"id":"yaf-controller-abstract.getinvokearg","purpose":"The getInvokeArg purpose","prototype":"void Yaf_Controller_Abstract::getInvokeArg(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getInvokeArgs":{"id":"yaf-controller-abstract.getinvokeargs","purpose":"The getInvokeArgs purpose","prototype":"void Yaf_Controller_Abstract::getInvokeArgs()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getModuleName":{"id":"yaf-controller-abstract.getmodulename","purpose":"Get module name","prototype":"string Yaf_Controller_Abstract::getModuleName()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getRequest":{"id":"yaf-controller-abstract.getrequest","purpose":"Retrieve current request object","prototype":"Yaf_Request_Abstract Yaf_Controller_Abstract::getRequest()","return":"<p class=\"para\">    <span class=\"classname\">Yaf_Request_Abstract<\/span> instance  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getResponse":{"id":"yaf-controller-abstract.getresponse","purpose":"Retrieve current response object","prototype":"Yaf_Response_Abstract Yaf_Controller_Abstract::getResponse()","return":"<p class=\"para\">    <span class=\"classname\">Yaf_Response_Abstract<\/span> instance  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getView":{"id":"yaf-controller-abstract.getview","purpose":"Retrieve the view engine","prototype":"Yaf_View_Interface Yaf_Controller_Abstract::getView()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::getViewpath":{"id":"yaf-controller-abstract.getviewpath","purpose":"The getViewpath purpose","prototype":"string Yaf_Controller_Abstract::getViewpath()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::init":{"id":"yaf-controller-abstract.init","purpose":"Controller initializer","prototype":"void Yaf_Controller_Abstract::init()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::initView":{"id":"yaf-controller-abstract.initview","purpose":"The initView purpose","prototype":"void Yaf_Controller_Abstract::initView([array $options = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::redirect":{"id":"yaf-controller-abstract.redirect","purpose":"Redirect to a URL","prototype":"bool Yaf_Controller_Abstract::redirect(string $url)","return":"<p class=\"para\">    bool  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::render":{"id":"yaf-controller-abstract.render","purpose":"Render view template","prototype":"string Yaf_Controller_Abstract::render(string $tpl [, array $parameters = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Controller_Abstract::setViewpath":{"id":"yaf-controller-abstract.setviewpath","purpose":"The setViewpath purpose","prototype":"void Yaf_Controller_Abstract::setViewpath(string $view_directory)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Action_Abstract::execute":{"id":"yaf-action-abstract.execute","purpose":"Action entry point","prototype":"mixed Yaf_Action_Abstract::execute([mixed $arg = '' [, mixed $... = '']])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Action_Abstract::getController":{"id":"yaf-action-abstract.getcontroller","purpose":"Retrieve controller object","prototype":"Yaf_Controller_Abstract Yaf_Action_Abstract::getController()","return":"<p class=\"para\">   <span class=\"classname\">Yaf_Controller_Abstract<\/span> instance  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Interface::assign":{"id":"yaf-view-interface.assign","purpose":"Assign value to View engine","prototype":"bool Yaf_View_Interface::assign(string $name [, string $value = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Interface::display":{"id":"yaf-view-interface.display","purpose":"Render and output a template","prototype":"bool Yaf_View_Interface::display(string $tpl [, array $tpl_vars = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Interface::getScriptPath":{"id":"yaf-view-interface.getscriptpath","purpose":"The getScriptPath purpose","prototype":"void Yaf_View_Interface::getScriptPath()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Interface::render":{"id":"yaf-view-interface.render","purpose":"Render a template","prototype":"string Yaf_View_Interface::render(string $tpl [, array $tpl_vars = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Interface::setScriptPath":{"id":"yaf-view-interface.setscriptpath","purpose":"The setScriptPath purpose","prototype":"void Yaf_View_Interface::setScriptPath(string $template_dir)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::assign":{"id":"yaf-view-simple.assign","purpose":"Assign values","prototype":"bool Yaf_View_Simple::assign(string $name [, mixed $value = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::assignRef":{"id":"yaf-view-simple.assignref","purpose":"The assignRef purpose","prototype":"bool Yaf_View_Simple::assignRef(string $name, mixed $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::clear":{"id":"yaf-view-simple.clear","purpose":"Clear Assigned values","prototype":"bool Yaf_View_Simple::clear([string $name = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.2.0"},"Yaf_View_Simple::__construct":{"id":"yaf-view-simple.construct","purpose":"Constructor of Yaf_View_Simple","prototype":" Yaf_View_Simple::__construct(string $template_dir [, array $options = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::display":{"id":"yaf-view-simple.display","purpose":"Render and display","prototype":"bool Yaf_View_Simple::display(string $tpl [, array $tpl_vars = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::eval":{"id":"yaf-view-simple.eval","purpose":"Render template","prototype":"string Yaf_View_Simple::eval(string $tpl_content [, array $tpl_vars = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.2.0"},"Yaf_View_Simple::__get":{"id":"yaf-view-simple.get","purpose":"Retrieve assigned variable","prototype":"void Yaf_View_Simple::__get([string $name = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::getScriptPath":{"id":"yaf-view-simple.getscriptpath","purpose":"Get templates directory","prototype":"string Yaf_View_Simple::getScriptPath()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::__isset":{"id":"yaf-view-simple.isset","purpose":"The __isset purpose","prototype":"void Yaf_View_Simple::__isset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::render":{"id":"yaf-view-simple.render","purpose":"Render template","prototype":"string Yaf_View_Simple::render(string $tpl [, array $tpl_vars = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::__set":{"id":"yaf-view-simple.set","purpose":"Set value to engine","prototype":"void Yaf_View_Simple::__set(string $name, mixed $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_View_Simple::setScriptPath":{"id":"yaf-view-simple.setscriptpath","purpose":"Set tempaltes directory","prototype":"bool Yaf_View_Simple::setScriptPath(string $template_dir)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::autoload":{"id":"yaf-loader.autoload","purpose":"The autoload purpose","prototype":"void Yaf_Loader::autoload()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::clearLocalNamespace":{"id":"yaf-loader.clearlocalnamespace","purpose":"The clearLocalNamespace purpose","prototype":"void Yaf_Loader::clearLocalNamespace()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::__clone":{"id":"yaf-loader.clone","purpose":"The __clone purpose","prototype":"void Yaf_Loader::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::__construct":{"id":"yaf-loader.construct","purpose":"The __construct purpose","prototype":" Yaf_Loader::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::getInstance":{"id":"yaf-loader.getinstance","purpose":"The getInstance purpose","prototype":"void Yaf_Loader::getInstance()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::getLibraryPath":{"id":"yaf-loader.getlibrarypath","purpose":"Get the library path","prototype":"Yaf_Loader Yaf_Loader::getLibraryPath([bool $is_global = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.4"},"Yaf_Loader::getLocalNamespace":{"id":"yaf-loader.getlocalnamespace","purpose":"The getLocalNamespace purpose","prototype":"void Yaf_Loader::getLocalNamespace()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::import":{"id":"yaf-loader.import","purpose":"The import purpose","prototype":"void Yaf_Loader::import()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::isLocalName":{"id":"yaf-loader.islocalname","purpose":"The isLocalName purpose","prototype":"void Yaf_Loader::isLocalName()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::registerLocalNamespace":{"id":"yaf-loader.registerlocalnamespace","purpose":"Register local class prefix","prototype":"void Yaf_Loader::registerLocalNamespace(mixed $prefix)","return":"<p class=\"para\">   bool  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::setLibraryPath":{"id":"yaf-loader.setlibrarypath","purpose":"Change the library path","prototype":"Yaf_Loader Yaf_Loader::setLibraryPath(string $directory [, bool $is_global = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.4"},"Yaf_Loader::__sleep":{"id":"yaf-loader.sleep","purpose":"The __sleep purpose","prototype":"void Yaf_Loader::__sleep()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Loader::__wakeup":{"id":"yaf-loader.wakeup","purpose":"The __wakeup purpose","prototype":"void Yaf_Loader::__wakeup()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::dispatchLoopShutdown":{"id":"yaf-plugin-abstract.dispatchloopshutdown","purpose":"The dispatchLoopShutdown purpose","prototype":"void Yaf_Plugin_Abstract::dispatchLoopShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::dispatchLoopStartup":{"id":"yaf-plugin-abstract.dispatchloopstartup","purpose":"Hook before dispatch loop","prototype":"void Yaf_Plugin_Abstract::dispatchLoopStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::postDispatch":{"id":"yaf-plugin-abstract.postdispatch","purpose":"The postDispatch purpose","prototype":"void Yaf_Plugin_Abstract::postDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::preDispatch":{"id":"yaf-plugin-abstract.predispatch","purpose":"The preDispatch purpose","prototype":"void Yaf_Plugin_Abstract::preDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::preResponse":{"id":"yaf-plugin-abstract.preresponse","purpose":"The preResponse purpose","prototype":"void Yaf_Plugin_Abstract::preResponse(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::routerShutdown":{"id":"yaf-plugin-abstract.routershutdown","purpose":"The routerShutdown purpose","prototype":"void Yaf_Plugin_Abstract::routerShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Plugin_Abstract::routerStartup":{"id":"yaf-plugin-abstract.routerstartup","purpose":"RouterStartup hook","prototype":"void Yaf_Plugin_Abstract::routerStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Registry::__clone":{"id":"yaf-registry.clone","purpose":"The __clone purpose","prototype":"void Yaf_Registry::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Registry::__construct":{"id":"yaf-registry.construct","purpose":"Yaf_Registry implements singleton","prototype":" Yaf_Registry::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Registry::del":{"id":"yaf-registry.del","purpose":"Remove an item from registry","prototype":"void Yaf_Registry::del(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Registry::get":{"id":"yaf-registry.get","purpose":"Retrieve an item from registry","prototype":"mixed Yaf_Registry::get(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Registry::has":{"id":"yaf-registry.has","purpose":"Check whether an item exists","prototype":"bool Yaf_Registry::has(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Registry::set":{"id":"yaf-registry.set","purpose":"Add an item into registry","prototype":"bool Yaf_Registry::set(string $name, string $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getActionName":{"id":"yaf-request-abstract.getactionname","purpose":"The getActionName purpose","prototype":"void Yaf_Request_Abstract::getActionName()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getBaseUri":{"id":"yaf-request-abstract.getbaseuri","purpose":"The getBaseUri purpose","prototype":"void Yaf_Request_Abstract::getBaseUri()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getControllerName":{"id":"yaf-request-abstract.getcontrollername","purpose":"The getControllerName purpose","prototype":"void Yaf_Request_Abstract::getControllerName()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getEnv":{"id":"yaf-request-abstract.getenv","purpose":"Retrieve ENV varialbe","prototype":"void Yaf_Request_Abstract::getEnv(string $name [, string $default = ''])","return":"<p class=\"para\">   Returns string  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getException":{"id":"yaf-request-abstract.getexception","purpose":"The getException purpose","prototype":"void Yaf_Request_Abstract::getException()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getLanguage":{"id":"yaf-request-abstract.getlanguage","purpose":"Retrieve client's prefered language","prototype":"void Yaf_Request_Abstract::getLanguage()","return":"<p class=\"para\">    Returns a string  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getMethod":{"id":"yaf-request-abstract.getmethod","purpose":"Retrieve the request method","prototype":"string Yaf_Request_Abstract::getMethod()","return":"<p class=\"para\">   Return a string, like &quot;POST&quot;, &quot;GET&quot; etc.  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getModuleName":{"id":"yaf-request-abstract.getmodulename","purpose":"The getModuleName purpose","prototype":"void Yaf_Request_Abstract::getModuleName()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getParam":{"id":"yaf-request-abstract.getparam","purpose":"Retrieve calling parameter","prototype":"mixed Yaf_Request_Abstract::getParam(string $name [, string $default = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getParams":{"id":"yaf-request-abstract.getparams","purpose":"Retrieve all calling parameters","prototype":"array Yaf_Request_Abstract::getParams()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getRequestUri":{"id":"yaf-request-abstract.getrequesturi","purpose":"The getRequestUri purpose","prototype":"void Yaf_Request_Abstract::getRequestUri()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::getServer":{"id":"yaf-request-abstract.getserver","purpose":"Retrieve SERVER variable","prototype":"void Yaf_Request_Abstract::getServer(string $name [, string $default = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isCli":{"id":"yaf-request-abstract.iscli","purpose":"Determine if request is CLI reques","prototype":"bool Yaf_Request_Abstract::isCli()","return":"<p class=\"para\">   bolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isDispatched":{"id":"yaf-request-abstract.isdispatched","purpose":"Determin if the request is dispatched","prototype":"bool Yaf_Request_Abstract::isDispatched()","return":"<p class=\"para\">    boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isGet":{"id":"yaf-request-abstract.isget","purpose":"Determine if request is GET reques","prototype":"bool Yaf_Request_Abstract::isGet()","return":"<p class=\"para\">    boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isHead":{"id":"yaf-request-abstract.ishead","purpose":"Determine if request is HEAD reques","prototype":"bool Yaf_Request_Abstract::isHead()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isOptions":{"id":"yaf-request-abstract.isoptions","purpose":"Determine if request is OPTIONS reques","prototype":"bool Yaf_Request_Abstract::isOptions()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isPost":{"id":"yaf-request-abstract.ispost","purpose":"Determine if request is POST request","prototype":"bool Yaf_Request_Abstract::isPost()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isPut":{"id":"yaf-request-abstract.isput","purpose":"Determine if request is PUT reques","prototype":"bool Yaf_Request_Abstract::isPut()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isRouted":{"id":"yaf-request-abstract.isrouted","purpose":"Determin if request has been routed","prototype":"bool Yaf_Request_Abstract::isRouted()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::isXmlHttpRequest":{"id":"yaf-request-abstract.isxmlhttprequest","purpose":"Determine if request is AJAX reques","prototype":"bool Yaf_Request_Abstract::isXmlHttpRequest()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setActionName":{"id":"yaf-request-abstract.setactionname","purpose":"The setActionName purpose","prototype":"void Yaf_Request_Abstract::setActionName(string $action)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setBaseUri":{"id":"yaf-request-abstract.setbaseuri","purpose":"Set base URI","prototype":"bool Yaf_Request_Abstract::setBaseUri(string $uir)","return":"<p class=\"para\">   bool  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setControllerName":{"id":"yaf-request-abstract.setcontrollername","purpose":"The setControllerName purpose","prototype":"void Yaf_Request_Abstract::setControllerName(string $controller)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setDispatched":{"id":"yaf-request-abstract.setdispatched","purpose":"The setDispatched purpose","prototype":"void Yaf_Request_Abstract::setDispatched()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setModuleName":{"id":"yaf-request-abstract.setmodulename","purpose":"The setModuleName purpose","prototype":"void Yaf_Request_Abstract::setModuleName(string $module)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setParam":{"id":"yaf-request-abstract.setparam","purpose":"Set a calling parameter to a request","prototype":"bool Yaf_Request_Abstract::setParam(string $name [, string $value = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Abstract::setRequestUri":{"id":"yaf-request-abstract.setrequesturi","purpose":"The setRequestUri purpose","prototype":"void Yaf_Request_Abstract::setRequestUri(string $uir)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.1.0"},"Yaf_Request_Abstract::setRouted":{"id":"yaf-request-abstract.setrouted","purpose":"The setRouted purpose","prototype":"void Yaf_Request_Abstract::setRouted([string $flag = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::__clone":{"id":"yaf-request-http.clone","purpose":"Yaf_Request_Http can not be cloned","prototype":"void Yaf_Request_Http::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::__construct":{"id":"yaf-request-http.construct","purpose":"Constructor of Yaf_Request_Http","prototype":" Yaf_Request_Http::__construct([string $request_uri = '' [, string $base_uri = '']])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::get":{"id":"yaf-request-http.get","purpose":"Retrieve variable from client","prototype":"mixed Yaf_Request_Http::get(string $name [, string $default = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::getCookie":{"id":"yaf-request-http.getcookie","purpose":"Retrieve Cookie variable","prototype":"mixed Yaf_Request_Http::getCookie(string $name [, string $default = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::getFiles":{"id":"yaf-request-http.getfiles","purpose":"The getFiles purpose","prototype":"void Yaf_Request_Http::getFiles()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::getPost":{"id":"yaf-request-http.getpost","purpose":"Retrieve POST variable","prototype":"mixed Yaf_Request_Http::getPost(string $name [, string $default = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::getQuery":{"id":"yaf-request-http.getquery","purpose":"Fetch a query parameter","prototype":"mixed Yaf_Request_Http::getQuery(string $name [, string $default = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::getRaw":{"id":"yaf-request-http.getraw","purpose":"Retrieve Raw request body","prototype":"mixed Yaf_Request_Http::getRaw()","return":"<p class=\"para\">   Return string on success, FALSE on failure.  <\/p>","versions":"Yaf >=3.0.7"},"Yaf_Request_Http::getRequest":{"id":"yaf-request-http.getrequest","purpose":"The getRequest purpose","prototype":"void Yaf_Request_Http::getRequest()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Http::isXmlHttpRequest":{"id":"yaf-request-http.isxmlhttprequest","purpose":"Determin if request is Ajax Request","prototype":"bool Yaf_Request_Http::isXmlHttpRequest()","return":"<p class=\"para\">   boolean  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::__clone":{"id":"yaf-request-simple.clone","purpose":"The __clone purpose","prototype":"void Yaf_Request_Simple::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::__construct":{"id":"yaf-request-simple.construct","purpose":"Constructor of Yaf_Request_Simple","prototype":" Yaf_Request_Simple::__construct([string $method = '' [, string $module = '' [, string $controller = '' [, string $action = '' [, array $params = '']]]]])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::get":{"id":"yaf-request-simple.get","purpose":"The get purpose","prototype":"void Yaf_Request_Simple::get()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::getCookie":{"id":"yaf-request-simple.getcookie","purpose":"The getCookie purpose","prototype":"void Yaf_Request_Simple::getCookie()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::getFiles":{"id":"yaf-request-simple.getfiles","purpose":"The getFiles purpose","prototype":"void Yaf_Request_Simple::getFiles()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::getPost":{"id":"yaf-request-simple.getpost","purpose":"The getPost purpose","prototype":"void Yaf_Request_Simple::getPost()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::getQuery":{"id":"yaf-request-simple.getquery","purpose":"The getQuery purpose","prototype":"void Yaf_Request_Simple::getQuery()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::getRequest":{"id":"yaf-request-simple.getrequest","purpose":"The getRequest purpose","prototype":"void Yaf_Request_Simple::getRequest()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Request_Simple::isXmlHttpRequest":{"id":"yaf-request-simple.isxmlhttprequest","purpose":"Determin if request is AJAX request","prototype":"void Yaf_Request_Simple::isXmlHttpRequest()","return":"<p class=\"para\">   Always returns false for <span class=\"classname\">Yaf_Request_Simple<\/span>  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::appendBody":{"id":"yaf-response-abstract.appendbody","purpose":"Append to response body","prototype":"bool Yaf_Response_Abstract::appendBody(string $content [, string $key = ''])","return":"<p class=\"para\">   bool  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::clearBody":{"id":"yaf-response-abstract.clearbody","purpose":"Discard all exists response body","prototype":"bool Yaf_Response_Abstract::clearBody([string $key = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::clearHeaders":{"id":"yaf-response-abstract.clearheaders","purpose":"Discard all set headers","prototype":"void Yaf_Response_Abstract::clearHeaders()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::__clone":{"id":"yaf-response-abstract.clone","purpose":"The __clone purpose","prototype":"void Yaf_Response_Abstract::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::__construct":{"id":"yaf-response-abstract.construct","purpose":"The __construct purpose","prototype":" Yaf_Response_Abstract::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::__destruct":{"id":"yaf-response-abstract.destruct","purpose":"The __destruct purpose","prototype":"void Yaf_Response_Abstract::__destruct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::getBody":{"id":"yaf-response-abstract.getbody","purpose":"Retrieve a exists content","prototype":"mixed Yaf_Response_Abstract::getBody([string $key = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::getHeader":{"id":"yaf-response-abstract.getheader","purpose":"The getHeader purpose","prototype":"void Yaf_Response_Abstract::getHeader()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::prependBody":{"id":"yaf-response-abstract.prependbody","purpose":"The prependBody purpose","prototype":"bool Yaf_Response_Abstract::prependBody(string $content [, string $key = ''])","return":"<p class=\"para\">   bool  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::response":{"id":"yaf-response-abstract.response","purpose":"Send response","prototype":"void Yaf_Response_Abstract::response()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::setAllHeaders":{"id":"yaf-response-abstract.setallheaders","purpose":"The setAllHeaders purpose","prototype":"void Yaf_Response_Abstract::setAllHeaders()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::setBody":{"id":"yaf-response-abstract.setbody","purpose":"Set content to response","prototype":"bool Yaf_Response_Abstract::setBody(string $content [, string $key = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::setHeader":{"id":"yaf-response-abstract.setheader","purpose":"Set reponse header","prototype":"bool Yaf_Response_Abstract::setHeader(string $name, string $value [, bool $replace = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::setRedirect":{"id":"yaf-response-abstract.setredirect","purpose":"The setRedirect purpose","prototype":"void Yaf_Response_Abstract::setRedirect()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Response_Abstract::__toString":{"id":"yaf-response-abstract.tostring","purpose":"Retrieve all bodys as string","prototype":"string Yaf_Response_Abstract::__toString()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Interface::assemble":{"id":"yaf-route-interface.assemble","purpose":"Assemble a request","prototype":"string Yaf_Route_Interface::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Interface::route":{"id":"yaf-route-interface.route","purpose":"Route a request","prototype":"bool Yaf_Route_Interface::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Map::assemble":{"id":"yaf-route-map.assemble","purpose":"Assemble a url","prototype":"string Yaf_Route_Map::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">    <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Map::__construct":{"id":"yaf-route-map.construct","purpose":"The __construct purpose","prototype":" Yaf_Route_Map::__construct([string $controller_prefer = '' [, string $delimiter = \"\"]])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Map::route":{"id":"yaf-route-map.route","purpose":"The route purpose","prototype":"bool Yaf_Route_Map::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Regex::assemble":{"id":"yaf-route-regex.assemble","purpose":"Assemble a url","prototype":"string Yaf_Route_Regex::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">    <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Regex::__construct":{"id":"yaf-route-regex.construct","purpose":"Yaf_Route_Regex constructor","prototype":" Yaf_Route_Regex::__construct(string $match, array $route [, array $map = '' [, array $verify = '' [, string $reverse = '']]])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Regex::route":{"id":"yaf-route-regex.route","purpose":"The route purpose","prototype":"bool Yaf_Route_Regex::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">   If the pattern given by the first parameter of     <span class=\"methodname\">Yaf_Route_Regex::_construct<\/span> matche the request   uri, return <strong><code>TRUE<\/code><\/strong>, otherwise return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Rewrite::assemble":{"id":"yaf-route-rewrite.assemble","purpose":"Assemble a url","prototype":"string Yaf_Route_Rewrite::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Rewrite::__construct":{"id":"yaf-route-rewrite.construct","purpose":"Yaf_Route_Rewrite constructor","prototype":" Yaf_Route_Rewrite::__construct(string $match, array $route [, array $verify = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Rewrite::route":{"id":"yaf-route-rewrite.route","purpose":"The route purpose","prototype":"bool Yaf_Route_Rewrite::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::addConfig":{"id":"yaf-router.addconfig","purpose":"Add config-defined routes into Router","prototype":"bool Yaf_Router::addConfig(Yaf_Config_Abstract $config)","return":"<p class=\"para\">     An <span class=\"classname\">Yaf_Config_Abstract<\/span> instance, which should     contains one or more valid route configs  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::addRoute":{"id":"yaf-router.addroute","purpose":"Add new Route into Router","prototype":"bool Yaf_Router::addRoute(string $name, Yaf_Route_Abstract $route)","return":"<p class=\"para\">     <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::__construct":{"id":"yaf-router.construct","purpose":"Yaf_Router constructor","prototype":" Yaf_Router::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::getCurrentRoute":{"id":"yaf-router.getcurrentroute","purpose":"Get the effective route name","prototype":"string Yaf_Router::getCurrentRoute()","return":"<p class=\"para\">   String, the name of the effective route.  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::getRoute":{"id":"yaf-router.getroute","purpose":"Retrieve a route by name","prototype":"Yaf_Route_Interface Yaf_Router::getRoute(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::getRoutes":{"id":"yaf-router.getroutes","purpose":"Retrieve registered routes","prototype":"mixed Yaf_Router::getRoutes()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Router::route":{"id":"yaf-router.route","purpose":"The route purpose","prototype":"bool Yaf_Router::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Simple::assemble":{"id":"yaf-route-simple.assemble","purpose":"Assemble a url","prototype":"string Yaf_Route_Simple::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Simple::__construct":{"id":"yaf-route-simple.construct","purpose":"Yaf_Route_Simple constructor","prototype":" Yaf_Route_Simple::__construct(string $module_name, string $controller_name, string $action_name)","return":"<p class=\"para\">   Always return <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Simple::route":{"id":"yaf-route-simple.route","purpose":"Route a request","prototype":"bool Yaf_Route_Simple::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">   always be <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Static::assemble":{"id":"yaf-route-static.assemble","purpose":"Assemble a url","prototype":"string Yaf_Route_Static::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Static::match":{"id":"yaf-route-static.match","purpose":"The match purpose","prototype":"void Yaf_Route_Static::match(string $uri)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Static::route":{"id":"yaf-route-static.route","purpose":"Route a request","prototype":"bool Yaf_Route_Static::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">   always be <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Supervar::assemble":{"id":"yaf-route-supervar.assemble","purpose":"Assemble a url","prototype":"string Yaf_Route_Supervar::assemble(array $info [, array $query = ''])","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=2.3.0"},"Yaf_Route_Supervar::__construct":{"id":"yaf-route-supervar.construct","purpose":"The __construct purpose","prototype":" Yaf_Route_Supervar::__construct(string $supervar_name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Route_Supervar::route":{"id":"yaf-route-supervar.route","purpose":"The route purpose","prototype":"bool Yaf_Route_Supervar::route(Yaf_Request_Abstract $request)","return":"<p class=\"para\">    If there is a key(which was defined in     <span class=\"methodname\">Yaf_Route_Supervar::__construct<\/span>) in $_GET, return <strong><code>TRUE<\/code><\/strong>.    otherwise return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__clone":{"id":"yaf-session.clone","purpose":"The __clone purpose","prototype":"void Yaf_Session::__clone()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__construct":{"id":"yaf-session.construct","purpose":"Constructor of Yaf_Session","prototype":" Yaf_Session::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::count":{"id":"yaf-session.count","purpose":"The count purpose","prototype":"void Yaf_Session::count()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::current":{"id":"yaf-session.current","purpose":"The current purpose","prototype":"void Yaf_Session::current()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::del":{"id":"yaf-session.del","purpose":"The del purpose","prototype":"void Yaf_Session::del(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__get":{"id":"yaf-session.get","purpose":"The __get purpose","prototype":"void Yaf_Session::__get(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::getInstance":{"id":"yaf-session.getinstance","purpose":"The getInstance purpose","prototype":"void Yaf_Session::getInstance()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::has":{"id":"yaf-session.has","purpose":"The has purpose","prototype":"void Yaf_Session::has(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__isset":{"id":"yaf-session.isset","purpose":"The __isset purpose","prototype":"void Yaf_Session::__isset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::key":{"id":"yaf-session.key","purpose":"The key purpose","prototype":"void Yaf_Session::key()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::next":{"id":"yaf-session.next","purpose":"The next purpose","prototype":"void Yaf_Session::next()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::offsetExists":{"id":"yaf-session.offsetexists","purpose":"The offsetExists purpose","prototype":"void Yaf_Session::offsetExists(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::offsetGet":{"id":"yaf-session.offsetget","purpose":"The offsetGet purpose","prototype":"void Yaf_Session::offsetGet(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::offsetSet":{"id":"yaf-session.offsetset","purpose":"The offsetSet purpose","prototype":"void Yaf_Session::offsetSet(string $name, string $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::offsetUnset":{"id":"yaf-session.offsetunset","purpose":"The offsetUnset purpose","prototype":"void Yaf_Session::offsetUnset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::rewind":{"id":"yaf-session.rewind","purpose":"The rewind purpose","prototype":"void Yaf_Session::rewind()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__set":{"id":"yaf-session.set","purpose":"The __set purpose","prototype":"void Yaf_Session::__set(string $name, string $value)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__sleep":{"id":"yaf-session.sleep","purpose":"The __sleep purpose","prototype":"void Yaf_Session::__sleep()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::start":{"id":"yaf-session.start","purpose":"The start purpose","prototype":"void Yaf_Session::start()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__unset":{"id":"yaf-session.unset","purpose":"The __unset purpose","prototype":"void Yaf_Session::__unset(string $name)","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::valid":{"id":"yaf-session.valid","purpose":"The valid purpose","prototype":"void Yaf_Session::valid()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Session::__wakeup":{"id":"yaf-session.wakeup","purpose":"The __wakeup purpose","prototype":"void Yaf_Session::__wakeup()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Exception::__construct":{"id":"yaf-exception.construct","purpose":"The __construct purpose","prototype":" Yaf_Exception::__construct()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaf_Exception::getPrevious":{"id":"yaf-exception.getprevious","purpose":"The getPrevious purpose","prototype":"void Yaf_Exception::getPrevious()","return":"<p class=\"para\">  <\/p>","versions":"Yaf >=1.0.0"},"Yaconf::get":{"id":"yaconf.get","purpose":"Retrieve a item","prototype":"mixed Yaconf::get(string $name [, mixed $default_value = null])","return":"<p class=\"para\">   Returns configuration result(string or array) if the key exists,   return default_value if not.  <\/p>","versions":"PECL yaconf >= 1.0.0"},"Yaconf::has":{"id":"yaconf.has","purpose":"Determine if a item exists","prototype":"bool Yaconf::has(string $name)","return":"<p class=\"para\">     <\/p>","versions":"PECL yaconf >= 1.0.0"},"is_tainted":{"id":"function.is-tainted","purpose":"Checks whether a string is tainted","prototype":"bool is_tainted(string $string)","return":"<p class=\"para\">   Return TRUE if the string is tainted, FALSE otherwise.  <\/p>","versions":"PECL taint >=0.1.0"},"taint":{"id":"function.taint","purpose":"Taint a string","prototype":"bool taint(string $string [, string $... = ''])","return":"<p class=\"para\">      Return TRUE if the transformation is done. Always return TRUE if the taint      extension is not enabled.      <\/p>","versions":"PECL taint >=0.1.0"},"untaint":{"id":"function.untaint","purpose":"Untaint strings","prototype":"bool untaint(string $string [, string $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL taint >=0.1.0"},"Ds\\Collection::clear":{"id":"ds-collection.clear","purpose":"Removes all values","prototype":"void Ds\\Collection::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Collection::copy":{"id":"ds-collection.copy","purpose":"Returns a shallow copy of the collection","prototype":"Ds\\Collection Ds\\Collection::copy()","return":"<p class=\"para\">   Returns a shallow copy of the collection.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Collection::isEmpty":{"id":"ds-collection.isempty","purpose":"Returns whether the collection is empty","prototype":"bool Ds\\Collection::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the collection is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Collection::toArray":{"id":"ds-collection.toarray","purpose":"Converts the collection to an array","prototype":"array Ds\\Collection::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the collection.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Hashable::equals":{"id":"ds-hashable.equals","purpose":"Determines whether an object is equal to the current instance","prototype":"bool Ds\\Hashable::equals(object $obj)","return":"<p class=\"para\">    <strong><code>TRUE<\/code><\/strong> if equal, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Hashable::hash":{"id":"ds-hashable.hash","purpose":"Returns a scalar value to be used as a hash value","prototype":"mixed Ds\\Hashable::hash()","return":"<p class=\"para\">    A scalar value to be used as this object&#039;s hash value.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::allocate":{"id":"ds-sequence.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Sequence::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::apply":{"id":"ds-sequence.apply","purpose":"Updates all values by applying a callback function to each value","prototype":"void Ds\\Sequence::apply(callable $callback)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::capacity":{"id":"ds-sequence.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Sequence::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::contains":{"id":"ds-sequence.contains","purpose":"Determines if the sequence contains given values","prototype":"bool Ds\\Sequence::contains([mixed $...values = ''])","return":"<p class=\"para\">    <strong><code>FALSE<\/code><\/strong> if any of the provided <code class=\"parameter\">values<\/code> are not in the    sequence, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::filter":{"id":"ds-sequence.filter","purpose":"Creates a new sequence using a callable to    determine which values to include","prototype":"callable Ds\\Sequence::filter([callable $callback = ''])","return":"<p class=\"para\">    A new sequence containing all the values for which    either the <code class=\"parameter\">callback<\/code> returned <strong><code>TRUE<\/code><\/strong>, or all values that    convert to <strong><code>TRUE<\/code><\/strong> if a <code class=\"parameter\">callback<\/code> was not provided.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::find":{"id":"ds-sequence.find","purpose":"Attempts to find a value's index","prototype":"mixed Ds\\Sequence::find(mixed $value)","return":"<p class=\"para\">    The index of the value, or <strong><code>FALSE<\/code><\/strong> if not found.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            Values will be compared by value and by type.        <\/p>    <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::first":{"id":"ds-sequence.first","purpose":"Returns the first value in the sequence","prototype":"mixed Ds\\Sequence::first()","return":"<p class=\"para\">    The first value in the sequence.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::get":{"id":"ds-sequence.get","purpose":"Returns the value at a given index","prototype":"mixed Ds\\Sequence::get(int $index)","return":"<p class=\"para\">    The value at the requested index.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::insert":{"id":"ds-sequence.insert","purpose":"Inserts values at a given index","prototype":"void Ds\\Sequence::insert(int $index [, mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::join":{"id":"ds-sequence.join","purpose":"Joins all values together as a string","prototype":"string Ds\\Sequence::join([string $glue = ''])","return":"<p class=\"para\">    All values of the sequence joined together as a string.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::last":{"id":"ds-sequence.last","purpose":"Returns the last value","prototype":"mixed Ds\\Sequence::last()","return":"<p class=\"para\">    The last value in the sequence.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::map":{"id":"ds-sequence.map","purpose":"Returns the result of applying a callback to each value","prototype":"Ds\\Sequence Ds\\Sequence::map(callable $callback)","return":"<p class=\"para\">    The result of applying a <code class=\"parameter\">callback<\/code> to each value in    the sequence.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The values of the current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::merge":{"id":"ds-sequence.merge","purpose":"Returns the result of adding all given values to the sequence","prototype":"Ds\\Sequence Ds\\Sequence::merge(mixed $values)","return":"<p class=\"para\">    The result of adding all given values to the sequence,    effectively the same as adding the values to a copy, then returning that copy.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::pop":{"id":"ds-sequence.pop","purpose":"Removes and returns the last value","prototype":"mixed Ds\\Sequence::pop()","return":"<p class=\"para\">    The removed last value.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::push":{"id":"ds-sequence.push","purpose":"Adds values to the end of the sequence","prototype":"void Ds\\Sequence::push([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::reduce":{"id":"ds-sequence.reduce","purpose":"Reduces the sequence to a single value using a callback function","prototype":"mixed Ds\\Sequence::reduce(callable $callback [, mixed $initial = ''])","return":"<p class=\"para\">    The return value of the final callback.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::remove":{"id":"ds-sequence.remove","purpose":"Removes and returns a value by index","prototype":"mixed Ds\\Sequence::remove(int $index)","return":"<p class=\"para\">    The value that was removed.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::reverse":{"id":"ds-sequence.reverse","purpose":"Reverses the sequence in-place","prototype":"void Ds\\Sequence::reverse()","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::reversed":{"id":"ds-sequence.reversed","purpose":"Returns a reversed copy","prototype":"Ds\\Sequence Ds\\Sequence::reversed()","return":"<p class=\"para\">    A reversed copy of the sequence.    <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            The current instance is not affected.        <\/p>    <\/p><\/blockquote>  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::rotate":{"id":"ds-sequence.rotate","purpose":"Rotates the sequence by a given number of rotations","prototype":"void Ds\\Sequence::rotate(int $rotations)","return":"<p class=\"para\">    No value is returned.. The sequence of the current instance will be rotated.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::set":{"id":"ds-sequence.set","purpose":"Updates a value at a given index","prototype":"void Ds\\Sequence::set(int $index, mixed $value)","return":"<p class=\"para\">        No value is returned.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::shift":{"id":"ds-sequence.shift","purpose":"Removes and returns the first value","prototype":"mixed Ds\\Sequence::shift()","return":"<p class=\"para\">    The first value, which was removed.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::slice":{"id":"ds-sequence.slice","purpose":"Returns a sub-sequence of a given range","prototype":"Ds\\Sequence Ds\\Sequence::slice(int $index [, int $length = ''])","return":"<p class=\"para\">    A sub-sequence of the given range.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::sort":{"id":"ds-sequence.sort","purpose":"Sorts the sequence in-place","prototype":"void Ds\\Sequence::sort([callable $comparator = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::sorted":{"id":"ds-sequence.sorted","purpose":"Returns a sorted copy","prototype":"Ds\\Sequence Ds\\Sequence::sorted([callable $comparator = ''])","return":"<p class=\"para\">    Returns a sorted copy of the sequence.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::sum":{"id":"ds-sequence.sum","purpose":"Returns the sum of all values in the sequence","prototype":"number Ds\\Sequence::sum()","return":"<p class=\"para\">    The sum of all the values in the sequence as either a <span class=\"type\">float<\/span> or <span class=\"type\">int<\/span>    depending on the values in the sequence.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Sequence::unshift":{"id":"ds-sequence.unshift","purpose":"Adds values to the front of the sequence","prototype":"void Ds\\Sequence::unshift([mixed $values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::allocate":{"id":"ds-vector.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Vector::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::apply":{"id":"ds-vector.apply","purpose":"Updates all values by applying a callback function to each value","prototype":"void Ds\\Vector::apply(callable $callback)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::capacity":{"id":"ds-vector.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Vector::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::clear":{"id":"ds-vector.clear","purpose":"Removes all values","prototype":"void Ds\\Vector::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::__construct":{"id":"ds-vector.construct","purpose":"Creates a new instance","prototype":"array Ds\\Vector::__construct([mixed $values = ''])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::contains":{"id":"ds-vector.contains","purpose":"Determines if the vector contains given values","prototype":"bool Ds\\Vector::contains([mixed $...values = ''])","return":"<p class=\"para\">    <strong><code>FALSE<\/code><\/strong> if any of the provided <code class=\"parameter\">values<\/code> are not in the    vector, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::copy":{"id":"ds-vector.copy","purpose":"Returns a shallow copy of the vector","prototype":"Ds\\Vector Ds\\Vector::copy()","return":"<p class=\"para\">   Returns a shallow copy of the vector.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::count":{"id":"ds-vector.count","purpose":"Returns the number of values in the collection","prototype":" Ds\\Vector::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::filter":{"id":"ds-vector.filter","purpose":"Creates a new vector using a callable to    determine which values to include","prototype":"callable Ds\\Vector::filter([callable $callback = ''])","return":"<p class=\"para\">    A new vector containing all the values for which    either the <code class=\"parameter\">callback<\/code> returned <strong><code>TRUE<\/code><\/strong>, or all values that    convert to <strong><code>TRUE<\/code><\/strong> if a <code class=\"parameter\">callback<\/code> was not provided.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::find":{"id":"ds-vector.find","purpose":"Attempts to find a value's index","prototype":"mixed Ds\\Vector::find(mixed $value)","return":"<p class=\"para\">    The index of the value, or <strong><code>FALSE<\/code><\/strong> if not found.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            Values will be compared by value and by type.        <\/p>    <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::first":{"id":"ds-vector.first","purpose":"Returns the first value in the vector","prototype":"mixed Ds\\Vector::first()","return":"<p class=\"para\">    The first value in the vector.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::get":{"id":"ds-vector.get","purpose":"Returns the value at a given index","prototype":"mixed Ds\\Vector::get(int $index)","return":"<p class=\"para\">    The value at the requested index.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::insert":{"id":"ds-vector.insert","purpose":"Inserts values at a given index","prototype":"void Ds\\Vector::insert(int $index [, mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::isEmpty":{"id":"ds-vector.isempty","purpose":"Returns whether the vector is empty","prototype":"bool Ds\\Vector::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the vector is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::join":{"id":"ds-vector.join","purpose":"Joins all values together as a string","prototype":"string Ds\\Vector::join([string $glue = ''])","return":"<p class=\"para\">    All values of the vector joined together as a string.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::jsonSerialize":{"id":"ds-vector.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Vector::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::last":{"id":"ds-vector.last","purpose":"Returns the last value","prototype":"mixed Ds\\Vector::last()","return":"<p class=\"para\">    The last value in the vector.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::map":{"id":"ds-vector.map","purpose":"Returns the result of applying a callback to each value","prototype":"Ds\\Vector Ds\\Vector::map(callable $callback)","return":"<p class=\"para\">    The result of applying a <code class=\"parameter\">callback<\/code> to each value in    the vector.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The values of the current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::merge":{"id":"ds-vector.merge","purpose":"Returns the result of adding all given values to the vector","prototype":"Ds\\Vector Ds\\Vector::merge(mixed $values)","return":"<p class=\"para\">    The result of adding all given values to the vector,    effectively the same as adding the values to a copy, then returning that copy.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::pop":{"id":"ds-vector.pop","purpose":"Removes and returns the last value","prototype":"mixed Ds\\Vector::pop()","return":"<p class=\"para\">    The removed last value.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::push":{"id":"ds-vector.push","purpose":"Adds values to the end of the vector","prototype":"void Ds\\Vector::push([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::reduce":{"id":"ds-vector.reduce","purpose":"Reduces the vector to a single value using a callback function","prototype":"mixed Ds\\Vector::reduce(callable $callback [, mixed $initial = ''])","return":"<p class=\"para\">    The return value of the final callback.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::remove":{"id":"ds-vector.remove","purpose":"Removes and returns a value by index","prototype":"mixed Ds\\Vector::remove(int $index)","return":"<p class=\"para\">    The value that was removed.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::reverse":{"id":"ds-vector.reverse","purpose":"Reverses the vector in-place","prototype":"void Ds\\Vector::reverse()","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::reversed":{"id":"ds-vector.reversed","purpose":"Returns a reversed copy","prototype":"Ds\\Vector Ds\\Vector::reversed()","return":"<p class=\"para\">    A reversed copy of the vector.    <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            The current instance is not affected.        <\/p>    <\/p><\/blockquote>  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::rotate":{"id":"ds-vector.rotate","purpose":"Rotates the vector by a given number of rotations","prototype":"void Ds\\Vector::rotate(int $rotations)","return":"<p class=\"para\">    No value is returned.. The vector of the current instance will be rotated.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::set":{"id":"ds-vector.set","purpose":"Updates a value at a given index","prototype":"void Ds\\Vector::set(int $index, mixed $value)","return":"<p class=\"para\">        No value is returned.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::shift":{"id":"ds-vector.shift","purpose":"Removes and returns the first value","prototype":"mixed Ds\\Vector::shift()","return":"<p class=\"para\">    The first value, which was removed.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::slice":{"id":"ds-vector.slice","purpose":"Returns a sub-vector of a given range","prototype":"Ds\\Vector Ds\\Vector::slice(int $index [, int $length = ''])","return":"<p class=\"para\">    A sub-vector of the given range.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::sort":{"id":"ds-vector.sort","purpose":"Sorts the vector in-place","prototype":"void Ds\\Vector::sort([callable $comparator = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::sorted":{"id":"ds-vector.sorted","purpose":"Returns a sorted copy","prototype":"Ds\\Vector Ds\\Vector::sorted([callable $comparator = ''])","return":"<p class=\"para\">    Returns a sorted copy of the vector.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::sum":{"id":"ds-vector.sum","purpose":"Returns the sum of all values in the vector","prototype":"number Ds\\Vector::sum()","return":"<p class=\"para\">    The sum of all the values in the vector as either a <span class=\"type\">float<\/span> or <span class=\"type\">int<\/span>    depending on the values in the vector.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::toArray":{"id":"ds-vector.toarray","purpose":"Converts the vector to an array","prototype":"array Ds\\Vector::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the vector.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Vector::unshift":{"id":"ds-vector.unshift","purpose":"Adds values to the front of the vector","prototype":"void Ds\\Vector::unshift([mixed $values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::allocate":{"id":"ds-deque.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Deque::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::apply":{"id":"ds-deque.apply","purpose":"Updates all values by applying a callback function to each value","prototype":"void Ds\\Deque::apply(callable $callback)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::capacity":{"id":"ds-deque.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Deque::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::clear":{"id":"ds-deque.clear","purpose":"Removes all values from the deque","prototype":"void Ds\\Deque::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::__construct":{"id":"ds-deque.construct","purpose":"Creates a new instance","prototype":"array Ds\\Deque::__construct([mixed $values = ''])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::contains":{"id":"ds-deque.contains","purpose":"Determines if the deque contains given values","prototype":"bool Ds\\Deque::contains([mixed $...values = ''])","return":"<p class=\"para\">    <strong><code>FALSE<\/code><\/strong> if any of the provided <code class=\"parameter\">values<\/code> are not in the    deque, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::copy":{"id":"ds-deque.copy","purpose":"Returns a shallow copy of the deque","prototype":"Ds\\Deque Ds\\Deque::copy()","return":"<p class=\"para\">   A shallow copy of the deque.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::count":{"id":"ds-deque.count","purpose":"Returns the number of values in the collection","prototype":" Ds\\Deque::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::filter":{"id":"ds-deque.filter","purpose":"Creates a new deque using a callable to    determine which values to include","prototype":"callable Ds\\Deque::filter([callable $callback = ''])","return":"<p class=\"para\">    A new deque containing all the values for which    either the <code class=\"parameter\">callback<\/code> returned <strong><code>TRUE<\/code><\/strong>, or all values that    convert to <strong><code>TRUE<\/code><\/strong> if a <code class=\"parameter\">callback<\/code> was not provided.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::find":{"id":"ds-deque.find","purpose":"Attempts to find a value's index","prototype":"mixed Ds\\Deque::find(mixed $value)","return":"<p class=\"para\">    The index of the value, or <strong><code>FALSE<\/code><\/strong> if not found.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            Values will be compared by value and by type.        <\/p>    <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::first":{"id":"ds-deque.first","purpose":"Returns the first value in the deque","prototype":"mixed Ds\\Deque::first()","return":"<p class=\"para\">    The first value in the deque.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::get":{"id":"ds-deque.get","purpose":"Returns the value at a given index","prototype":"mixed Ds\\Deque::get(int $index)","return":"<p class=\"para\">    The value at the requested index.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::insert":{"id":"ds-deque.insert","purpose":"Inserts values at a given index","prototype":"void Ds\\Deque::insert(int $index [, mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::isEmpty":{"id":"ds-deque.isempty","purpose":"Returns whether the deque is empty","prototype":"bool Ds\\Deque::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the deque is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::join":{"id":"ds-deque.join","purpose":"Joins all values together as a string","prototype":"string Ds\\Deque::join([string $glue = ''])","return":"<p class=\"para\">    All values of the deque joined together as a string.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::jsonSerialize":{"id":"ds-deque.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Deque::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::last":{"id":"ds-deque.last","purpose":"Returns the last value","prototype":"mixed Ds\\Deque::last()","return":"<p class=\"para\">    The last value in the deque.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::map":{"id":"ds-deque.map","purpose":"Returns the result of applying a callback to each value","prototype":"Ds\\Deque Ds\\Deque::map(callable $callback)","return":"<p class=\"para\">    The result of applying a <code class=\"parameter\">callback<\/code> to each value in    the deque.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The values of the current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::merge":{"id":"ds-deque.merge","purpose":"Returns the result of adding all given values to the deque","prototype":"Ds\\Deque Ds\\Deque::merge(mixed $values)","return":"<p class=\"para\">    The result of adding all given values to the deque,    effectively the same as adding the values to a copy, then returning that copy.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::pop":{"id":"ds-deque.pop","purpose":"Removes and returns the last value","prototype":"mixed Ds\\Deque::pop()","return":"<p class=\"para\">    The removed last value.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::push":{"id":"ds-deque.push","purpose":"Adds values to the end of the deque","prototype":"void Ds\\Deque::push([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::reduce":{"id":"ds-deque.reduce","purpose":"Reduces the deque to a single value using a callback function","prototype":"mixed Ds\\Deque::reduce(callable $callback [, mixed $initial = ''])","return":"<p class=\"para\">    The return value of the final callback.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::remove":{"id":"ds-deque.remove","purpose":"Removes and returns a value by index","prototype":"mixed Ds\\Deque::remove(int $index)","return":"<p class=\"para\">    The value that was removed.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::reverse":{"id":"ds-deque.reverse","purpose":"Reverses the deque in-place","prototype":"void Ds\\Deque::reverse()","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::reversed":{"id":"ds-deque.reversed","purpose":"Returns a reversed copy","prototype":"Ds\\Deque Ds\\Deque::reversed()","return":"<p class=\"para\">    A reversed copy of the deque.    <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            The current instance is not affected.        <\/p>    <\/p><\/blockquote>  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::rotate":{"id":"ds-deque.rotate","purpose":"Rotates the deque by a given number of rotations","prototype":"void Ds\\Deque::rotate(int $rotations)","return":"<p class=\"para\">    No value is returned.. The deque of the current instance will be rotated.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::set":{"id":"ds-deque.set","purpose":"Updates a value at a given index","prototype":"void Ds\\Deque::set(int $index, mixed $value)","return":"<p class=\"para\">        No value is returned.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::shift":{"id":"ds-deque.shift","purpose":"Removes and returns the first value","prototype":"mixed Ds\\Deque::shift()","return":"<p class=\"para\">    The first value, which was removed.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::slice":{"id":"ds-deque.slice","purpose":"Returns a sub-deque of a given range","prototype":"Ds\\Deque Ds\\Deque::slice(int $index [, int $length = ''])","return":"<p class=\"para\">    A sub-deque of the given range.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::sort":{"id":"ds-deque.sort","purpose":"Sorts the deque in-place","prototype":"void Ds\\Deque::sort([callable $comparator = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::sorted":{"id":"ds-deque.sorted","purpose":"Returns a sorted copy","prototype":"Ds\\Deque Ds\\Deque::sorted([callable $comparator = ''])","return":"<p class=\"para\">    Returns a sorted copy of the deque.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::sum":{"id":"ds-deque.sum","purpose":"Returns the sum of all values in the deque","prototype":"number Ds\\Deque::sum()","return":"<p class=\"para\">    The sum of all the values in the deque as either a <span class=\"type\">float<\/span> or <span class=\"type\">int<\/span>    depending on the values in the deque.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::toArray":{"id":"ds-deque.toarray","purpose":"Converts the deque to an array","prototype":"array Ds\\Deque::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the deque.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Deque::unshift":{"id":"ds-deque.unshift","purpose":"Adds values to the front of the deque","prototype":"void Ds\\Deque::unshift([mixed $values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::allocate":{"id":"ds-map.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Map::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::apply":{"id":"ds-map.apply","purpose":"Updates all values by applying a callback function to each value","prototype":"void Ds\\Map::apply(callable $callback)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::capacity":{"id":"ds-map.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Map::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::clear":{"id":"ds-map.clear","purpose":"Removes all values","prototype":"void Ds\\Map::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::__construct":{"id":"ds-map.construct","purpose":"Creates a new instance","prototype":"array Ds\\Map::__construct([mixed $...values = ''])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Map::copy":{"id":"ds-map.copy","purpose":"Returns a shallow copy of the map","prototype":"Ds\\Map Ds\\Map::copy()","return":"<p class=\"para\">   Returns a shallow copy of the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::count":{"id":"ds-map.count","purpose":"Returns the number of values in the map","prototype":" Ds\\Map::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Map::diff":{"id":"ds-map.diff","purpose":"Creates a new map using keys that aren't in another map","prototype":"Ds\\Map Ds\\Map::diff(Ds\\Map $map)","return":"<p class=\"para\">    The result of removing all keys from the current instance that are    present in a given <code class=\"parameter\">map<\/code>.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::filter":{"id":"ds-map.filter","purpose":"Creates a new map using a callable to determine which pairs to include","prototype":"callable Ds\\Map::filter([callable $callback = ''])","return":"<p class=\"para\">    A new map containing all the pairs for which    either the <code class=\"parameter\">callback<\/code> returned <strong><code>TRUE<\/code><\/strong>, or all values that    convert to <strong><code>TRUE<\/code><\/strong> if a <code class=\"parameter\">callback<\/code> was not provided.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::first":{"id":"ds-map.first","purpose":"Returns the first pair in the map","prototype":"Ds\\Pair Ds\\Map::first()","return":"<p class=\"para\">    The first pair in the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::get":{"id":"ds-map.get","purpose":"Returns the value for a given key","prototype":"object Ds\\Map::get(mixed $key [, mixed $default = ''])","return":"<p class=\"para\">    The value mapped to the given <code class=\"parameter\">key<\/code>, or the <code class=\"parameter\">default<\/code>    value if provided and the key could not be found in the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::hasKey":{"id":"ds-map.haskey","purpose":"Determines whether the map contains a given key","prototype":"bool Ds\\Map::hasKey(mixed $key)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the key could found, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::hasValue":{"id":"ds-map.hasvalue","purpose":"Determines whether the map contains a given value","prototype":"bool Ds\\Map::hasValue(mixed $value)","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the value could found, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::intersect":{"id":"ds-map.intersect","purpose":"Creates a new map by intersecting keys with another map","prototype":"Ds\\Map Ds\\Map::intersect(Ds\\Map $map)","return":"<p class=\"para\">    The key intersection of the current instance and another <code class=\"parameter\">map<\/code>.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::isEmpty":{"id":"ds-map.isempty","purpose":"Returns whether the map is empty","prototype":"bool Ds\\Map::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the map is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::jsonSerialize":{"id":"ds-map.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Map::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Map::keys":{"id":"ds-map.keys","purpose":"Returns a set of the map's keys","prototype":"Ds\\Set Ds\\Map::keys()","return":"<p class=\"para\">    A <span class=\"classname\">Ds\\Set<\/span> containing all the keys of the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::ksort":{"id":"ds-map.ksort","purpose":"Sorts the map in-place by key","prototype":"void Ds\\Map::ksort([callable $comparator = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::ksorted":{"id":"ds-map.ksorted","purpose":"Returns a copy, sorted by key","prototype":"Ds\\Map Ds\\Map::ksorted([callable $comparator = ''])","return":"<p class=\"para\">    Returns a copy of the map, sorted by key.  <\/p>","versions":""},"Ds\\Map::last":{"id":"ds-map.last","purpose":"Returns the last pair of the map","prototype":"Ds\\Pair Ds\\Map::last()","return":"<p class=\"para\">    The last pair of the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::map":{"id":"ds-map.map","purpose":"Returns the result of applying a callback to each value","prototype":"Ds\\Map Ds\\Map::map(callable $callback)","return":"<p class=\"para\">    The result of applying a <code class=\"parameter\">callback<\/code> to each value in    the map.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The keys and values of the current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::merge":{"id":"ds-map.merge","purpose":"Returns the result of adding all given associations","prototype":"array Ds\\Map::merge(mixed $values)","return":"<p class=\"para\">    The result of associating all keys of a given <span class=\"classname\">traversable<\/span>    object or <span class=\"type\">array<\/span> with their corresponding values, combined with the current instance.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::pairs":{"id":"ds-map.pairs","purpose":"Returns a sequence containing all the pairs of the map","prototype":"Ds\\Sequence Ds\\Map::pairs()","return":"<p class=\"para\">    <span class=\"classname\">Ds\\Sequence<\/span> containing all the pairs of the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::put":{"id":"ds-map.put","purpose":"Associates a key with a value","prototype":"object Ds\\Map::put(mixed $key, mixed $value)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::putAll":{"id":"ds-map.putall","purpose":"Associates all key-value pairs of a traversable object or array","prototype":"object Ds\\Map::putAll(mixed $pairs)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.2"},"Ds\\Map::reduce":{"id":"ds-map.reduce","purpose":"Reduces the map to a single value using a callback function","prototype":"mixed Ds\\Map::reduce(callable $callback [, mixed $initial = ''])","return":"<p class=\"para\">    The return value of the final callback.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::remove":{"id":"ds-map.remove","purpose":"Removes and returns a value by key","prototype":"object Ds\\Map::remove(mixed $key [, mixed $default = ''])","return":"<p class=\"para\">    The value that was removed, or the <code class=\"parameter\">default<\/code>    value if provided and the <code class=\"parameter\">key<\/code> could not be found in the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::reverse":{"id":"ds-map.reverse","purpose":"Reverses the map in-place","prototype":"void Ds\\Map::reverse()","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::reversed":{"id":"ds-map.reversed","purpose":"Returns a reversed copy","prototype":"Ds\\Map Ds\\Map::reversed()","return":"<p class=\"para\">    A reversed copy of the map.    <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            The current instance is not affected.        <\/p>    <\/p><\/blockquote>  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::skip":{"id":"ds-map.skip","purpose":"Returns the pair at a given positional index","prototype":"Ds\\Pair Ds\\Map::skip(int $position)","return":"<p class=\"para\">    Returns the <span class=\"classname\">Ds\\Pair<\/span> at the given <code class=\"parameter\">position<\/code>.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::slice":{"id":"ds-map.slice","purpose":"Returns a subset of the map defined by a starting index and length","prototype":"Ds\\Map Ds\\Map::slice(int $index [, int $length = ''])","return":"<p class=\"para\">    A subset of the map defined by a starting index and length.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::sort":{"id":"ds-map.sort","purpose":"Sorts the map in-place by value","prototype":"void Ds\\Map::sort([callable $comparator = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::sorted":{"id":"ds-map.sorted","purpose":"Returns a copy, sorted by value","prototype":"Ds\\Map Ds\\Map::sorted([callable $comparator = ''])","return":"<p class=\"para\">    Returns a copy of the map, sorted by value.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::sum":{"id":"ds-map.sum","purpose":"Returns the sum of all values in the map","prototype":"number Ds\\Map::sum()","return":"<p class=\"para\">    The sum of all the values in the map as either a <span class=\"type\">float<\/span> or <span class=\"type\">int<\/span>    depending on the values in the map.  <\/p>","versions":""},"Ds\\Map::toArray":{"id":"ds-map.toarray","purpose":"Converts the map to an array","prototype":"array Ds\\Map::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::union":{"id":"ds-map.union","purpose":"Creates a new map using values from the current instance and another map","prototype":"Ds\\Map Ds\\Map::union(Ds\\Map $map)","return":"<p class=\"para\">    A new map containing all the pairs of the current instance as well as another <code class=\"parameter\">map<\/code>.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::values":{"id":"ds-map.values","purpose":"Returns a sequence of the map's values","prototype":"Ds\\Sequence Ds\\Map::values()","return":"<p class=\"para\">    A <span class=\"classname\">Ds\\Sequence<\/span> containing all the values of the map.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Map::xor":{"id":"ds-map.xor","purpose":"Creates a new map using keys of either the current instance or of another map, but not of both","prototype":"Ds\\Map Ds\\Map::xor(Ds\\Map $map)","return":"<p class=\"para\">        A new map containing keys in the current instance as well as another <code class=\"parameter\">map<\/code>,        but not in both.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Pair::clear":{"id":"ds-pair.clear","purpose":"Removes all values","prototype":"void Ds\\Pair::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":""},"Ds\\Pair::__construct":{"id":"ds-pair.construct","purpose":"Creates a new instance","prototype":" Ds\\Pair::__construct([mixed $key = '' [, mixed $value = '']])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Pair::copy":{"id":"ds-pair.copy","purpose":"Returns a shallow copy of the pair","prototype":"Ds\\Pair Ds\\Pair::copy()","return":"<p class=\"para\">   Returns a shallow copy of the pair.  <\/p>","versions":""},"Ds\\Pair::isEmpty":{"id":"ds-pair.isempty","purpose":"Returns whether the pair is empty","prototype":"bool Ds\\Pair::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the pair is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":""},"Ds\\Pair::jsonSerialize":{"id":"ds-pair.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Pair::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Pair::toArray":{"id":"ds-pair.toarray","purpose":"Converts the pair to an array","prototype":"array Ds\\Pair::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the pair.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::add":{"id":"ds-set.add","purpose":"Adds values to the set","prototype":"object Ds\\Set::add([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::allocate":{"id":"ds-set.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Set::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::capacity":{"id":"ds-set.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Set::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::clear":{"id":"ds-set.clear","purpose":"Removes all values","prototype":"void Ds\\Set::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::__construct":{"id":"ds-set.construct","purpose":"Creates a new instance","prototype":"array Ds\\Set::__construct([mixed $...values = ''])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Set::contains":{"id":"ds-set.contains","purpose":"Determines if the set contains all values","prototype":"object Ds\\Set::contains([mixed $...values = ''])","return":"<p class=\"para\">    <strong><code>FALSE<\/code><\/strong> if any of the provided <code class=\"parameter\">values<\/code> are not in the    set, <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::copy":{"id":"ds-set.copy","purpose":"Returns a shallow copy of the set","prototype":"Ds\\Set Ds\\Set::copy()","return":"<p class=\"para\">   Returns a shallow copy of the set.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::count":{"id":"ds-set.count","purpose":"Returns the number of values in the set","prototype":" Ds\\Set::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Set::diff":{"id":"ds-set.diff","purpose":"Creates a new set using values that aren't in another set","prototype":"Ds\\Set Ds\\Set::diff(Ds\\Set $set)","return":"<p class=\"para\">    A new set containing all values that were not in the other <code class=\"parameter\">set<\/code>.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::filter":{"id":"ds-set.filter","purpose":"Creates a new set using a callable to    determine which values to include","prototype":"callable Ds\\Set::filter([callable $callback = ''])","return":"<p class=\"para\">    A new set containing all the values for which    either the <code class=\"parameter\">callback<\/code> returned <strong><code>TRUE<\/code><\/strong>, or all values that    convert to <strong><code>TRUE<\/code><\/strong> if a <code class=\"parameter\">callback<\/code> was not provided.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::first":{"id":"ds-set.first","purpose":"Returns the first value in the set","prototype":"void Ds\\Set::first()","return":"<p class=\"para\">    The first value in the set.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::get":{"id":"ds-set.get","purpose":"Returns the value at a given index","prototype":"mixed Ds\\Set::get(int $index)","return":"<p class=\"para\">    The value at the requested index.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::intersect":{"id":"ds-set.intersect","purpose":"Creates a new set by intersecting values with another set","prototype":"Ds\\Set Ds\\Set::intersect(Ds\\Set $set)","return":"<p class=\"para\">    The intersection of the current instance and another <code class=\"parameter\">set<\/code>.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::isEmpty":{"id":"ds-set.isempty","purpose":"Returns whether the set is empty","prototype":"bool Ds\\Set::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the set is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::join":{"id":"ds-set.join","purpose":"Joins all values together as a string","prototype":"string Ds\\Set::join([string $glue = ''])","return":"<p class=\"para\">    All values of the set joined together as a string.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::jsonSerialize":{"id":"ds-set.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Set::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Set::last":{"id":"ds-set.last","purpose":"Returns the last value in the set","prototype":"void Ds\\Set::last()","return":"<p class=\"para\">    The last value in the set.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::merge":{"id":"ds-set.merge","purpose":"Returns the result of adding all given values to the set","prototype":"Ds\\Set Ds\\Set::merge(mixed $values)","return":"<p class=\"para\">    The result of adding all given values to the set,    effectively the same as adding the values to a copy, then returning that copy.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:     <p class=\"para\">        The current instance won&#039;t be affected.    <\/p>  <\/p><\/blockquote>","versions":"PECL ds >= 1.0.3"},"Ds\\Set::reduce":{"id":"ds-set.reduce","purpose":"Reduces the set to a single value using a callback function","prototype":"mixed Ds\\Set::reduce(callable $callback [, mixed $initial = ''])","return":"<p class=\"para\">    The return value of the final callback.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::remove":{"id":"ds-set.remove","purpose":"Removes all given values from the set","prototype":"void Ds\\Set::remove([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::reverse":{"id":"ds-set.reverse","purpose":"Reverses the set in-place","prototype":"void Ds\\Set::reverse()","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::reversed":{"id":"ds-set.reversed","purpose":"Returns a reversed copy","prototype":"Ds\\Set Ds\\Set::reversed()","return":"<p class=\"para\">    A reversed copy of the set.    <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:         <p class=\"para\">            The current instance is not affected.        <\/p>    <\/p><\/blockquote>  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::slice":{"id":"ds-set.slice","purpose":"Returns a sub-set of a given range","prototype":"Ds\\Set Ds\\Set::slice(int $index [, int $length = ''])","return":"<p class=\"para\">    A sub-set of the given range.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::sort":{"id":"ds-set.sort","purpose":"Sorts the set in-place","prototype":"void Ds\\Set::sort([callable $comparator = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::sorted":{"id":"ds-set.sorted","purpose":"Returns a sorted copy","prototype":"Ds\\Set Ds\\Set::sorted([callable $comparator = ''])","return":"<p class=\"para\">    Returns a sorted copy of the set.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::sum":{"id":"ds-set.sum","purpose":"Returns the sum of all values in the set","prototype":"number Ds\\Set::sum()","return":"<p class=\"para\">    The sum of all the values in the set as either a <span class=\"type\">float<\/span> or <span class=\"type\">int<\/span>    depending on the values in the set.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::toArray":{"id":"ds-set.toarray","purpose":"Converts the set to an array","prototype":"array Ds\\Set::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the set.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::union":{"id":"ds-set.union","purpose":"Creates a new set using values from the current instance and another set","prototype":"Ds\\Set Ds\\Set::union(Ds\\Set $set)","return":"<p class=\"para\">    A new set containing all the values of the current instance as well as another <code class=\"parameter\">set<\/code>.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Set::xor":{"id":"ds-set.xor","purpose":"Creates a new set using values in either the current instance or in another set, but not in both","prototype":"Ds\\Set Ds\\Set::xor(Ds\\Set $set)","return":"<p class=\"para\">        A new set containing values in the current instance as well as another <code class=\"parameter\">set<\/code>,        but not in both.    <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::allocate":{"id":"ds-stack.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Stack::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::capacity":{"id":"ds-stack.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Stack::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::clear":{"id":"ds-stack.clear","purpose":"Removes all values","prototype":"void Ds\\Stack::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::__construct":{"id":"ds-stack.construct","purpose":"Creates a new instance","prototype":"array Ds\\Stack::__construct([mixed $values = ''])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::copy":{"id":"ds-stack.copy","purpose":"Returns a shallow copy of the stack","prototype":"Ds\\Stack Ds\\Stack::copy()","return":"<p class=\"para\">   Returns a shallow copy of the stack.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::count":{"id":"ds-stack.count","purpose":"Returns the number of values in the stack","prototype":" Ds\\Stack::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::isEmpty":{"id":"ds-stack.isempty","purpose":"Returns whether the stack is empty","prototype":"bool Ds\\Stack::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the stack is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::jsonSerialize":{"id":"ds-stack.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Stack::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::peek":{"id":"ds-stack.peek","purpose":"Returns the value at the top of the stack","prototype":"mixed Ds\\Stack::peek()","return":"<p class=\"para\">    The value at the top of the stack.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::pop":{"id":"ds-stack.pop","purpose":"Removes and returns the value at the top of the stack","prototype":"mixed Ds\\Stack::pop()","return":"<p class=\"para\">    The removed value which was at the top of the stack.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::push":{"id":"ds-stack.push","purpose":"Pushes values onto the stack","prototype":"void Ds\\Stack::push([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Stack::toArray":{"id":"ds-stack.toarray","purpose":"Converts the stack to an array","prototype":"array Ds\\Stack::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the stack.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::allocate":{"id":"ds-queue.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\Queue::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::capacity":{"id":"ds-queue.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\Queue::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::clear":{"id":"ds-queue.clear","purpose":"Removes all values","prototype":"void Ds\\Queue::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::__construct":{"id":"ds-queue.construct","purpose":"Creates a new instance","prototype":"array Ds\\Queue::__construct([mixed $values = ''])","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::copy":{"id":"ds-queue.copy","purpose":"Returns a shallow copy of the queue","prototype":"Ds\\Queue Ds\\Queue::copy()","return":"<p class=\"para\">   Returns a shallow copy of the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::count":{"id":"ds-queue.count","purpose":"Returns the number of values in the queue","prototype":" Ds\\Queue::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::isEmpty":{"id":"ds-queue.isempty","purpose":"Returns whether the queue is empty","prototype":"bool Ds\\Queue::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the queue is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::jsonSerialize":{"id":"ds-queue.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\Queue::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::peek":{"id":"ds-queue.peek","purpose":"Returns the value at the front of the queue","prototype":"mixed Ds\\Queue::peek()","return":"<p class=\"para\">    The value at the front of the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::pop":{"id":"ds-queue.pop","purpose":"Removes and returns the value at the front of the queue","prototype":"mixed Ds\\Queue::pop()","return":"<p class=\"para\">    The removed value which was at the front of the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::push":{"id":"ds-queue.push","purpose":"Pushes values into the queue","prototype":"void Ds\\Queue::push([mixed $...values = ''])","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\Queue::toArray":{"id":"ds-queue.toarray","purpose":"Converts the queue to an array","prototype":"array Ds\\Queue::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::allocate":{"id":"ds-priorityqueue.allocate","purpose":"Allocates enough memory for a required capacity","prototype":"void Ds\\PriorityQueue::allocate(int $capacity)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::capacity":{"id":"ds-priorityqueue.capacity","purpose":"Returns the current capacity","prototype":"int Ds\\PriorityQueue::capacity()","return":"<p class=\"para\">    The current capacity.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::clear":{"id":"ds-priorityqueue.clear","purpose":"Removes all values","prototype":"void Ds\\PriorityQueue::clear()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::__construct":{"id":"ds-priorityqueue.construct","purpose":"Creates a new instance","prototype":" Ds\\PriorityQueue::__construct()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::copy":{"id":"ds-priorityqueue.copy","purpose":"Returns a shallow copy of the queue","prototype":"Ds\\PriorityQueue Ds\\PriorityQueue::copy()","return":"<p class=\"para\">   Returns a shallow copy of the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::count":{"id":"ds-priorityqueue.count","purpose":"Returns the number of values in the queue","prototype":" Ds\\PriorityQueue::count()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::isEmpty":{"id":"ds-priorityqueue.isempty","purpose":"Returns whether the queue is empty","prototype":"bool Ds\\PriorityQueue::isEmpty()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> if the queue is empty, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::jsonSerialize":{"id":"ds-priorityqueue.jsonserialize","purpose":"Returns a representation that can be converted to JSON","prototype":" Ds\\PriorityQueue::jsonSerialize()","return":"","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::peek":{"id":"ds-priorityqueue.peek","purpose":"Returns the value at the front of the queue","prototype":"mixed Ds\\PriorityQueue::peek()","return":"<p class=\"para\">    The value at the front of the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::pop":{"id":"ds-priorityqueue.pop","purpose":"Removes and returns the value with the highest priority","prototype":"mixed Ds\\PriorityQueue::pop()","return":"<p class=\"para\">    The removed value which was at the front of the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::push":{"id":"ds-priorityqueue.push","purpose":"Pushes values into the queue","prototype":"void Ds\\PriorityQueue::push(mixed $value, int $priority)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PECL ds >= 1.0.0"},"Ds\\PriorityQueue::toArray":{"id":"ds-priorityqueue.toarray","purpose":"Converts the queue to an array","prototype":"array Ds\\PriorityQueue::toArray()","return":"<p class=\"para\">    An <span class=\"type\">array<\/span> containing all the values in the same order as the queue.  <\/p>","versions":"PECL ds >= 1.0.0"},"chdb::__construct":{"id":"chdb.construct","purpose":"Creates a chdb instance","prototype":" chdb::__construct(string $pathname)","return":"","versions":"PECL chdb >= 0.1.0"},"chdb::get":{"id":"chdb.get","purpose":"Gets the value associated with a key","prototype":"string chdb::get(string $key)","return":"<p class=\"para\">   Returns a string containing the value associated with the given   <code class=\"parameter\">key<\/code>, or <strong><code>NULL<\/code><\/strong> if not found.  <\/p>","versions":"PECL chdb >= 0.1.0"},"chdb_create":{"id":"function.chdb-create","purpose":"Creates a chdb file","prototype":"bool chdb_create(string $pathname, array $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL chdb >= 0.1.0"},"curl_close":{"id":"function.curl-close","purpose":"Close a cURL session","prototype":"void curl_close(resource $ch)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"curl_copy_handle":{"id":"function.curl-copy-handle","purpose":"Copy a cURL handle along with all of its preferences","prototype":"resource curl_copy_handle(resource $ch)","return":"<p class=\"para\">   Returns a new cURL handle.  <\/p>","versions":"PHP 5, PHP 7"},"curl_errno":{"id":"function.curl-errno","purpose":"Return the last error number","prototype":"int curl_errno(resource $ch)","return":"<p class=\"para\">   Returns the error number or <em>0<\/em> (zero) if no error   occurred.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"curl_error":{"id":"function.curl-error","purpose":"Return a string containing the last error for the current session","prototype":"string curl_error(resource $ch)","return":"<p class=\"para\">   Returns the error message or <em>&#039;&#039;<\/em> (the empty string) if no   error occurred.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"curl_escape":{"id":"function.curl-escape","purpose":"URL encodes the given string","prototype":"string curl_escape(resource $ch, string $str)","return":"<p class=\"para\">   Returns escaped string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_exec":{"id":"function.curl-exec","purpose":"Perform a cURL session","prototype":"mixed curl_exec(resource $ch)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. However, if the <strong><code>CURLOPT_RETURNTRANSFER<\/code><\/strong>   option is <a href=\"function.curl-setopt.html\" class=\"link\">set<\/a>, it will return   the result on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Note that response status codes which indicate errors (such as <em>404    Not found<\/em>) are not regarded as failure.    <span class=\"function\">curl_getinfo<\/span> can be used to check for these.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"curl_file_create":{"id":"curlfile.construct","purpose":"Create a CURLFile object","prototype":"CURLFile curl_file_create(string $filename [, string $mimetype = '' [, string $postname = '']])","return":"<p class=\"para\">   Returns a <span class=\"classname\">CURLFile<\/span> object.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_getinfo":{"id":"function.curl-getinfo","purpose":"Get information regarding a specific transfer","prototype":"mixed curl_getinfo(resource $ch [, int $opt = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">opt<\/code> is given, returns its value.   Otherwise, returns an associative array with the following elements    (which correspond to <code class=\"parameter\">opt<\/code>), or <strong><code>FALSE<\/code><\/strong> on failure:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      &quot;url&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;content_type&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;http_code&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;header_size&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;request_size&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;filetime&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;ssl_verify_result&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;redirect_count&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;total_time&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;namelookup_time&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;connect_time&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;pretransfer_time&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;size_upload&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;size_download&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;speed_download&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;speed_upload&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;download_content_length&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;upload_content_length&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;starttransfer_time&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;redirect_time&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;certinfo&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;primary_ip&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;primary_port&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;local_ip&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;local_port&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;redirect_url&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;request_header&quot; (This is only set if the <strong><code>CURLINFO_HEADER_OUT<\/code><\/strong>       is set by a previous call to <span class=\"function\">curl_setopt<\/span>)     <\/span>    <\/li>   <\/ul>   Note that private data is not included in the associative array and must be retrieved individually with the <strong><code>CURLINFO_PRIVATE<\/code><\/strong> option.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"curl_init":{"id":"function.curl-init","purpose":"Initialize a cURL session","prototype":"resource curl_init([string $url = ''])","return":"<p class=\"para\">   Returns a cURL handle on success, <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"curl_multi_add_handle":{"id":"function.curl-multi-add-handle","purpose":"Add a normal cURL handle to a cURL multi handle","prototype":"int curl_multi_add_handle(resource $mh, resource $ch)","return":"<p class=\"para\">   Returns 0 on success, or one of the <strong><code>CURLM_XXX<\/code><\/strong> errors   code.  <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_close":{"id":"function.curl-multi-close","purpose":"Close a set of cURL handles","prototype":"void curl_multi_close(resource $mh)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_errno":{"id":"function.curl-multi-errno","purpose":"Return the last multi curl error number","prototype":"int curl_multi_errno(resource $mh)","return":"<p class=\"para\">   Return an integer containing the last multi curl error number,    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.0"},"curl_multi_exec":{"id":"function.curl-multi-exec","purpose":"Run the sub-connections of the current cURL handle","prototype":"int curl_multi_exec(resource $mh, int $still_running)","return":"<p class=\"para\">   A cURL code defined in the cURL <a href=\"curl.constants.html\" class=\"link\">Predefined Constants<\/a>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This only returns errors regarding the whole multi stack. There might still have     occurred problems on individual transfers even when this function returns     <strong><code>CURLM_OK<\/code><\/strong>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 5, PHP 7"},"curl_multi_getcontent":{"id":"function.curl-multi-getcontent","purpose":"Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set","prototype":"string curl_multi_getcontent(resource $ch)","return":"<p class=\"para\">   Return the content of a cURL handle if <strong><code>CURLOPT_RETURNTRANSFER<\/code><\/strong> is set.  <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_info_read":{"id":"function.curl-multi-info-read","purpose":"Get information about the current transfers","prototype":"array curl_multi_info_read(resource $mh [, int $msgs_in_queue = ''])","return":"<p class=\"para\">   On success, returns an associative array for the message, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Contents of the returned array<\/strong><\/caption>         <thead>      <tr>       <th>Key:<\/th>       <th>Value:<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><em>msg<\/em><\/td>       <td>The <strong><code>CURLMSG_DONE<\/code><\/strong> constant. Other return values       are currently not available.<\/td>      <\/tr>      <tr>       <td><em>result<\/em><\/td>       <td>One of the <strong><code>CURLE_*<\/code><\/strong> constants. If everything is       OK, the <strong><code>CURLE_OK<\/code><\/strong> will be the result.<\/td>      <\/tr>      <tr>       <td><em>handle<\/em><\/td>       <td>Resource of type curl indicates the handle which it concerns.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_init":{"id":"function.curl-multi-init","purpose":"Returns a new cURL multi handle","prototype":"resource curl_multi_init()","return":"<p class=\"para\">   Returns a cURL multi handle resource on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_remove_handle":{"id":"function.curl-multi-remove-handle","purpose":"Remove a multi handle from a set of cURL handles","prototype":"int curl_multi_remove_handle(resource $mh, resource $ch)","return":"<p class=\"para\">   Returns 0 on success, or one of the <strong><code>CURLM_XXX<\/code><\/strong> error   codes.  <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_select":{"id":"function.curl-multi-select","purpose":"Wait for activity on any curl_multi connection","prototype":"int curl_multi_select(resource $mh [, float $timeout = 1.0])","return":"<p class=\"para\">   On success, returns the number of descriptors contained in    the descriptor sets. This may be 0 if there was no activity on any   of the descriptors. On failure, this function will return -1 on a select   failure (from the underlying select system call).   <\/p>","versions":"PHP 5, PHP 7"},"curl_multi_setopt":{"id":"function.curl-multi-setopt","purpose":"Set an option for the cURL multi handle","prototype":"bool curl_multi_setopt(resource $mh, int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_multi_strerror":{"id":"function.curl-multi-strerror","purpose":"Return string describing error code","prototype":"string curl_multi_strerror(int $errornum)","return":"<p class=\"para\">   Returns error string for valid error code, <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_pause":{"id":"function.curl-pause","purpose":"Pause and unpause a connection","prototype":"int curl_pause(resource $ch, int $bitmask)","return":"<p class=\"para\">   Returns an error code (<strong><code>CURLE_OK<\/code><\/strong> for no error).  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_reset":{"id":"function.curl-reset","purpose":"Reset all options of a libcurl session handle","prototype":"void curl_reset(resource $ch)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_setopt_array":{"id":"function.curl-setopt-array","purpose":"Set multiple options for a cURL transfer","prototype":"bool curl_setopt_array(resource $ch, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if all options were successfully set. If an option could   not be successfully set, <strong><code>FALSE<\/code><\/strong> is immediately returned, ignoring any   future options in the <code class=\"parameter\">options<\/code> array.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"curl_setopt":{"id":"function.curl-setopt","purpose":"Set an option for a cURL transfer","prototype":"bool curl_setopt(resource $ch, int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"curl_share_close":{"id":"function.curl-share-close","purpose":"Close a cURL share handle","prototype":"void curl_share_close(resource $sh)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_share_errno":{"id":"function.curl-share-errno","purpose":"Return the last share curl error number","prototype":"int curl_share_errno(resource $sh)","return":"<p class=\"para\">   Returns an integer containing the last share curl error number,    or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.1.0"},"curl_share_init":{"id":"function.curl-share-init","purpose":"Initialize a cURL share handle","prototype":"resource curl_share_init()","return":"<p class=\"para\">   Returns resource of type &quot;cURL Share Handle&quot;.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_share_setopt":{"id":"function.curl-share-setopt","purpose":"Set an option for a cURL share handle","prototype":"bool curl_share_setopt(resource $sh, int $option, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_share_strerror":{"id":"function.curl-share-strerror","purpose":"Return string describing the given error code","prototype":"string curl_share_strerror(int $errornum)","return":"<p class=\"para\">   Returns error description or <strong><code>NULL<\/code><\/strong> for invalid error code.  <\/p>","versions":"PHP 7 >= 7.1.0"},"curl_strerror":{"id":"function.curl-strerror","purpose":"Return string describing the given error code","prototype":"string curl_strerror(int $errornum)","return":"<p class=\"para\">   Returns error description or <strong><code>NULL<\/code><\/strong> for invalid error code.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_unescape":{"id":"function.curl-unescape","purpose":"Decodes the given URL encoded string","prototype":"string curl_unescape(resource $ch, string $str)","return":"<p class=\"para\">   Returns decoded string  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"curl_version":{"id":"function.curl-version","purpose":"Gets cURL version information","prototype":"array curl_version([int $age = CURLVERSION_NOW])","return":"<p class=\"para\">   Returns an associative array with the following elements:    <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Indice<\/th>       <th>Value description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>version_number<\/td>       <td>cURL 24 bit version number<\/td>      <\/tr>      <tr>       <td>version<\/td>       <td>cURL version number, as a string<\/td>      <\/tr>      <tr>       <td>ssl_version_number<\/td>       <td>OpenSSL 24 bit version number<\/td>      <\/tr>      <tr>       <td>ssl_version<\/td>       <td>OpenSSL version number, as a string<\/td>      <\/tr>      <tr>       <td>libz_version<\/td>       <td>zlib version number, as a string<\/td>      <\/tr>      <tr>       <td>host<\/td>       <td>Information about the host where cURL was built<\/td>      <\/tr>      <tr>       <td>age<\/td>       <td class=\"empty\">&nbsp;<\/td>      <\/tr>      <tr>       <td>features<\/td>       <td>A bitmask of the <em>CURL_VERSION_XXX<\/em> constants<\/td>      <\/tr>      <tr>       <td>protocols<\/td>       <td>An array of protocols names supported by cURL<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"CURLFile::__construct":{"id":"curlfile.construct","purpose":"Create a CURLFile object","prototype":"CURLFile CURLFile::__construct(string $filename [, string $mimetype = '' [, string $postname = '']])","return":"<p class=\"para\">   Returns a <span class=\"classname\">CURLFile<\/span> object.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"CURLFile::getFilename":{"id":"curlfile.getfilename","purpose":"Get file name","prototype":"string CURLFile::getFilename()","return":"<p class=\"para\">   Returns file name.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"CURLFile::getMimeType":{"id":"curlfile.getmimetype","purpose":"Get MIME type","prototype":"string CURLFile::getMimeType()","return":"<p class=\"para\">   Returns MIME type.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"CURLFile::getPostFilename":{"id":"curlfile.getpostfilename","purpose":"Get file name for POST","prototype":"string CURLFile::getPostFilename()","return":"<p class=\"para\">   Returns file name for POST.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"CURLFile::setMimeType":{"id":"curlfile.setmimetype","purpose":"Set MIME type","prototype":"void CURLFile::setMimeType(string $mime)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"CURLFile::setPostFilename":{"id":"curlfile.setpostfilename","purpose":"Set file name for POST","prototype":"void CURLFile::setPostFilename(string $postname)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"CURLFile::__wakeup":{"id":"curlfile.wakeup","purpose":"Unserialization handler","prototype":"void CURLFile::__wakeup()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"Event::add":{"id":"event.add","purpose":"Makes event pending","prototype":"bool Event::add([float $timeout = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL libevent >= 0.0.1"},"Event::addSignal":{"id":"event.addsignal","purpose":"Makes signal event pending","prototype":"bool Event::addSignal([float $timeout = ''])","return":"","versions":"PECL event >= 1.2.6-beta"},"Event::addTimer":{"id":"event.addtimer","purpose":"Makes timer event pending","prototype":"bool Event::addTimer([float $timeout = ''])","return":"<p class=\"para\"\/>","versions":"PECL event >= 1.2.6-beta"},"Event::__construct":{"id":"event.construct","purpose":"Constructs Event object","prototype":" Event::__construct(EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = null])","return":"<p class=\"para\">   Returns Event object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"Event::del":{"id":"event.del","purpose":"Makes event non-pending","prototype":"bool Event::del()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PECL libevent >= 0.0.1"},"Event::delSignal":{"id":"event.delsignal","purpose":"Makes signal event non-pending","prototype":"bool Event::delSignal()","return":"","versions":"PECL event >= 1.2.6-beta"},"Event::delTimer":{"id":"event.deltimer","purpose":"Makes timer event non-pending","prototype":"bool Event::delTimer()","return":"","versions":"PECL event >= 1.2.6-beta"},"Event::free":{"id":"event.free","purpose":"Make event non-pending and free resources allocated for this  event","prototype":"void Event::free()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL libevent >= 0.0.1"},"Event::getSupportedMethods":{"id":"event.getsupportedmethods","purpose":"Returns array with of the names of the methods supported in this version of Libevent","prototype":"array Event::getSupportedMethods()","return":"<p class=\"para\">   Returns array.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"Event::pending":{"id":"event.pending","purpose":"Detects whether event is pending or scheduled","prototype":"bool Event::pending(int $flags)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if event is pending or scheduled. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"Event::set":{"id":"event.set","purpose":"Re-configures event","prototype":"bool Event::set(EventBase $base, mixed $fd [, int $what = '' [, callable $cb = '' [, mixed $arg = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL libevent >= 0.0.1"},"Event::setPriority":{"id":"event.setpriority","purpose":"Set event priority","prototype":"bool Event::setPriority(int $priority)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"Event::setTimer":{"id":"event.settimer","purpose":"Re-configures timer event","prototype":"bool Event::setTimer(EventBase $base, callable $cb [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"Event::signal":{"id":"event.signal","purpose":"Constructs signal event object","prototype":"Event Event::signal(EventBase $base, int $signum, callable $cb [, mixed $arg = ''])","return":"<p class=\"para\">   Returns Event object on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"Event::timer":{"id":"event.timer","purpose":"Constructs timer event object","prototype":"Event Event::timer(EventBase $base, callable $cb [, mixed $arg = ''])","return":"<p class=\"para\">   Returns Event object on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::__construct":{"id":"eventbase.construct","purpose":"Constructs EventBase object","prototype":" EventBase::__construct([EventConfig $cfg = ''])","return":"<p class=\"para\">   Returns EventBase object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::dispatch":{"id":"eventbase.dispatch","purpose":"Dispatch pending events","prototype":"void EventBase::dispatch()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::exit":{"id":"eventbase.exit","purpose":"Stop dispatching events","prototype":"bool EventBase::exit([float $timeout = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::free":{"id":"eventbase.free","purpose":"Free resources allocated for this event base","prototype":"void EventBase::free()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.10.0"},"EventBase::getFeatures":{"id":"eventbase.getfeatures","purpose":"Returns bitmask of features supported","prototype":"int EventBase::getFeatures()","return":"<p class=\"para\">   Returns integer representing a bitmask of supported features. See   <a href=\"class.eventconfig.html#eventconfig.constants\" class=\"link\">EventConfig::FEATURE_* constants<\/a>   .  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::getMethod":{"id":"eventbase.getmethod","purpose":"Returns event method in use","prototype":"string EventBase::getMethod()","return":"<p class=\"para\">   String representing used event method(backend).  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::getTimeOfDayCached":{"id":"eventbase.gettimeofdaycached","purpose":"Returns the current event base time","prototype":"float EventBase::getTimeOfDayCached()","return":"<p class=\"para\">   Returns the current   <em class=\"emphasis\">event base<\/em>   time. On failure returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::gotExit":{"id":"eventbase.gotexit","purpose":"Checks if the event loop was told to exit","prototype":"bool EventBase::gotExit()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>, event loop was told to exit by    <span class=\"methodname\">EventBase::exit<\/span>   . Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::gotStop":{"id":"eventbase.gotstop","purpose":"Checks if the event loop was told to exit","prototype":"bool EventBase::gotStop()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>, event loop was told to stop by    <span class=\"methodname\">EventBase::stop<\/span>   . Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::loop":{"id":"eventbase.loop","purpose":"Dispatch pending events","prototype":"bool EventBase::loop([int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::priorityInit":{"id":"eventbase.priorityinit","purpose":"Sets number of priorities per event base","prototype":"bool EventBase::priorityInit(int $n_priorities)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::reInit":{"id":"eventbase.reinit","purpose":"Re-initialize event base(after a fork)","prototype":"bool EventBase::reInit()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBase::stop":{"id":"eventbase.stop","purpose":"Tells event_base to stop dispatching events","prototype":"bool EventBase::stop()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::add":{"id":"eventbuffer.add","purpose":"Append data to the end of an event buffer","prototype":"bool EventBuffer::add(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::addBuffer":{"id":"eventbuffer.addbuffer","purpose":"Move all data from a buffer provided to the current instance of EventBuffer","prototype":"bool EventBuffer::addBuffer(EventBuffer $buf)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::appendFrom":{"id":"eventbuffer.appendfrom","purpose":"Moves the specified number of bytes from a source buffer to the  end of the current buffer","prototype":"int EventBuffer::appendFrom(EventBuffer $buf, int $len)","return":"<p class=\"para\">   Returns the number of bytes read.  <\/p>","versions":"PECL event >= 1.6.0"},"EventBuffer::__construct":{"id":"eventbuffer.construct","purpose":"Constructs EventBuffer object","prototype":" EventBuffer::__construct()","return":"<p class=\"para\">   Returns EventBuffer object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::copyout":{"id":"eventbuffer.copyout","purpose":"Copies out specified number of bytes from the front of the buffer","prototype":"int EventBuffer::copyout(string $data, int $max_bytes)","return":"<p class=\"para\">   Returns the number of bytes copied, or   <strong><code>-1<\/code><\/strong>   on failure.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::drain":{"id":"eventbuffer.drain","purpose":"Removes specified number of bytes from the front of the buffer  without copying it anywhere","prototype":"bool EventBuffer::drain(int $len)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::enableLocking":{"id":"eventbuffer.enablelocking","purpose":"","prototype":"void EventBuffer::enableLocking()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::expand":{"id":"eventbuffer.expand","purpose":"Reserves space in buffer","prototype":"bool EventBuffer::expand(int $len)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::freeze":{"id":"eventbuffer.freeze","purpose":"Prevent calls that modify an event buffer from succeeding","prototype":"bool EventBuffer::freeze(bool $at_front)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::lock":{"id":"eventbuffer.lock","purpose":"Acquires a lock on buffer","prototype":"void EventBuffer::lock()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::prepend":{"id":"eventbuffer.prepend","purpose":"Prepend data to the front of the buffer","prototype":"bool EventBuffer::prepend(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::prependBuffer":{"id":"eventbuffer.prependbuffer","purpose":"Moves all data from source buffer to the front of current buffer","prototype":"bool EventBuffer::prependBuffer(EventBuffer $buf)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::pullup":{"id":"eventbuffer.pullup","purpose":"Linearizes data within buffer  and returns it's contents as a string","prototype":"string EventBuffer::pullup(int $size)","return":"<p class=\"para\">   If   <code class=\"parameter\">size<\/code>   is greater than the number of bytes in the buffer, the function returns   <strong><code>NULL<\/code><\/strong>. Otherwise,    <span class=\"methodname\">EventBuffer::pullup<\/span>   returns string.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::read":{"id":"eventbuffer.read","purpose":"Read data from an evbuffer and drain the bytes read","prototype":"string EventBuffer::read(int $max_bytes)","return":"<p class=\"para\">   Returns string read, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL event >= 1.6.0"},"EventBuffer::readFrom":{"id":"eventbuffer.readfrom","purpose":"Read data from a file onto the end of the buffer","prototype":"int EventBuffer::readFrom(mixed $fd, int $howmuch)","return":"<p class=\"para\">   Returns the number of bytes read, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL event >= 1.7.0"},"EventBuffer::readLine":{"id":"eventbuffer.readline","purpose":"Extracts a line from the front of the buffer","prototype":"string EventBuffer::readLine(int $eol_style)","return":"<p class=\"para\">   On success returns the line read from the buffer, otherwise <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::search":{"id":"eventbuffer.search","purpose":"Scans the buffer for an occurrence of a string","prototype":"mixed EventBuffer::search(string $what [, int $start = -1 [, int $end = -1]])","return":"<p class=\"para\">   Returns numeric position of the first occurance of the string in the   buffer, or <strong><code>FALSE<\/code><\/strong> if string is not found.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::searchEol":{"id":"eventbuffer.searcheol","purpose":"Scans the buffer for an occurrence of an end of line","prototype":"mixed EventBuffer::searchEol([int $start = -1 [, int $eol_style = '']])","return":"<p class=\"para\">   Returns numeric position of the first occurance of end-of-line symbol in   the buffer, or <strong><code>FALSE<\/code><\/strong> if not found.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PECL event >= 1.5.0"},"EventBuffer::substr":{"id":"eventbuffer.substr","purpose":"Substracts a portion of the buffer data","prototype":"string EventBuffer::substr(int $start [, int $length = ''])","return":"<p class=\"para\">   Returns the data substracted as a   <span class=\"type\">string<\/span>   on success, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL event >= 1.6.0"},"EventBuffer::unfreeze":{"id":"eventbuffer.unfreeze","purpose":"Re-enable calls that modify an event buffer","prototype":"bool EventBuffer::unfreeze(bool $at_front)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::unlock":{"id":"eventbuffer.unlock","purpose":"Releases lock acquired by EventBuffer::lock","prototype":"bool EventBuffer::unlock()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBuffer::write":{"id":"eventbuffer.write","purpose":"Write contents of the buffer to a file or socket","prototype":"int EventBuffer::write(mixed $fd [, int $howmuch = ''])","return":"<p class=\"para\">   Returns the number of bytes written, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL event >= 1.6.0"},"EventBufferEvent::close":{"id":"eventbufferevent.close","purpose":"Closes file descriptor associated with the current buffer event","prototype":"void EventBufferEvent::close()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.10.0"},"EventBufferEvent::connect":{"id":"eventbufferevent.connect","purpose":"Connect buffer event's file descriptor to given address or  UNIX socket","prototype":"bool EventBufferEvent::connect(string $addr)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::connectHost":{"id":"eventbufferevent.connecthost","purpose":"Connects to a hostname with optionally asyncronous DNS resolving","prototype":"bool EventBufferEvent::connectHost(EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::__construct":{"id":"eventbufferevent.construct","purpose":"Constructs EventBufferEvent object","prototype":" EventBufferEvent::__construct(EventBase $base [, mixed $socket = '' [, int $options = '' [, callable $readcb = '' [, callable $writecb = '' [, callable $eventcb = '']]]]])","return":"<p class=\"para\">   Returns buffer event resource optionally associated with socket resource.   *\/  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::createPair":{"id":"eventbufferevent.createpair","purpose":"Creates two buffer events connected to each other","prototype":"array EventBufferEvent::createPair(EventBase $base [, int $options = ''])","return":"<p class=\"para\">   Returns array of two   <span class=\"classname\">EventBufferEvent<\/span>   objects connected to each other.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::disable":{"id":"eventbufferevent.disable","purpose":"Disable events read, write, or both on a buffer event","prototype":"bool EventBufferEvent::disable(int $events)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::enable":{"id":"eventbufferevent.enable","purpose":"Enable events read, write, or both on a buffer event","prototype":"bool EventBufferEvent::enable(int $events)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::free":{"id":"eventbufferevent.free","purpose":"Free a buffer event","prototype":"void EventBufferEvent::free()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::getDnsErrorString":{"id":"eventbufferevent.getdnserrorstring","purpose":"Returns string describing the last failed DNS lookup attempt","prototype":"string EventBufferEvent::getDnsErrorString()","return":"<p class=\"para\">   Returns a string describing DNS lookup error, or an empty string for no   error.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::getEnabled":{"id":"eventbufferevent.getenabled","purpose":"Returns bitmask of events currently enabled on the buffer event","prototype":"int EventBufferEvent::getEnabled()","return":"<p class=\"para\">   Returns integer representing a bitmask of events currently enabled on the   buffer event  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::getInput":{"id":"eventbufferevent.getinput","purpose":"Returns underlying input buffer associated with current buffer  event","prototype":"EventBuffer EventBufferEvent::getInput()","return":"<p class=\"para\">   Returns instance of   <span class=\"classname\">EventBuffer<\/span>   input buffer associated with current buffer event.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::getOutput":{"id":"eventbufferevent.getoutput","purpose":"Returns underlying output buffer associated with current buffer  event","prototype":"EventBuffer EventBufferEvent::getOutput()","return":"<p class=\"para\">   Returns instance of   <span class=\"classname\">EventBuffer<\/span>   output buffer associated with current buffer event.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::read":{"id":"eventbufferevent.read","purpose":"Read buffer's data","prototype":"string EventBufferEvent::read(int $size)","return":"<p class=\"para\">   Returns string of data read from the input buffer.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::readBuffer":{"id":"eventbufferevent.readbuffer","purpose":"Drains the entire contents of the input buffer and places them into buf","prototype":"bool EventBufferEvent::readBuffer(EventBuffer $buf)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success; Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::setCallbacks":{"id":"eventbufferevent.setcallbacks","purpose":"Assigns read, write and event(status) callbacks","prototype":"void EventBufferEvent::setCallbacks(callable $readcb, callable $writecb, callable $eventcb [, string $arg = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::setPriority":{"id":"eventbufferevent.setpriority","purpose":"Assign a priority to a bufferevent","prototype":"bool EventBufferEvent::setPriority(int $priority)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::setTimeouts":{"id":"eventbufferevent.settimeouts","purpose":"Set the read and write timeout for a buffer event","prototype":"bool EventBufferEvent::setTimeouts(float $timeout_read, float $timeout_write)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::setWatermark":{"id":"eventbufferevent.setwatermark","purpose":"Adjusts read and\/or write watermarks","prototype":"void EventBufferEvent::setWatermark(int $events, int $lowmark, int $highmark)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::sslError":{"id":"eventbufferevent.sslerror","purpose":"Returns most recent OpenSSL error reported on the buffer event","prototype":"string EventBufferEvent::sslError()","return":"<p class=\"para\">   Returns OpenSSL error string reported on the buffer event, or <strong><code>FALSE<\/code><\/strong>, if   there is no more error to return.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::sslFilter":{"id":"eventbufferevent.sslfilter","purpose":"Create a new SSL buffer event to send its data over another buffer event","prototype":"EventBufferEvent EventBufferEvent::sslFilter(EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = ''])","return":"<p class=\"para\">   Returns a new SSL   <span class=\"classname\">EventBufferEvent<\/span>   object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::sslGetCipherInfo":{"id":"eventbufferevent.sslgetcipherinfo","purpose":"Returns a textual description of the cipher","prototype":"string EventBufferEvent::sslGetCipherInfo()","return":"<p class=\"para\">   Returns a textual description of the cipher on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL event >= 1.10.0"},"EventBufferEvent::sslGetCipherName":{"id":"eventbufferevent.sslgetciphername","purpose":"Returns the current cipher name of the SSL connection","prototype":"string EventBufferEvent::sslGetCipherName()","return":"<p class=\"para\">   Returns the current cipher name of the SSL connection, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL event >= 1.10.0"},"EventBufferEvent::sslGetCipherVersion":{"id":"eventbufferevent.sslgetcipherversion","purpose":"Returns version of cipher used by current SSL connection","prototype":"string EventBufferEvent::sslGetCipherVersion()","return":"<p class=\"para\">   Returns the current cipher version of the SSL connection, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL event >= 1.10.0"},"EventBufferEvent::sslGetProtocol":{"id":"eventbufferevent.sslgetprotocol","purpose":"Returns the name of the protocol used for current SSL connection","prototype":"string EventBufferEvent::sslGetProtocol()","return":"<p class=\"para\">   Returns the name of the protocol used for current SSL connection.  <\/p>","versions":"PECL event >= 1.10.0"},"EventBufferEvent::sslRenegotiate":{"id":"eventbufferevent.sslrenegotiate","purpose":"Tells a bufferevent to begin SSL renegotiation","prototype":"void EventBufferEvent::sslRenegotiate()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::sslSocket":{"id":"eventbufferevent.sslsocket","purpose":"Creates a new SSL buffer event to send its data over an SSL on a socket","prototype":"EventBufferEvent EventBufferEvent::sslSocket(EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options = ''])","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventBufferEvent<\/span>   object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::write":{"id":"eventbufferevent.write","purpose":"Adds data to a buffer event's output buffer","prototype":"bool EventBufferEvent::write(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventBufferEvent::writeBuffer":{"id":"eventbufferevent.writebuffer","purpose":"Adds contents of the entire buffer to a buffer event's output  buffer","prototype":"bool EventBufferEvent::writeBuffer(EventBuffer $buf)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventConfig::avoidMethod":{"id":"eventconfig.avoidmethod","purpose":"Tells libevent to avoid specific event method","prototype":"bool EventConfig::avoidMethod(string $method)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventConfig::__construct":{"id":"eventconfig.construct","purpose":"Constructs EventConfig object","prototype":" EventConfig::__construct()","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventConfig<\/span>   object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventConfig::requireFeatures":{"id":"eventconfig.requirefeatures","purpose":"Enters a required event method feature that the application demands","prototype":"bool EventConfig::requireFeatures(int $feature)","return":"<p class=\"para\"\/>","versions":"PECL event >= 1.2.6-beta"},"EventConfig::setMaxDispatchInterval":{"id":"eventconfig.setmaxdispatchinterval","purpose":"Prevents priority inversion","prototype":"void EventConfig::setMaxDispatchInterval(int $max_interval, int $max_callbacks, int $min_priority)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":""},"EventDnsBase::addNameserverIp":{"id":"eventdnsbase.addnameserverip","purpose":"Adds a nameserver to the DNS base","prototype":"bool EventDnsBase::addNameserverIp(string $ip)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::addSearch":{"id":"eventdnsbase.addsearch","purpose":"Adds a domain to the list of search domains","prototype":"void EventDnsBase::addSearch(string $domain)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::clearSearch":{"id":"eventdnsbase.clearsearch","purpose":"Removes all current search suffixes","prototype":"void EventDnsBase::clearSearch()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::__construct":{"id":"eventdnsbase.construct","purpose":"Constructs EventDnsBase object","prototype":" EventDnsBase::__construct(EventBase $base, bool $initialize)","return":"<p class=\"para\">   Returns EventDnsBase object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::countNameservers":{"id":"eventdnsbase.countnameservers","purpose":"Gets the number of configured nameservers","prototype":"int EventDnsBase::countNameservers()","return":"<p class=\"para\">   Returns the number of configured nameservers(not necessarily the number of   running nameservers). This is useful for double-checking whether our calls   to the various nameserver configuration functions have been successful.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::loadHosts":{"id":"eventdnsbase.loadhosts","purpose":"Loads a hosts file (in the same format as \/etc\/hosts) from hosts file","prototype":"bool EventDnsBase::loadHosts(string $hosts)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::parseResolvConf":{"id":"eventdnsbase.parseresolvconf","purpose":"Scans the resolv.conf-formatted file","prototype":"bool EventDnsBase::parseResolvConf(int $flags, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::setOption":{"id":"eventdnsbase.setoption","purpose":"Set the value of a configuration option","prototype":"bool EventDnsBase::setOption(string $option, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventDnsBase::setSearchNdots":{"id":"eventdnsbase.setsearchndots","purpose":"Set the 'ndots' parameter for searches","prototype":"bool EventDnsBase::setSearchNdots(int $ndots)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttp::accept":{"id":"eventhttp.accept","purpose":"Makes an HTTP server accept connections on the specified socket stream or resource","prototype":"bool EventHttp::accept(mixed $socket)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttp::addServerAlias":{"id":"eventhttp.addserveralias","purpose":"Adds a server alias to the HTTP server object","prototype":"bool EventHttp::addServerAlias(string $alias)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::bind":{"id":"eventhttp.bind","purpose":"Binds an HTTP server on the specified address and port","prototype":"void EventHttp::bind(string $address, int $port)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttp::__construct":{"id":"eventhttp.construct","purpose":"Constructs EventHttp object(the HTTP server)","prototype":" EventHttp::__construct(EventBase $base [, EventSslContext $ctx = ''])","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventHttp<\/span>   object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttp::removeServerAlias":{"id":"eventhttp.removeserveralias","purpose":"Removes server alias","prototype":"bool EventHttp::removeServerAlias(string $alias)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::setAllowedMethods":{"id":"eventhttp.setallowedmethods","purpose":"Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks","prototype":"void EventHttp::setAllowedMethods(int $methods)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::setCallback":{"id":"eventhttp.setcallback","purpose":"Sets a callback for specified URI","prototype":"void EventHttp::setCallback(string $path, string $cb [, string $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::setDefaultCallback":{"id":"eventhttp.setdefaultcallback","purpose":"Sets default callback to handle requests that are not caught by specific callbacks","prototype":"void EventHttp::setDefaultCallback(string $cb [, string $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::setMaxBodySize":{"id":"eventhttp.setmaxbodysize","purpose":"Sets maximum request body size","prototype":"void EventHttp::setMaxBodySize(int $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::setMaxHeadersSize":{"id":"eventhttp.setmaxheaderssize","purpose":"Sets maximum HTTP header size","prototype":"void EventHttp::setMaxHeadersSize(int $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttp::setTimeout":{"id":"eventhttp.settimeout","purpose":"Sets the timeout for an HTTP request","prototype":"void EventHttp::setTimeout(int $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpConnection::__construct":{"id":"eventhttpconnection.construct","purpose":"Constructs EventHttpConnection object","prototype":" EventHttpConnection::__construct(EventBase $base, EventDnsBase $dns_base, string $address, int $port [, EventSslContext $ctx = ''])","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventHttpConnection<\/span>   object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::getBase":{"id":"eventhttpconnection.getbase","purpose":"Returns event base associated with the connection","prototype":"EventBase EventHttpConnection::getBase()","return":"<p class=\"para\">   On success returns   <span class=\"classname\">EventBase<\/span>   object associated with the connection. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::getPeer":{"id":"eventhttpconnection.getpeer","purpose":"Gets the remote address and port associated with the connection","prototype":"void EventHttpConnection::getPeer(string $address, int $port)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::makeRequest":{"id":"eventhttpconnection.makerequest","purpose":"Makes an HTTP request over the specified connection","prototype":"bool EventHttpConnection::makeRequest(EventHttpRequest $req, int $type, string $uri)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpConnection::setCloseCallback":{"id":"eventhttpconnection.setclosecallback","purpose":"Set callback for connection close","prototype":"void EventHttpConnection::setCloseCallback(callable $callback [, mixed $data = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.8.0"},"EventHttpConnection::setLocalAddress":{"id":"eventhttpconnection.setlocaladdress","purpose":"Sets the IP address from which HTTP connections are made","prototype":"void EventHttpConnection::setLocalAddress(string $address)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::setLocalPort":{"id":"eventhttpconnection.setlocalport","purpose":"Sets the local port from which connections are made","prototype":"void EventHttpConnection::setLocalPort(int $port)","return":"<p class=\"para\"\/>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::setMaxBodySize":{"id":"eventhttpconnection.setmaxbodysize","purpose":"Sets maximum body size for the connection","prototype":"void EventHttpConnection::setMaxBodySize(string $max_size)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::setMaxHeadersSize":{"id":"eventhttpconnection.setmaxheaderssize","purpose":"Sets maximum header size","prototype":"void EventHttpConnection::setMaxHeadersSize(string $max_size)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::setRetries":{"id":"eventhttpconnection.setretries","purpose":"Sets the retry limit for the connection","prototype":"void EventHttpConnection::setRetries(int $retries)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpConnection::setTimeout":{"id":"eventhttpconnection.settimeout","purpose":"Sets the timeout for the connection","prototype":"void EventHttpConnection::setTimeout(int $timeout)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventHttpRequest::addHeader":{"id":"eventhttprequest.addheader","purpose":"Adds an HTTP header to the headers of the request","prototype":"bool EventHttpRequest::addHeader(string $key, string $value, int $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::cancel":{"id":"eventhttprequest.cancel","purpose":"Cancels a pending HTTP request","prototype":"void EventHttpRequest::cancel()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::clearHeaders":{"id":"eventhttprequest.clearheaders","purpose":"Removes all output headers from the header list of the request","prototype":"void EventHttpRequest::clearHeaders()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::closeConnection":{"id":"eventhttprequest.closeconnection","purpose":"Closes associated HTTP connection","prototype":"void EventHttpRequest::closeConnection()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.8.0"},"EventHttpRequest::__construct":{"id":"eventhttprequest.construct","purpose":"Constructs EventHttpRequest object","prototype":" EventHttpRequest::__construct(callable $callback [, mixed $data = ''])","return":"<p class=\"para\">   Returns EventHttpRequest object.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::findHeader":{"id":"eventhttprequest.findheader","purpose":"Finds the value belonging a header","prototype":"void EventHttpRequest::findHeader(string $key, string $type)","return":"<p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if header not found.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::free":{"id":"eventhttprequest.free","purpose":"Frees the object and removes associated events","prototype":"void EventHttpRequest::free()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getBufferEvent":{"id":"eventhttprequest.getbufferevent","purpose":"Returns EventBufferEvent object","prototype":"EventBufferEvent EventHttpRequest::getBufferEvent()","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventBufferEvent<\/span>   object.  <\/p>","versions":"PECL event >= 1.8.0"},"EventHttpRequest::getCommand":{"id":"eventhttprequest.getcommand","purpose":"Returns the request command(method)","prototype":"void EventHttpRequest::getCommand()","return":"<p class=\"para\">   Returns the request command, one of   <a href=\"class.eventhttprequest.html#eventhttprequest.constants\" class=\"link\">    <em>EventHttpRequest::CMD_*<\/em>   <\/a>   constants.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getConnection":{"id":"eventhttprequest.getconnection","purpose":"Returns EventHttpConnection object","prototype":"EventHttpConnection EventHttpRequest::getConnection()","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventHttpConnection<\/span>   object.  <\/p>","versions":"PECL event >= 1.8.0"},"EventHttpRequest::getHost":{"id":"eventhttprequest.gethost","purpose":"Returns the request host","prototype":"string EventHttpRequest::getHost()","return":"<p class=\"para\">   Returns the request host.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getInputBuffer":{"id":"eventhttprequest.getinputbuffer","purpose":"Returns the input buffer","prototype":"EventBuffer EventHttpRequest::getInputBuffer()","return":"<p class=\"para\">   Returns the input buffer.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getInputHeaders":{"id":"eventhttprequest.getinputheaders","purpose":"Returns associative array of the input headers","prototype":"array EventHttpRequest::getInputHeaders()","return":"<p class=\"para\">   Returns associative array of the input headers.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getOutputBuffer":{"id":"eventhttprequest.getoutputbuffer","purpose":"Returns the output buffer of the request","prototype":"EventBuffer EventHttpRequest::getOutputBuffer()","return":"<p class=\"para\">   Returns the output buffer of the request.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getOutputHeaders":{"id":"eventhttprequest.getoutputheaders","purpose":"Returns associative array of the output headers","prototype":"void EventHttpRequest::getOutputHeaders()","return":"<p class=\"para\"\/>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getResponseCode":{"id":"eventhttprequest.getresponsecode","purpose":"Returns the response code","prototype":"int EventHttpRequest::getResponseCode()","return":"<p class=\"para\">   Returns the response code of the request.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::getUri":{"id":"eventhttprequest.geturi","purpose":"Returns the request URI","prototype":"string EventHttpRequest::getUri()","return":"<p class=\"para\">   Returns the request URI  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::removeHeader":{"id":"eventhttprequest.removeheader","purpose":"Removes an HTTP header from the headers of the request","prototype":"void EventHttpRequest::removeHeader(string $key, string $type)","return":"<p class=\"para\">   Removes an HTTP header from the headers of the request.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::sendError":{"id":"eventhttprequest.senderror","purpose":"Send an HTML error message to the client","prototype":"void EventHttpRequest::sendError(int $error [, string $reason = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::sendReply":{"id":"eventhttprequest.sendreply","purpose":"Send an HTML reply to the client","prototype":"void EventHttpRequest::sendReply(int $code, string $reason [, EventBuffer $buf = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::sendReplyChunk":{"id":"eventhttprequest.sendreplychunk","purpose":"Send another data chunk as part of an ongoing chunked reply","prototype":"void EventHttpRequest::sendReplyChunk(EventBuffer $buf)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::sendReplyEnd":{"id":"eventhttprequest.sendreplyend","purpose":"Complete a chunked reply, freeing the request as appropriate","prototype":"void EventHttpRequest::sendReplyEnd()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventHttpRequest::sendReplyStart":{"id":"eventhttprequest.sendreplystart","purpose":"Initiate a chunked reply","prototype":"void EventHttpRequest::sendReplyStart(int $code, string $reason)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.4.0-beta"},"EventListener::__construct":{"id":"eventlistener.construct","purpose":"Creates new connection listener associated with an event base","prototype":" EventListener::__construct(EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target)","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventListener<\/span>   object representing the event connection listener.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventListener::disable":{"id":"eventlistener.disable","purpose":"Disables an event connect listener object","prototype":"bool EventListener::disable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventListener::enable":{"id":"eventlistener.enable","purpose":"Enables an event connect listener object","prototype":"bool EventListener::enable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventListener::getBase":{"id":"eventlistener.getbase","purpose":"Returns event base associated with the event listener","prototype":"void EventListener::getBase()","return":"<p class=\"para\">   Returns event base associated with the event listener.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventListener::getSocketName":{"id":"eventlistener.getsocketname","purpose":"Retreives the current address to which the  listener's socket is bound","prototype":"bool EventListener::getSocketName(string $address [, mixed $port = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.5.0"},"EventListener::setCallback":{"id":"eventlistener.setcallback","purpose":"The setCallback purpose","prototype":"void EventListener::setCallback(callable $cb [, mixed $arg = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventListener::setErrorCallback":{"id":"eventlistener.seterrorcallback","purpose":"Set event listener's error callback","prototype":"void EventListener::setErrorCallback(string $cb)","return":"<p class=\"para\"\/>","versions":"PECL event >= 1.2.6-beta"},"EventSslContext::__construct":{"id":"eventsslcontext.construct","purpose":"Constructs an OpenSSL context for use with Event classes","prototype":" EventSslContext::__construct(string $method, string $options)","return":"<p class=\"para\">   Returns   <span class=\"classname\">EventSslContext<\/span>   object.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventUtil::__construct":{"id":"eventutil.construct","purpose":"The abstract constructor","prototype":" EventUtil::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventUtil::getLastSocketErrno":{"id":"eventutil.getlastsocketerrno","purpose":"Returns the most recent socket error number","prototype":"int EventUtil::getLastSocketErrno([mixed $socket = ''])","return":"<p class=\"para\">   Returns the most recent socket error number(   <em>errno<\/em>   ).  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventUtil::getLastSocketError":{"id":"eventutil.getlastsocketerror","purpose":"Returns the most recent socket error","prototype":"string EventUtil::getLastSocketError([mixed $socket = ''])","return":"<p class=\"para\">   Returns the most recent socket error.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"EventUtil::getSocketFd":{"id":"eventutil.getsocketfd","purpose":"Returns numeric file descriptor of a socket, or stream","prototype":"int EventUtil::getSocketFd(mixed $socket)","return":"<p class=\"para\">   Returns numeric file descriptor of a socket, or stream.    <span class=\"methodname\">EventUtil::getSocketFd<\/span>   returns <strong><code>FALSE<\/code><\/strong> in case if it is whether failed to recognize the type of   the underlying file, or detected that the file descriptor associated with   <code class=\"parameter\">socket<\/code>   is not valid.  <\/p>","versions":"PECL event >= 1.7.0"},"EventUtil::getSocketName":{"id":"eventutil.getsocketname","purpose":"Retreives the current address to which the  socket is bound","prototype":"bool EventUtil::getSocketName(mixed $socket, string $address [, mixed $port = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.5.0"},"EventUtil::setSocketOption":{"id":"eventutil.setsocketoption","purpose":"Sets socket options","prototype":"bool EventUtil::setSocketOption(mixed $socket, int $level, int $optname, mixed $optval)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success. Otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL event >= 1.6.0"},"EventUtil::sslRandPoll":{"id":"eventutil.sslrandpoll","purpose":"Generates entropy by means of OpenSSL's RAND_poll()","prototype":"void EventUtil::sslRandPoll()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL event >= 1.2.6-beta"},"fam_cancel_monitor":{"id":"function.fam-cancel-monitor","purpose":"Terminate monitoring","prototype":"bool fam_cancel_monitor(resource $fam, resource $fam_monitor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_close":{"id":"function.fam-close","purpose":"Close FAM connection","prototype":"void fam_close(resource $fam)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_monitor_collection":{"id":"function.fam-monitor-collection","purpose":"Monitor a collection of files in a directory for changes","prototype":"resource fam_monitor_collection(resource $fam, string $dirname, int $depth, string $mask)","return":"<p class=\"para\">   Returns a monitoring resource or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_monitor_directory":{"id":"function.fam-monitor-directory","purpose":"Monitor a directory for changes","prototype":"resource fam_monitor_directory(resource $fam, string $dirname)","return":"<p class=\"para\">   Returns a monitoring resource or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_monitor_file":{"id":"function.fam-monitor-file","purpose":"Monitor a regular file for changes","prototype":"resource fam_monitor_file(resource $fam, string $filename)","return":"<p class=\"para\">   Returns a monitoring resource or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_next_event":{"id":"function.fam-next-event","purpose":"Get next pending FAM event","prototype":"array fam_next_event(resource $fam)","return":"<p class=\"para\">   Returns an array that contains a FAM event code in the   &#039;<em>code<\/em>&#039; element, the path of the file this event applies   to in the &#039;<em>filename<\/em>&#039; element and optionally a hostname   in the &#039;<em>hostname<\/em>&#039; element.  <\/p>  <p class=\"para\">   The possible event codes are described in detail in the   <a href=\"fam.constants.html\" class=\"link\">constants part<\/a> of this section.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_open":{"id":"function.fam-open","purpose":"Open connection to FAM daemon","prototype":"resource fam_open([string $appname = ''])","return":"<p class=\"para\">   Returns a resource representing a connection to the FAM service on success   or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_pending":{"id":"function.fam-pending","purpose":"Check for pending FAM events","prototype":"int fam_pending(resource $fam)","return":"<p class=\"para\">   Returns non-zero if events are available to be fetched using   <span class=\"function\">fam_next_event<\/span>, zero otherwise.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_resume_monitor":{"id":"function.fam-resume-monitor","purpose":"Resume suspended monitoring","prototype":"bool fam_resume_monitor(resource $fam, resource $fam_monitor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.1.0"},"fam_suspend_monitor":{"id":"function.fam-suspend-monitor","purpose":"Temporarily suspend monitoring","prototype":"bool fam_suspend_monitor(resource $fam, resource $fam_monitor)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 < 5.1.0"},"ftp_alloc":{"id":"function.ftp-alloc","purpose":"Allocates space for a file to be uploaded","prototype":"bool ftp_alloc(resource $ftp_stream, int $filesize [, string $result = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ftp_append":{"id":"function.ftp-append","purpose":"Append content of a file a another file on the FTP server","prototype":"bool ftp_append(resource $ftp, string $remote_file, string $local_file [, int $mode = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ftp_cdup":{"id":"function.ftp-cdup","purpose":"Changes to the parent directory","prototype":"bool ftp_cdup(resource $ftp_stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_chdir":{"id":"function.ftp-chdir","purpose":"Changes the current directory on a FTP server","prototype":"bool ftp_chdir(resource $ftp_stream, string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If changing directory fails, PHP will also throw a warning.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_chmod":{"id":"function.ftp-chmod","purpose":"Set permissions on a file via FTP","prototype":"int ftp_chmod(resource $ftp_stream, int $mode, string $filename)","return":"<p class=\"para\">   Returns the new file permissions on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"ftp_close":{"id":"function.ftp-close","purpose":"Closes an FTP connection","prototype":"resource ftp_close(resource $ftp_stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ftp_connect":{"id":"function.ftp-connect","purpose":"Opens an FTP connection","prototype":"resource ftp_connect(string $host [, int $port = 21 [, int $timeout = 90]])","return":"<p class=\"para\">   Returns a FTP stream on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_delete":{"id":"function.ftp-delete","purpose":"Deletes a file on the FTP server","prototype":"bool ftp_delete(resource $ftp_stream, string $path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_exec":{"id":"function.ftp-exec","purpose":"Requests execution of a command on the FTP server","prototype":"bool ftp_exec(resource $ftp_stream, string $command)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the command was successful (server sent response code:   <em>200<\/em>); otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"ftp_fget":{"id":"function.ftp-fget","purpose":"Downloads a file from the FTP server and saves to an open file","prototype":"bool ftp_fget(resource $ftp_stream, resource $handle, string $remote_file [, int $mode = '' [, int $resumepos = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_fput":{"id":"function.ftp-fput","purpose":"Uploads from an open file to the FTP server","prototype":"bool ftp_fput(resource $ftp_stream, string $remote_file, resource $handle [, int $mode = '' [, int $startpos = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_get_option":{"id":"function.ftp-get-option","purpose":"Retrieves various runtime behaviours of the current FTP stream","prototype":"mixed ftp_get_option(resource $ftp_stream, int $option)","return":"<p class=\"para\">   Returns the value on success or <strong><code>FALSE<\/code><\/strong> if the given    <code class=\"parameter\">option<\/code> is not supported. In the latter case, a   warning message is also thrown.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ftp_get":{"id":"function.ftp-get","purpose":"Downloads a file from the FTP server","prototype":"bool ftp_get(resource $ftp_stream, string $local_file, string $remote_file [, int $mode = '' [, int $resumepos = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_login":{"id":"function.ftp-login","purpose":"Logs in to an FTP connection","prototype":"bool ftp_login(resource $ftp_stream, string $username, string $password)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If login fails, PHP will also throw a warning.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_mdtm":{"id":"function.ftp-mdtm","purpose":"Returns the last modified time of the given file","prototype":"int ftp_mdtm(resource $ftp_stream, string $remote_file)","return":"<p class=\"para\">   Returns the last modified time as a Unix timestamp on success, or -1 on    error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_mkdir":{"id":"function.ftp-mkdir","purpose":"Creates a directory","prototype":"string ftp_mkdir(resource $ftp_stream, string $directory)","return":"<p class=\"para\">   Returns the newly created directory name on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_mlsd":{"id":"function.ftp-mlsd","purpose":"Returns a list of files in the given directory","prototype":"array ftp_mlsd(resource $ftp_stream, string $directory)","return":"<p class=\"para\">   Returns an array of arrays with file infos from the specified directory on success or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ftp_nb_continue":{"id":"function.ftp-nb-continue","purpose":"Continues retrieving\/sending a file (non-blocking)","prototype":"int ftp_nb_continue(resource $ftp_stream)","return":"<p class=\"para\">   Returns <strong><code>FTP_FAILED<\/code><\/strong> or <strong><code>FTP_FINISHED<\/code><\/strong>   or <strong><code>FTP_MOREDATA<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ftp_nb_fget":{"id":"function.ftp-nb-fget","purpose":"Retrieves a file from the FTP server and writes it to an open file (non-blocking)","prototype":"int ftp_nb_fget(resource $ftp_stream, resource $handle, string $remote_file [, int $mode = '' [, int $resumepos = '']])","return":"<p class=\"para\">   Returns <strong><code>FTP_FAILED<\/code><\/strong> or <strong><code>FTP_FINISHED<\/code><\/strong>   or <strong><code>FTP_MOREDATA<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ftp_nb_fput":{"id":"function.ftp-nb-fput","purpose":"Stores a file from an open file to the FTP server (non-blocking)","prototype":"int ftp_nb_fput(resource $ftp_stream, string $remote_file, resource $handle [, int $mode = '' [, int $startpos = '']])","return":"<p class=\"para\">   Returns <strong><code>FTP_FAILED<\/code><\/strong> or <strong><code>FTP_FINISHED<\/code><\/strong>   or <strong><code>FTP_MOREDATA<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ftp_nb_get":{"id":"function.ftp-nb-get","purpose":"Retrieves a file from the FTP server and writes it to a local file (non-blocking)","prototype":"int ftp_nb_get(resource $ftp_stream, string $local_file, string $remote_file [, int $mode = '' [, int $resumepos = '']])","return":"<p class=\"para\">   Returns <strong><code>FTP_FAILED<\/code><\/strong> or <strong><code>FTP_FINISHED<\/code><\/strong>   or <strong><code>FTP_MOREDATA<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ftp_nb_put":{"id":"function.ftp-nb-put","purpose":"Stores a file on the FTP server (non-blocking)","prototype":"int ftp_nb_put(resource $ftp_stream, string $remote_file, string $local_file [, int $mode = '' [, int $startpos = '']])","return":"<p class=\"para\">   Returns <strong><code>FTP_FAILED<\/code><\/strong> or <strong><code>FTP_FINISHED<\/code><\/strong>   or <strong><code>FTP_MOREDATA<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ftp_nlist":{"id":"function.ftp-nlist","purpose":"Returns a list of files in the given directory","prototype":"array ftp_nlist(resource $ftp_stream, string $directory)","return":"<p class=\"para\">   Returns an array of filenames from the specified directory on success or   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_pasv":{"id":"function.ftp-pasv","purpose":"Turns passive mode on or off","prototype":"bool ftp_pasv(resource $ftp_stream, bool $pasv)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_put":{"id":"function.ftp-put","purpose":"Uploads a file to the FTP server","prototype":"bool ftp_put(resource $ftp_stream, string $remote_file, string $local_file [, int $mode = '' [, int $startpos = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_pwd":{"id":"function.ftp-pwd","purpose":"Returns the current directory name","prototype":"string ftp_pwd(resource $ftp_stream)","return":"<p class=\"para\">   Returns the current directory name or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_quit":{"id":"function.ftp-quit","purpose":"Alias of ftp_close","prototype":" ftp_quit()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"ftp_raw":{"id":"function.ftp-raw","purpose":"Sends an arbitrary command to an FTP server","prototype":"array ftp_raw(resource $ftp_stream, string $command)","return":"<p class=\"para\">   Returns the server&#039;s response as an array of strings.   No parsing is performed on the response string, nor does    <span class=\"function\">ftp_raw<\/span> determine if the command succeeded.    <\/p>","versions":"PHP 5, PHP 7"},"ftp_rawlist":{"id":"function.ftp-rawlist","purpose":"Returns a detailed list of files in the given directory","prototype":"array ftp_rawlist(resource $ftp_stream, string $directory [, bool $recursive = ''])","return":"<p class=\"para\">   Returns an array where each element corresponds to one line of text. Returns   <strong><code>FALSE<\/code><\/strong> when passed <code class=\"parameter\">directory<\/code> is invalid.  <\/p>  <p class=\"para\">   The output is not parsed in any way. The system type identifier returned by   <span class=\"function\">ftp_systype<\/span> can be used to determine how the results    should be interpreted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_rename":{"id":"function.ftp-rename","purpose":"Renames a file or a directory on the FTP server","prototype":"bool ftp_rename(resource $ftp_stream, string $oldname, string $newname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. Upon failure (such as attempting to rename a non-existent   file), an <em>E_WARNING<\/em> error will be emitted.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_rmdir":{"id":"function.ftp-rmdir","purpose":"Removes a directory","prototype":"bool ftp_rmdir(resource $ftp_stream, string $directory)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_set_option":{"id":"function.ftp-set-option","purpose":"Set miscellaneous runtime FTP options","prototype":"bool ftp_set_option(resource $ftp_stream, int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the option could be set; <strong><code>FALSE<\/code><\/strong> if not. A warning   message will be thrown if the <code class=\"parameter\">option<\/code> is not   supported or the passed <code class=\"parameter\">value<\/code> doesn&#039;t match the   expected value for the given <code class=\"parameter\">option<\/code>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ftp_site":{"id":"function.ftp-site","purpose":"Sends a SITE command to the server","prototype":"bool ftp_site(resource $ftp_stream, string $command)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_size":{"id":"function.ftp-size","purpose":"Returns the size of the given file","prototype":"int ftp_size(resource $ftp_stream, string $remote_file)","return":"<p class=\"para\">   Returns the file size on success, or -1 on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ftp_ssl_connect":{"id":"function.ftp-ssl-connect","purpose":"Opens a Secure SSL-FTP connection","prototype":"resource ftp_ssl_connect(string $host [, int $port = 21 [, int $timeout = 90]])","return":"<p class=\"para\">   Returns a SSL-FTP stream on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"ftp_systype":{"id":"function.ftp-systype","purpose":"Returns the system type identifier of the remote FTP server","prototype":"string ftp_systype(resource $ftp_stream)","return":"<p class=\"para\">   Returns the remote system type, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"GearmanClient::addOptions":{"id":"gearmanclient.addoptions","purpose":"Add client options","prototype":"bool GearmanClient::addOptions(int $options)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanClient::addServer":{"id":"gearmanclient.addserver","purpose":"Add a job server to the client","prototype":"bool GearmanClient::addServer([string $host = 127.0.0.1 [, int $port = 4730]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addServers":{"id":"gearmanclient.addservers","purpose":"Add a list of job servers to the client","prototype":"bool GearmanClient::addServers([string $servers = 127.0.0.1:4730])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTask":{"id":"gearmanclient.addtask","purpose":"Add a task to be run in parallel","prototype":"GearmanTask GearmanClient::addTask(string $function_name, string $workload [, mixed $context = '' [, string $unique = '']])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object or <strong><code>FALSE<\/code><\/strong> if the task could not be added.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTaskBackground":{"id":"gearmanclient.addtaskbackground","purpose":"Add a background task to be run in parallel","prototype":"GearmanTask GearmanClient::addTaskBackground(string $function_name, string $workload [, mixed $context = '' [, string $unique = '']])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object or <strong><code>FALSE<\/code><\/strong> if the task could not be added.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTaskHigh":{"id":"gearmanclient.addtaskhigh","purpose":"Add a high priority task to run in parallel","prototype":"GearmanTask GearmanClient::addTaskHigh(string $function_name, string $workload [, mixed $context = '' [, string $unique = '']])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object or <strong><code>FALSE<\/code><\/strong> if the task could not be added.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTaskHighBackground":{"id":"gearmanclient.addtaskhighbackground","purpose":"Add a high priority background task to be run in parallel","prototype":"GearmanTask GearmanClient::addTaskHighBackground(string $function_name, string $workload [, mixed $context = '' [, string $unique = '']])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object or <strong><code>FALSE<\/code><\/strong> if the task could not be added.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTaskLow":{"id":"gearmanclient.addtasklow","purpose":"Add a low priority task to run in parallel","prototype":"GearmanTask GearmanClient::addTaskLow(string $function_name, string $workload [, mixed $context = '' [, string $unique = '']])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object or <strong><code>FALSE<\/code><\/strong> if the task could not be added.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTaskLowBackground":{"id":"gearmanclient.addtasklowbackground","purpose":"Add a low priority background task to be run in parallel","prototype":"GearmanTask GearmanClient::addTaskLowBackground(string $function_name, string $workload [, mixed $context = '' [, string $unique = '']])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object or <strong><code>FALSE<\/code><\/strong> if the task could not be added.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::addTaskStatus":{"id":"gearmanclient.addtaskstatus","purpose":"Add a task to get status","prototype":"GearmanTask GearmanClient::addTaskStatus(string $job_handle [, string $context = ''])","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::clearCallbacks":{"id":"gearmanclient.clearcallbacks","purpose":"Clear all task callback functions","prototype":"bool GearmanClient::clearCallbacks()","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::clone":{"id":"gearmanclient.clone","purpose":"Create a copy of a GearmanClient object","prototype":"GearmanClient GearmanClient::clone()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanClient<\/span> on success, <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::__construct":{"id":"gearmanclient.construct","purpose":"Create a GearmanClient instance","prototype":" GearmanClient::__construct()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanClient<\/span> object.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::context":{"id":"gearmanclient.context","purpose":"Get the application context","prototype":"string GearmanClient::context()","return":"<p class=\"para\">   The same context data structure set with  <span class=\"methodname\">GearmanClient::setContext<\/span>  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanClient::data":{"id":"gearmanclient.data","purpose":"Get the application data (deprecated)","prototype":"string GearmanClient::data()","return":"<p class=\"para\">   The same string data set with  <span class=\"methodname\">GearmanClient::setData<\/span>  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanClient::do":{"id":"gearmanclient.do","purpose":"Run a single task and return a result [deprecated]","prototype":"string GearmanClient::do(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   A string representing the results of running a task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doBackground":{"id":"gearmanclient.dobackground","purpose":"Run a task in the background","prototype":"string GearmanClient::doBackground(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   The job handle for the submitted task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doHigh":{"id":"gearmanclient.dohigh","purpose":"Run a single high priority task","prototype":"string GearmanClient::doHigh(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   A string representing the results of running a task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doHighBackground":{"id":"gearmanclient.dohighbackground","purpose":"Run a high priority task in the background","prototype":"string GearmanClient::doHighBackground(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   The job handle for the submitted task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doJobHandle":{"id":"gearmanclient.dojobhandle","purpose":"Get the job handle for the running task","prototype":"string GearmanClient::doJobHandle()","return":"<p class=\"para\">   The job handle for the running task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doLow":{"id":"gearmanclient.dolow","purpose":"Run a single low priority task","prototype":"string GearmanClient::doLow(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   A string representing the results of running a task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doLowBackground":{"id":"gearmanclient.dolowbackground","purpose":"Run a low priority task in the background","prototype":"string GearmanClient::doLowBackground(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   The job handle for the submitted task.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::doNormal":{"id":"gearmanclient.donormal","purpose":"Run a single task and return a result","prototype":"string GearmanClient::doNormal(string $function_name, string $workload [, string $unique = ''])","return":"<p class=\"para\">   A string representing the results of running a task.  <\/p>","versions":""},"GearmanClient::doStatus":{"id":"gearmanclient.dostatus","purpose":"Get the status for the running task","prototype":"array GearmanClient::doStatus()","return":"<p class=\"para\">   An array representing the percentage completion given as a fraction, with the   first element the numerator and the second element the denomintor.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::echo":{"id":"gearmanclient.echo","purpose":"Send data to all job servers to see if they echo it back [deprecated]","prototype":"bool GearmanClient::echo(string $workload)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::error":{"id":"gearmanclient.error","purpose":"Returns an error string for the last error encountered","prototype":"string GearmanClient::error()","return":"<p class=\"para\">   A human readable error string.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::getErrno":{"id":"gearmanclient.geterrno","purpose":"Get an errno value","prototype":"int GearmanClient::getErrno()","return":"<p class=\"para\">   A valid Gearman errno.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::jobStatus":{"id":"gearmanclient.jobstatus","purpose":"Get the status of a background job","prototype":"array GearmanClient::jobStatus(string $job_handle)","return":"<p class=\"para\">   An array containing status information for the job corresponding to the supplied   job handle.  The first array element is a boolean indicating whether the job is   even known, the second is a boolean indicating whether the job is still running,   and the third and fourth elements correspond to the numerator and denominator   of the fractional completion percentage, respectively.  <\/p>","versions":"PECL gearman >= 0.5.0"},"gearman_job_status":{"id":"gearmanclient.jobstatus","purpose":"Get the status of a background job","prototype":"array gearman_job_status(string $job_handle)","return":"<p class=\"para\">   An array containing status information for the job corresponding to the supplied   job handle.  The first array element is a boolean indicating whether the job is   even known, the second is a boolean indicating whether the job is still running,   and the third and fourth elements correspond to the numerator and denominator   of the fractional completion percentage, respectively.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::ping":{"id":"gearmanclient.ping","purpose":"Send data to all job servers to see if they echo it back","prototype":"bool GearmanClient::ping(string $workload)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"GearmanClient::removeOptions":{"id":"gearmanclient.removeoptions","purpose":"Remove client options","prototype":"bool GearmanClient::removeOptions(int $options)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanClient::returnCode":{"id":"gearmanclient.returncode","purpose":"Get the last Gearman return code","prototype":"int GearmanClient::returnCode()","return":"<p class=\"para\">   A valid Gearman return code.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::runTasks":{"id":"gearmanclient.runtasks","purpose":"Run a list of tasks in parallel","prototype":"bool GearmanClient::runTasks()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setClientCallback":{"id":"gearmanclient.setclientcallback","purpose":"Callback function when there is a data packet for a task (deprecated)","prototype":"void GearmanClient::setClientCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanClient::setCompleteCallback":{"id":"gearmanclient.setcompletecallback","purpose":"Set a function to be called on task completion","prototype":"bool GearmanClient::setCompleteCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setContext":{"id":"gearmanclient.setcontext","purpose":"Set application context","prototype":"bool GearmanClient::setContext(string $context)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanClient::setCreatedCallback":{"id":"gearmanclient.setcreatedcallback","purpose":"Set a callback for when a task is queued","prototype":"bool GearmanClient::setCreatedCallback(string $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setData":{"id":"gearmanclient.setdata","purpose":"Set application data (deprecated)","prototype":"bool GearmanClient::setData(string $data)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanClient::setDataCallback":{"id":"gearmanclient.setdatacallback","purpose":"Callback function when there is a data packet for a task","prototype":"bool GearmanClient::setDataCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanClient::setExceptionCallback":{"id":"gearmanclient.setexceptioncallback","purpose":"Set a callback for worker exceptions","prototype":"bool GearmanClient::setExceptionCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setFailCallback":{"id":"gearmanclient.setfailcallback","purpose":"Set callback for job failure","prototype":"bool GearmanClient::setFailCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setOptions":{"id":"gearmanclient.setoptions","purpose":"Set client options","prototype":"bool GearmanClient::setOptions(int $options)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setStatusCallback":{"id":"gearmanclient.setstatuscallback","purpose":"Set a callback for collecting task status","prototype":"bool GearmanClient::setStatusCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setTimeout":{"id":"gearmanclient.settimeout","purpose":"Set socket I\/O activity timeout","prototype":"bool GearmanClient::setTimeout(int $timeout)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanClient::setWarningCallback":{"id":"gearmanclient.setwarningcallback","purpose":"Set a callback for worker warnings","prototype":"bool GearmanClient::setWarningCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::setWorkloadCallback":{"id":"gearmanclient.setworkloadcallback","purpose":"Set a callback for accepting incremental data updates","prototype":"bool GearmanClient::setWorkloadCallback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanClient::timeout":{"id":"gearmanclient.timeout","purpose":"Get current socket I\/O activity timeout value","prototype":"int GearmanClient::timeout()","return":"<p class=\"para\">   Timeout in milliseconds to wait for I\/O activity.  A negative value means an infinite timeout.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::complete":{"id":"gearmanjob.complete","purpose":"Send the result and complete status (deprecated)","prototype":"bool GearmanJob::complete(string $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanJob::__construct":{"id":"gearmanjob.construct","purpose":"Create a GearmanJob instance","prototype":" GearmanJob::__construct()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanJob<\/span> object.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::data":{"id":"gearmanjob.data","purpose":"Send data for a running job (deprecated)","prototype":"bool GearmanJob::data(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanJob::exception":{"id":"gearmanjob.exception","purpose":"Send exception for running job (deprecated)","prototype":"bool GearmanJob::exception(string $exception)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanJob::fail":{"id":"gearmanjob.fail","purpose":"Send fail status (deprecated)","prototype":"bool GearmanJob::fail()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanJob::functionName":{"id":"gearmanjob.functionname","purpose":"Get function name","prototype":"string GearmanJob::functionName()","return":"<p class=\"para\">   The name of a function.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::handle":{"id":"gearmanjob.handle","purpose":"Get the job handle","prototype":"string GearmanJob::handle()","return":"<p class=\"para\">   An opaque job handle.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::returnCode":{"id":"gearmanjob.returncode","purpose":"Get last return code","prototype":"int GearmanJob::returnCode()","return":"<p class=\"para\">   A valid Gearman return code.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::sendComplete":{"id":"gearmanjob.sendcomplete","purpose":"Send the result and complete status","prototype":"bool GearmanJob::sendComplete(string $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::sendData":{"id":"gearmanjob.senddata","purpose":"Send data for a running job","prototype":"bool GearmanJob::sendData(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::sendException":{"id":"gearmanjob.sendexception","purpose":"Send exception for running job (exception)","prototype":"bool GearmanJob::sendException(string $exception)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::sendFail":{"id":"gearmanjob.sendfail","purpose":"Send fail status","prototype":"bool GearmanJob::sendFail()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::sendStatus":{"id":"gearmanjob.sendstatus","purpose":"Send status","prototype":"bool GearmanJob::sendStatus(int $numerator, int $denominator)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::sendWarning":{"id":"gearmanjob.sendwarning","purpose":"Send a warning","prototype":"bool GearmanJob::sendWarning(string $warning)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanJob::setReturn":{"id":"gearmanjob.setreturn","purpose":"Set a return value","prototype":"bool GearmanJob::setReturn(int $gearman_return_t)","return":"<p class=\"para\">   Description...  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::status":{"id":"gearmanjob.status","purpose":"Send status (deprecated)","prototype":"bool GearmanJob::status(int $numerator, int $denominator)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanJob::unique":{"id":"gearmanjob.unique","purpose":"Get the unique identifier","prototype":"string GearmanJob::unique()","return":"<p class=\"para\">   An opaque unique identifier.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::warning":{"id":"gearmanjob.warning","purpose":"Send a warning (deprecated)","prototype":"bool GearmanJob::warning(string $warning)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanJob::workload":{"id":"gearmanjob.workload","purpose":"Get workload","prototype":"string GearmanJob::workload()","return":"<p class=\"para\">   Serialized data.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanJob::workloadSize":{"id":"gearmanjob.workloadsize","purpose":"Get size of work load","prototype":"int GearmanJob::workloadSize()","return":"<p class=\"para\">   The size in bytes.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::__construct":{"id":"gearmantask.construct","purpose":"Create a GearmanTask instance","prototype":" GearmanTask::__construct()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> object.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::create":{"id":"gearmantask.create","purpose":"Create a task (deprecated)","prototype":"GearmanTask GearmanTask::create()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanTask<\/span> oject or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanTask::data":{"id":"gearmantask.data","purpose":"Get data returned for a task","prototype":"string GearmanTask::data()","return":"<p class=\"para\">   The serialized data, or <strong><code>FALSE<\/code><\/strong> if no data is present.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::dataSize":{"id":"gearmantask.datasize","purpose":"Get the size of returned data","prototype":"int GearmanTask::dataSize()","return":"<p class=\"para\">   The data size, or <strong><code>FALSE<\/code><\/strong> if there is no data.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::function":{"id":"gearmantask.function","purpose":"Get associated function name (deprecated)","prototype":"string GearmanTask::function()","return":"<p class=\"para\">   A function name.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanTask::functionName":{"id":"gearmantask.functionname","purpose":"Get associated function name","prototype":"string GearmanTask::functionName()","return":"<p class=\"para\">   A function name.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanTask::isKnown":{"id":"gearmantask.isknown","purpose":"Determine if task is known","prototype":"bool GearmanTask::isKnown()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the task is known, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::isRunning":{"id":"gearmantask.isrunning","purpose":"Test whether the task is currently running","prototype":"bool GearmanTask::isRunning()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the task is running, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::jobHandle":{"id":"gearmantask.jobhandle","purpose":"Get the job handle","prototype":"string GearmanTask::jobHandle()","return":"<p class=\"para\">   The opaque job handle.  <\/p>","versions":"PECL gearman >= 0.5.0"},"gearman_job_handle":{"id":"gearmantask.jobhandle","purpose":"Get the job handle","prototype":"string gearman_job_handle()","return":"<p class=\"para\">   The opaque job handle.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::recvData":{"id":"gearmantask.recvdata","purpose":"Read work or result data into a buffer for a task","prototype":"array GearmanTask::recvData(int $data_len)","return":"<p class=\"para\">   An array whose first element is the length of data read and the second is the data buffer.   Returns <strong><code>FALSE<\/code><\/strong> if the read failed.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::returnCode":{"id":"gearmantask.returncode","purpose":"Get the last return code","prototype":"int GearmanTask::returnCode()","return":"<p class=\"para\">   A valid Gearman return code.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::sendData":{"id":"gearmantask.senddata","purpose":"Send data for a task (deprecated)","prototype":"int GearmanTask::sendData(string $data)","return":"<p class=\"para\">   The length of data sent, or <strong><code>FALSE<\/code><\/strong> if the send failed.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanTask::sendWorkload":{"id":"gearmantask.sendworkload","purpose":"Send data for a task","prototype":"int GearmanTask::sendWorkload(string $data)","return":"<p class=\"para\">   The length of data sent, or <strong><code>FALSE<\/code><\/strong> if the send failed.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanTask::taskDenominator":{"id":"gearmantask.taskdenominator","purpose":"Get completion percentage denominator","prototype":"int GearmanTask::taskDenominator()","return":"<p class=\"para\">   A number between 0 and 100, or <strong><code>FALSE<\/code><\/strong> if cannot be determined.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::taskNumerator":{"id":"gearmantask.tasknumerator","purpose":"Get completion percentage numerator","prototype":"int GearmanTask::taskNumerator()","return":"<p class=\"para\">   A number between 0 and 100, or <strong><code>FALSE<\/code><\/strong> if cannot be determined.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanTask::unique":{"id":"gearmantask.unique","purpose":"Get the unique identifier for a task","prototype":"string GearmanTask::unique()","return":"<p class=\"para\">   The unique identifier, or <strong><code>FALSE<\/code><\/strong> if no identifier is assigned.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanTask::uuid":{"id":"gearmantask.uuid","purpose":"Get the unique identifier for a task (deprecated)","prototype":"string GearmanTask::uuid()","return":"<p class=\"para\">   The unique identifier, or <strong><code>FALSE<\/code><\/strong> if no identifier is assigned.  <\/p>","versions":"PECL gearman <= 0.5.0"},"GearmanWorker::addFunction":{"id":"gearmanworker.addfunction","purpose":"Register and add callback function","prototype":"bool GearmanWorker::addFunction(string $function_name, callable $function [, mixed $context = '' [, int $timeout = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::addOptions":{"id":"gearmanworker.addoptions","purpose":"Add worker options","prototype":"bool GearmanWorker::addOptions(int $option)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::addServer":{"id":"gearmanworker.addserver","purpose":"Add a job server","prototype":"bool GearmanWorker::addServer([string $host = 127.0.0.1 [, int $port = 4730]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::addServers":{"id":"gearmanworker.addservers","purpose":"Add job servers","prototype":"bool GearmanWorker::addServers(string $servers)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::clone":{"id":"gearmanworker.clone","purpose":"Create a copy of the worker","prototype":"void GearmanWorker::clone()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanWorker<\/span> object  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::__construct":{"id":"gearmanworker.construct","purpose":"Create a GearmanWorker instance","prototype":" GearmanWorker::__construct()","return":"<p class=\"para\">   A <span class=\"classname\">GearmanWorker<\/span> object  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::echo":{"id":"gearmanworker.echo","purpose":"Test job server response","prototype":"bool GearmanWorker::echo(string $workload)","return":"<p class=\"para\">   Standard Gearman return value.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::error":{"id":"gearmanworker.error","purpose":"Get the last error encountered","prototype":"string GearmanWorker::error()","return":"<p class=\"para\">   An error string.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::getErrno":{"id":"gearmanworker.geterrno","purpose":"Get errno","prototype":"int GearmanWorker::getErrno()","return":"<p class=\"para\">   A valid errno.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::options":{"id":"gearmanworker.options","purpose":"Get worker options","prototype":"int GearmanWorker::options()","return":"<p class=\"para\">   The options currently set for the worker.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::register":{"id":"gearmanworker.register","purpose":"Register a function with the job server","prototype":"bool GearmanWorker::register(string $function_name [, int $timeout = ''])","return":"<p class=\"para\">   A standard Gearman return value.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::removeOptions":{"id":"gearmanworker.removeoptions","purpose":"Remove worker options","prototype":"bool GearmanWorker::removeOptions(int $option)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::returnCode":{"id":"gearmanworker.returncode","purpose":"Get last Gearman return code","prototype":"int GearmanWorker::returnCode()","return":"<p class=\"para\">   A valid Gearman return code.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::setId":{"id":"gearmanworker.setid","purpose":"Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers","prototype":"bool GearmanWorker::setId(string $id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"GearmanWorker::setOptions":{"id":"gearmanworker.setoptions","purpose":"Set worker options","prototype":"bool GearmanWorker::setOptions(int $option)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.5.0"},"GearmanWorker::setTimeout":{"id":"gearmanworker.settimeout","purpose":"Set socket I\/O activity timeout","prototype":"bool GearmanWorker::setTimeout(int $timeout)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::timeout":{"id":"gearmanworker.timeout","purpose":"Get socket I\/O activity timeout","prototype":"int GearmanWorker::timeout()","return":"<p class=\"para\">   A time period is milliseconds.  A negative value indicates an infinite timeout.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::unregister":{"id":"gearmanworker.unregister","purpose":"Unregister a function name with the job servers","prototype":"bool GearmanWorker::unregister(string $function_name)","return":"<p class=\"para\">   A standard Gearman return value.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::unregisterAll":{"id":"gearmanworker.unregisterall","purpose":"Unregister all function names with the job servers","prototype":"bool GearmanWorker::unregisterAll()","return":"<p class=\"para\">   A standard Gearman return value.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::wait":{"id":"gearmanworker.wait","purpose":"Wait for activity from one of the job servers","prototype":"bool GearmanWorker::wait()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.6.0"},"GearmanWorker::work":{"id":"gearmanworker.work","purpose":"Wait for and perform jobs","prototype":"bool GearmanWorker::work()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gearman >= 0.5.0"},"gopher_parsedir":{"id":"function.gopher-parsedir","purpose":"Translate a gopher formatted directory entry into an associative array","prototype":"array gopher_parsedir(string $dirent)","return":"<p class=\"para\">   Returns an associative array whose components are:    <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <em>type<\/em> - One of the       <em>GOPHER_XXX<\/em> constants.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>title<\/em> - The name of the resource.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>path<\/em> - The path of the resource.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>host<\/em> - The domain name of the host that has      this document (or directory).     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <em>port<\/em> - The port at which to connect on      <em>host<\/em>.     <\/span>    <\/li>   <\/ul>  <\/p>  <p class=\"para\">   Upon failure, the additional <em>data<\/em> entry of the   returned array will hold the parsed line.  <\/p>","versions":"PECL net_gopher >= 0.1"},"gupnp_context_get_host_ip":{"id":"function.gupnp-context-get-host-ip","purpose":"Get the IP address","prototype":"string gupnp_context_get_host_ip(resource $context)","return":"<p class=\"para\">   Returns the IP address for the current context and <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_get_port":{"id":"function.gupnp-context-get-port","purpose":"Get the port","prototype":"int gupnp_context_get_port(resource $context)","return":"<p class=\"para\">   Returns the port number for the current context and <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_get_subscription_timeout":{"id":"function.gupnp-context-get-subscription-timeout","purpose":"Get the event subscription timeout","prototype":"int gupnp_context_get_subscription_timeout(resource $context)","return":"<p class=\"para\">   The event subscription timeout in seconds.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_host_path":{"id":"function.gupnp-context-host-path","purpose":"Start hosting","prototype":"bool gupnp_context_host_path(resource $context, string $local_path, string $server_path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_new":{"id":"function.gupnp-context-new","purpose":"Create a new context","prototype":"resource gupnp_context_new([string $host_ip = '' [, int $port = '']])","return":"<p class=\"para\">   A context identifier.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_set_subscription_timeout":{"id":"function.gupnp-context-set-subscription-timeout","purpose":"Sets the event subscription timeout","prototype":"void gupnp_context_set_subscription_timeout(resource $context, int $timeout)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_timeout_add":{"id":"function.gupnp-context-timeout-add","purpose":"Sets a function to be called at regular intervals","prototype":"bool gupnp_context_timeout_add(resource $context, int $timeout, mixed $callback [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_context_unhost_path":{"id":"function.gupnp-context-unhost-path","purpose":"Stop hosting","prototype":"bool gupnp_context_unhost_path(resource $context, string $server_path)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_control_point_browse_start":{"id":"function.gupnp-control-point-browse-start","purpose":"Start browsing","prototype":"bool gupnp_control_point_browse_start(resource $cpoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_control_point_browse_stop":{"id":"function.gupnp-control-point-browse-stop","purpose":"Stop browsing","prototype":"bool gupnp_control_point_browse_stop(resource $cpoint)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_control_point_callback_set":{"id":"function.gupnp-control-point-callback-set","purpose":"Set control point callback","prototype":"bool gupnp_control_point_callback_set(resource $cpoint, int $signal, mixed $callback [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_control_point_new":{"id":"function.gupnp-control-point-new","purpose":"Create a new control point","prototype":"resource gupnp_control_point_new(resource $context, string $target)","return":"<p class=\"para\">   A control point identifier.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_device_action_callback_set":{"id":"function.gupnp-device-action-callback-set","purpose":"Set device callback function","prototype":"bool gupnp_device_action_callback_set(resource $root_device, int $signal, string $action_name, mixed $callback [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_device_info_get_service":{"id":"function.gupnp-device-info-get-service","purpose":"Get the service with type","prototype":"resource gupnp_device_info_get_service(resource $root_device, string $type)","return":"<p class=\"para\">   A service identifier.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_device_info_get":{"id":"function.gupnp-device-info-get","purpose":"Get info of root device","prototype":"array gupnp_device_info_get(resource $root_device)","return":"<p class=\"para\">   Return array wich contains the information of the root device (like location, url, udn and etc).  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_root_device_get_available":{"id":"function.gupnp-root-device-get-available","purpose":"Check whether root device is available","prototype":"bool gupnp_root_device_get_available(resource $root_device)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_root_device_get_relative_location":{"id":"function.gupnp-root-device-get-relative-location","purpose":"Get the relative location of root device","prototype":"string gupnp_root_device_get_relative_location(resource $root_device)","return":"<p class=\"para\">   The relative location of root device  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_root_device_new":{"id":"function.gupnp-root-device-new","purpose":"Create a new root device","prototype":"resource gupnp_root_device_new(resource $context, string $location, string $description_dir)","return":"<p class=\"para\">   A root device identifier.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_root_device_set_available":{"id":"function.gupnp-root-device-set-available","purpose":"Set whether or not root_device is available","prototype":"bool gupnp_root_device_set_available(resource $root_device, bool $available)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_root_device_start":{"id":"function.gupnp-root-device-start","purpose":"Start main loop","prototype":"bool gupnp_root_device_start(resource $root_device)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_root_device_stop":{"id":"function.gupnp-root-device-stop","purpose":"Stop main loop","prototype":"bool gupnp_root_device_stop(resource $root_device)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_action_get":{"id":"function.gupnp-service-action-get","purpose":"Retrieves the specified action arguments","prototype":"mixed gupnp_service_action_get(resource $action, string $name, int $type)","return":"<p class=\"para\">   The value of the variable.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_action_return_error":{"id":"function.gupnp-service-action-return-error","purpose":"Return error code","prototype":"bool gupnp_service_action_return_error(resource $action, int $error_code [, string $error_description = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_action_return":{"id":"function.gupnp-service-action-return","purpose":"Return successfully","prototype":"bool gupnp_service_action_return(resource $action)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_action_set":{"id":"function.gupnp-service-action-set","purpose":"Sets the specified action return values","prototype":"bool gupnp_service_action_set(resource $action, string $name, int $type, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_freeze_notify":{"id":"function.gupnp-service-freeze-notify","purpose":"Freeze new notifications","prototype":"bool gupnp_service_freeze_notify(resource $service)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_info_get_introspection":{"id":"function.gupnp-service-info-get-introspection","purpose":"Get resource introspection of service","prototype":"mixed gupnp_service_info_get_introspection(resource $proxy [, mixed $callback = '' [, mixed $arg = '']])","return":"<p class=\"para\">   Return true if callback function was defined.   Return introspection identifier if callback function was omited.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_info_get":{"id":"function.gupnp-service-info-get","purpose":"Get full info of service","prototype":"array gupnp_service_info_get(resource $proxy)","return":"<p class=\"para\">   Return array wich contains the information of the service (like location, url, udn and etc).  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_introspection_get_state_variable":{"id":"function.gupnp-service-introspection-get-state-variable","purpose":"Returns the state variable data","prototype":"array gupnp_service_introspection_get_state_variable(resource $introspection, string $variable_name)","return":"<p class=\"para\">   Return the state variable data or <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_notify":{"id":"function.gupnp-service-notify","purpose":"Notifies listening clients","prototype":"bool gupnp_service_notify(resource $service, string $name, int $type, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_action_get":{"id":"function.gupnp-service-proxy-action-get","purpose":"Send action to the service and get value","prototype":"mixed gupnp_service_proxy_action_get(resource $proxy, string $action, string $name, int $type)","return":"<p class=\"para\">   Return value of the action.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_action_set":{"id":"function.gupnp-service-proxy-action-set","purpose":"Send action to the service and set value","prototype":"bool gupnp_service_proxy_action_set(resource $proxy, string $action, string $name, mixed $value, int $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_add_notify":{"id":"function.gupnp-service-proxy-add-notify","purpose":"Sets up callback for variable change notification","prototype":"bool gupnp_service_proxy_add_notify(resource $proxy, string $value, int $type, mixed $callback [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_callback_set":{"id":"function.gupnp-service-proxy-callback-set","purpose":"Set service proxy callback for signal","prototype":"bool gupnp_service_proxy_callback_set(resource $proxy, int $signal, mixed $callback [, mixed $arg = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_get_subscribed":{"id":"function.gupnp-service-proxy-get-subscribed","purpose":"Check whether subscription is valid to the service","prototype":"bool gupnp_service_proxy_get_subscribed(resource $proxy)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_remove_notify":{"id":"function.gupnp-service-proxy-remove-notify","purpose":"Cancels the variable change notification","prototype":"bool gupnp_service_proxy_remove_notify(resource $proxy, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_proxy_send_action":{"id":"gupnp-service-proxy-send-action","purpose":"Send action with multiple parameters synchronously","prototype":"array gupnp_service_proxy_send_action(resource $proxy, string $action, array $in_params, array $out_params)","return":"<p class=\"para\">   Return <code class=\"parameter\">out_params<\/code> array with values or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL gupnp >= 0.2.0"},"gupnp_service_proxy_set_subscribed":{"id":"function.gupnp-service-proxy-set-subscribed","purpose":"(Un)subscribes to the service","prototype":"bool gupnp_service_proxy_set_subscribed(resource $proxy, bool $subscribed)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"gupnp_service_thaw_notify":{"id":"function.gupnp-service-thaw-notify","purpose":"Sends out any pending notifications and stops queuing of new ones","prototype":"bool gupnp_service_thaw_notify(resource $service)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL gupnp >= 0.1.0"},"hw_api::checkin":{"id":"hwapi.checkin","purpose":"Checks in an object","prototype":"bool hw_api::checkin(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::checkout":{"id":"hwapi.checkout","purpose":"Checks out an object","prototype":"bool hw_api::checkout(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::children":{"id":"hwapi.children","purpose":"Returns children of an object","prototype":"array hw_api::children(array $parameter)","return":"<p class=\"para\">   The return value is an array of objects of type   <span class=\"classname\">HW_API_Object<\/span> or   <span class=\"classname\">HW_API_Error<\/span>.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::content":{"id":"hwapi.content","purpose":"Returns content of an object","prototype":"HW_API_Content hw_api::content(array $parameter)","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">hw_api_content<\/span>.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::copy":{"id":"hwapi.copy","purpose":"Copies physically","prototype":"hw_api_content hw_api::copy(array $parameter)","return":"<p class=\"para\">   Returns the copied object.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::dbstat":{"id":"hwapi.dbstat","purpose":"Returns statistics about database server","prototype":"hw_api_object hw_api::dbstat(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::dcstat":{"id":"hwapi.dcstat","purpose":"Returns statistics about document cache server","prototype":"hw_api_object hw_api::dcstat(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::dstanchors":{"id":"hwapi.dstanchors","purpose":"Returns a list of all destination anchors","prototype":"array hw_api::dstanchors(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::dstofsrcanchor":{"id":"hwapi.dstofsrcanchor","purpose":"Returns destination of a source anchor","prototype":"hw_api_object hw_api::dstofsrcanchor(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::find":{"id":"hwapi.find","purpose":"Search for objects","prototype":"array hw_api::find(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::ftstat":{"id":"hwapi.ftstat","purpose":"Returns statistics about fulltext server","prototype":"hw_api_object hw_api::ftstat(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::hwstat":{"id":"hwapi.hwstat","purpose":"Returns statistics about Hyperwave server","prototype":"hw_api_object hw_api::hwstat(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::identify":{"id":"hwapi.identify","purpose":"Log into Hyperwave Server","prototype":"bool hw_api::identify(array $parameter)","return":"<p class=\"para\">   Returns an object of type<span class=\"classname\">HW_API_Error<\/span> if   identification failed or <strong><code>TRUE<\/code><\/strong> if it was successful.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::info":{"id":"hwapi.info","purpose":"Returns information about server configuration","prototype":"array hw_api::info(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::insert":{"id":"hwapi.insert","purpose":"Inserts a new object","prototype":"hw_api_object hw_api::insert(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::insertanchor":{"id":"hwapi.insertanchor","purpose":"Inserts a new object of type anchor","prototype":"hw_api_object hw_api::insertanchor(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::insertcollection":{"id":"hwapi.insertcollection","purpose":"Inserts a new object of type collection","prototype":"hw_api_object hw_api::insertcollection(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::insertdocument":{"id":"hwapi.insertdocument","purpose":"Inserts a new object of type document","prototype":"hw_api_object hw_api::insertdocument(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::link":{"id":"hwapi.link","purpose":"Creates a link to an object","prototype":"bool hw_api::link(array $parameter)","return":"<p class=\"para\">   The function returns <strong><code>TRUE<\/code><\/strong> on success or an error object.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::lock":{"id":"hwapi.lock","purpose":"Locks an object","prototype":"bool hw_api::lock(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::move":{"id":"hwapi.move","purpose":"Moves object between collections","prototype":"bool hw_api::move(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::object":{"id":"hwapi.object","purpose":"Retrieve attribute information","prototype":"hw_api_object hw_api::object(array $parameter)","return":"<p class=\"para\">   The returned object is an instance of class   <span class=\"classname\">HW_API_Object<\/span> on success or   <span class=\"classname\">HW_API_Error<\/span> if an error occurred.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::objectbyanchor":{"id":"hwapi.objectbyanchor","purpose":"Returns the object an anchor belongs to","prototype":"hw_api_object hw_api::objectbyanchor(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::parents":{"id":"hwapi.parents","purpose":"Returns parents of an object","prototype":"array hw_api::parents(array $parameter)","return":"<p class=\"para\">   The return value is an array of objects of type   <span class=\"classname\">HW_API_Object<\/span> or   <span class=\"classname\">HW_API_Error<\/span>.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::remove":{"id":"hwapi.remove","purpose":"Delete an object","prototype":"bool hw_api::remove(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::replace":{"id":"hwapi.replace","purpose":"Replaces an object","prototype":"hw_api_object hw_api::replace(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::setcommittedversion":{"id":"hwapi.setcommittedversion","purpose":"Commits version other than last version","prototype":"hw_api_object hw_api::setcommittedversion(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::srcanchors":{"id":"hwapi.srcanchors","purpose":"Returns a list of all source anchors","prototype":"array hw_api::srcanchors(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::srcsofdst":{"id":"hwapi.srcsofdst","purpose":"Returns source of a destination object","prototype":"array hw_api::srcsofdst(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::unlock":{"id":"hwapi.unlock","purpose":"Unlocks a locked object","prototype":"bool hw_api::unlock(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or an object of class HW_API_Error.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::user":{"id":"hwapi.user","purpose":"Returns the own user object","prototype":"hw_api_object hw_api::user(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api::userlist":{"id":"hwapi.userlist","purpose":"Returns a list of all logged in users","prototype":"array hw_api::userlist(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_attribute::key":{"id":"hwapi.attribute-key","purpose":"Returns key of the attribute","prototype":"string hw_api_attribute::key()","return":"<p class=\"para\">   Returns the name of the attribute as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_attribute::langdepvalue":{"id":"hwapi.attribute-langdepvalue","purpose":"Returns value for a given language","prototype":"string hw_api_attribute::langdepvalue(string $language)","return":"<p class=\"para\">   Returns the value of the attribute as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_attribute::value":{"id":"hwapi.attribute-value","purpose":"Returns value of the attribute","prototype":"string hw_api_attribute::value()","return":"<p class=\"para\">   Returns the value, as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_attribute::values":{"id":"hwapi.attribute-values","purpose":"Returns all values of the attribute","prototype":"array hw_api_attribute::values()","return":"<p class=\"para\">   Returns an array of attribute values.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_content::mimetype":{"id":"hwapi.content-mimetype","purpose":"Returns mimetype","prototype":"string hw_api_content::mimetype()","return":"<p class=\"para\">   Returns the mimetype as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_content::read":{"id":"hwapi.content-read","purpose":"Read content","prototype":"string hw_api_content::read(string $buffer, int $len)","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_error::count":{"id":"hwapi.error-count","purpose":"Returns number of reasons","prototype":"int hw_api_error::count()","return":"<p class=\"para\">   Returns the number of errors, as an integer.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_error::reason":{"id":"hwapi.error-reason","purpose":"Returns reason of error","prototype":"HW_API_Reason hw_api_error::reason()","return":"<p class=\"para\">     <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::assign":{"id":"hwapi.object-assign","purpose":"Clones object","prototype":"bool hw_api_object::assign(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::attreditable":{"id":"hwapi.object-attreditable","purpose":"Checks whether an attribute is editable","prototype":"bool hw_api_object::attreditable(array $parameter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the attribute is editable, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::count":{"id":"hwapi.object-count","purpose":"Returns number of attributes","prototype":"int hw_api_object::count(array $parameter)","return":"<p class=\"para\">   Returns the number as an integer.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::insert":{"id":"hwapi.object-insert","purpose":"Inserts new attribute","prototype":"bool hw_api_object::insert(HW_API_Attribute $attribute)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::remove":{"id":"hwapi.object-remove","purpose":"Removes attribute","prototype":"bool hw_api_object::remove(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::title":{"id":"hwapi.object-title","purpose":"Returns the title attribute","prototype":"string hw_api_object::title(array $parameter)","return":"<p class=\"para\">   Returns the title as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_object::value":{"id":"hwapi.object-value","purpose":"Returns value of attribute","prototype":"string hw_api_object::value(string $name)","return":"<p class=\"para\">   Returns the value of the attribute with the given name or <strong><code>FALSE<\/code><\/strong> if an   error occurred.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_reason::description":{"id":"hwapi.reason-description","purpose":"Returns description of reason","prototype":"string hw_api_reason::description()","return":"<p class=\"para\">   Returns the description, as a string.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hw_api_reason::type":{"id":"hwapi.reason-type","purpose":"Returns type of reason","prototype":"HW_API_Reason hw_api_reason::type()","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">HW_API_Reason<\/span>.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hwapi_attribute_new":{"id":"function.hwapi-attribute-new","purpose":"Creates instance of class hw_api_attribute","prototype":"HW_API_Attribute hwapi_attribute_new([string $name = '' [, string $value = '']])","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">hw_api_attribute<\/span>.  <\/p>","versions":"PHP 5 < 5.2.0"},"hwapi_content_new":{"id":"function.hwapi-content-new","purpose":"Create new instance of class hw_api_content","prototype":"HW_API_Content hwapi_content_new(string $content, string $mimetype)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 < 5.2.0"},"hwapi_hgcsp":{"id":"function.hwapi-hgcsp","purpose":"Returns object of class hw_api","prototype":"HW_API hwapi_hgcsp(string $hostname [, int $port = ''])","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">HW_API<\/span>.  <\/p>","versions":"PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN"},"hwapi_object_new":{"id":"function.hwapi-object-new","purpose":"Creates a new instance of class hwapi_object_new","prototype":"hw_api_object hwapi_object_new(array $parameter)","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 < 5.2.0"},"ldap_8859_to_t61":{"id":"function.ldap-8859-to-t61","purpose":"Translate 8859 characters to t61 characters","prototype":"string ldap_8859_to_t61(string $value)","return":"<p class=\"para\">   Return the <em>t61<\/em> translation of   <code class=\"parameter\">value<\/code>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"ldap_add":{"id":"function.ldap-add","purpose":"Add entries to LDAP directory","prototype":"bool ldap_add(resource $link_identifier, string $dn, array $entry [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_bind":{"id":"function.ldap-bind","purpose":"Bind to LDAP directory","prototype":"bool ldap_bind(resource $link_identifier [, string $bind_rdn = '' [, string $bind_password = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_close":{"id":"function.ldap-close","purpose":"Alias of ldap_unbind","prototype":" ldap_close()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"ldap_compare":{"id":"function.ldap-compare","purpose":"Compare value of attribute found in entry specified with DN","prototype":"mixed ldap_compare(resource $link_identifier, string $dn, string $attribute, string $value [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">value<\/code> matches otherwise returns   <strong><code>FALSE<\/code><\/strong>. Returns -1 on error.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"ldap_connect":{"id":"function.ldap-connect","purpose":"Connect to an LDAP server","prototype":"resource ldap_connect([string $host = '' [, int $port = 389]])","return":"<p class=\"para\">   Returns a positive LDAP link identifier when the provided hostname\/port combination or LDAP URI   seems plausible. It&#039;s a syntactic check of the provided parameters but the server(s) will not   be contacted! If the syntactic check fails it returns <strong><code>FALSE<\/code><\/strong>.   When OpenLDAP 2.x.x is used, <span class=\"function\">ldap_connect<\/span> will always   return a <span class=\"type\">resource<\/span> as it does not actually connect but just   initializes the connecting parameters.  The actual connect happens with   the next calls to ldap_* funcs, usually with   <span class=\"function\">ldap_bind<\/span>.  <\/p>  <p class=\"para\">   If no arguments are specified then the link identifier of the already   opened link will be returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_control_paged_result_response":{"id":"function.ldap-control-paged-result-response","purpose":"Retrieve the LDAP pagination cookie","prototype":"bool ldap_control_paged_result_response(resource $link, resource $result [, string $cookie = '' [, int $estimated = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ldap_control_paged_result":{"id":"function.ldap-control-paged-result","purpose":"Send LDAP pagination control","prototype":"bool ldap_control_paged_result(resource $link, int $pagesize [, bool $iscritical = '' [, string $cookie = \"\"]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ldap_count_entries":{"id":"function.ldap-count-entries","purpose":"Count the number of entries in a search","prototype":"int ldap_count_entries(resource $link_identifier, resource $result_identifier)","return":"<p class=\"para\">   Returns number of entries in the result or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_delete":{"id":"function.ldap-delete","purpose":"Delete an entry from a directory","prototype":"bool ldap_delete(resource $link_identifier, string $dn [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_dn2ufn":{"id":"function.ldap-dn2ufn","purpose":"Convert DN to User Friendly Naming format","prototype":"string ldap_dn2ufn(string $dn)","return":"<p class=\"para\">   Returns the user friendly name.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_err2str":{"id":"function.ldap-err2str","purpose":"Convert LDAP error number into string error message","prototype":"string ldap_err2str(int $errno)","return":"<p class=\"para\">   Returns the error message, as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_errno":{"id":"function.ldap-errno","purpose":"Return the LDAP error number of the last LDAP command","prototype":"int ldap_errno(resource $link_identifier)","return":"<p class=\"para\">   Return the LDAP error number of the last LDAP command for this   link.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_error":{"id":"function.ldap-error","purpose":"Return the LDAP error message of the last LDAP command","prototype":"string ldap_error(resource $link_identifier)","return":"<p class=\"para\">   Returns string error message.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_escape":{"id":"function.ldap-escape","purpose":"Escape a string for use in an LDAP filter or DN","prototype":"string ldap_escape(string $value [, string $ignore = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns the escaped string.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"ldap_exop_passwd":{"id":"function.ldap-exop-passwd","purpose":"PASSWD extended operation helper","prototype":"mixed ldap_exop_passwd(resource $link [, string $user = '' [, string $oldpw = '' [, string $newpw = '' [, array $serverctrls = '']]]])","return":"<p class=\"para\">    Returns the generated password if <code class=\"parameter\">newpw<\/code> is empty or omitted.    Otherwise returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ldap_exop_refresh":{"id":"function.ldap-exop-refresh","purpose":"Refresh extended operation helper","prototype":"int ldap_exop_refresh(resource $link, string $dn, int $ttl)","return":"<p class=\"para\">   From RFC:   The responseTtl field is the time in seconds which the server chooses   to have as the time-to-live field for that entry.  It must not be any   smaller than that which the client requested, and it may be larger.   However, to allow servers to maintain a relatively accurate   directory, and to prevent clients from abusing the dynamic   extensions, servers are permitted to shorten a client-requested   time-to-live value, down to a minimum of 86400 seconds (one day).   <strong><code>FALSE<\/code><\/strong> will be returned on error.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ldap_exop_whoami":{"id":"function.ldap-exop-whoami","purpose":"WHOAMI extended operation helper","prototype":"string ldap_exop_whoami(resource $link)","return":"<p class=\"para\">   The data returned by the server, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ldap_exop":{"id":"function.ldap-exop","purpose":"Performs an extended operation","prototype":"mixed ldap_exop(resource $link, string $reqoid [, string $reqdata = '' [, array $servercontrols = '' [, string $retdata = '' [, string $retoid = '']]]])","return":"<p class=\"para\">   When used with <code class=\"parameter\">retdata<\/code>, returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on error.   When used without <code class=\"parameter\">retdata<\/code>, returns a result identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ldap_explode_dn":{"id":"function.ldap-explode-dn","purpose":"Splits DN into its component parts","prototype":"array ldap_explode_dn(string $dn, int $with_attrib)","return":"<p class=\"para\">   Returns an array of all DN components,  or <strong><code>FALSE<\/code><\/strong> on failure.   The first element in the array has <em>count<\/em> key and   represents the number of returned values, next elements are numerically   indexed DN components.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_first_attribute":{"id":"function.ldap-first-attribute","purpose":"Return first attribute","prototype":"string ldap_first_attribute(resource $link_identifier, resource $result_entry_identifier)","return":"<p class=\"para\">   Returns the first attribute in the entry on success and <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_first_entry":{"id":"function.ldap-first-entry","purpose":"Return first result id","prototype":"resource ldap_first_entry(resource $link_identifier, resource $result_identifier)","return":"<p class=\"para\">   Returns the result entry identifier for the first entry on success and   <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_first_reference":{"id":"function.ldap-first-reference","purpose":"Return first reference","prototype":"resource ldap_first_reference(resource $link, resource $result)","return":"","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ldap_free_result":{"id":"function.ldap-free-result","purpose":"Free result memory","prototype":"bool ldap_free_result(resource $result_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_get_attributes":{"id":"function.ldap-get-attributes","purpose":"Get attributes from a search result entry","prototype":"array ldap_get_attributes(resource $link_identifier, resource $result_entry_identifier)","return":"<p class=\"para\">   Returns a complete entry information in a multi-dimensional array   on success and <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_get_dn":{"id":"function.ldap-get-dn","purpose":"Get the DN of a result entry","prototype":"string ldap_get_dn(resource $link_identifier, resource $result_entry_identifier)","return":"<p class=\"para\">   Returns the DN of the result entry and <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_get_entries":{"id":"function.ldap-get-entries","purpose":"Get all result entries","prototype":"array ldap_get_entries(resource $link_identifier, resource $result_identifier)","return":"<p class=\"para\">   Returns a complete result information in a multi-dimensional array on   success and <strong><code>FALSE<\/code><\/strong> on error.  <\/p>  <p class=\"para\">   The structure of the array is as follows.   The attribute index is converted to lowercase. (Attributes are   case-insensitive for directory servers, but not when used as   array indices.)   <div class=\"informalexample\">    <div class=\"example-contents\"><div class=\"cdata\"><pre>return_value[&quot;count&quot;] = number of entries in the resultreturn_value[0] : refers to the details of first entryreturn_value[i][&quot;dn&quot;] =  DN of the ith entry in the resultreturn_value[i][&quot;count&quot;] = number of attributes in ith entryreturn_value[i][j] = NAME of the jth attribute in the ith entry in the resultreturn_value[i][&quot;attribute&quot;][&quot;count&quot;] = number of values for                                        attribute in ith entryreturn_value[i][&quot;attribute&quot;][j] = jth value of attribute in ith entry<\/pre><\/div>    <\/div>   <\/div>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_get_option":{"id":"function.ldap-get-option","purpose":"Get the current value for given option","prototype":"bool ldap_get_option(resource $link_identifier, int $option, mixed $retval)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ldap_get_values_len":{"id":"function.ldap-get-values-len","purpose":"Get all binary values from a result entry","prototype":"array ldap_get_values_len(resource $link_identifier, resource $result_entry_identifier, string $attribute)","return":"<p class=\"para\">   Returns an array of values for the attribute on success and <strong><code>FALSE<\/code><\/strong> on   error. Individual values are accessed by integer index in the array. The   first index is 0. The number of values can be found by indexing &quot;count&quot;   in the resultant array.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_get_values":{"id":"function.ldap-get-values","purpose":"Get all values from a result entry","prototype":"array ldap_get_values(resource $link_identifier, resource $result_entry_identifier, string $attribute)","return":"<p class=\"para\">   Returns an array of values for the attribute on success and <strong><code>FALSE<\/code><\/strong> on   error. The number of values can be found by indexing &quot;count&quot; in the   resultant array. Individual values are accessed by integer index in the   array.  The first index is 0.  <\/p>  <p class=\"para\">   LDAP allows more than one entry for an attribute, so it can, for example,   store a number of email addresses for one person&#039;s directory entry all   labeled with the attribute &quot;mail&quot;   <div class=\"informalexample\">    <pre class=\"literallayout\">    return_value[&quot;count&quot;] = number of values for attribute    return_value[0] = first value of attribute    return_value[i] = ith value of attribute    <\/pre>   <\/div>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_list":{"id":"function.ldap-list","purpose":"Single-level search","prototype":"resource ldap_list(resource $link_identifier, string $base_dn, string $filter [, array $attributes = '' [, int $attrsonly = '' [, int $sizelimit = '' [, int $timelimit = '' [, int $deref = '' [, array $serverctrls = '']]]]]])","return":"<p class=\"para\">   Returns a search result identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_mod_add":{"id":"function.ldap-mod-add","purpose":"Add attribute values to current attributes","prototype":"bool ldap_mod_add(resource $link_identifier, string $dn, array $entry [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_mod_del":{"id":"function.ldap-mod-del","purpose":"Delete attribute values from current attributes","prototype":"bool ldap_mod_del(resource $link_identifier, string $dn, array $entry [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_mod_replace":{"id":"function.ldap-mod-replace","purpose":"Replace attribute values with new ones","prototype":"bool ldap_mod_replace(resource $link_identifier, string $dn, array $entry [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_modify_batch":{"id":"function.ldap-modify-batch","purpose":"Batch and execute modifications on an LDAP entry","prototype":"bool ldap_modify_batch(resource $link_identifier, string $dn, array $entry [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5.4 >= 5.4.26, PHP 5.5 >= 5.5.10, PHP 5.6 >= 5.6.0, PHP 7"},"ldap_modify":{"id":"function.ldap-modify","purpose":"Alias of ldap_mod_replace","prototype":" ldap_modify()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"ldap_next_attribute":{"id":"function.ldap-next-attribute","purpose":"Get the next attribute in result","prototype":"string ldap_next_attribute(resource $link_identifier, resource $result_entry_identifier)","return":"<p class=\"para\">   Returns the next attribute in an entry on success and <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_next_entry":{"id":"function.ldap-next-entry","purpose":"Get next result entry","prototype":"resource ldap_next_entry(resource $link_identifier, resource $result_entry_identifier)","return":"<p class=\"para\">   Returns entry identifier for the next entry in the result whose entries   are being read starting with <span class=\"function\">ldap_first_entry<\/span>. If   there are no more entries in the result then it returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_next_reference":{"id":"function.ldap-next-reference","purpose":"Get next reference","prototype":"resource ldap_next_reference(resource $link, resource $entry)","return":"","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ldap_parse_exop":{"id":"function.ldap-parse-exop","purpose":"Parse result object from an LDAP extended operation","prototype":"bool ldap_parse_exop(resource $link, resource $result [, string $retdata = '' [, string $retoid = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ldap_parse_reference":{"id":"function.ldap-parse-reference","purpose":"Extract information from reference entry","prototype":"bool ldap_parse_reference(resource $link, resource $entry, array $referrals)","return":"","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ldap_parse_result":{"id":"function.ldap-parse-result","purpose":"Extract information from result","prototype":"bool ldap_parse_result(resource $link, resource $result, int $errcode [, string $matcheddn = '' [, string $errmsg = '' [, array $referrals = '' [, array $serverctrls = '']]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ldap_read":{"id":"function.ldap-read","purpose":"Read an entry","prototype":"resource ldap_read(resource $link_identifier, string $base_dn, string $filter [, array $attributes = '' [, int $attrsonly = '' [, int $sizelimit = '' [, int $timelimit = '' [, int $deref = '' [, array $serverctrls = '']]]]]])","return":"<p class=\"para\">   Returns a search result identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_rename":{"id":"function.ldap-rename","purpose":"Modify the name of an entry","prototype":"bool ldap_rename(resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn [, array $serverctrls = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ldap_sasl_bind":{"id":"function.ldap-sasl-bind","purpose":"Bind to LDAP directory using SASL","prototype":"bool ldap_sasl_bind(resource $link [, string $binddn = '' [, string $password = '' [, string $sasl_mech = '' [, string $sasl_realm = '' [, string $sasl_authc_id = '' [, string $sasl_authz_id = '' [, string $props = '']]]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ldap_search":{"id":"function.ldap-search","purpose":"Search LDAP tree","prototype":"resource ldap_search(resource $link_identifier, string $base_dn, string $filter [, array $attributes = '' [, int $attrsonly = '' [, int $sizelimit = '' [, int $timelimit = '' [, int $deref = '' [, array $serverctrls = '']]]]]])","return":"<p class=\"para\">   Returns a search result identifier or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ldap_set_option":{"id":"function.ldap-set-option","purpose":"Set the value of the given option","prototype":"bool ldap_set_option(resource $link_identifier, int $option, mixed $newval)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ldap_set_rebind_proc":{"id":"function.ldap-set-rebind-proc","purpose":"Set a callback function to do re-binds on referral chasing","prototype":"bool ldap_set_rebind_proc(resource $link, callable $callback)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ldap_sort":{"id":"function.ldap-sort","purpose":"Sort LDAP result entries on the client side","prototype":"bool ldap_sort(resource $link, resource $result, string $sortfilter)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ldap_start_tls":{"id":"function.ldap-start-tls","purpose":"Start TLS","prototype":"bool ldap_start_tls(resource $link)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"ldap_t61_to_8859":{"id":"function.ldap-t61-to-8859","purpose":"Translate t61 characters to 8859 characters","prototype":"string ldap_t61_to_8859(string $value)","return":"","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"ldap_unbind":{"id":"function.ldap-unbind","purpose":"Unbind from LDAP directory","prototype":"bool ldap_unbind(resource $link_identifier)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"Memcache::add":{"id":"memcache.add","purpose":"Add an item to the server","prototype":"bool Memcache::add(string $key, mixed $var [, int $flag = '' [, int $expire = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Returns <strong><code>FALSE<\/code><\/strong> if such key already exist. For the rest   <span class=\"function\">Memcache::add<\/span> behaves similarly to   <span class=\"function\">Memcache::set<\/span>.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::addServer":{"id":"memcache.addserver","purpose":"Add a memcached server to connection pool","prototype":"bool Memcache::addServer(string $host [, int $port = 11211 [, bool $persistent = '' [, int $weight = '' [, int $timeout = '' [, int $retry_interval = '' [, bool $status = '' [, callable $failure_callback = '' [, int $timeoutms = '']]]]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 2.0.0"},"Memcache::close":{"id":"memcache.close","purpose":"Close memcached server connection","prototype":"bool Memcache::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.4.0"},"Memcache::connect":{"id":"memcache.connect","purpose":"Open memcached server connection","prototype":"bool Memcache::connect(string $host [, int $port = '' [, int $timeout = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::decrement":{"id":"memcache.decrement","purpose":"Decrement item's value","prototype":"int Memcache::decrement(string $key [, int $value = 1])","return":"<p class=\"para\">   Returns item&#039;s new value on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::delete":{"id":"memcache.delete","purpose":"Delete item from the server","prototype":"bool Memcache::delete(string $key [, int $timeout = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::flush":{"id":"memcache.flush","purpose":"Flush all existing items at the server","prototype":"bool Memcache::flush()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 1.0.0"},"Memcache::get":{"id":"memcache.get","purpose":"Retrieve item from the server","prototype":"array Memcache::get(string $key [, array $flags = '', array $keys])","return":"<p class=\"para\">   Returns the value associated with the <code class=\"parameter\">key<\/code> or   an array of found key-value pairs when <code class=\"parameter\">key<\/code> is an <span class=\"type\">array<\/span>.   Returns <strong><code>FALSE<\/code><\/strong> on failure, <code class=\"parameter\">key<\/code> is not found or   <code class=\"parameter\">key<\/code> is an empty <span class=\"type\">array<\/span>.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::getExtendedStats":{"id":"memcache.getextendedstats","purpose":"Get statistics from all servers in pool","prototype":"array Memcache::getExtendedStats([string $type = '' [, int $slabid = '' [, int $limit = 100]]])","return":"<p class=\"para\">   Returns a two-dimensional associative array of server statistics or <strong><code>FALSE<\/code><\/strong>   on failure.  <\/p>","versions":"PECL memcache >= 2.0.0"},"Memcache::getServerStatus":{"id":"memcache.getserverstatus","purpose":"Returns server status","prototype":"int Memcache::getServerStatus(string $host [, int $port = 11211])","return":"<p class=\"para\">   Returns a the servers status. 0 if server is failed, non-zero otherwise  <\/p>","versions":"PECL memcache >= 2.1.0"},"Memcache::getStats":{"id":"memcache.getstats","purpose":"Get statistics of the server","prototype":"array Memcache::getStats([string $type = '' [, int $slabid = '' [, int $limit = 100]]])","return":"<p class=\"para\">   Returns an associative array of server statistics or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::getVersion":{"id":"memcache.getversion","purpose":"Return version of the server","prototype":"string Memcache::getVersion()","return":"<p class=\"para\">   Returns a string of server version number or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::increment":{"id":"memcache.increment","purpose":"Increment item's value","prototype":"int Memcache::increment(string $key [, int $value = 1])","return":"<p class=\"para\">   Returns new items value on success  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::pconnect":{"id":"memcache.pconnect","purpose":"Open memcached server persistent connection","prototype":"mixed Memcache::pconnect(string $host [, int $port = '' [, int $timeout = '']])","return":"<p class=\"para\">   Returns a Memcache object or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.4.0"},"Memcache::replace":{"id":"memcache.replace","purpose":"Replace value of the existing item","prototype":"bool Memcache::replace(string $key, mixed $var [, int $flag = '' [, int $expire = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::set":{"id":"memcache.set","purpose":"Store data at the server","prototype":"bool Memcache::set(string $key, mixed $var [, int $flag = '' [, int $expire = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcache::setCompressThreshold":{"id":"memcache.setcompressthreshold","purpose":"Enable automatic compression of large values","prototype":"bool Memcache::setCompressThreshold(int $threshold [, float $min_savings = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 2.0.0"},"Memcache::setServerParams":{"id":"memcache.setserverparams","purpose":"Changes server parameters and status at runtime","prototype":"bool Memcache::setServerParams(string $host [, int $port = 11211 [, int $timeout = '' [, int $retry_interval = '' [, bool $status = '' [, callable $failure_callback = '']]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcache >= 2.1.0"},"memcache_debug":{"id":"function.memcache-debug","purpose":"Turn debug output on\/off","prototype":"bool memcache_debug(bool $on_off)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if PHP was built with --enable-debug option, otherwise   returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PECL memcache >= 0.2.0"},"Memcached::add":{"id":"memcached.add","purpose":"Add an item under a new key","prototype":"bool Memcached::add(string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key already exists.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::addByKey":{"id":"memcached.addbykey","purpose":"Add an item under a new key on a specific server","prototype":"bool Memcached::addByKey(string $server_key, string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key already exists.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::addServer":{"id":"memcached.addserver","purpose":"Add a server to the server pool","prototype":"bool Memcached::addServer(string $host, int $port [, int $weight = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::addServers":{"id":"memcached.addservers","purpose":"Add multiple servers to the server pool","prototype":"bool Memcached::addServers(array $servers)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 0.1.1"},"Memcached::append":{"id":"memcached.append","purpose":"Append data to an existing item","prototype":"bool Memcached::append(string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::appendByKey":{"id":"memcached.appendbykey","purpose":"Append data to an existing item on a specific server","prototype":"bool Memcached::appendByKey(string $server_key, string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::cas":{"id":"memcached.cas","purpose":"Compare and swap an item","prototype":"bool Memcached::cas(float $cas_token, string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_DATA_EXISTS<\/code><\/strong> if the item you are trying   to store has been modified since you last fetched it.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::casByKey":{"id":"memcached.casbykey","purpose":"Compare and swap an item on a specific server","prototype":"bool Memcached::casByKey(float $cas_token, string $server_key, string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_DATA_EXISTS<\/code><\/strong> if the item you are trying   to store has been modified since you last fetched it.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::__construct":{"id":"memcached.construct","purpose":"Create a Memcached instance","prototype":" Memcached::__construct([string $persistent_id = ''])","return":"<p class=\"para\">   A Memcached object.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::decrement":{"id":"memcached.decrement","purpose":"Decrement numeric item's value","prototype":"int Memcached::decrement(string $key [, int $offset = 1 [, int $initial_value = '' [, int $expiry = '']]])","return":"<p class=\"para\">   Returns item&#039;s new value on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::decrementByKey":{"id":"memcached.decrementbykey","purpose":"Decrement numeric item's value, stored on a specific server","prototype":"int Memcached::decrementByKey(string $server_key, string $key [, int $offset = 1 [, int $initial_value = '' [, int $expiry = '']]])","return":"<p class=\"para\">   Returns item&#039;s new value on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::delete":{"id":"memcached.delete","purpose":"Delete an item","prototype":"bool Memcached::delete(string $key [, int $time = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTFOUND<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::deleteByKey":{"id":"memcached.deletebykey","purpose":"Delete an item from a specific server","prototype":"bool Memcached::deleteByKey(string $server_key, string $key [, int $time = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTFOUND<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::deleteMulti":{"id":"memcached.deletemulti","purpose":"Delete multiple items","prototype":"array Memcached::deleteMulti(array $keys [, int $time = ''])","return":"<p class=\"para\">   Returns array indexed by <code class=\"parameter\">keys<\/code> and where values are indicating whether operation succeeded or not.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTFOUND<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::deleteMultiByKey":{"id":"memcached.deletemultibykey","purpose":"Delete multiple items from a specific server","prototype":"bool Memcached::deleteMultiByKey(string $server_key, array $keys [, int $time = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTFOUND<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::fetch":{"id":"memcached.fetch","purpose":"Fetch the next result","prototype":"array Memcached::fetch()","return":"<p class=\"para\">   Returns the next result or <strong><code>FALSE<\/code><\/strong> otherwise.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_END<\/code><\/strong> if result set is exhausted.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::fetchAll":{"id":"memcached.fetchall","purpose":"Fetch all the remaining results","prototype":"array Memcached::fetchAll()","return":"<p class=\"para\">   Returns the results or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::flush":{"id":"memcached.flush","purpose":"Invalidate all items in the cache","prototype":"bool Memcached::flush([int $delay = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::get":{"id":"memcached.get","purpose":"Retrieve an item","prototype":"mixed Memcached::get(string $key [, callable $cache_cb = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns the value stored in the cache or <strong><code>FALSE<\/code><\/strong> otherwise.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTFOUND<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getAllKeys":{"id":"memcached.getallkeys","purpose":"Gets the keys stored on all the servers","prototype":"array Memcached::getAllKeys()","return":"<p class=\"para\">   Returns the keys stored on all the servers on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::getByKey":{"id":"memcached.getbykey","purpose":"Retrieve an item from a specific server","prototype":"mixed Memcached::getByKey(string $server_key, string $key [, callable $cache_cb = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns the value stored in the cache or <strong><code>FALSE<\/code><\/strong> otherwise.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTFOUND<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getDelayed":{"id":"memcached.getdelayed","purpose":"Request multiple items","prototype":"bool Memcached::getDelayed(array $keys [, bool $with_cas = '' [, callable $value_cb = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getDelayedByKey":{"id":"memcached.getdelayedbykey","purpose":"Request multiple items from a specific server","prototype":"bool Memcached::getDelayedByKey(string $server_key, array $keys [, bool $with_cas = '' [, callable $value_cb = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getMulti":{"id":"memcached.getmulti","purpose":"Retrieve multiple items","prototype":"mixed Memcached::getMulti(array $keys [, int $flags = ''])","return":"<p class=\"para\">   Returns the array of found items or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getMultiByKey":{"id":"memcached.getmultibykey","purpose":"Retrieve multiple items from a specific server","prototype":"array Memcached::getMultiByKey(string $server_key, array $keys [, int $flags = ''])","return":"<p class=\"para\">   Returns the array of found items or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getOption":{"id":"memcached.getoption","purpose":"Retrieve a Memcached option value","prototype":"mixed Memcached::getOption(int $option)","return":"<p class=\"para\">   Returns the value of the requested option, or <strong><code>FALSE<\/code><\/strong> on   error.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getResultCode":{"id":"memcached.getresultcode","purpose":"Return the result code of the last operation","prototype":"int Memcached::getResultCode()","return":"<p class=\"para\">   Result code of the last Memcached operation.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getResultMessage":{"id":"memcached.getresultmessage","purpose":"Return the message describing the result of the last operation","prototype":"string Memcached::getResultMessage()","return":"<p class=\"para\">   Message describing the result of the last Memcached operation.  <\/p>","versions":"PECL memcached >= 1.0.0"},"Memcached::getServerByKey":{"id":"memcached.getserverbykey","purpose":"Map a key to a server","prototype":"array Memcached::getServerByKey(string $server_key)","return":"<p class=\"para\">   Returns an array containing three keys of <em>host<\/em>,   <em>port<\/em>, and <em>weight<\/em> on success or <strong><code>FALSE<\/code><\/strong>   on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getServerList":{"id":"memcached.getserverlist","purpose":"Get the list of the servers in the pool","prototype":"array Memcached::getServerList()","return":"<p class=\"para\">   The list of all servers in the server pool.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getStats":{"id":"memcached.getstats","purpose":"Get server pool statistics","prototype":"array Memcached::getStats()","return":"<p class=\"para\">   Array of server statistics, one entry per server.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::getVersion":{"id":"memcached.getversion","purpose":"Get server pool version info","prototype":"array Memcached::getVersion()","return":"<p class=\"para\">   Array of server versions, one entry per server.  <\/p>","versions":"PECL memcached >= 0.1.5"},"Memcached::increment":{"id":"memcached.increment","purpose":"Increment numeric item's value","prototype":"int Memcached::increment(string $key [, int $offset = 1 [, int $initial_value = '' [, int $expiry = '']]])","return":"<p class=\"para\">   Returns new item&#039;s value on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::incrementByKey":{"id":"memcached.incrementbykey","purpose":"Increment numeric item's value, stored on a specific server","prototype":"int Memcached::incrementByKey(string $server_key, string $key [, int $offset = 1 [, int $initial_value = '' [, int $expiry = '']]])","return":"<p class=\"para\">   Returns new item&#039;s value on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::isPersistent":{"id":"memcached.ispersistent","purpose":"Check if a persitent connection to memcache is being used","prototype":"bool Memcached::isPersistent()","return":"<p class=\"para\">   Returns true if Memcache instance uses a persistent connection, false otherwise.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::isPristine":{"id":"memcached.ispristine","purpose":"Check if the instance was recently created","prototype":"bool Memcached::isPristine()","return":"<p class=\"para\">   Returns the true if instance is recently created, false otherwise.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::prepend":{"id":"memcached.prepend","purpose":"Prepend data to an existing item","prototype":"bool Memcached::prepend(string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::prependByKey":{"id":"memcached.prependbykey","purpose":"Prepend data to an existing item on a specific server","prototype":"bool Memcached::prependByKey(string $server_key, string $key, string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::quit":{"id":"memcached.quit","purpose":"Close any open connections","prototype":"bool Memcached::quit()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::replace":{"id":"memcached.replace","purpose":"Replace the item under an existing key","prototype":"bool Memcached::replace(string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::replaceByKey":{"id":"memcached.replacebykey","purpose":"Replace the item under an existing key on a specific server","prototype":"bool Memcached::replaceByKey(string $server_key, string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   The  <span class=\"methodname\">Memcached::getResultCode<\/span> will return   <strong><code>Memcached::RES_NOTSTORED<\/code><\/strong> if the key does not exist.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::resetServerList":{"id":"memcached.resetserverlist","purpose":"Clears all servers from the server list","prototype":"bool Memcached::resetServerList()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::set":{"id":"memcached.set","purpose":"Store an item","prototype":"bool Memcached::set(string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::setByKey":{"id":"memcached.setbykey","purpose":"Store an item on a specific server","prototype":"bool Memcached::setByKey(string $server_key, string $key, mixed $value [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::setMulti":{"id":"memcached.setmulti","purpose":"Store multiple items","prototype":"bool Memcached::setMulti(array $items [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::setMultiByKey":{"id":"memcached.setmultibykey","purpose":"Store multiple items on a specific server","prototype":"bool Memcached::setMultiByKey(string $server_key, array $items [, int $expiration = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::setOption":{"id":"memcached.setoption","purpose":"Set a Memcached option","prototype":"bool Memcached::setOption(int $option, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 0.1.0"},"Memcached::setOptions":{"id":"memcached.setoptions","purpose":"Set Memcached options","prototype":"bool Memcached::setOptions(array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::setSaslAuthData":{"id":"memcached.setsaslauthdata","purpose":"Set the credentials to use for authentication","prototype":"void Memcached::setSaslAuthData(string $username, string $password)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::touch":{"id":"memcached.touch","purpose":"Set a new expiration on an item","prototype":"bool Memcached::touch(string $key, int $expiration)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 2.0.0"},"Memcached::touchByKey":{"id":"memcached.touchbykey","purpose":"Set a new expiration on an item on a specific server","prototype":"bool Memcached::touchByKey(string $server_key, string $key, int $expiration)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   Use  <span class=\"methodname\">Memcached::getResultCode<\/span> if necessary.  <\/p>","versions":"PECL memcached >= 2.0.0"},"mqseries_back":{"id":"function.mqseries-back","purpose":"MQSeries MQBACK","prototype":"void mqseries_back(resource $hconn, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_begin":{"id":"function.mqseries-begin","purpose":"MQseries MQBEGIN","prototype":"void mqseries_begin(resource $hconn, array $beginOptions, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_close":{"id":"function.mqseries-close","purpose":"MQSeries MQCLOSE","prototype":"void mqseries_close(resource $hconn, resource $hobj, int $options, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_cmit":{"id":"function.mqseries-cmit","purpose":"MQSeries MQCMIT","prototype":"void mqseries_cmit(resource $hconn, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_conn":{"id":"function.mqseries-conn","purpose":"MQSeries MQCONN","prototype":"void mqseries_conn(string $qManagerName, resource $hconn, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_connx":{"id":"function.mqseries-connx","purpose":"MQSeries MQCONNX","prototype":"void mqseries_connx(string $qManagerName, array $connOptions, resource $hconn, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_disc":{"id":"function.mqseries-disc","purpose":"MQSeries MQDISC","prototype":"void mqseries_disc(resource $hconn, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_get":{"id":"function.mqseries-get","purpose":"MQSeries MQGET","prototype":"void mqseries_get(resource $hConn, resource $hObj, array $md, array $gmo, int $bufferLength, string $msg, int $data_length, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_inq":{"id":"function.mqseries-inq","purpose":"MQSeries MQINQ","prototype":"void mqseries_inq(resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource $intAttr, int $charAttrLength, resource $charAttr, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_open":{"id":"function.mqseries-open","purpose":"MQSeries MQOPEN","prototype":"void mqseries_open(resource $hconn, array $objDesc, int $option, resource $hobj, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_put1":{"id":"function.mqseries-put1","purpose":"MQSeries MQPUT1","prototype":"void mqseries_put1(resource $hconn, resource $objDesc, resource $msgDesc, resource $pmo, string $buffer, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_put":{"id":"function.mqseries-put","purpose":"MQSeries MQPUT","prototype":"void mqseries_put(resource $hConn, resource $hObj, array $md, array $pmo, string $message, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_set":{"id":"function.mqseries-set","purpose":"MQSeries MQSET","prototype":"void mqseries_set(resource $hConn, resource $hObj, int $selectorCount, array $selectors, int $intAttrCount, array $intAttrs, int $charAttrLength, array $charAttrs, resource $compCode, resource $reason)","return":"<p class=\"para\">No value is returned.<\/p>","versions":"PECL mqseries >= 0.10.0"},"mqseries_strerror":{"id":"function.mqseries-strerror","purpose":"Returns the error message corresponding to a result code (MQRC)","prototype":"string mqseries_strerror(int $reason)","return":"<p class=\"para\">string representation of the reason code message.<\/p>","versions":"PECL mqseries >= 0.10.0"},"checkdnsrr":{"id":"function.checkdnsrr","purpose":"Check DNS records corresponding to a given Internet host name or IP address","prototype":"bool checkdnsrr(string $host [, string $type = \"MX\"])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if any records are found; returns <strong><code>FALSE<\/code><\/strong> if no records   were found or if an error occurred.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"closelog":{"id":"function.closelog","purpose":"Close connection to system logger","prototype":"bool closelog()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"define_syslog_variables":{"id":"function.define-syslog-variables","purpose":"Initializes all syslog related variables","prototype":"void define_syslog_variables()","return":"<p class=\"para\">   No value is returned.  <\/p>  <table class=\"doctable table\">   <caption><strong>Syslog variables<\/strong><\/caption>       <thead>     <tr>      <th>Variable<\/th>      <th>Constant equal<\/th>      <th>Meaning<\/th>      <th>Notes<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><var class=\"varname\">$LOG_EMERG<\/var><\/td>      <td><strong><code>LOG_EMERG<\/code><\/strong><\/td>      <td>System is unusable<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_ALERT<\/var><\/td>      <td><strong><code>LOG_ALERT<\/code><\/strong><\/td>      <td>Immediate action required<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_CRIT<\/var><\/td>      <td><strong><code>LOG_CRIT<\/code><\/strong><\/td>      <td>Critical conditions<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_ERR<\/var><\/td>      <td><strong><code>LOG_ERR<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_WARNING<\/var><\/td>      <td><strong><code>LOG_WARNING<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_NOTICE<\/var><\/td>      <td><strong><code>LOG_NOTICE<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_INFO<\/var><\/td>      <td><strong><code>LOG_INFO<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_DEBUG<\/var><\/td>      <td><strong><code>LOG_DEBUG<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_KERN<\/var><\/td>      <td><strong><code>LOG_KERN<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_USER<\/var><\/td>      <td><strong><code>LOG_USER<\/code><\/strong><\/td>      <td>Genetic user level<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_MAIL<\/var><\/td>      <td><strong><code>LOG_MAIL<\/code><\/strong><\/td>      <td>Log to email<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_DAEMON<\/var><\/td>      <td><strong><code>LOG_DAEMON<\/code><\/strong><\/td>      <td>Other system daemons<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_AUTH<\/var><\/td>      <td><strong><code>LOG_AUTH<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_SYSLOG<\/var><\/td>      <td><strong><code>LOG_SYSLOG<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LPR<\/var><\/td>      <td><strong><code>LOG_LPR<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_NEWS<\/var><\/td>      <td><strong><code>LOG_NEWS<\/code><\/strong><\/td>      <td>Usenet new<\/td>      <td>Not available on HP-UX<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_CRON<\/var><\/td>      <td><strong><code>LOG_CRON<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on all platforms<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_AUTHPRIV<\/var><\/td>      <td><strong><code>LOG_AUTHPRIV<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on AIX<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL0<\/var><\/td>      <td><strong><code>LOG_LOCAL0<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL1<\/var><\/td>      <td><strong><code>LOG_LOCAL1<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL2<\/var><\/td>      <td><strong><code>LOG_LOCAL2<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL3<\/var><\/td>      <td><strong><code>LOG_LOCAL3<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL4<\/var><\/td>      <td><strong><code>LOG_LOCAL4<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL5<\/var><\/td>      <td><strong><code>LOG_LOCAL5<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL6<\/var><\/td>      <td><strong><code>LOG_LOCAL6<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_LOCAL7<\/var><\/td>      <td><strong><code>LOG_LOCAL7<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on Windows and Netware<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_PID<\/var><\/td>      <td><strong><code>LOG_PID<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_CONS<\/var><\/td>      <td><strong><code>LOG_CONS<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_ODELAY<\/var><\/td>      <td><strong><code>LOG_ODELAY<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_NDELAY<\/var><\/td>      <td><strong><code>LOG_NDELAY<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td class=\"empty\">&nbsp;<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_NOWAIT<\/var><\/td>      <td><strong><code>LOG_NOWAIT<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on BeOS<\/td>     <\/tr>     <tr>      <td><var class=\"varname\">$LOG_PERROR<\/var><\/td>      <td><strong><code>LOG_PERROR<\/code><\/strong><\/td>      <td class=\"empty\">&nbsp;<\/td>      <td>Not available on AIX<\/td>     <\/tr>    <\/tbody>     <\/table>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function has been<em class=\"emphasis\">DEPRECATED<\/em> as of PHP 5.3.0 and <em class=\"emphasis\">REMOVED<\/em> as of PHP 5.4.0.<\/p><\/div>","versions":"PHP 4, PHP 5 < 5.4.0"},"dns_check_record":{"id":"function.dns-check-record","purpose":"Alias of checkdnsrr","prototype":" dns_check_record()","return":"","versions":"PHP 5, PHP 7"},"dns_get_mx":{"id":"function.dns-get-mx","purpose":"Alias of getmxrr","prototype":" dns_get_mx()","return":"","versions":"PHP 5, PHP 7"},"dns_get_record":{"id":"function.dns-get-record","purpose":"Fetch DNS Resource Records associated with a hostname","prototype":"array dns_get_record(string $hostname [, int $type = DNS_ANY [, array $authns = '' [, array $addtl = '' [, bool $raw = '']]]])","return":"<p class=\"para\">   This function returns an array of associative arrays,    or <strong><code>FALSE<\/code><\/strong> on failure. Each associative array contains   <em class=\"emphasis\">at minimum<\/em> the following keys:   <table class=\"doctable table\">    <caption><strong>Basic DNS attributes<\/strong><\/caption>         <thead>      <tr>       <th>Attribute<\/th>       <th>Meaning<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>host<\/td>       <td>        The record in the DNS namespace to which the rest of the associated data refers.       <\/td>      <\/tr>      <tr>       <td>class<\/td>       <td>        <span class=\"function\">dns_get_record<\/span> only returns Internet class records and as        such this parameter will always return <em>IN<\/em>.       <\/td>      <\/tr>      <tr>       <td>type<\/td>       <td>        String containing the record type.  Additional attributes will also be contained        in the resulting array dependant on the value of type. See table below.       <\/td>      <\/tr>      <tr>       <td>ttl<\/td>       <td>        <em>&quot;Time To Live&quot;<\/em> remaining for this record. This will <em class=\"emphasis\">not<\/em> equal        the record&#039;s original ttl, but will rather equal the original ttl minus whatever        length of time has passed since the authoritative name server was queried.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Other keys in associative arrays dependant on &#039;type&#039;<\/strong><\/caption>         <thead>      <tr>       <th>Type<\/th>       <th>Extra Columns<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><em>A<\/em><\/td>       <td>        <em>ip<\/em>: An IPv4 addresses in dotted decimal notation.       <\/td>      <\/tr>      <tr>       <td><em>MX<\/em><\/td>       <td>        <em>pri<\/em>: Priority of mail exchanger.        Lower numbers indicate greater priority.        <em>target<\/em>: FQDN of the mail exchanger.        See also <span class=\"function\">dns_get_mx<\/span>.       <\/td>      <\/tr>      <tr>       <td><em>CNAME<\/em><\/td>       <td>        <em>target<\/em>: FQDN of location in DNS namespace to which        the record is aliased.       <\/td>      <\/tr>      <tr>       <td><em>NS<\/em><\/td>       <td>        <em>target<\/em>: FQDN of the name server which is authoritative        for this hostname.       <\/td>      <\/tr>      <tr>       <td><em>PTR<\/em><\/td>       <td>        <em>target<\/em>: Location within the DNS namespace to which        this record points.       <\/td>      <\/tr>       <tr>       <td><em>TXT<\/em><\/td>       <td>        <em>txt<\/em>: Arbitrary string data associated with this record.       <\/td>      <\/tr>      <tr>       <td><em>HINFO<\/em><\/td>       <td>        <em>cpu<\/em>: IANA number designating the CPU of the machine        referenced by this record.        <em>os<\/em>: IANA number designating the Operating System on        the machine referenced by this record.        See IANA&#039;s <a href=\"http:\/\/www.iana.org\/assignments\/operating-system-names\" class=\"link external\">&raquo;&nbsp;<em>Operating System        Names<\/em><\/a> for the meaning of these values.       <\/td>      <\/tr>      <tr>       <td><em>CAA<\/em><\/td>       <td>        <em>flags<\/em>: A one-byte bitfield; currently only bit 0 is defined,        meaning &#039;critical&#039;; other bits are reserved and should be ignored.        <em>tag<\/em>: The CAA tag name (alphanumeric ASCII string).        <em>value<\/em>: The CAA tag value (binary string, may use subformats).        For additional information see: <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc6844\" class=\"link external\">&raquo;&nbsp;RFC 6844<\/a>       <\/td>      <\/tr>      <tr>       <td><em>SOA<\/em><\/td>       <td>        <em>mname<\/em>: FQDN of the machine from which the resource        records originated.        <em>rname<\/em>: Email address of the administrative contact        for this domain.        <em>serial<\/em>: Serial # of this revision of the requested        domain.        <em>refresh<\/em>: Refresh interval (seconds) secondary name        servers should use when updating remote copies of this domain.        <em>retry<\/em>: Length of time (seconds) to wait after a        failed refresh before making a second attempt.        <em>expire<\/em>: Maximum length of time (seconds) a secondary        DNS server should retain remote copies of the zone data without a        successful refresh before discarding.        <em>minimum-ttl<\/em>: Minimum length of time (seconds) a        client can continue to use a DNS resolution before it should request        a new resolution from the server.  Can be overridden by individual        resource records.       <\/td>      <\/tr>      <tr>       <td><em>AAAA<\/em><\/td>       <td>        <em>ipv6<\/em>: IPv6 address       <\/td>      <\/tr>      <tr>       <td><em>A6<\/em>(PHP &gt;= 5.1.0)<\/td>       <td>        <em>masklen<\/em>: Length (in bits) to inherit from the target        specified by <code class=\"parameter\">chain<\/code>.        <em>ipv6<\/em>: Address for this specific record to merge with        <code class=\"parameter\">chain<\/code>.        <em>chain<\/em>: Parent record to merge with        <code class=\"parameter\">ipv6<\/code> data.       <\/td>      <\/tr>      <tr>       <td><em>SRV<\/em><\/td>       <td>        <em>pri<\/em>: (Priority) lowest priorities should be used first.        <em>weight<\/em>: Ranking to weight which of commonly prioritized        <code class=\"parameter\">targets<\/code> should be chosen at random.        <em>target<\/em> and <em>port<\/em>: hostname and port        where the requested service can be found.        For additional information see: <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2782\" class=\"link external\">&raquo;&nbsp;RFC 2782<\/a>       <\/td>      <\/tr>      <tr>       <td><em>NAPTR<\/em><\/td>       <td>        <em>order<\/em> and <em>pref<\/em>: Equivalent to        <code class=\"parameter\">pri<\/code> and <code class=\"parameter\">weight<\/code> above.        <em>flags<\/em>, <em>services<\/em>, <em>regex<\/em>,        and <em>replacement<\/em>: Parameters as defined by        <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc2915\" class=\"link external\">&raquo;&nbsp;RFC 2915<\/a>.       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"fsockopen":{"id":"function.fsockopen","purpose":"Open Internet or Unix domain socket connection","prototype":"resource fsockopen(string $hostname [, int $port = -1 [, int $errno = '' [, string $errstr = '' [, float $timeout = ini_get(\"default_socket_timeout\")]]]])","return":"<p class=\"para\">   <span class=\"function\">fsockopen<\/span> returns a file pointer which may be used   together with the other file functions (such as   <span class=\"function\">fgets<\/span>, <span class=\"function\">fgetss<\/span>,   <span class=\"function\">fwrite<\/span>, <span class=\"function\">fclose<\/span>, and   <span class=\"function\">feof<\/span>). If the call fails, it will return <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gethostbyaddr":{"id":"function.gethostbyaddr","purpose":"Get the Internet host name corresponding to a given IP address","prototype":"string gethostbyaddr(string $ip_address)","return":"<p class=\"para\">   Returns the host name on success, the unmodified <code class=\"parameter\">ip_address<\/code>   on failure, or <strong><code>FALSE<\/code><\/strong> on malformed input.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gethostbyname":{"id":"function.gethostbyname","purpose":"Get the IPv4 address corresponding to a given Internet host name","prototype":"string gethostbyname(string $hostname)","return":"<p class=\"para\">   Returns the IPv4 address or a string containing the unmodified   <code class=\"parameter\">hostname<\/code> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gethostbynamel":{"id":"function.gethostbynamel","purpose":"Get a list of IPv4 addresses corresponding to a given Internet host   name","prototype":"array gethostbynamel(string $hostname)","return":"<p class=\"para\">   Returns an array of IPv4 addresses or <strong><code>FALSE<\/code><\/strong> if   <code class=\"parameter\">hostname<\/code> could not be resolved.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"gethostname":{"id":"function.gethostname","purpose":"Gets the host name","prototype":"string gethostname()","return":"<p class=\"para\">   Returns a string with the hostname on success, otherwise <strong><code>FALSE<\/code><\/strong> is    returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"getmxrr":{"id":"function.getmxrr","purpose":"Get MX records corresponding to a given Internet host name","prototype":"bool getmxrr(string $hostname, array $mxhosts [, array $weight = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if any records are found; returns <strong><code>FALSE<\/code><\/strong> if no records   were found or if an error occurred.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getprotobyname":{"id":"function.getprotobyname","purpose":"Get protocol number associated with protocol name","prototype":"int getprotobyname(string $name)","return":"<p class=\"para\">   Returns the protocol number,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getprotobynumber":{"id":"function.getprotobynumber","purpose":"Get protocol name associated with protocol number","prototype":"string getprotobynumber(int $number)","return":"<p class=\"para\">   Returns the protocol name as a string,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getservbyname":{"id":"function.getservbyname","purpose":"Get port number associated with an Internet service and protocol","prototype":"int getservbyname(string $service, string $protocol)","return":"<p class=\"para\">   Returns the port number, or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">service<\/code> or   <code class=\"parameter\">protocol<\/code> is not found.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"getservbyport":{"id":"function.getservbyport","purpose":"Get Internet service which corresponds to port and protocol","prototype":"string getservbyport(int $port, string $protocol)","return":"<p class=\"para\">   Returns the Internet service name as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"header_register_callback":{"id":"function.header-register-callback","purpose":"Call a header function","prototype":"bool header_register_callback(callable $callback)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"header_remove":{"id":"function.header-remove","purpose":"Remove previously set headers","prototype":"void header_remove([string $name = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"header":{"id":"function.header","purpose":"Send a raw HTTP header","prototype":"void header(string $header [, bool $replace = '' [, int $http_response_code = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"headers_list":{"id":"function.headers-list","purpose":"Returns a list of response headers sent (or ready to send)","prototype":"array headers_list()","return":"<p class=\"para\">   Returns a numerically indexed array of headers.  <\/p>","versions":"PHP 5, PHP 7"},"headers_sent":{"id":"function.headers-sent","purpose":"Checks if or where headers have been sent","prototype":"bool headers_sent([string $file = '' [, int $line = '']])","return":"<p class=\"para\">   <span class=\"function\">headers_sent<\/span> will return <strong><code>FALSE<\/code><\/strong> if no HTTP headers   have already been sent or <strong><code>TRUE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"http_response_code":{"id":"function.http-response-code","purpose":"Get or Set the HTTP response code","prototype":"mixed http_response_code([int $response_code = ''])","return":"<p class=\"para\">   If <code class=\"parameter\">response_code<\/code> is provided, then the previous   status code will be returned. If <code class=\"parameter\">response_code<\/code> is not   provided, then the current status code will be returned. Both of these   values will default to a <em>200<\/em> status code if used in a web   server environment.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> will be returned if <code class=\"parameter\">response_code<\/code> is not   provided and it is not invoked in a web server environment (such as from a   CLI application). <strong><code>TRUE<\/code><\/strong> will be returned if   <code class=\"parameter\">response_code<\/code> is provided and it is not invoked in a   web server environment (but only when no previous response status has been   set).  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"inet_ntop":{"id":"function.inet-ntop","purpose":"Converts a packed internet address to a human readable representation","prototype":"string inet_ntop(string $in_addr)","return":"<p class=\"para\">   Returns a string representation of the address or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"inet_pton":{"id":"function.inet-pton","purpose":"Converts a human readable IP address to its packed in_addr representation","prototype":"string inet_pton(string $address)","return":"<p class=\"para\">   Returns the <em>in_addr<\/em> representation of the given   <code class=\"parameter\">address<\/code>, or <strong><code>FALSE<\/code><\/strong> if a syntactically invalid   <code class=\"parameter\">address<\/code> is given (for example, an IPv4 address   without dots or an IPv6 address without colons).  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ip2long":{"id":"function.ip2long","purpose":"Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer","prototype":"int ip2long(string $ip_address)","return":"<p class=\"para\">   Returns the long integer or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">ip_address<\/code>   is invalid.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"long2ip":{"id":"function.long2ip","purpose":"Converts an long integer address into a string in (IPv4) Internet standard dotted format","prototype":"string long2ip(int $proper_address)","return":"<p class=\"para\">   Returns the Internet IP address as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"openlog":{"id":"function.openlog","purpose":"Open connection to system logger","prototype":"bool openlog(string $ident, int $option, int $facility)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"pfsockopen":{"id":"function.pfsockopen","purpose":"Open persistent Internet or Unix domain socket connection","prototype":"resource pfsockopen(string $hostname [, int $port = -1 [, int $errno = '' [, string $errstr = '' [, float $timeout = ini_get(\"default_socket_timeout\")]]]])","return":"","versions":"PHP 4, PHP 5, PHP 7"},"setcookie":{"id":"function.setcookie","purpose":"Send a cookie","prototype":"bool setcookie(string $name [, string $value = \"\" [, int $expire = '' [, string $path = \"\" [, string $domain = \"\" [, bool $secure = '' [, bool $httponly = '']]]]]])","return":"<p class=\"para\">   If output exists prior to calling this function,   <span class=\"function\">setcookie<\/span> will fail and return <strong><code>FALSE<\/code><\/strong>. If   <span class=\"function\">setcookie<\/span> successfully runs, it will return <strong><code>TRUE<\/code><\/strong>.   This does not indicate whether the user accepted the cookie.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"setrawcookie":{"id":"function.setrawcookie","purpose":"Send a cookie without urlencoding the cookie value","prototype":"bool setrawcookie(string $name [, string $value = '' [, int $expire = '' [, string $path = '' [, string $domain = '' [, bool $secure = '' [, bool $httponly = '']]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"socket_get_status":{"id":"function.socket-get-status","purpose":"Alias of stream_get_meta_data","prototype":" socket_get_status()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"socket_set_blocking":{"id":"function.socket-set-blocking","purpose":"Alias of stream_set_blocking","prototype":" socket_set_blocking()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"socket_set_timeout":{"id":"function.socket-set-timeout","purpose":"Alias of stream_set_timeout","prototype":" socket_set_timeout()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"syslog":{"id":"function.syslog","purpose":"Generate a system log message","prototype":"bool syslog(int $priority, string $message)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rrd_create":{"id":"function.rrd-create","purpose":"Creates rrd database file","prototype":"bool rrd_create(string $filename, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_error":{"id":"function.rrd-error","purpose":"Gets latest error message","prototype":"string rrd_error()","return":"<p class=\"para\">   Latest error message.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_fetch":{"id":"function.rrd-fetch","purpose":"Fetch the data for graph as array","prototype":"array rrd_fetch(string $filename, array $options)","return":"<p class=\"para\">   Returns information about retrieved graph data.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_first":{"id":"function.rrd-first","purpose":"Gets the timestamp of the first sample from rrd file","prototype":"int rrd_first(string $file [, int $raaindex = ''])","return":"<p class=\"para\">   Integer number of unix timestamp, <strong><code>FALSE<\/code><\/strong> if some error occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_graph":{"id":"function.rrd-graph","purpose":"Creates image from a data","prototype":"array rrd_graph(string $filename, array $options)","return":"<p class=\"para\">   Array with information about generated image is returned, <strong><code>FALSE<\/code><\/strong> when error   occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_info":{"id":"function.rrd-info","purpose":"Gets information about rrd file","prototype":"array rrd_info(string $filename)","return":"<p class=\"para\">   Array with information about requsted RRD file, <strong><code>FALSE<\/code><\/strong> when error occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_last":{"id":"function.rrd-last","purpose":"Gets unix timestamp of the last sample","prototype":"int rrd_last(string $filename)","return":"<p class=\"para\">   Integer as unix timestamp of the most recent data from the RRD database.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_lastupdate":{"id":"function.rrd-lastupdate","purpose":"Gets information about last updated data","prototype":"array rrd_lastupdate(string $filename)","return":"<p class=\"para\">   Array of information about last update, <strong><code>FALSE<\/code><\/strong> when error occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_restore":{"id":"function.rrd-restore","purpose":"Restores the RRD file from XML dump","prototype":"bool rrd_restore(string $xml_file, string $rrd_file [, array $options = ''])","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_tune":{"id":"function.rrd-tune","purpose":"Tunes some RRD database file header options","prototype":"bool rrd_tune(string $filename, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_update":{"id":"function.rrd-update","purpose":"Updates the RRD database","prototype":"bool rrd_update(string $filename, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> when error occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrd_version":{"id":"function.rrd-version","purpose":"Gets information about underlying rrdtool library","prototype":"string rrd_version()","return":"<p class=\"para\">   String with rrdtool version number e.g. &quot;1.4.3&quot;.  <\/p>","versions":"PECL rrd >= 1.0.0"},"rrd_xport":{"id":"function.rrd-xport","purpose":"Exports the information about RRD database","prototype":"array rrd_xport(array $options)","return":"<p class=\"para\">   Array with information about RRD database file, <strong><code>FALSE<\/code><\/strong> when error occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"rrdc_disconnect":{"id":"function.rrdc-disconnect","purpose":"Close any outstanding connection to rrd caching daemon","prototype":"void rrdc_disconnect()","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL rrd >= 1.1.2"},"RRDCreator::addArchive":{"id":"rrdcreator.addarchive","purpose":"Adds RRA - archive of data values for each data source","prototype":"void RRDCreator::addArchive(string $description)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDCreator::addDataSource":{"id":"rrdcreator.adddatasource","purpose":"Adds data source definition for RRD database","prototype":"void RRDCreator::addDataSource(string $description)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDCreator::__construct":{"id":"rrdcreator.construct","purpose":"Creates new RRDCreator instance","prototype":" RRDCreator::__construct(string $path [, string $startTime = '' [, int $step = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDCreator::save":{"id":"rrdcreator.save","purpose":"Saves the RRD database to a file","prototype":"bool RRDCreator::save()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDGraph::__construct":{"id":"rrdgraph.construct","purpose":"Creates new RRDGraph instance","prototype":" RRDGraph::__construct(string $path)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDGraph::save":{"id":"rrdgraph.save","purpose":"Saves the result of query into image","prototype":"array RRDGraph::save()","return":"<p class=\"para\">   Array with information about generated image is returned, <strong><code>FALSE<\/code><\/strong> if error   occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDGraph::saveVerbose":{"id":"rrdgraph.saveverbose","purpose":"Saves the RRD database query into image and returns the verbose   information about generated graph","prototype":"array RRDGraph::saveVerbose()","return":"<p class=\"para\">   Array with detailed information about generated image is returned, optionally   with image data, <strong><code>FALSE<\/code><\/strong> if error occurs.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDGraph::setOptions":{"id":"rrdgraph.setoptions","purpose":"Sets the options for rrd graph export","prototype":"void RRDGraph::setOptions(array $options)","return":"<p class=\"para\">   No value is returned.    <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDUpdater::__construct":{"id":"rrdupdater.construct","purpose":"Creates new RRDUpdater instance","prototype":" RRDUpdater::__construct(string $path)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL rrd >= 0.9.0"},"RRDUpdater::update":{"id":"rrdupdater.update","purpose":"Update the RRD database file","prototype":"bool RRDUpdater::update(array $values [, string $time = time()])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL rrd >= 0.9.0"},"SAMConnection::commit":{"id":"samconnection.commit","purpose":"Commits (completes) the current unit of work","prototype":"bool SAMConnection::commit()","return":"<p class=\"para\">   This method returns <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::connect":{"id":"samconnection.connect","purpose":"Establishes a connection to a Messaging Server","prototype":"bool SAMConnection::connect(string $protocol [, array $properties = ''])","return":"<p class=\"para\">   This method returns <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::__construct":{"id":"samconnection.construct","purpose":"Creates a new connection to a Messaging Server","prototype":" SAMConnection::__construct()","return":"","versions":"PECL sam >= 0.1.0"},"SAMConnection::disconnect":{"id":"samconnection.disconnect","purpose":"Disconnects from a Messaging Server","prototype":"bool SAMConnection::disconnect()","return":"<p class=\"para\">    Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::errno":{"id":"samconnection.errno","purpose":"Contains the unique numeric error code of the last executed SAM operation","prototype":"int SAMConnection::errno()","return":"<p class=\"para\">   An integer greater than zero indicates the last error type encountered on   the connection. Zero indicates that the last operation on this connection   completed successfully.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::error":{"id":"samconnection.error","purpose":"Contains the text description of the last failed SAM operation","prototype":"string SAMConnection::error()","return":"<p class=\"para\">   A string containing the text description of the last error type encountered   on the connection. An empty string indicates that the last operation on   this connection completed successfully.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::isConnected":{"id":"samconnection.isconnected","purpose":"Queries whether a connection is established to a Messaging Server","prototype":"bool SAMConnection::isConnected()","return":"<p class=\"para\">   This method returns <strong><code>TRUE<\/code><\/strong> if the SAMConnection object is successfully   connected to a Messaging server or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::peek":{"id":"samconnection.peek","purpose":"Read a message from a queue without removing it from the queue","prototype":"SAMMessage SAMConnection::peek(string $target [, array $properties = ''])","return":"<p class=\"para\">   This method returns a SAMMessage object or <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::peekAll":{"id":"samconnection.peekall","purpose":"Read one or more messages from a queue without removing it from the queue","prototype":"array SAMConnection::peekAll(string $target [, array $properties = ''])","return":"<p class=\"para\">   This method returns an array of SAMMessage objects or <strong><code>FALSE<\/code><\/strong> if an error   occurs.  <\/p>","versions":"PECL sam >= 0.2.0"},"SAMConnection::receive":{"id":"samconnection.receive","purpose":"Receive a message from a queue or subscription","prototype":"SAMMessage SAMConnection::receive(string $target [, array $properties = ''])","return":"<p class=\"para\">   This method returns a SAMMessage object or <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::remove":{"id":"samconnection.remove","purpose":"Remove a message from a queue","prototype":"SAMMessage SAMConnection::remove(string $target [, array $properties = ''])","return":"<p class=\"para\">   This method returns <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::rollback":{"id":"samconnection.rollback","purpose":"Cancels (rolls back) an in-flight unit of work","prototype":"bool SAMConnection::rollback()","return":"<p class=\"para\">   This method returns <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::send":{"id":"samconnection.send","purpose":"Send a message to a queue or publish an item to a topic","prototype":"string SAMConnection::send(string $target, SAMMessage $msg [, array $properties = ''])","return":"<p class=\"para\">   A correlation id string that can be used in a subsequent receive call as a   selector to obtain any reply or response that has been requested or <strong><code>FALSE<\/code><\/strong>   if an error occurred.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    A correlation id will only be returned for a successful send to a queue    destination (<em>queue:\/\/xxxx<\/em>) in which case it will reflect the message    identity of the message on the queue. In the case of a send being used    to publish data to a topic the return value will be <strong><code>TRUE<\/code><\/strong> as no    correlation id is available for return.   <\/p>  <\/p><\/blockquote>","versions":"PECL sam >= 0.1.0"},"SAMConnection::setDebug":{"id":"samconnection.setdebug","purpose":"Turn on or off additional debugging output","prototype":"void SAMConnection::setDebug(bool $switch)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL sam >= 1.1.0"},"SAMConnection::subscribe":{"id":"samconnection.subscribe","purpose":"Create a subscription to a specified topic","prototype":"string SAMConnection::subscribe(string $targetTopic)","return":"<p class=\"para\">   A subscription identifier that can be used in a subsequent receive call as   a selector to obtain any topic data or <strong><code>FALSE<\/code><\/strong> if an error occurred. The   subscription identifier should be used in the receive call in place of the   simple topic name.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMConnection::unsubscribe":{"id":"samconnection.unsubscribe","purpose":"Cancel a subscription to a specified topic","prototype":"bool SAMConnection::unsubscribe(string $subscriptionId [, string $targetTopic = ''])","return":"<p class=\"para\">   This method returns <strong><code>FALSE<\/code><\/strong> if an error occurs.  <\/p>","versions":"PECL sam >= 0.1.0"},"SAMMessage::body":{"id":"sammessage.body","purpose":"The body of the message","prototype":"string SAMMessage::body()","return":"","versions":"PECL sam >= 0.1.0"},"SAMMessage::__construct":{"id":"sammessage.construct","purpose":"Creates a new Message object","prototype":" SAMMessage::__construct([mixed $body = ''])","return":"","versions":"PECL sam >= 0.1.0"},"SAMMessage::header":{"id":"sammessage.header","purpose":"The header properties of the message","prototype":"object SAMMessage::header()","return":"","versions":"PECL sam >= 0.1.0"},"snmp_get_quick_print":{"id":"function.snmp-get-quick-print","purpose":"Fetches the current value of the UCD library's quick_print setting","prototype":"bool snmp_get_quick_print()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if quick_print is on, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmp_get_valueretrieval":{"id":"function.snmp-get-valueretrieval","purpose":"Return the method how the SNMP values will be returned","prototype":"int snmp_get_valueretrieval()","return":"<p class=\"para\">   OR-ed combitantion of constants ( <strong><code>SNMP_VALUE_LIBRARY<\/code><\/strong> or   <strong><code>SNMP_VALUE_PLAIN<\/code><\/strong> ) with   possible SNMP_VALUE_OBJECT set.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5, PHP 7"},"snmp_read_mib":{"id":"function.snmp-read-mib","purpose":"Reads and parses a MIB file into the active MIB tree","prototype":"bool snmp_read_mib(string $filename)","return":"","versions":"PHP 5, PHP 7"},"snmp_set_enum_print":{"id":"function.snmp-set-enum-print","purpose":"Return all values that are enums with their enum value instead of the raw integer","prototype":"bool snmp_set_enum_print(int $enum_print)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"snmp_set_oid_numeric_print":{"id":"function.snmp-set-oid-numeric-print","purpose":"Set the OID output format","prototype":"void snmp_set_oid_numeric_print(int $oid_format)","return":"","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"snmp_set_oid_output_format":{"id":"function.snmp-set-oid-output-format","purpose":"Set the OID output format","prototype":"bool snmp_set_oid_output_format(int $oid_format)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"snmp_set_quick_print":{"id":"function.snmp-set-quick-print","purpose":"Set the value of quick_print within the UCD SNMP library","prototype":"bool snmp_set_quick_print(bool $quick_print)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmp_set_valueretrieval":{"id":"function.snmp-set-valueretrieval","purpose":"Specify the method how the SNMP values will be returned","prototype":"bool snmp_set_valueretrieval(int $method)","return":"","versions":"PHP 4 >= 4.3.3, PHP 5, PHP 7"},"snmp2_get":{"id":"function.snmp2-get","purpose":"Fetch an SNMP object","prototype":"string snmp2_get(string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> object value on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"snmp2_getnext":{"id":"function.snmp2-getnext","purpose":"Fetch the SNMP object which follows the given object id","prototype":"string snmp2_getnext(string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> object value on success or <strong><code>FALSE<\/code><\/strong> on error.   In case of an error, an E_WARNING message is shown.  <\/p>","versions":"PHP >= 5.2.0"},"snmp2_real_walk":{"id":"function.snmp2-real-walk","purpose":"Return all objects including their respective object ID within the specified one","prototype":"array snmp2_real_walk(string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns an associative array of the <acronym class=\"acronym\">SNMP<\/acronym> object ids and their values on success or <strong><code>FALSE<\/code><\/strong> on error.   In case of an error, an E_WARNING message is shown.  <\/p>","versions":"PHP >= 5.2.0"},"snmp2_set":{"id":"function.snmp2-set","purpose":"Set the value of an SNMP object","prototype":"bool snmp2_set(string $host, string $community, string $object_id, string $type, string $value [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If the SNMP host rejects the data type, an E_WARNING message like &quot;Warning: Error in packet. Reason: (badValue) The value given has the wrong type or length.&quot; is shown.   If an unknown or invalid OID is specified the warning probably reads &quot;Could not add variable&quot;.  <\/p>","versions":"PHP >= 5.2.0"},"snmp2_walk":{"id":"function.snmp2-walk","purpose":"Fetch all the SNMP objects from an agent","prototype":"array snmp2_walk(string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns an array of <acronym class=\"acronym\">SNMP<\/acronym> object values starting from the   <code class=\"parameter\">object_id<\/code> as root or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP >= 5.2.0"},"snmp3_get":{"id":"function.snmp3-get","purpose":"Fetch an SNMP object","prototype":"string snmp3_get(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> object value on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmp3_getnext":{"id":"function.snmp3-getnext","purpose":"Fetch the SNMP object which follows the given object id","prototype":"string snmp3_getnext(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> object value on success or <strong><code>FALSE<\/code><\/strong> on error.   In case of an error, an E_WARNING message is shown.  <\/p>","versions":"PHP 5, PHP 7"},"snmp3_real_walk":{"id":"function.snmp3-real-walk","purpose":"Return all objects including their respective object ID within the specified one","prototype":"array snmp3_real_walk(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns an associative array of the   <acronym class=\"acronym\">SNMP<\/acronym> object ids and their values on success or <strong><code>FALSE<\/code><\/strong> on error.   In case of an error, an E_WARNING message is shown.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmp3_set":{"id":"function.snmp3-set","purpose":"Set the value of an SNMP object","prototype":"bool snmp3_set(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If the SNMP host rejects the data type, an E_WARNING message like &quot;Warning: Error in packet. Reason: (badValue) The value given has the wrong type or length.&quot; is shown.   If an unknown or invalid OID is specified the warning probably reads &quot;Could not add variable&quot;.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmp3_walk":{"id":"function.snmp3-walk","purpose":"Fetch all the SNMP objects from an agent","prototype":"array snmp3_walk(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5]])","return":"<p class=\"para\">   Returns an array of <acronym class=\"acronym\">SNMP<\/acronym> object values starting from the   <code class=\"parameter\">object_id<\/code> as root or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmpget":{"id":"function.snmpget","purpose":"Fetch an SNMP object","prototype":"string snmpget(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> object value on success or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmpgetnext":{"id":"function.snmpgetnext","purpose":"Fetch the SNMP object which follows the given object id","prototype":"string snmpgetnext(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> object value on success or <strong><code>FALSE<\/code><\/strong> on error.   In case of an error, an E_WARNING message is shown.  <\/p>","versions":"PHP 5, PHP 7"},"snmprealwalk":{"id":"function.snmprealwalk","purpose":"Return all objects including their respective object ID within the specified one","prototype":"array snmprealwalk(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns an associative array of the <acronym class=\"acronym\">SNMP<\/acronym> object ids and their values on success or <strong><code>FALSE<\/code><\/strong> on error.   In case of an error, an E_WARNING message is shown.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmpset":{"id":"function.snmpset","purpose":"Set the value of an SNMP object","prototype":"bool snmpset(string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   If the SNMP host rejects the data type, an E_WARNING message like &quot;Warning: Error in packet. Reason: (badValue) The value given has the wrong type or length.&quot; is shown.   If an unknown or invalid OID is specified the warning probably reads &quot;Could not add variable&quot;.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmpwalk":{"id":"function.snmpwalk","purpose":"Fetch all the SNMP objects from an agent","prototype":"array snmpwalk(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns an array of <acronym class=\"acronym\">SNMP<\/acronym> object values starting from the   <code class=\"parameter\">object_id<\/code> as root or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"snmpwalkoid":{"id":"function.snmpwalkoid","purpose":"Query for a tree of information about a network entity","prototype":"array snmpwalkoid(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns an associative array with object ids and their respective   object value starting from the <code class=\"parameter\">object_id<\/code>   as root or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"SNMP::close":{"id":"snmp.close","purpose":"Close SNMP session","prototype":"bool SNMP::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::__construct":{"id":"snmp.construct","purpose":"Creates SNMP instance representing session to remote SNMP agent","prototype":" SNMP::__construct(int $version, string $hostname, string $community [, int $timeout = 1000000 [, int $retries = 5]])","return":"<p class=\"para\">   Returns SNMP object representing remote <acronym class=\"acronym\">SNMP<\/acronym> agent.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::get":{"id":"snmp.get","purpose":"Fetch an SNMP object","prototype":"mixed SNMP::get(mixed $object_id [, bool $preserve_keys = ''])","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> objects requested as string or array   depending on <code class=\"parameter\">object_id<\/code> type or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::getErrno":{"id":"snmp.geterrno","purpose":"Get last error code","prototype":"int SNMP::getErrno()","return":"<p class=\"para\">   Returns one of SNMP error code values described in constants chapter.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::getError":{"id":"snmp.geterror","purpose":"Get last error message","prototype":"string SNMP::getError()","return":"<p class=\"para\">   String describing error from last SNMP request.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::getnext":{"id":"snmp.getnext","purpose":"Fetch an SNMP object which  follows the given object id","prototype":"mixed SNMP::getnext(mixed $object_id)","return":"<p class=\"para\">   Returns <acronym class=\"acronym\">SNMP<\/acronym> objects requested as string or array   depending on <code class=\"parameter\">object_id<\/code> type or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::set":{"id":"snmp.set","purpose":"Set the value of an SNMP object","prototype":"bool SNMP::set(mixed $object_id, mixed $type, mixed $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::setSecurity":{"id":"snmp.setsecurity","purpose":"Configures security-related SNMPv3 session parameters","prototype":"bool SNMP::setSecurity(string $sec_level [, string $auth_protocol = '' [, string $auth_passphrase = '' [, string $priv_protocol = '' [, string $priv_passphrase = '' [, string $contextName = '' [, string $contextEngineID = '']]]]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SNMP::walk":{"id":"snmp.walk","purpose":"Fetch SNMP object subtree","prototype":"array SNMP::walk(string $object_id [, bool $suffix_as_key = '' [, int $max_repetitions = '' [, int $non_repeaters = '']]])","return":"<p class=\"para\">   Returns an associative array of the <acronym class=\"acronym\">SNMP<\/acronym> object ids and their values on success or <strong><code>FALSE<\/code><\/strong> on error.   When a <acronym class=\"acronym\">SNMP<\/acronym> error occures  <span class=\"methodname\">SNMP::getErrno<\/span> and    <span class=\"methodname\">SNMP::getError<\/span> can be used for retrieving error   number (specific to SNMP extension, see class constants) and error message   respectively.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"socket_accept":{"id":"function.socket-accept","purpose":"Accepts a connection on a socket","prototype":"resource socket_accept(resource $socket)","return":"<p class=\"para\">   Returns a new socket resource on success, or <strong><code>FALSE<\/code><\/strong> on error. The actual   error code can be retrieved by calling   <span class=\"function\">socket_last_error<\/span>. This error code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual explanation of the   error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_addrinfo_bind":{"id":"function.socket-addrinfo-bind","purpose":"Create and bind to a socket from a given addrinfo","prototype":"resource socket_addrinfo_bind(resource $addr)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"socket_addrinfo_connect":{"id":"function.socket-addrinfo-connect","purpose":"Create and connect to a socket from a given addrinfo","prototype":"resource socket_addrinfo_connect(resource $addr)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"socket_addrinfo_explain":{"id":"function.socket-addrinfo-explain","purpose":"Get information about addrinfo","prototype":"array socket_addrinfo_explain(resource $addr)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"socket_addrinfo_lookup":{"id":"function.socket-addrinfo-lookup","purpose":"Get array with contents of getaddrinfo about the given hostname","prototype":"array socket_addrinfo_lookup(string $host [, string $service = '' [, array $hints = '']])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.2.0"},"socket_bind":{"id":"function.socket-bind","purpose":"Binds a name to a socket","prototype":"bool socket_bind(resource $socket, string $address [, int $port = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   The error code can be retrieved with <span class=\"function\">socket_last_error<\/span>.   This code may be passed to <span class=\"function\">socket_strerror<\/span> to get a   textual explanation of the error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_clear_error":{"id":"function.socket-clear-error","purpose":"Clears the error on the socket or the last error code","prototype":"void socket_clear_error([resource $socket = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"socket_close":{"id":"function.socket-close","purpose":"Closes a socket resource","prototype":"void socket_close(resource $socket)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_cmsg_space":{"id":"function.socket-cmsg-space","purpose":"Calculate message buffer size","prototype":"int socket_cmsg_space(int $level, int $type [, int $n = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"socket_connect":{"id":"function.socket-connect","purpose":"Initiates a connection on a socket","prototype":"bool socket_connect(resource $socket, string $address [, int $port = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. The error code can be retrieved with   <span class=\"function\">socket_last_error<\/span>. This code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual explanation of the   error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the socket is non-blocking then this function returns <strong><code>FALSE<\/code><\/strong> with an    error <em>Operation now in progress<\/em>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_create_listen":{"id":"function.socket-create-listen","purpose":"Opens a socket on port to accept connections","prototype":"resource socket_create_listen(int $port [, int $backlog = 128])","return":"<p class=\"para\">   <span class=\"function\">socket_create_listen<\/span> returns a new socket resource   on success or <strong><code>FALSE<\/code><\/strong> on error. The error code can be retrieved with   <span class=\"function\">socket_last_error<\/span>. This code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual explanation of the   error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_create_pair":{"id":"function.socket-create-pair","purpose":"Creates a pair of indistinguishable sockets and stores them in an array","prototype":"bool socket_create_pair(int $domain, int $type, int $protocol, array $fd)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_create":{"id":"function.socket-create","purpose":"Create a socket (endpoint for communication)","prototype":"resource socket_create(int $domain, int $type, int $protocol)","return":"<p class=\"para\">   <span class=\"function\">socket_create<\/span> returns a socket resource on success,   or <strong><code>FALSE<\/code><\/strong> on error. The actual error code can be retrieved by calling   <span class=\"function\">socket_last_error<\/span>. This error code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual explanation of the   error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_export_stream":{"id":"function.socket-export-stream","purpose":"Export a socket extension resource into a stream that encapsulates a socket","prototype":"resource socket_export_stream(resource $socket)","return":"<p class=\"para\">   Return resource or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7 >= 7.0.7"},"socket_get_option":{"id":"function.socket-get-option","purpose":"Gets socket options for the socket","prototype":"mixed socket_get_option(resource $socket, int $level, int $optname)","return":"<p class=\"para\">   Returns the value of the given option, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"socket_getopt":{"id":"function.socket-getopt","purpose":"Alias of socket_get_option","prototype":" socket_getopt()","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_getpeername":{"id":"function.socket-getpeername","purpose":"Queries the remote side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","prototype":"bool socket_getpeername(resource $socket, string $address [, int $port = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. <span class=\"function\">socket_getpeername<\/span> may also return   <strong><code>FALSE<\/code><\/strong> if the socket type is not any of <strong><code>AF_INET<\/code><\/strong>,   <strong><code>AF_INET6<\/code><\/strong>, or <strong><code>AF_UNIX<\/code><\/strong>, in which   case the last socket error code is <em class=\"emphasis\">not<\/em> updated.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_getsockname":{"id":"function.socket-getsockname","purpose":"Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","prototype":"bool socket_getsockname(resource $socket, string $addr [, int $port = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. <span class=\"function\">socket_getsockname<\/span> may also return   <strong><code>FALSE<\/code><\/strong> if the socket type is not any of <strong><code>AF_INET<\/code><\/strong>,   <strong><code>AF_INET6<\/code><\/strong>, or <strong><code>AF_UNIX<\/code><\/strong>, in which   case the last socket error code is <em class=\"emphasis\">not<\/em> updated.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_import_stream":{"id":"function.socket-import-stream","purpose":"Import a stream","prototype":"resource socket_import_stream(resource $stream)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"socket_last_error":{"id":"function.socket-last-error","purpose":"Returns the last error on the socket","prototype":"int socket_last_error([resource $socket = ''])","return":"<p class=\"para\">   This function returns a socket error code.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_listen":{"id":"function.socket-listen","purpose":"Listens for a connection on a socket","prototype":"bool socket_listen(resource $socket [, int $backlog = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. The error code can be retrieved with   <span class=\"function\">socket_last_error<\/span>. This code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual explanation of the   error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_read":{"id":"function.socket-read","purpose":"Reads a maximum of length bytes from a socket","prototype":"string socket_read(resource $socket, int $length [, int $type = PHP_BINARY_READ])","return":"<p class=\"para\">   <span class=\"function\">socket_read<\/span> returns the data as a string on success,   or <strong><code>FALSE<\/code><\/strong> on error (including if the remote host has closed the   connection). The error code can be retrieved with   <span class=\"function\">socket_last_error<\/span>. This code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual representation of   the error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    <span class=\"function\">socket_read<\/span> returns a zero length string (&quot;&quot;)    when there is no more data to read.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_recv":{"id":"function.socket-recv","purpose":"Receives data from a connected socket","prototype":"int socket_recv(resource $socket, string $buf, int $len, int $flags)","return":"<p class=\"para\">   <span class=\"function\">socket_recv<\/span> returns the number of bytes received,   or <strong><code>FALSE<\/code><\/strong> if there was an error. The actual error code can be retrieved by    calling <span class=\"function\">socket_last_error<\/span>. This error code may be   passed to <span class=\"function\">socket_strerror<\/span> to get a textual explanation   of the error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_recvfrom":{"id":"function.socket-recvfrom","purpose":"Receives data from a socket whether or not it is connection-oriented","prototype":"int socket_recvfrom(resource $socket, string $buf, int $len, int $flags, string $name [, int $port = ''])","return":"<p class=\"para\">   <span class=\"function\">socket_recvfrom<\/span> returns the number of bytes received,   or <strong><code>FALSE<\/code><\/strong> if there was an error. The actual error code can be retrieved by    calling <span class=\"function\">socket_last_error<\/span>. This error code may be   passed to <span class=\"function\">socket_strerror<\/span> to get a textual explanation   of the error.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_recvmsg":{"id":"function.socket-recvmsg","purpose":"Read a message","prototype":"int socket_recvmsg(resource $socket, string $message [, int $flags = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"socket_select":{"id":"function.socket-select","purpose":"Runs the select() system call on the given arrays of sockets with a specified timeout","prototype":"int socket_select(array $read, array $write, array $except, int $tv_sec [, int $tv_usec = ''])","return":"<p class=\"para\">   On success <span class=\"function\">socket_select<\/span> returns the number of   socket resources contained in the modified arrays, which may be zero if   the timeout expires before anything interesting happens. On error <strong><code>FALSE<\/code><\/strong>   is returned. The error code can be retrieved with   <span class=\"function\">socket_last_error<\/span>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Be sure to use the <em>===<\/em> operator when checking for an    error. Since the <span class=\"function\">socket_select<\/span> may return 0 the    comparison with <em>==<\/em> would evaluate to <strong><code>TRUE<\/code><\/strong>:    <div class=\"example\" id=\"install.unix.debian.apt.example\">     <p><strong>Example # Understanding <span class=\"function\">socket_select<\/span>&#039;s result<\/strong><\/p>     <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/>$e&nbsp;<\/span><span style=\"color: #007700\">=&nbsp;<\/span><span style=\"color: #0000BB\">NULL<\/span><span style=\"color: #007700\">;<br \/>if&nbsp;(<\/span><span style=\"color: #0000BB\">false&nbsp;<\/span><span style=\"color: #007700\">===&nbsp;<\/span><span style=\"color: #0000BB\">socket_select<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">$r<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #0000BB\">$w<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #0000BB\">$e<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #0000BB\">0<\/span><span style=\"color: #007700\">))&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<\/span><span style=\"color: #DD0000\">\"socket_select()&nbsp;failed,&nbsp;reason:&nbsp;\"&nbsp;<\/span><span style=\"color: #007700\">.<br \/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">socket_strerror<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #0000BB\">socket_last_error<\/span><span style=\"color: #007700\">())&nbsp;.&nbsp;<\/span><span style=\"color: #DD0000\">\"\\n\"<\/span><span style=\"color: #007700\">;<br \/>}<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>     <\/div>    <\/div>   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_send":{"id":"function.socket-send","purpose":"Sends data to a connected socket","prototype":"int socket_send(resource $socket, string $buf, int $len, int $flags)","return":"<p class=\"para\">   <span class=\"function\">socket_send<\/span> returns the number of bytes sent, or <strong><code>FALSE<\/code><\/strong> on error.   <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_sendmsg":{"id":"function.socket-sendmsg","purpose":"Send a message","prototype":"int socket_sendmsg(resource $socket, array $message [, int $flags = ''])","return":"<p class=\"para\">   Returns the number of bytes sent,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"socket_sendto":{"id":"function.socket-sendto","purpose":"Sends a message to a socket, whether it is connected or not","prototype":"int socket_sendto(resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = ''])","return":"<p class=\"para\">   <span class=\"function\">socket_sendto<\/span> returns the number of bytes sent to the   remote host, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_set_block":{"id":"function.socket-set-block","purpose":"Sets blocking mode on a socket resource","prototype":"bool socket_set_block(resource $socket)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"socket_set_nonblock":{"id":"function.socket-set-nonblock","purpose":"Sets nonblocking mode for file descriptor fd","prototype":"bool socket_set_nonblock(resource $socket)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_set_option":{"id":"function.socket-set-option","purpose":"Sets socket options for the socket","prototype":"bool socket_set_option(resource $socket, int $level, int $optname, mixed $optval)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"socket_setopt":{"id":"function.socket-setopt","purpose":"Alias of socket_set_option","prototype":" socket_setopt()","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_shutdown":{"id":"function.socket-shutdown","purpose":"Shuts down a socket for receiving, sending, or both","prototype":"bool socket_shutdown(resource $socket [, int $how = 2])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_strerror":{"id":"function.socket-strerror","purpose":"Return a string describing a socket error","prototype":"string socket_strerror(int $errno)","return":"<p class=\"para\">   Returns the error message associated with the <code class=\"parameter\">errno<\/code>   parameter.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"socket_write":{"id":"function.socket-write","purpose":"Write to a socket","prototype":"int socket_write(resource $socket, string $buffer [, int $length = ''])","return":"<p class=\"para\">   Returns the number of bytes successfully written to the socket or <strong><code>FALSE<\/code><\/strong> on failure.   The error code can be retrieved with   <span class=\"function\">socket_last_error<\/span>. This code may be passed to   <span class=\"function\">socket_strerror<\/span> to get a textual explanation of the   error.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    It is perfectly valid for <span class=\"function\">socket_write<\/span> to    return zero which means no bytes have been written. Be sure to use the    <em>===<\/em> operator to check for <strong><code>FALSE<\/code><\/strong> in case of an    error.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"ssh2_auth_agent":{"id":"function.ssh2-auth-agent","purpose":"Authenticate over SSH using the ssh agent","prototype":"bool ssh2_auth_agent(resource $session, string $username)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.12"},"ssh2_auth_hostbased_file":{"id":"function.ssh2-auth-hostbased-file","purpose":"Authenticate using a public hostkey","prototype":"bool ssh2_auth_hostbased_file(resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile [, string $passphrase = '' [, string $local_username = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_auth_none":{"id":"function.ssh2-auth-none","purpose":"Authenticate as \"none\"","prototype":"mixed ssh2_auth_none(resource $session, string $username)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the server does accept &quot;none&quot; as an authentication   method, or an array of accepted authentication methods on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_auth_password":{"id":"function.ssh2-auth-password","purpose":"Authenticate over SSH using a plain password","prototype":"bool ssh2_auth_password(resource $session, string $username, string $password)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_auth_pubkey_file":{"id":"function.ssh2-auth-pubkey-file","purpose":"Authenticate using a public key","prototype":"bool ssh2_auth_pubkey_file(resource $session, string $username, string $pubkeyfile, string $privkeyfile [, string $passphrase = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_connect":{"id":"function.ssh2-connect","purpose":"Connect to an SSH server","prototype":"resource ssh2_connect(string $host [, int $port = 22 [, array $methods = '' [, array $callbacks = '']]])","return":"<p class=\"para\">   Returns a resource on success, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_disconnect":{"id":"function.ssh2-disconnect","purpose":"Close a connection to a remote SSH server","prototype":"bool ssh2_disconnect(resource $session)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 1.0"},"ssh2_exec":{"id":"function.ssh2-exec","purpose":"Execute a command on a remote server","prototype":"resource ssh2_exec(resource $session, string $command [, string $pty = '' [, array $env = '' [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]])","return":"<p class=\"para\">   Returns a stream on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_fetch_stream":{"id":"function.ssh2-fetch-stream","purpose":"Fetch an extended data stream","prototype":"resource ssh2_fetch_stream(resource $channel, int $streamid)","return":"<p class=\"para\">   Returns the requested stream resource.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_fingerprint":{"id":"function.ssh2-fingerprint","purpose":"Retrieve fingerprint of remote server","prototype":"string ssh2_fingerprint(resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX])","return":"<p class=\"para\">   Returns the hostkey hash as a string.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_methods_negotiated":{"id":"function.ssh2-methods-negotiated","purpose":"Return list of negotiated methods","prototype":"array ssh2_methods_negotiated(resource $session)","return":"<p class=\"para\">     <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_publickey_add":{"id":"function.ssh2-publickey-add","purpose":"Add an authorized publickey","prototype":"bool ssh2_publickey_add(resource $pkey, string $algoname, string $blob [, bool $overwrite = '' [, array $attributes = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.10"},"ssh2_publickey_init":{"id":"function.ssh2-publickey-init","purpose":"Initialize Publickey subsystem","prototype":"resource ssh2_publickey_init(resource $session)","return":"<p class=\"para\">   Returns an <em>SSH2 Publickey Subsystem<\/em> resource for use   with all other ssh2_publickey_*() methods or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.10"},"ssh2_publickey_list":{"id":"function.ssh2-publickey-list","purpose":"List currently authorized publickeys","prototype":"array ssh2_publickey_list(resource $pkey)","return":"<p class=\"para\">   Returns a numerically indexed array of keys,   each of which is an associative array containing:   name, blob, and attrs elements.  <\/p>  <p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Publickey elements<\/strong><\/caption>         <thead>      <tr>       <th>Array Key<\/th>       <th>Meaning<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>name<\/td>       <td>Name of algorithm used by this publickey, for example:       <em>ssh-dss<\/em> or <em>ssh-rsa<\/em>.<\/td>      <\/tr>      <tr>       <td>blob<\/td>       <td>Publickey blob as raw binary data.<\/td>      <\/tr>      <tr>       <td>attrs<\/td>       <td>Attributes assigned to this publickey. The most common       attribute, and the only one supported by publickey version 1       servers, is <em>comment<\/em>, which may be any freeform       string.<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL ssh2 >= 0.10"},"ssh2_publickey_remove":{"id":"function.ssh2-publickey-remove","purpose":"Remove an authorized publickey","prototype":"bool ssh2_publickey_remove(resource $pkey, string $algoname, string $blob)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.10"},"ssh2_scp_recv":{"id":"function.ssh2-scp-recv","purpose":"Request a file via SCP","prototype":"bool ssh2_scp_recv(resource $session, string $remote_file, string $local_file)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_scp_send":{"id":"function.ssh2-scp-send","purpose":"Send a file via SCP","prototype":"bool ssh2_scp_send(resource $session, string $local_file, string $remote_file [, int $create_mode = 0644])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_chmod":{"id":"function.ssh2-sftp-chmod","purpose":"Changes file mode","prototype":"bool ssh2_sftp_chmod(resource $sftp, string $filename, int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.12"},"ssh2_sftp_lstat":{"id":"function.ssh2-sftp-lstat","purpose":"Stat a symbolic link","prototype":"array ssh2_sftp_lstat(resource $sftp, string $path)","return":"<p class=\"para\">   See the documentation for <span class=\"function\">stat<\/span> for details on the   values which may be returned.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_mkdir":{"id":"function.ssh2-sftp-mkdir","purpose":"Create a directory","prototype":"bool ssh2_sftp_mkdir(resource $sftp, string $dirname [, int $mode = 0777 [, bool $recursive = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_readlink":{"id":"function.ssh2-sftp-readlink","purpose":"Return the target of a symbolic link","prototype":"string ssh2_sftp_readlink(resource $sftp, string $link)","return":"<p class=\"para\">   Returns the target of the symbolic <code class=\"parameter\">link<\/code>.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_realpath":{"id":"function.ssh2-sftp-realpath","purpose":"Resolve the realpath of a provided path string","prototype":"string ssh2_sftp_realpath(resource $sftp, string $filename)","return":"<p class=\"para\">   Returns the real path as a string.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_rename":{"id":"function.ssh2-sftp-rename","purpose":"Rename a remote file","prototype":"bool ssh2_sftp_rename(resource $sftp, string $from, string $to)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_rmdir":{"id":"function.ssh2-sftp-rmdir","purpose":"Remove a directory","prototype":"bool ssh2_sftp_rmdir(resource $sftp, string $dirname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_stat":{"id":"function.ssh2-sftp-stat","purpose":"Stat a file on a remote filesystem","prototype":"array ssh2_sftp_stat(resource $sftp, string $path)","return":"<p class=\"para\">   See the documentation for <span class=\"function\">stat<\/span> for details on the   values which may be returned.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_symlink":{"id":"function.ssh2-sftp-symlink","purpose":"Create a symlink","prototype":"bool ssh2_sftp_symlink(resource $sftp, string $target, string $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp_unlink":{"id":"function.ssh2-sftp-unlink","purpose":"Delete a file","prototype":"bool ssh2_sftp_unlink(resource $sftp, string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_sftp":{"id":"function.ssh2-sftp","purpose":"Initialize SFTP subsystem","prototype":"resource ssh2_sftp(resource $session)","return":"<p class=\"para\">   This method returns an <em>SSH2 SFTP<\/em> resource for use with   all other ssh2_sftp_*() methods and the   <a href=\"wrappers.ssh2.html\" class=\"link\">ssh2.sftp:\/\/<\/a> fopen wrapper.  <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_shell":{"id":"function.ssh2-shell","purpose":"Request an interactive shell","prototype":"resource ssh2_shell(resource $session [, string $term_type = \"vanilla\" [, array $env = '' [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]])","return":"<p class=\"para\">     <\/p>","versions":"PECL ssh2 >= 0.9.0"},"ssh2_tunnel":{"id":"function.ssh2-tunnel","purpose":"Open a tunnel through a remote server","prototype":"resource ssh2_tunnel(resource $session, string $host, int $port)","return":"<p class=\"para\">     <\/p>","versions":"PECL ssh2 >= 0.9.0"},"stomp_connect_error":{"id":"function.stomp-connect-error","purpose":"Returns a string description of the last connect error","prototype":"string stomp_connect_error()","return":"<p class=\"para\">   A string that describes the error, or <strong><code>NULL<\/code><\/strong> if no error occurred.   <\/p>","versions":"PECL stomp >= 0.3.0"},"stomp_version":{"id":"function.stomp-version","purpose":"Gets the current stomp extension version","prototype":"string stomp_version()","return":"<p class=\"para\">    It returns the current stomp extension version  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::abort":{"id":"stomp.abort","purpose":"Rolls back a transaction in progress","prototype":"bool Stomp::abort(string $transaction_id [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_abort":{"id":"stomp.abort","purpose":"Rolls back a transaction in progress","prototype":"bool stomp_abort(string $transaction_id [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::ack":{"id":"stomp.ack","purpose":"Acknowledges consumption of a message","prototype":"bool Stomp::ack(mixed $msg [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_ack":{"id":"stomp.ack","purpose":"Acknowledges consumption of a message","prototype":"bool stomp_ack(mixed $msg [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::begin":{"id":"stomp.begin","purpose":"Starts a transaction","prototype":"bool Stomp::begin(string $transaction_id [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_begin":{"id":"stomp.begin","purpose":"Starts a transaction","prototype":"bool stomp_begin(string $transaction_id [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::commit":{"id":"stomp.commit","purpose":"Commits a transaction in progress","prototype":"bool Stomp::commit(string $transaction_id [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_commit":{"id":"stomp.commit","purpose":"Commits a transaction in progress","prototype":"bool stomp_commit(string $transaction_id [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::__construct":{"id":"stomp.construct","purpose":"Opens a connection","prototype":"resource Stomp::__construct([string $broker = ini_get(\"stomp.default_broker_uri\") [, string $username = '' [, string $password = '' [, array $headers = '']]]])","return":"<blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <p class=\"para\">A transaction header may be specified, indicating that the message acknowledgment should be part of the named transaction.<\/p><\/p><\/blockquote>","versions":"PECL stomp >= 0.1.0"},"stomp_connect":{"id":"stomp.construct","purpose":"Opens a connection","prototype":"resource stomp_connect([string $broker = ini_get(\"stomp.default_broker_uri\") [, string $username = '' [, string $password = '' [, array $headers = '']]]])","return":"<blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <p class=\"para\">A transaction header may be specified, indicating that the message acknowledgment should be part of the named transaction.<\/p><\/p><\/blockquote>","versions":"PECL stomp >= 0.1.0"},"Stomp::__destruct":{"id":"stomp.destruct","purpose":"Closes stomp connection","prototype":"bool Stomp::__destruct(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_close":{"id":"stomp.destruct","purpose":"Closes stomp connection","prototype":"bool stomp_close(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::error":{"id":"stomp.error","purpose":"Gets the last stomp error","prototype":"string Stomp::error(resource $link)","return":"<p class=\"para\">   Returns an error string or <strong><code>FALSE<\/code><\/strong> if no error occurred.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_error":{"id":"stomp.error","purpose":"Gets the last stomp error","prototype":"string stomp_error(resource $link)","return":"<p class=\"para\">   Returns an error string or <strong><code>FALSE<\/code><\/strong> if no error occurred.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::getReadTimeout":{"id":"stomp.getreadtimeout","purpose":"Gets read timeout","prototype":"array Stomp::getReadTimeout(resource $link)","return":"<p class=\"para\">   Returns an array with 2 elements: sec and usec.   <\/p>","versions":"PECL stomp >= 0.3.0"},"stomp_get_read_timeout":{"id":"stomp.getreadtimeout","purpose":"Gets read timeout","prototype":"array stomp_get_read_timeout(resource $link)","return":"<p class=\"para\">   Returns an array with 2 elements: sec and usec.   <\/p>","versions":"PECL stomp >= 0.3.0"},"Stomp::getSessionId":{"id":"stomp.getsessionid","purpose":"Gets the current stomp session ID","prototype":"string Stomp::getSessionId(resource $link)","return":"<p class=\"para\">    <span class=\"type\">string<\/span> session id on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_get_session_id":{"id":"stomp.getsessionid","purpose":"Gets the current stomp session ID","prototype":"string stomp_get_session_id(resource $link)","return":"<p class=\"para\">    <span class=\"type\">string<\/span> session id on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::hasFrame":{"id":"stomp.hasframe","purpose":"Indicates whether or not there is a frame ready to read","prototype":"bool Stomp::hasFrame(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a frame is ready to read, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_has_frame":{"id":"stomp.hasframe","purpose":"Indicates whether or not there is a frame ready to read","prototype":"bool stomp_has_frame(resource $link)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a frame is ready to read, or <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::readFrame":{"id":"stomp.readframe","purpose":"Reads the next frame","prototype":"array Stomp::readFrame([string $class_name = \"stompFrame\", resource $link])","return":"<blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <p class=\"para\">A transaction header may be specified, indicating that the message acknowledgment should be part of the named transaction.<\/p><\/p><\/blockquote>","versions":"PECL stomp >= 0.1.0"},"stomp_read_frame":{"id":"stomp.readframe","purpose":"Reads the next frame","prototype":"array stomp_read_frame([string $class_name = \"stompFrame\", resource $link])","return":"<blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>: <p class=\"para\">A transaction header may be specified, indicating that the message acknowledgment should be part of the named transaction.<\/p><\/p><\/blockquote>","versions":"PECL stomp >= 0.1.0"},"Stomp::send":{"id":"stomp.send","purpose":"Sends a message","prototype":"bool Stomp::send(string $destination, mixed $msg [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_send":{"id":"stomp.send","purpose":"Sends a message","prototype":"bool stomp_send(string $destination, mixed $msg [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::setReadTimeout":{"id":"stomp.setreadtimeout","purpose":"Sets read timeout","prototype":"void Stomp::setReadTimeout(int $seconds [, int $microseconds = '', resource $link])","return":"","versions":"PECL stomp >= 0.3.0"},"stomp_set_read_timeout":{"id":"stomp.setreadtimeout","purpose":"Sets read timeout","prototype":"void stomp_set_read_timeout(int $seconds [, int $microseconds = '', resource $link])","return":"","versions":"PECL stomp >= 0.3.0"},"Stomp::subscribe":{"id":"stomp.subscribe","purpose":"Registers to listen to a given destination","prototype":"bool Stomp::subscribe(string $destination [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_subscribe":{"id":"stomp.subscribe","purpose":"Registers to listen to a given destination","prototype":"bool stomp_subscribe(string $destination [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"Stomp::unsubscribe":{"id":"stomp.unsubscribe","purpose":"Removes an existing subscription","prototype":"bool Stomp::unsubscribe(string $destination [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"stomp_unsubscribe":{"id":"stomp.unsubscribe","purpose":"Removes an existing subscription","prototype":"bool stomp_unsubscribe(string $destination [, array $headers = '', resource $link])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL stomp >= 0.1.0"},"StompFrame::__construct":{"id":"stompframe.construct","purpose":"Constructor","prototype":" StompFrame::__construct([string $command = '' [, array $headers = '' [, string $body = '']]])","return":"","versions":"PECL stomp >= 0.1.0"},"StompException::getDetails":{"id":"stomp.getdetails","purpose":"Get exception details","prototype":"string StompException::getDetails()","return":"<p class=\"para\">    <span class=\"type\">string<\/span> containing the error details.  <\/p>","versions":"PECL stomp >= 0.1.0"},"SVM::__construct":{"id":"svm.construct","purpose":"Construct a new SVM object","prototype":" SVM::__construct()","return":"<p class=\"para\">   Throws SVMException if the libsvm library could not be loaded  <\/p>","versions":"PECL svm >= 0.1.0"},"SVM::crossvalidate":{"id":"svm.crossvalidate","purpose":"Test training params on subsets of the training data","prototype":"float SVM::crossvalidate(array $problem, int $number_of_folds)","return":"<p class=\"para\">   The correct percentage, expressed as a floating point number from 0-1.    In the case of NU_SVC or EPSILON_SVR kernels the mean squared error will    returned instead.   <\/p>","versions":"PECL svm >= 0.1.0"},"SVM::getOptions":{"id":"svm.getoptions","purpose":"Return the current training parameters","prototype":"array SVM::getOptions()","return":"<p class=\"para\">   Returns an array of configuration settings.   <\/p>","versions":"PECL svm >= 0.1.0"},"SVM::setOptions":{"id":"svm.setoptions","purpose":"Set training parameters","prototype":"bool SVM::setOptions(array $params)","return":"<p class=\"para\">   Return true on success, throws SVMException on error.  <\/p>","versions":"PECL svm >= 0.1.0"},"SVM::train":{"id":"svm.train","purpose":"Create a SVMModel based on training data","prototype":"SVMModel SVM::train(array $problem [, array $weights = ''])","return":"<p class=\"para\">   Returns an SVMModel that can be used to classify previously unseen data.   Throws SVMException on error  <\/p>","versions":"PECL svm >= 0.1.0"},"SVMModel::checkProbabilityModel":{"id":"svmmodel.checkprobabilitymodel","purpose":"Returns true if the model has probability information","prototype":"bool SVMModel::checkProbabilityModel()","return":"<p class=\"para\">   Return a boolean value  <\/p>","versions":"PECL svm >= 0.1.5"},"SVMModel::__construct":{"id":"svmmodel.construct","purpose":"Construct a new SVMModel","prototype":" SVMModel::__construct([string $filename = ''])","return":"<p class=\"para\">   Throws SVMException on error  <\/p>","versions":"PECL svm >= 0.1.0"},"SVMModel::getLabels":{"id":"svmmodel.getlabels","purpose":"Get the labels the model was trained on","prototype":"array SVMModel::getLabels()","return":"<p class=\"para\">   Return an array of labels  <\/p>","versions":"PECL svm >= 0.1.5"},"SVMModel::getNrClass":{"id":"svmmodel.getnrclass","purpose":"Returns the number of classes the model was trained with","prototype":"int SVMModel::getNrClass()","return":"<p class=\"para\">   Return an integer number of classes  <\/p>","versions":"PECL svm >= 0.1.5"},"SVMModel::getSvmType":{"id":"svmmodel.getsvmtype","purpose":"Get the SVM type the model was trained with","prototype":"int SVMModel::getSvmType()","return":"<p class=\"para\">   Return an integer SVM type  <\/p>","versions":"PECL svm >= 0.1.5"},"SVMModel::getSvrProbability":{"id":"svmmodel.getsvrprobability","purpose":"Get the sigma value for regression types","prototype":"float SVMModel::getSvrProbability()","return":"<p class=\"para\">   Returns a sigma value  <\/p>","versions":"PECL svm >= 0.1.5"},"SVMModel::load":{"id":"svmmodel.load","purpose":"Load a saved SVM Model","prototype":"bool SVMModel::load(string $filename)","return":"<p class=\"para\">   Throws SVMException on error.   Returns true on success.  <\/p>","versions":"PECL svm >= 0.1.00.1.0"},"SVMModel::predict_probability":{"id":"svmmodel.predict-probability","purpose":"Return class probabilities for previous unseen data","prototype":"float SVMModel::predict_probability(array $data)","return":"<p class=\"para\">   Float the predicted value. This will be a class label in the case of    classification, a real value in the case of regression.   Throws SVMException on error  <\/p>","versions":"PECL svm >= 0.1.4"},"SVMModel::predict":{"id":"svmmodel.predict","purpose":"Predict a value for previously unseen data","prototype":"float SVMModel::predict(array $data)","return":"<p class=\"para\">   Float the predicted value. This will be a class label in the case of    classification, a real value in the case of regression.   Throws SVMException on error  <\/p>","versions":"PECL svm >= 0.1.0"},"SVMModel::save":{"id":"svmmodel.save","purpose":"Save a model to a file","prototype":"bool SVMModel::save(string $filename)","return":"<p class=\"para\">   Throws SVMException on error.    Returns true on success.  <\/p>","versions":"PECL svm >= 0.1.0"},"svn_add":{"id":"function.svn-add","purpose":"Schedules the addition of an item in a working directory","prototype":"bool svn_add(string $path [, bool $recursive = '' [, bool $force = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_auth_get_parameter":{"id":"function.svn-auth-get-parameter","purpose":"Retrieves authentication parameter","prototype":"string svn_auth_get_parameter(string $key)","return":"<p class=\"para\">   Returns the string value of the parameter at <code class=\"parameter\">key<\/code>;   returns <strong><code>NULL<\/code><\/strong> if parameter does not exist.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_auth_set_parameter":{"id":"function.svn-auth-set-parameter","purpose":"Sets an authentication parameter","prototype":"void svn_auth_set_parameter(string $key, string $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_blame":{"id":"function.svn-blame","purpose":"Get the SVN blame for a file","prototype":"array svn_blame(string $repository_url [, int $revision_no = SVN_REVISION_HEAD])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of SVN blame information separated by line   which includes the revision number, line number, line of code,   author, and date.  <\/p>","versions":"PECL svn >= 0.3.0"},"svn_cat":{"id":"function.svn-cat","purpose":"Returns the contents of a file in a repository","prototype":"string svn_cat(string $repos_url [, int $revision_no = ''])","return":"<p class=\"para\">   Returns the string contents of the item from the repository on   success, and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_checkout":{"id":"function.svn-checkout","purpose":"Checks out a working copy from the repository","prototype":"bool svn_checkout(string $repos, string $targetpath [, int $revision = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_cleanup":{"id":"function.svn-cleanup","purpose":"Recursively cleanup a working copy directory, finishing incomplete operations and removing locks","prototype":"bool svn_cleanup(string $workingdir)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_client_version":{"id":"function.svn-client-version","purpose":"Returns the version of the SVN client libraries","prototype":"string svn_client_version()","return":"<p class=\"para\">   String version number, usually in form of x.y.z.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_commit":{"id":"function.svn-commit","purpose":"Sends changes from the local working copy to the repository","prototype":"array svn_commit(string $log, array $targets [, bool $recursive = ''])","return":"<p class=\"para\">   Returns array in form of:  <\/p>    <div class=\"example-contents screen\"><div class=\"cdata\"><pre>array(    0 =&gt; integer revision number of commit    1 =&gt; string ISO 8601 date and time of commit    2 =&gt; name of committer)<\/pre><\/div>    <\/div>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_delete":{"id":"function.svn-delete","purpose":"Delete items from a working copy or repository","prototype":"bool svn_delete(string $path [, bool $force = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.4.0"},"svn_diff":{"id":"function.svn-diff","purpose":"Recursively diffs two paths","prototype":"array svn_diff(string $path1, int $rev1, string $path2, int $rev2)","return":"<p class=\"para\">   Returns an array-list consisting of two streams: the first is the diff output   and the second contains error stream output. The streams can be   read using <span class=\"function\">fread<\/span>. Returns <strong><code>FALSE<\/code><\/strong> or <strong><code>NULL<\/code><\/strong> on   error.  <\/p>  <p class=\"para\">   The diff output will, by default, be in the form of Subversion&#039;s   custom unified diff format, but an   <a href=\"http:\/\/svnbook.red-bean.com\/en\/1.2\/svn.advanced.externaldifftools.html\" class=\"link external\">&raquo;&nbsp;external   diff engine<\/a> may be   used depending on Subversion&#039;s configuration.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_export":{"id":"function.svn-export","purpose":"Export the contents of a SVN directory","prototype":"bool svn_export(string $frompath, string $topath [, bool $working_copy = '' [, int $revision_no = -1]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.3.0"},"svn_fs_abort_txn":{"id":"function.svn-fs-abort-txn","purpose":"Abort a transaction, returns true if everything is okay, false otherwise","prototype":"bool svn_fs_abort_txn(resource $txn)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_apply_text":{"id":"function.svn-fs-apply-text","purpose":"Creates and returns a stream that will be used to replace","prototype":"resource svn_fs_apply_text(resource $root, string $path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_begin_txn2":{"id":"function.svn-fs-begin-txn2","purpose":"Create a new transaction","prototype":"resource svn_fs_begin_txn2(resource $repos, int $rev)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_change_node_prop":{"id":"function.svn-fs-change-node-prop","purpose":"Return true if everything is ok, false otherwise","prototype":"bool svn_fs_change_node_prop(resource $root, string $path, string $name, string $value)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_check_path":{"id":"function.svn-fs-check-path","purpose":"Determines what kind of item lives at path in a given repository fsroot","prototype":"int svn_fs_check_path(resource $fsroot, string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_contents_changed":{"id":"function.svn-fs-contents-changed","purpose":"Return true if content is different, false otherwise","prototype":"bool svn_fs_contents_changed(resource $root1, string $path1, resource $root2, string $path2)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_copy":{"id":"function.svn-fs-copy","purpose":"Copies a file or a directory, returns true if all is ok, false otherwise","prototype":"bool svn_fs_copy(resource $from_root, string $from_path, resource $to_root, string $to_path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_delete":{"id":"function.svn-fs-delete","purpose":"Deletes a file or a directory, return true if all is ok, false otherwise","prototype":"bool svn_fs_delete(resource $root, string $path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_dir_entries":{"id":"function.svn-fs-dir-entries","purpose":"Enumerates the directory entries under path; returns a hash of dir names to file type","prototype":"array svn_fs_dir_entries(resource $fsroot, string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_file_contents":{"id":"function.svn-fs-file-contents","purpose":"Returns a stream to access the contents of a file from a given version of the fs","prototype":"resource svn_fs_file_contents(resource $fsroot, string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_file_length":{"id":"function.svn-fs-file-length","purpose":"Returns the length of a file from a given version of the fs","prototype":"int svn_fs_file_length(resource $fsroot, string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_is_dir":{"id":"function.svn-fs-is-dir","purpose":"Return true if the path points to a directory, false otherwise","prototype":"bool svn_fs_is_dir(resource $root, string $path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_is_file":{"id":"function.svn-fs-is-file","purpose":"Return true if the path points to a file, false otherwise","prototype":"bool svn_fs_is_file(resource $root, string $path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_make_dir":{"id":"function.svn-fs-make-dir","purpose":"Creates a new empty directory, returns true if all is ok, false otherwise","prototype":"bool svn_fs_make_dir(resource $root, string $path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_make_file":{"id":"function.svn-fs-make-file","purpose":"Creates a new empty file, returns true if all is ok, false otherwise","prototype":"bool svn_fs_make_file(resource $root, string $path)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_node_created_rev":{"id":"function.svn-fs-node-created-rev","purpose":"Returns the revision in which path under fsroot was created","prototype":"int svn_fs_node_created_rev(resource $fsroot, string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_node_prop":{"id":"function.svn-fs-node-prop","purpose":"Returns the value of a property for a node","prototype":"string svn_fs_node_prop(resource $fsroot, string $path, string $propname)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_props_changed":{"id":"function.svn-fs-props-changed","purpose":"Return true if props are different, false otherwise","prototype":"bool svn_fs_props_changed(resource $root1, string $path1, resource $root2, string $path2)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_revision_prop":{"id":"function.svn-fs-revision-prop","purpose":"Fetches the value of a named property","prototype":"string svn_fs_revision_prop(resource $fs, int $revnum, string $propname)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_revision_root":{"id":"function.svn-fs-revision-root","purpose":"Get a handle on a specific version of the repository root","prototype":"resource svn_fs_revision_root(resource $fs, int $revnum)","return":"","versions":"PECL svn >= 0.1.0"},"svn_fs_txn_root":{"id":"function.svn-fs-txn-root","purpose":"Creates and returns a transaction root","prototype":"resource svn_fs_txn_root(resource $txn)","return":"","versions":"PECL svn >= 0.2.0"},"svn_fs_youngest_rev":{"id":"function.svn-fs-youngest-rev","purpose":"Returns the number of the youngest revision in the filesystem","prototype":"int svn_fs_youngest_rev(resource $fs)","return":"","versions":"PECL svn >= 0.1.0"},"svn_import":{"id":"function.svn-import","purpose":"Imports an unversioned path into a repository","prototype":"bool svn_import(string $path, string $url, bool $nonrecursive)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.2.0"},"svn_log":{"id":"function.svn-log","purpose":"Returns the commit log messages of a repository URL","prototype":"array svn_log(string $repos_url [, int $start_revision = '' [, int $end_revision = '' [, int $limit = '' [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY]]]])","return":"<p class=\"para\">   On success, this function returns an array file listing in the format   of:   <div class=\"example-contents screen\"><div class=\"cdata\"><pre>[0] =&gt; Array, ordered most recent (highest) revision first(    [rev] =&gt; integer revision number    [author] =&gt; string author name    [msg] =&gt; string log message    [date] =&gt; string date formatted per ISO 8601, i.e. date(&#039;c&#039;)    [paths] =&gt; Array, describing changed files        (            [0] =&gt; Array                (                    [action] =&gt; string letter signifying change                    [path] =&gt;  absolute repository path of changed file                )            [1] =&gt; ...        ))[1] =&gt; ...<\/pre><\/div>    <\/div>  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The output will always be a numerically indexed array of arrays,    even when there are none or only one log message(s).   <\/p>  <\/p><\/blockquote>  <p class=\"para\">   The value of <var class=\"varname\">action<\/var> is a subset of the   <a href=\"http:\/\/svnbook.red-bean.com\/en\/1.2\/svn.ref.svn.c.status.html\" class=\"link external\">&raquo;&nbsp;status output   in the first column<\/a>, where possible values are:  <\/p>  <table class=\"doctable table\">   <caption><strong>Actions<\/strong><\/caption>        <thead>      <tr>       <th>Letter<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>M<\/td>       <td>Item\/props was modified<\/td>      <\/tr>      <tr>       <td>A<\/td>       <td>Item was added<\/td>      <\/tr>      <tr>       <td>D<\/td>       <td>Item was deleted<\/td>      <\/tr>      <tr>       <td>R<\/td>       <td>Item was replaced<\/td>      <\/tr>     <\/tbody>      <\/table>  <p class=\"para\">   If no changes were made to the item, an empty array is returned.  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_ls":{"id":"function.svn-ls","purpose":"Returns list of directory contents in repository URL, optionally at revision number","prototype":"array svn_ls(string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = '' [, bool $peg = '']]])","return":"<p class=\"para\">   On success, this function returns an array file listing in the format   of:   <div class=\"example-contents screen\"><div class=\"cdata\"><pre>[0] =&gt; Array    (        [created_rev] =&gt; integer revision number of last edit        [last_author] =&gt; string author name of last edit        [size] =&gt; integer byte file size of file        [time] =&gt; string date of last edit in form &#039;M d H:i&#039;                  or &#039;M d Y&#039;, depending on how old the file is        [time_t] =&gt; integer unix timestamp of last edit        [name] =&gt; name of file\/directory        [type] =&gt; type, can be &#039;file&#039; or &#039;dir&#039;    )[1] =&gt; ...<\/pre><\/div>    <\/div>  <\/p>","versions":"PECL svn >= 0.1.0"},"svn_mkdir":{"id":"function.svn-mkdir","purpose":"Creates a directory in a working copy or repository","prototype":"bool svn_mkdir(string $path [, string $log_message = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.4.0"},"svn_repos_create":{"id":"function.svn-repos-create","purpose":"Create a new subversion repository at path","prototype":"resource svn_repos_create(string $path [, array $config = '' [, array $fsconfig = '']])","return":"","versions":"PECL svn >= 0.1.0"},"svn_repos_fs_begin_txn_for_commit":{"id":"function.svn-repos-fs-begin-txn-for-commit","purpose":"Create a new transaction","prototype":"resource svn_repos_fs_begin_txn_for_commit(resource $repos, int $rev, string $author, string $log_msg)","return":"","versions":"PECL svn >= 0.2.0"},"svn_repos_fs_commit_txn":{"id":"function.svn-repos-fs-commit-txn","purpose":"Commits a transaction and returns the new revision","prototype":"int svn_repos_fs_commit_txn(resource $txn)","return":"","versions":"PECL svn >= 0.2.0"},"svn_repos_fs":{"id":"function.svn-repos-fs","purpose":"Gets a handle on the filesystem for a repository","prototype":"resource svn_repos_fs(resource $repos)","return":"","versions":"PECL svn >= 0.1.0"},"svn_repos_hotcopy":{"id":"function.svn-repos-hotcopy","purpose":"Make a hot-copy of the repos at repospath; copy it to destpath","prototype":"bool svn_repos_hotcopy(string $repospath, string $destpath, bool $cleanlogs)","return":"","versions":"PECL svn >= 0.1.0"},"svn_repos_open":{"id":"function.svn-repos-open","purpose":"Open a shared lock on a repository","prototype":"resource svn_repos_open(string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_repos_recover":{"id":"function.svn-repos-recover","purpose":"Run recovery procedures on the repository located at path","prototype":"bool svn_repos_recover(string $path)","return":"","versions":"PECL svn >= 0.1.0"},"svn_revert":{"id":"function.svn-revert","purpose":"Revert changes to the working copy","prototype":"bool svn_revert(string $path [, bool $recursive = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.3.0"},"svn_status":{"id":"function.svn-status","purpose":"Returns the status of working copy files and directories","prototype":"array svn_status(string $path [, int $flags = ''])","return":"<p class=\"para\">   Returns a numerically indexed array of associative arrays detailing   the status of items in the repository:  <\/p>  <div class=\"example-contents screen\"><div class=\"cdata\"><pre>Array (    [0] =&gt; Array (        \/\/ information on item    )    [1] =&gt; ...)<\/pre><\/div>  <\/div>  <p class=\"para\">   The information on the item is an associative array that can contain   the following keys:  <\/p>  <dl>       <dt><var class=\"varname\">path<\/var><\/dt>     <dd>      <span class=\"simpara\">       String path to file\/directory of this entry on local filesystem.      <\/span>     <\/dd>          <dt><var class=\"varname\">text_status<\/var><\/dt>     <dd>      <span class=\"simpara\">       Status of item&#039;s text. Refer to <a href=\"svn.constants.html#svn.constants.status\" class=\"link\">status constants<\/a> for possible values.      <\/span>     <\/dd>          <dt><var class=\"varname\">repos_text_status<\/var><\/dt>     <dd>      <span class=\"simpara\">       Status of item&#039;s text in repository. Only accurate if       <code class=\"parameter\">update<\/code> was set to <strong><code>TRUE<\/code><\/strong>.       Refer to <a href=\"svn.constants.html#svn.constants.status\" class=\"link\">status constants<\/a> for possible values.      <\/span>     <\/dd>          <dt><var class=\"varname\">prop_status<\/var><\/dt>     <dd>      <span class=\"simpara\">       Status of item&#039;s properties. Refer to <a href=\"svn.constants.html#svn.constants.status\" class=\"link\">status constants<\/a> for possible values.      <\/span>     <\/dd>          <dt><var class=\"varname\">repos_prop_status<\/var><\/dt>     <dd>      <span class=\"simpara\">       Status of item&#039;s property in repository. Only accurate if       <code class=\"parameter\">update<\/code> was set to <strong><code>TRUE<\/code><\/strong>. Refer to <a href=\"svn.constants.html#svn.constants.status\" class=\"link\">status constants<\/a> for possible values.      <\/span>     <\/dd>          <dt><var class=\"varname\">locked<\/var><\/dt>     <dd>      <span class=\"simpara\">       Whether or not the item is locked. (Only set if <strong><code>TRUE<\/code><\/strong>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">copied<\/var><\/dt>     <dd>      <span class=\"simpara\">       Whether or not the item was copied (scheduled for addition with       history). (Only set if <strong><code>TRUE<\/code><\/strong>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">switched<\/var><\/dt>     <dd>      <span class=\"simpara\">       Whether or not the item was switched using the switch command.       (Only set if <strong><code>TRUE<\/code><\/strong>)      <\/span>     <\/dd>     <\/dl>  <p class=\"para\">   These keys are only set if the item is versioned:  <\/p>  <dl>       <dt><var class=\"varname\">name<\/var><\/dt>     <dd>      <span class=\"simpara\">       Base name of item in repository.      <\/span>     <\/dd>          <dt><var class=\"varname\">url<\/var><\/dt>     <dd>      <span class=\"simpara\">       URL of item in repository.      <\/span>     <\/dd>          <dt><var class=\"varname\">repos<\/var><\/dt>     <dd>      <span class=\"simpara\">       Base URL of repository.      <\/span>     <\/dd>          <dt><var class=\"varname\">revision<\/var><\/dt>     <dd>      <span class=\"simpara\">       Integer revision of item in working copy.      <\/span>     <\/dd>          <dt><var class=\"varname\">kind<\/var><\/dt>     <dd>      <span class=\"simpara\">       Type of item, i.e. file or directory. Refer to <a href=\"svn.constants.html#svn.constants.type\" class=\"link\">type constants<\/a> for possible values.      <\/span>     <\/dd>          <dt><var class=\"varname\">schedule<\/var><\/dt>     <dd>      <span class=\"simpara\">       Scheduled action for item, i.e. addition or deletion. Constants       for these magic numbers are not available, they can       be emulated by using:      <\/span>       <div class=\"example-contents\"><div class=\"phpcode\"><code><span style=\"color: #000000\"><span style=\"color: #0000BB\">&lt;?php<br \/><\/span><span style=\"color: #007700\">if&nbsp;(!<\/span><span style=\"color: #0000BB\">defined<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #DD0000\">'svn_wc_schedule_normal'<\/span><span style=\"color: #007700\">))&nbsp;{<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">define<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #DD0000\">'svn_wc_schedule_normal'<\/span><span style=\"color: #007700\">,&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">0<\/span><span style=\"color: #007700\">);&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;nothing&nbsp;special<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">define<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #DD0000\">'svn_wc_schedule_add'<\/span><span style=\"color: #007700\">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">1<\/span><span style=\"color: #007700\">);&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;item&nbsp;will&nbsp;be&nbsp;added<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">define<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #DD0000\">'svn_wc_schedule_delete'<\/span><span style=\"color: #007700\">,&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">2<\/span><span style=\"color: #007700\">);&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;item&nbsp;will&nbsp;be&nbsp;deleted<br \/>&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color: #0000BB\">define<\/span><span style=\"color: #007700\">(<\/span><span style=\"color: #DD0000\">'svn_wc_schedule_replace'<\/span><span style=\"color: #007700\">,&nbsp;<\/span><span style=\"color: #0000BB\">3<\/span><span style=\"color: #007700\">);&nbsp;<\/span><span style=\"color: #FF8000\">\/\/&nbsp;item&nbsp;will&nbsp;be&nbsp;added&nbsp;and&nbsp;deleted<br \/><\/span><span style=\"color: #007700\">}<br \/><\/span><span style=\"color: #0000BB\">?&gt;<\/span><\/span><\/code><\/div>      <\/div>     <\/dd>          <dt><var class=\"varname\">deleted<\/var><\/dt>     <dd>      <span class=\"simpara\">       Whether or not the item was deleted, but parent revision lags       behind. (Only set if <strong><code>TRUE<\/code><\/strong>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">absent<\/var><\/dt>     <dd>      <span class=\"simpara\">       Whether or not the item is absent, that is, Subversion knows that       there should be something there but there isn&#039;t. (Only set if       <strong><code>TRUE<\/code><\/strong>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">incomplete<\/var><\/dt>     <dd>      <span class=\"simpara\">       Whether or not the entries file for a directory is incomplete.       (Only set if <strong><code>TRUE<\/code><\/strong>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">cmt_date<\/var><\/dt>     <dd>      <span class=\"simpara\">       Integer Unix timestamp of last commit date. (Unaffected by <code class=\"parameter\">update<\/code>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">cmt_rev<\/var><\/dt>     <dd>      <span class=\"simpara\">       Integer revision of last commit. (Unaffected by <code class=\"parameter\">update<\/code>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">cmt_author<\/var><\/dt>     <dd>      <span class=\"simpara\">       String author of last commit. (Unaffected by <code class=\"parameter\">update<\/code>.)      <\/span>     <\/dd>          <dt><var class=\"varname\">prop_time<\/var><\/dt>     <dd>      <span class=\"simpara\">       Integer Unix timestamp of last up-to-date time for properties      <\/span>     <\/dd>          <dt><var class=\"varname\">text_time<\/var><\/dt>     <dd>      <span class=\"simpara\">       Integer Unix timestamp of last up-to-date time for text      <\/span>     <\/dd>        <\/dl>","versions":"PECL svn >= 0.1.0"},"svn_update":{"id":"function.svn-update","purpose":"Update working copy","prototype":"int svn_update(string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = '']])","return":"<p class=\"para\">   Returns new revision number on success, returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL svn >= 0.1.0"},"tcpwrap_check":{"id":"function.tcpwrap-check","purpose":"Performs a tcpwrap check","prototype":"bool tcpwrap_check(string $daemon, string $address [, string $user = '' [, bool $nodns = '']])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if access should be granted, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL tcpwrap >= 0.1.0"},"VarnishAdmin::auth":{"id":"varnishadmin.auth","purpose":"Authenticate on a varnish instance","prototype":"bool VarnishAdmin::auth()","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::ban":{"id":"varnishadmin.ban","purpose":"Ban URLs using a VCL expression","prototype":"int VarnishAdmin::ban(string $vcl_regex)","return":"<p class=\"para\">   Returns the varnish command status.     <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::banUrl":{"id":"varnishadmin.banurl","purpose":"Ban an URL using a VCL expression","prototype":"int VarnishAdmin::banUrl(string $vcl_regex)","return":"<p class=\"para\">   Returns the varnish command status.     <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::clearPanic":{"id":"varnishadmin.clearpanic","purpose":"Clear varnish instance panic messages","prototype":"int VarnishAdmin::clearPanic()","return":"<p class=\"para\">   Returns the varnish command status.     <\/p>","versions":"PECL varnish >= 0.4"},"VarnishAdmin::connect":{"id":"varnishadmin.connect","purpose":"Connect to a varnish instance administration interface","prototype":"bool VarnishAdmin::connect()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::__construct":{"id":"varnishadmin.construct","purpose":"VarnishAdmin constructor","prototype":" VarnishAdmin::__construct([array $args = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::disconnect":{"id":"varnishadmin.disconnect","purpose":"Disconnect from a varnish instance administration interface","prototype":"bool VarnishAdmin::disconnect()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL varnish >= 1.0.0"},"VarnishAdmin::getPanic":{"id":"varnishadmin.getpanic","purpose":"Get the last panic message on a varnish instance","prototype":"string VarnishAdmin::getPanic()","return":"<p class=\"para\">   Returns the last panic message on the current varnish instance.  <\/p>","versions":"PECL varnish >= 0.4"},"VarnishAdmin::getParams":{"id":"varnishadmin.getparams","purpose":"Fetch current varnish instance configuration parameters","prototype":"array VarnishAdmin::getParams()","return":"<p class=\"para\">   Returns an array with the varnish configuration parameters.  <\/p>","versions":"PECL varnish >= 0.4"},"VarnishAdmin::isRunning":{"id":"varnishadmin.isrunning","purpose":"Check if the varnish slave process is currently running","prototype":"bool VarnishAdmin::isRunning()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::setCompat":{"id":"varnishadmin.setcompat","purpose":"Set the class compat configuration param","prototype":"void VarnishAdmin::setCompat(int $compat)","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.9.2"},"VarnishAdmin::setHost":{"id":"varnishadmin.sethost","purpose":"Set the class host configuration param","prototype":"void VarnishAdmin::setHost(string $host)","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.8"},"VarnishAdmin::setIdent":{"id":"varnishadmin.setident","purpose":"Set the class ident configuration param","prototype":"void VarnishAdmin::setIdent(string $ident)","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.8"},"VarnishAdmin::setParam":{"id":"varnishadmin.setparam","purpose":"Set configuration param on the current varnish instance","prototype":"int VarnishAdmin::setParam(string $name, string|integer $value)","return":"<p class=\"para\">   Returns the varnish command status.  <\/p>","versions":"PECL varnish >= 0.4"},"VarnishAdmin::setPort":{"id":"varnishadmin.setport","purpose":"Set the class port configuration param","prototype":"void VarnishAdmin::setPort(int $port)","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.8"},"VarnishAdmin::setSecret":{"id":"varnishadmin.setsecret","purpose":"Set the class secret configuration param","prototype":"void VarnishAdmin::setSecret(string $secret)","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.8"},"VarnishAdmin::setTimeout":{"id":"varnishadmin.settimeout","purpose":"Set the class timeout configuration param","prototype":"void VarnishAdmin::setTimeout(int $timeout)","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.8"},"VarnishAdmin::start":{"id":"varnishadmin.start","purpose":"Start varnish worker process","prototype":"int VarnishAdmin::start()","return":"<p class=\"para\">   Returns the varnish command status.  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishAdmin::stop":{"id":"varnishadmin.stop","purpose":"Stop varnish worker process","prototype":"int VarnishAdmin::stop()","return":"<p class=\"para\">   Returns the varnish command status.  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishStat::__construct":{"id":"varnishstat.construct","purpose":"VarnishStat constructor","prototype":" VarnishStat::__construct([array $args = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishStat::getSnapshot":{"id":"varnishstat.getsnapshot","purpose":"Get the current varnish instance statistics snapshot","prototype":"array VarnishStat::getSnapshot()","return":"<p class=\"para\">   Array with the varnish statistic snapshot. The array keys are identical to   that in the varnishstat tool.  <\/p>","versions":"PECL varnish >= 0.3"},"VarnishLog::__construct":{"id":"varnishlog.construct","purpose":"Varnishlog constructor","prototype":" VarnishLog::__construct([array $args = ''])","return":"<p class=\"para\">  <\/p>","versions":"PECL varnish >= 0.6"},"VarnishLog::getLine":{"id":"varnishlog.getline","purpose":"Get next log line","prototype":"array VarnishLog::getLine()","return":"<p class=\"para\">   Returns an array with the log line data.  <\/p>","versions":"PECL varnish >= 0.6"},"VarnishLog::getTagName":{"id":"varnishlog.gettagname","purpose":"Get the log tag string representation by its index","prototype":"string VarnishLog::getTagName(int $index)","return":"<p class=\"para\">   Returns the log tag name as <span class=\"type\">string<\/span>.  <\/p>","versions":"PECL varnish >= 0.6"},"yaz_addinfo":{"id":"function.yaz-addinfo","purpose":"Returns additional error information","prototype":"string yaz_addinfo(resource $id)","return":"<p class=\"para\">   A string containing additional error information or an empty string if the   last operation was successful or if no additional information was provided   by the server.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_ccl_conf":{"id":"function.yaz-ccl-conf","purpose":"Configure CCL parser","prototype":"void yaz_ccl_conf(resource $id, array $config)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.5, PECL yaz >= 0.9.0"},"yaz_ccl_parse":{"id":"function.yaz-ccl-parse","purpose":"Invoke CCL Parser","prototype":"bool yaz_ccl_parse(resource $id, string $query, array $result)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PECL yaz >= 0.9.0"},"yaz_close":{"id":"function.yaz-close","purpose":"Close YAZ connection","prototype":"bool yaz_close(resource $id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_connect":{"id":"function.yaz-connect","purpose":"Prepares for a connection to a Z39.50 server","prototype":"mixed yaz_connect(string $zurl [, mixed $options = ''])","return":"<p class=\"para\">   A connection resource on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_database":{"id":"function.yaz-database","purpose":"Specifies the databases within a session","prototype":"bool yaz_database(resource $id, string $databases)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.6, PECL yaz >= 0.9.0"},"yaz_element":{"id":"function.yaz-element","purpose":"Specifies Element-Set Name for retrieval","prototype":"bool yaz_element(resource $id, string $elementset)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_errno":{"id":"function.yaz-errno","purpose":"Returns error number","prototype":"int yaz_errno(resource $id)","return":"<p class=\"para\">   Returns an error code. The error code is either a Z39.50 diagnostic code   (usually a Bib-1 diagnostic) or a client side error code which is    generated by PHP\/YAZ itself, such as &quot;Connect failed&quot;, &quot;Init Rejected&quot;,    etc.    <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_error":{"id":"function.yaz-error","purpose":"Returns error description","prototype":"string yaz_error(resource $id)","return":"<p class=\"para\">   Returns an error text message for server (last request), identified by   parameter <code class=\"parameter\">id<\/code>. An empty string is returned if the   last operation was successful.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_es_result":{"id":"function.yaz-es-result","purpose":"Inspects Extended Services Result","prototype":"array yaz_es_result(resource $id)","return":"<p class=\"para\">   Returns array with element <em>targetReference<\/em>   for the reference for the extended service operation (generated   and returned from the server).  <\/p>","versions":"PHP 4 >= 4.2.0, PECL yaz >= 0.9.0"},"yaz_es":{"id":"function.yaz-es","purpose":"Prepares for an Extended Service Request","prototype":"void yaz_es(resource $id, string $type, array $args)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL yaz >= 0.9.0"},"yaz_get_option":{"id":"function.yaz-get-option","purpose":"Returns value of option for connection","prototype":"string yaz_get_option(resource $id, string $name)","return":"<p class=\"para\">   Returns the value of the specified option or an empty string if the option   wasn&#039;t set.  <\/p>","versions":"PECL yaz >= 0.9.0"},"yaz_hits":{"id":"function.yaz-hits","purpose":"Returns number of hits for last search","prototype":"int yaz_hits(resource $id [, array $searchresult = ''])","return":"<p class=\"para\">   Returns the number of hits for the last search or 0 if no search was    performed.  <\/p>  <p class=\"para\">   The search result array (if supplied) holds information that   is returned by a Z39.50 server in the SearchResult-1   format part of a search response.   The SearchResult-1 format can be used to obtain information   about hit counts for various parts of the query (subquery).   In particular, it is possible to obtain hit counts for the individual   search terms in a query. Information for first   subquery is in $array[0], second subquery in $array[1], and so forth.  <\/p>  <table class=\"doctable table\">   <caption><strong>searchresult members<\/strong><\/caption>       <col width=\"1*\" \/>    <col width=\"2*\" \/>    <thead>     <tr>      <th>Element<\/th>      <th>Description<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr>      <td><em>id<\/em><\/td>      <td>Sub query ID2 (string)<\/td>     <\/tr>     <tr>      <td><em>count<\/em><\/td>      <td>Result count \/ hits (integer)<\/td>     <\/tr>     <tr>      <td><em>subquery.term<\/em><\/td>      <td>Sub query term (string)<\/td>     <\/tr>     <tr>      <td><em>interpretation.term<\/em><\/td>      <td>Interpretated sub query term (string)<\/td>     <\/tr>     <tr>      <td><em>recommendation.term<\/em><\/td>      <td>Recommended sub query term (string)<\/td>     <\/tr>    <\/tbody>     <\/table>       <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The SearchResult facility requires PECL YAZ 1.0.5    or later and YAZ 2.1.9 or later.   <\/p>  <\/p><\/blockquote>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Very few Z39.50 implementations support the SearchResult facility.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_itemorder":{"id":"function.yaz-itemorder","purpose":"Prepares for Z39.50 Item Order with an ILL-Request package","prototype":"void yaz_itemorder(resource $id, array $args)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.5, PECL yaz >= 0.9.0"},"yaz_present":{"id":"function.yaz-present","purpose":"Prepares for retrieval (Z39.50 present)","prototype":"bool yaz_present(resource $id)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PECL yaz >= 0.9.0"},"yaz_range":{"id":"function.yaz-range","purpose":"Specifies a range of records to retrieve","prototype":"void yaz_range(resource $id, int $start, int $number)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_record":{"id":"function.yaz-record","purpose":"Returns a record","prototype":"string yaz_record(resource $id, int $pos, string $type)","return":"<p class=\"para\">       Returns the record at position <code class=\"parameter\">pos<\/code> or an empty   string if no record exists at the given position.  <\/p>  <p class=\"para\">   If no database record exists at the given position an empty string is    returned.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_scan_result":{"id":"function.yaz-scan-result","purpose":"Returns Scan Response result","prototype":"array yaz_scan_result(resource $id [, array $result = ''])","return":"<p class=\"para\">   Returns an array (0..n-1) where n is the number of terms returned. Each    value is a pair where the first item is the term, and the second item is    the result-count.  <\/p>","versions":"PHP 4 >= 4.0.5, PECL yaz >= 0.9.0"},"yaz_scan":{"id":"function.yaz-scan","purpose":"Prepares for a scan","prototype":"void yaz_scan(resource $id, string $type, string $startterm [, array $flags = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.5, PECL yaz >= 0.9.0"},"yaz_schema":{"id":"function.yaz-schema","purpose":"Specifies schema for retrieval","prototype":"void yaz_schema(resource $id, string $schema)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PECL yaz >= 0.9.0"},"yaz_search":{"id":"function.yaz-search","purpose":"Prepares for a search","prototype":"bool yaz_search(resource $id, string $type, string $query)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_set_option":{"id":"function.yaz-set-option","purpose":"Sets one or more options for connection","prototype":"void yaz_set_option(resource $id, string $name, string $value, array $options)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL yaz >= 0.9.0"},"yaz_sort":{"id":"function.yaz-sort","purpose":"Sets sorting criteria","prototype":"void yaz_sort(resource $id, string $criteria)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.7, PECL yaz >= 0.9.0"},"yaz_syntax":{"id":"function.yaz-syntax","purpose":"Specifies the preferred record syntax for retrieval","prototype":"void yaz_syntax(resource $id, string $syntax)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yaz_wait":{"id":"function.yaz-wait","purpose":"Wait for Z39.50 requests to complete","prototype":"mixed yaz_wait([array $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   In event mode, returns resource  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.1, PECL yaz >= 0.9.0"},"yp_all":{"id":"function.yp-all","purpose":"Traverse the map and call a function on each entry","prototype":"void yp_all(string $domain, string $map, string $callback)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0"},"yp_cat":{"id":"function.yp-cat","purpose":"Return an array containing the entire map","prototype":"array yp_cat(string $domain, string $map)","return":"<p class=\"para\">   Returns an array of all map entries, the maps key values as array indices   and the maps entries as array data.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0"},"yp_err_string":{"id":"function.yp-err-string","purpose":"Returns the error string associated with the given error code","prototype":"string yp_err_string(int $errorcode)","return":"<p class=\"para\">   Returns the error message, as a string.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0"},"yp_errno":{"id":"function.yp-errno","purpose":"Returns the error code of the previous operation","prototype":"int yp_errno()","return":"<p class=\"para\">   Returns one of the <em>YPERR_XXX<\/em> error constants.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0"},"yp_first":{"id":"function.yp-first","purpose":"Returns the first key-value pair from the named map","prototype":"array yp_first(string $domain, string $map)","return":"<p class=\"para\">   Returns the first key-value pair as an array on success, or <strong><code>FALSE<\/code><\/strong> on   errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.1.0"},"yp_get_default_domain":{"id":"function.yp-get-default-domain","purpose":"Fetches the machine's default NIS domain","prototype":"string yp_get_default_domain()","return":"<p class=\"para\">   Returns the default domain of the node or <strong><code>FALSE<\/code><\/strong>. Can be used as the   domain parameter for successive NIS calls.  <\/p>","versions":"PHP 4, PHP 5 < 5.1.0"},"yp_master":{"id":"function.yp-master","purpose":"Returns the machine name of the master NIS server for a map","prototype":"string yp_master(string $domain, string $map)","return":"<p class=\"para\">  <\/p>","versions":"PHP 4, PHP 5 < 5.1.0"},"yp_match":{"id":"function.yp-match","purpose":"Returns the matched line","prototype":"string yp_match(string $domain, string $map, string $key)","return":"<p class=\"para\">   Returns the value, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.1.0"},"yp_next":{"id":"function.yp-next","purpose":"Returns the next key-value pair in the named map","prototype":"array yp_next(string $domain, string $map, string $key)","return":"<p class=\"para\">   Returns the next key-value pair as an array, or <strong><code>FALSE<\/code><\/strong> on errors.  <\/p>","versions":"PHP 4, PHP 5 < 5.1.0"},"yp_order":{"id":"function.yp-order","purpose":"Returns the order number for a map","prototype":"int yp_order(string $domain, string $map)","return":"<p class=\"para\">   Returns the order number for a map or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5 < 5.1.0"},"ZMQ::__construct":{"id":"zmq.construct","purpose":"ZMQ constructor","prototype":" ZMQ::__construct()","return":"<p class=\"para\">  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQContext::__construct":{"id":"zmqcontext.construct","purpose":"Construct a new ZMQContext object","prototype":" ZMQContext::__construct([int $io_threads = 1 [, bool $is_persistent = '']])","return":"<p class=\"para\">   Throws ZMQContextException if context initialization fails.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQContext::getOpt":{"id":"zmqcontext.getopt","purpose":"Get context option","prototype":"mixed ZMQContext::getOpt(string $key)","return":"<p class=\"para\">   Returns either a <span class=\"type\">string<\/span> or an <span class=\"type\">integer<\/span> depending on <code class=\"parameter\">key<\/code>. Throws   ZMQContextException on error.   <\/p>","versions":"PECL zmq >= 1.0.4"},"ZMQContext::getSocket":{"id":"zmqcontext.getsocket","purpose":"Create a new socket","prototype":"ZMQSocket ZMQContext::getSocket(int $type [, string $persistent_id = '' [, callback $on_new_socket = '']])","return":"<p class=\"para\">   Returns a ZMQSocket object on success. Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQContext::isPersistent":{"id":"zmqcontext.ispersistent","purpose":"Whether the context is persistent","prototype":"bool ZMQContext::isPersistent()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the context is persistent and <strong><code>FALSE<\/code><\/strong> if the context is non-persistent.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQContext::setOpt":{"id":"zmqcontext.setopt","purpose":"Set a socket option","prototype":"ZMQContext ZMQContext::setOpt(int $key, mixed $value)","return":"<p class=\"para\">   Returns the current object. Throws ZMQContextException on error.  <\/p>","versions":"PECL zmq >= 1.0.4"},"ZMQSocket::bind":{"id":"zmqsocket.bind","purpose":"Bind the socket","prototype":"ZMQSocket ZMQSocket::bind(string $dsn [, bool $force = ''])","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::connect":{"id":"zmqsocket.connect","purpose":"Connect the socket","prototype":"ZMQSocket ZMQSocket::connect(string $dsn [, bool $force = ''])","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::__construct":{"id":"zmqsocket.construct","purpose":"Construct a new ZMQSocket","prototype":" ZMQSocket::__construct(ZMQContext $context, int $type [, string $persistent_id = '' [, callback $on_new_socket = '']])","return":"<p class=\"para\">   Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::disconnect":{"id":"zmqsocket.disconnect","purpose":"Disconnect a socket","prototype":"ZMQSocket ZMQSocket::disconnect(string $dsn)","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 1.0.4"},"ZMQSocket::getEndpoints":{"id":"zmqsocket.getendpoints","purpose":"Get list of endpoints","prototype":"array ZMQSocket::getEndpoints()","return":"<p class=\"para\">   Returns an array containing elements &#039;bind&#039; and &#039;connect&#039;.   <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::getPersistentId":{"id":"zmqsocket.getpersistentid","purpose":"Get the persistent id","prototype":"string ZMQSocket::getPersistentId()","return":"<p class=\"para\">   Returns the persistent id string assigned of the object and <strong><code>NULL<\/code><\/strong> if socket is not persistent.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::getSocketType":{"id":"zmqsocket.getsockettype","purpose":"Get the socket type","prototype":"int ZMQSocket::getSocketType()","return":"<p class=\"para\">   Returns an integer representing the socket type. The integer can be compared against   <strong><code>ZMQ::SOCKET_*<\/code><\/strong> constants.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::getSockOpt":{"id":"zmqsocket.getsockopt","purpose":"Get socket option","prototype":"mixed ZMQSocket::getSockOpt(string $key)","return":"<p class=\"para\">   Returns either a <span class=\"type\">string<\/span> or an <span class=\"type\">integer<\/span> depending on <code class=\"parameter\">key<\/code>. Throws   ZMQSocketException on error.   <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::isPersistent":{"id":"zmqsocket.ispersistent","purpose":"Whether the socket is persistent","prototype":"bool ZMQSocket::isPersistent()","return":"<p class=\"para\">   Returns a <span class=\"type\">boolean<\/span> based on whether the socket is persistent or not.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::recv":{"id":"zmqsocket.recv","purpose":"Receives a message","prototype":"string ZMQSocket::recv([int $mode = ''])","return":"<p class=\"para\">   Returns the message. Throws ZMQSocketException in error.    If <strong><code>ZMQ::MODE_NOBLOCK<\/code><\/strong> is used and the operation would    block <span class=\"type\">boolean<\/span> false shall be returned.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::recvMulti":{"id":"zmqsocket.recvmulti","purpose":"Receives a multipart message","prototype":"string ZMQSocket::recvMulti([int $mode = ''])","return":"<p class=\"para\">   Returns the array of message parts. Throws ZMQSocketException in error.    If <strong><code>ZMQ::MODE_NOBLOCK<\/code><\/strong> is used and the operation would    block <span class=\"type\">boolean<\/span> false shall be returned.  <\/p>","versions":"PECL zmq >= 0.8.0"},"ZMQSocket::send":{"id":"zmqsocket.send","purpose":"Sends a message","prototype":"ZMQSocket ZMQSocket::send(string $message [, int $mode = ''])","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.    If <strong><code>ZMQ::MODE_NOBLOCK<\/code><\/strong> is used and the operation would    block <span class=\"type\">boolean<\/span> false shall be returned.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::sendmulti":{"id":"zmqsocket.sendmulti","purpose":"Sends a multipart message","prototype":"ZMQSocket ZMQSocket::sendmulti(array $message [, int $mode = ''])","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.    If <strong><code>ZMQ::MODE_NOBLOCK<\/code><\/strong> is used and the operation would    block <span class=\"type\">boolean<\/span> false shall be returned.  <\/p>","versions":"PECL zmq >= 0.8.0"},"ZMQSocket::setSockOpt":{"id":"zmqsocket.setsockopt","purpose":"Set a socket option","prototype":"ZMQSocket ZMQSocket::setSockOpt(int $key, mixed $value)","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQSocket::unbind":{"id":"zmqsocket.unbind","purpose":"Unbind the socket","prototype":"ZMQSocket ZMQSocket::unbind(string $dsn)","return":"<p class=\"para\">   Returns the current object. Throws ZMQSocketException on error.  <\/p>","versions":"PECL zmq >= 1.0.4"},"ZMQPoll::add":{"id":"zmqpoll.add","purpose":"Add item to the poll set","prototype":"string ZMQPoll::add(mixed $entry, int $type)","return":"<p class=\"para\">   Returns a string id of the added item which can be later used to remove the item.    Throws ZMQPollException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQPoll::clear":{"id":"zmqpoll.clear","purpose":"Clear the poll set","prototype":"ZMQPoll ZMQPoll::clear()","return":"<p class=\"para\">   Returns the current object.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQPoll::count":{"id":"zmqpoll.count","purpose":"Count items in the poll set","prototype":"int ZMQPoll::count()","return":"<p class=\"para\">   Returns an <span class=\"type\">integer<\/span> representing the amount of items in the poll set.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQPoll::getLastErrors":{"id":"zmqpoll.getlasterrors","purpose":"Get poll errors","prototype":"array ZMQPoll::getLastErrors()","return":"<p class=\"para\">   Returns an array containing ids for the items that had errors in the last poll. Empty array is    returned if there were no errors.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQPoll::poll":{"id":"zmqpoll.poll","purpose":"Poll the items","prototype":"int ZMQPoll::poll(array $readable, array $writable [, int $timeout = -1])","return":"<p class=\"para\">   Returns an integer representing amount of items with activity. Throws ZMQPollException on error.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQPoll::remove":{"id":"zmqpoll.remove","purpose":"Remove item from poll set","prototype":"bool ZMQPoll::remove(mixed $item)","return":"<p class=\"para\">   Returns true if the item was removed and false if the object    with given id does not exist in the poll set.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQDevice::__construct":{"id":"zmqdevice.construct","purpose":"Construct a new device","prototype":" ZMQDevice::__construct(ZMQSocket $frontend, ZMQSocket $backend [, ZMQSocket $listener = ''])","return":"<p class=\"para\">   Call to this method will prepare the device. Usually devices are very long   running processes so running this method from interactive script is not recommended. This   method throw ZMQDeviceException if the device cannot be started.  <\/p>","versions":"PECL zmq >= 0.5.0"},"ZMQDevice::getIdleTimeout":{"id":"zmqdevice.getidletimeout","purpose":"Get the idle timeout","prototype":"ZMQDevice ZMQDevice::getIdleTimeout()","return":"<p class=\"para\">   This method returns the idle callback timeout value.  <\/p>","versions":""},"ZMQDevice::getTimerTimeout":{"id":"zmqdevice.gettimertimeout","purpose":"Get the timer timeout","prototype":"ZMQDevice ZMQDevice::getTimerTimeout()","return":"<p class=\"para\">   This method returns the timer timeout value.  <\/p>","versions":""},"ZMQDevice::run":{"id":"zmqdevice.run","purpose":"Run the new device","prototype":"void ZMQDevice::run()","return":"<p class=\"para\">   Call to this method will block until the device is running. It is not recommended   that devices are used from interactive scripts. On failure this method will throw   ZMQDeviceException.  <\/p>","versions":""},"ZMQDevice::setIdleCallback":{"id":"zmqdevice.setidlecallback","purpose":"Set the idle callback function","prototype":"ZMQDevice ZMQDevice::setIdleCallback(callable $cb_func, int $timeout [, mixed $user_data = ''])","return":"<p class=\"para\">   On success this method returns the current object.  <\/p>","versions":""},"ZMQDevice::setIdleTimeout":{"id":"zmqdevice.setidletimeout","purpose":"Set the idle timeout","prototype":"ZMQDevice ZMQDevice::setIdleTimeout(int $timeout)","return":"<p class=\"para\">   On success this method returns the current object.  <\/p>","versions":""},"ZMQDevice::setTimerCallback":{"id":"zmqdevice.settimercallback","purpose":"Set the timer callback function","prototype":"ZMQDevice ZMQDevice::setTimerCallback(callable $cb_func, int $timeout [, mixed $user_data = ''])","return":"<p class=\"para\">   On success this method returns the current object.  <\/p>","versions":""},"ZMQDevice::setTimerTimeout":{"id":"zmqdevice.settimertimeout","purpose":"Set the timer timeout","prototype":"ZMQDevice ZMQDevice::setTimerTimeout(int $timeout)","return":"<p class=\"para\">   On success this method returns the current object.  <\/p>","versions":""},"Zookeeper::addAuth":{"id":"zookeeper.addauth","purpose":"Specify application credentials","prototype":"bool Zookeeper::addAuth(string $scheme, string $cert [, callable $completion_cb = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::connect":{"id":"zookeeper.connect","purpose":"Create a handle to used communicate with zookeeper","prototype":"void Zookeeper::connect(string $host [, callable $watcher_cb = '' [, int $recv_timeout = 10000]])","return":"","versions":"PECL zookeeper >= 0.2.0"},"Zookeeper::__construct":{"id":"zookeeper.construct","purpose":"Create a handle to used communicate with zookeeper","prototype":" Zookeeper::__construct([string $host = '' [, callable $watcher_cb = '' [, int $recv_timeout = 10000]]])","return":"","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::create":{"id":"zookeeper.create","purpose":"Create a node synchronously","prototype":"string Zookeeper::create(string $path, string $value, array $acls [, int $flags = ''])","return":"<p class=\"para\">   Returns the path of the new node (this might be different than the supplied path because of the ZOO_SEQUENCE flag) on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::delete":{"id":"zookeeper.delete","purpose":"Delete a node in zookeeper synchronously","prototype":"bool Zookeeper::delete(string $path [, int $version = -1])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.2.0"},"Zookeeper::exists":{"id":"zookeeper.exists","purpose":"Checks the existence of a node in zookeeper synchronously","prototype":"bool Zookeeper::exists(string $path [, callable $watcher_cb = ''])","return":"<p class=\"para\">   Returns true\/false on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::get":{"id":"zookeeper.get","purpose":"Gets the data associated with a node synchronously","prototype":"string Zookeeper::get(string $path [, callable $watcher_cb = '' [, array $stat = '' [, int $max_size = '']]])","return":"<p class=\"para\">   Returns the data on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::getAcl":{"id":"zookeeper.getacl","purpose":"Gets the acl associated with a node synchronously","prototype":"array Zookeeper::getAcl(string $path)","return":"<p class=\"para\">   Return acl array on success and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::getChildren":{"id":"zookeeper.getchildren","purpose":"Lists the children of a node synchronously","prototype":"array Zookeeper::getChildren(string $path [, callable $watcher_cb = ''])","return":"<p class=\"para\">   Returns an array with children paths on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::getClientId":{"id":"zookeeper.getclientid","purpose":"Return the client session id, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE)","prototype":"int Zookeeper::getClientId()","return":"<p class=\"para\">   Returns the client session id on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::getRecvTimeout":{"id":"zookeeper.getrecvtimeout","purpose":"Return the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE). This value may change after a server re-connect","prototype":"int Zookeeper::getRecvTimeout()","return":"<p class=\"para\">   Returns the timeout for this session on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::getState":{"id":"zookeeper.getstate","purpose":"Get the state of the zookeeper connection","prototype":"int Zookeeper::getState()","return":"<p class=\"para\">   Returns the state of zookeeper connection on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::isRecoverable":{"id":"zookeeper.isrecoverable","purpose":"Checks if the current zookeeper connection state can be recovered","prototype":"bool Zookeeper::isRecoverable()","return":"<p class=\"para\">   Returns true\/false on success, and false on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::set":{"id":"zookeeper.set","purpose":"Sets the data associated with a node","prototype":"bool Zookeeper::set(string $path, string $value [, int $version = -1 [, array $stat = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::setAcl":{"id":"zookeeper.setacl","purpose":"Sets the acl associated with a node synchronously","prototype":"bool Zookeeper::setAcl(string $path, int $version, array $acl)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::setDebugLevel":{"id":"zookeeper.setdebuglevel","purpose":"Sets the debugging level for the library","prototype":"bool Zookeeper::setDebugLevel(int $logLevel)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::setDeterministicConnOrder":{"id":"zookeeper.setdeterministicconnorder","purpose":"Enable\/disable quorum endpoint order randomization","prototype":"bool Zookeeper::setDeterministicConnOrder(bool $yesOrNo)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::setLogStream":{"id":"zookeeper.setlogstream","purpose":"Sets the stream to be used by the library for logging","prototype":"bool Zookeeper::setLogStream(resource $stream)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"Zookeeper::setWatcher":{"id":"zookeeper.setwatcher","purpose":"Set a watcher function","prototype":"bool Zookeeper::setWatcher(callable $watcher_cb)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL zookeeper >= 0.1.0"},"udm_add_search_limit":{"id":"function.udm-add-search-limit","purpose":"Add various search limits","prototype":"bool udm_add_search_limit(resource $agent, int $var, string $val)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_alloc_agent_array":{"id":"function.udm-alloc-agent-array","purpose":"Allocate mnoGoSearch session","prototype":"resource udm_alloc_agent_array(array $databases)","return":"<p class=\"para\">   Returns a resource link identifier on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_alloc_agent":{"id":"function.udm-alloc-agent","purpose":"Allocate mnoGoSearch session","prototype":"resource udm_alloc_agent(string $dbaddr [, string $dbmode = ''])","return":"<p class=\"para\">   Returns a mnogosearch agent identifier on success, <strong><code>FALSE<\/code><\/strong> on failure. This   function creates a session with database parameters.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_api_version":{"id":"function.udm-api-version","purpose":"Get mnoGoSearch API version","prototype":"int udm_api_version()","return":"<p class=\"para\">   <span class=\"function\">udm_api_version<\/span> returns the mnoGoSearch API version   number. E.g. if mnoGoSearch 3.1.10 API is used, this function will return   <em>30110<\/em>.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_cat_list":{"id":"function.udm-cat-list","purpose":"Get all the categories on the same level with the current one","prototype":"array udm_cat_list(resource $agent, string $category)","return":"<p class=\"para\">   Returns an array listing all categories of the same level as the current   <code class=\"parameter\">category<\/code> in the categories tree.  <\/p>  <p class=\"para\">   The returned array consists of pairs. Elements with even index numbers   contain the category paths, odd elements contain the corresponding category   names.  <\/p>  <div class=\"example-contents screen\"><div class=\"cdata\"><pre>  $array[0] will contain &#039;020300&#039;  $array[1] will contain &#039;Audi&#039;  $array[2] will contain &#039;020301&#039;  $array[3] will contain &#039;BMW&#039;  $array[4] will contain &#039;020302&#039;  $array[5] will contain &#039;Opel&#039;  ... etc.<\/pre><\/div>  <\/div>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_cat_path":{"id":"function.udm-cat-path","purpose":"Get the path to the current category","prototype":"array udm_cat_path(resource $agent, string $category)","return":"<p class=\"para\">   The returned array consists of pairs. Elements with even index numbers   contain the category paths, odd elements contain the corresponding category   names.  <\/p>  <p class=\"para\">   For example, the call <em>$array=udm_cat_path($agent, &#039;02031D&#039;);<\/em>   may return the following array:  <div class=\"example-contents screen\"><div class=\"cdata\"><pre> $array[0] will contain &#039;&#039; $array[1] will contain &#039;Root&#039; $array[2] will contain &#039;02&#039; $array[3] will contain &#039;Sport&#039; $array[4] will contain &#039;0203&#039; $array[5] will contain &#039;Auto&#039; $array[4] will contain &#039;02031D&#039; $array[5] will contain &#039;Ferrari&#039;<\/pre><\/div>  <\/div>  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_check_charset":{"id":"function.udm-check-charset","purpose":"Check if the given charset is known to mnogosearch","prototype":"bool udm_check_charset(resource $agent, string $charset)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_clear_search_limits":{"id":"function.udm-clear-search-limits","purpose":"Clear all mnoGoSearch search restrictions","prototype":"bool udm_clear_search_limits(resource $agent)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_crc32":{"id":"function.udm-crc32","purpose":"Return CRC32 checksum of given string","prototype":"int udm_crc32(resource $agent, string $str)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_errno":{"id":"function.udm-errno","purpose":"Get mnoGoSearch error number","prototype":"int udm_errno(resource $agent)","return":"<p class=\"para\">   Returns the mnoGoSearch error number, zero if no error.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_error":{"id":"function.udm-error","purpose":"Get mnoGoSearch error message","prototype":"string udm_error(resource $agent)","return":"<p class=\"para\">   <span class=\"function\">udm_error<\/span> returns mnoGoSearch error message,   empty string if no error.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_find":{"id":"function.udm-find","purpose":"Perform search","prototype":"resource udm_find(resource $agent, string $query)","return":"<p class=\"para\">   Returns a result link identifier on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_free_agent":{"id":"function.udm-free-agent","purpose":"Free mnoGoSearch session","prototype":"int udm_free_agent(resource $agent)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_free_ispell_data":{"id":"function.udm-free-ispell-data","purpose":"Free memory allocated for ispell data","prototype":"bool udm_free_ispell_data(int $agent)","return":"<p class=\"para\">   <span class=\"function\">udm_free_ispell_data<\/span> always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_free_res":{"id":"function.udm-free-res","purpose":"Free mnoGoSearch result","prototype":"bool udm_free_res(resource $res)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_get_doc_count":{"id":"function.udm-get-doc-count","purpose":"Get total number of documents in database","prototype":"int udm_get_doc_count(resource $agent)","return":"<p class=\"para\">   Returns the number of documents.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_get_res_field":{"id":"function.udm-get-res-field","purpose":"Fetch a result field","prototype":"string udm_get_res_field(resource $res, int $row, int $field)","return":"<p class=\"para\">   <span class=\"function\">udm_get_res_field<\/span> returns result field value on   success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_get_res_param":{"id":"function.udm-get-res-param","purpose":"Get mnoGoSearch result parameters","prototype":"string udm_get_res_param(resource $res, int $param)","return":"<p class=\"para\">   <span class=\"function\">udm_get_res_param<\/span> returns result parameter value on   success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_hash32":{"id":"function.udm-hash32","purpose":"Return Hash32 checksum of given string","prototype":"int udm_hash32(resource $agent, string $str)","return":"<p class=\"para\">   Returns a 32-bit hash number.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_load_ispell_data":{"id":"function.udm-load-ispell-data","purpose":"Load ispell data","prototype":"bool udm_load_ispell_data(resource $agent, int $var, string $val1, string $val2, int $flag)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"udm_set_agent_param":{"id":"function.udm-set-agent-param","purpose":"Set mnoGoSearch agent session parameters","prototype":"bool udm_set_agent_param(resource $agent, int $var, string $val)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5 < 5.1.0, PECL mnogosearch >= 1.0.0"},"solr_get_version":{"id":"function.solr-get-version","purpose":"Returns the current version of the Apache Solr extension","prototype":"string solr_get_version()","return":"<p class=\"para\">   It returns a string on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.1"},"SolrUtils::digestXmlResponse":{"id":"solrutils.digestxmlresponse","purpose":"Parses an response XML string into a SolrObject","prototype":"SolrObject SolrUtils::digestXmlResponse(string $xmlresponse [, int $parse_mode = ''])","return":"<p class=\"para\">   Returns the SolrObject representing the XML response.  <\/p>    <p class=\"para\">If the parse_mode parameter is set to SolrResponse::PARSE_SOLR_OBJ Solr documents will be parses as SolrObject instances.<\/p>   <p class=\"para\">If it is set to SolrResponse::PARSE_SOLR_DOC, they will be parsed as SolrDocument instances.<\/p>","versions":"PECL solr >= 0.9.2"},"SolrUtils::escapeQueryChars":{"id":"solrutils.escapequerychars","purpose":"Escapes a lucene query string","prototype":"string SolrUtils::escapeQueryChars(string $str)","return":"<p class=\"para\">  Returns the escaped string or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrUtils::getSolrVersion":{"id":"solrutils.getsolrversion","purpose":"Returns the current version of the Solr extension","prototype":"string SolrUtils::getSolrVersion()","return":"<p class=\"para\">   The current version of the Apache Solr extension.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrUtils::queryPhrase":{"id":"solrutils.queryphrase","purpose":"Prepares a phrase from an unescaped lucene string","prototype":"string SolrUtils::queryPhrase(string $str)","return":"<p class=\"para\">   Returns the phrase contained in double quotes.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::addChildDocument":{"id":"solrinputdocument.addchilddocument","purpose":"Adds a child document for block indexing","prototype":"void SolrInputDocument::addChildDocument(SolrInputDocument $child)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrInputDocument::addChildDocuments":{"id":"solrinputdocument.addchilddocuments","purpose":"Adds an array of child documents","prototype":"void SolrInputDocument::addChildDocuments(array $docs)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrInputDocument::addField":{"id":"solrinputdocument.addfield","purpose":"Adds a field to the document","prototype":"bool SolrInputDocument::addField(string $fieldName, string $fieldValue [, float $fieldBoostValue = 0.0])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::clear":{"id":"solrinputdocument.clear","purpose":"Resets the input document","prototype":"bool SolrInputDocument::clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::__clone":{"id":"solrinputdocument.clone","purpose":"Creates a copy of a SolrDocument","prototype":"void SolrInputDocument::__clone()","return":"<p class=\"para\">   Creates a new SolrInputDocument instance.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::__construct":{"id":"solrinputdocument.construct","purpose":"Constructor","prototype":" SolrInputDocument::__construct()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::deleteField":{"id":"solrinputdocument.deletefield","purpose":"Removes a field from the document","prototype":"bool SolrInputDocument::deleteField(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::__destruct":{"id":"solrinputdocument.destruct","purpose":"Destructor","prototype":"void SolrInputDocument::__destruct()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::fieldExists":{"id":"solrinputdocument.fieldexists","purpose":"Checks if a field exists","prototype":"bool SolrInputDocument::fieldExists(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the field was found and <strong><code>FALSE<\/code><\/strong> if it was not found.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::getBoost":{"id":"solrinputdocument.getboost","purpose":"Retrieves the current boost value for the document","prototype":"float SolrInputDocument::getBoost()","return":"<p class=\"para\">  Returns the boost value on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::getChildDocuments":{"id":"solrinputdocument.getchilddocuments","purpose":"Returns an array of child documents (SolrInputDocument)","prototype":"array SolrInputDocument::getChildDocuments()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrInputDocument::getChildDocumentsCount":{"id":"solrinputdocument.getchilddocumentscount","purpose":"Returns the number of child documents","prototype":"int SolrInputDocument::getChildDocumentsCount()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrInputDocument::getField":{"id":"solrinputdocument.getfield","purpose":"Retrieves a field by name","prototype":"SolrDocumentField SolrInputDocument::getField(string $fieldName)","return":"<p class=\"para\">   Returns a SolrDocumentField object on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::getFieldBoost":{"id":"solrinputdocument.getfieldboost","purpose":"Retrieves the boost value for a particular field","prototype":"float SolrInputDocument::getFieldBoost(string $fieldName)","return":"<p class=\"para\">   Returns the boost value for the field or <strong><code>FALSE<\/code><\/strong> if there was an error.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::getFieldCount":{"id":"solrinputdocument.getfieldcount","purpose":"Returns the number of fields in the document","prototype":"int SolrInputDocument::getFieldCount()","return":"<p class=\"para\">  Returns an integer on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::getFieldNames":{"id":"solrinputdocument.getfieldnames","purpose":"Returns an array containing all the fields in the document","prototype":"array SolrInputDocument::getFieldNames()","return":"<p class=\"para\">   Returns an array on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::hasChildDocuments":{"id":"solrinputdocument.haschilddocuments","purpose":"Returns true if the document has any child documents","prototype":"bool SolrInputDocument::hasChildDocuments()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrInputDocument::merge":{"id":"solrinputdocument.merge","purpose":"Merges one input document into another","prototype":"bool SolrInputDocument::merge(SolrInputDocument $sourceDoc [, bool $overwrite = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. In the future, this will be modified to return the number of fields in the new document.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::reset":{"id":"solrinputdocument.reset","purpose":"This is an alias of SolrInputDocument::clear","prototype":"bool SolrInputDocument::reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::setBoost":{"id":"solrinputdocument.setboost","purpose":"Sets the boost value for this document","prototype":"bool SolrInputDocument::setBoost(float $documentBoostValue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::setFieldBoost":{"id":"solrinputdocument.setfieldboost","purpose":"Sets the index-time boost value for a field","prototype":"bool SolrInputDocument::setFieldBoost(string $fieldName, float $fieldBoostValue)","return":"","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::sort":{"id":"solrinputdocument.sort","purpose":"Sorts the fields within the document","prototype":"bool SolrInputDocument::sort(int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrInputDocument::toArray":{"id":"solrinputdocument.toarray","purpose":"Returns an array representation of the input document","prototype":"array SolrInputDocument::toArray()","return":"<p class=\"para\">   Returns an array containing the fields. It returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::addField":{"id":"solrdocument.addfield","purpose":"Adds a field to the document","prototype":"bool SolrDocument::addField(string $fieldName, string $fieldValue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::clear":{"id":"solrdocument.clear","purpose":"Drops all the fields in the document","prototype":"bool SolrDocument::clear()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::__clone":{"id":"solrdocument.clone","purpose":"Creates a copy of a SolrDocument object","prototype":"void SolrDocument::__clone()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::__construct":{"id":"solrdocument.construct","purpose":"Constructor","prototype":" SolrDocument::__construct()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::current":{"id":"solrdocument.current","purpose":"Retrieves the current field","prototype":"SolrDocumentField SolrDocument::current()","return":"<p class=\"para\">   Returns the field  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::deleteField":{"id":"solrdocument.deletefield","purpose":"Removes a field from the document","prototype":"bool SolrDocument::deleteField(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::__destruct":{"id":"solrdocument.destruct","purpose":"Destructor","prototype":"void SolrDocument::__destruct()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::fieldExists":{"id":"solrdocument.fieldexists","purpose":"Checks if a field exists in the document","prototype":"bool SolrDocument::fieldExists(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the field is present and <strong><code>FALSE<\/code><\/strong> if it does not.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::__get":{"id":"solrdocument.get","purpose":"Access the field as a property","prototype":"SolrDocumentField SolrDocument::__get(string $fieldName)","return":"<p class=\"para\">   Returns a SolrDocumentField instance.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::getChildDocuments":{"id":"solrdocument.getchilddocuments","purpose":"Returns an array of child documents (SolrDocument)","prototype":"array SolrDocument::getChildDocuments()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrDocument::getChildDocumentsCount":{"id":"solrdocument.getchilddocumentscount","purpose":"Returns the number of child documents","prototype":"int SolrDocument::getChildDocumentsCount()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrDocument::getField":{"id":"solrdocument.getfield","purpose":"Retrieves a field by name","prototype":"SolrDocumentField SolrDocument::getField(string $fieldName)","return":"<p class=\"para\">   Returns a SolrDocumentField on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::getFieldCount":{"id":"solrdocument.getfieldcount","purpose":"Returns the number of fields in this document","prototype":"int SolrDocument::getFieldCount()","return":"<p class=\"para\">   Returns an integer on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::getFieldNames":{"id":"solrdocument.getfieldnames","purpose":"Returns an array of fields names in the document","prototype":"array SolrDocument::getFieldNames()","return":"<p class=\"para\">   Returns an array containing the names of the fields in this document.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::getInputDocument":{"id":"solrdocument.getinputdocument","purpose":"Returns a SolrInputDocument equivalent of the object","prototype":"SolrInputDocument SolrDocument::getInputDocument()","return":"<p class=\"para\">   Returns a SolrInputDocument on success and <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::hasChildDocuments":{"id":"solrdocument.haschilddocuments","purpose":"Checks whether the document has any child documents","prototype":"bool SolrDocument::hasChildDocuments()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.3.0"},"SolrDocument::__isset":{"id":"solrdocument.isset","purpose":"Checks if a field exists","prototype":"bool SolrDocument::__isset(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::key":{"id":"solrdocument.key","purpose":"Retrieves the current key","prototype":"string SolrDocument::key()","return":"<p class=\"para\">   Returns the current key.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::merge":{"id":"solrdocument.merge","purpose":"Merges source to the current SolrDocument","prototype":"bool SolrDocument::merge(SolrDocument $sourceDoc [, bool $overwrite = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::next":{"id":"solrdocument.next","purpose":"Moves the internal pointer to the next field","prototype":"void SolrDocument::next()","return":"<p class=\"para\">  This method has no return value.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::offsetExists":{"id":"solrdocument.offsetexists","purpose":"Checks if a particular field exists","prototype":"bool SolrDocument::offsetExists(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::offsetGet":{"id":"solrdocument.offsetget","purpose":"Retrieves a field","prototype":"SolrDocumentField SolrDocument::offsetGet(string $fieldName)","return":"<p class=\"para\">   Returns a SolrDocumentField object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::offsetSet":{"id":"solrdocument.offsetset","purpose":"Adds a field to the document","prototype":"void SolrDocument::offsetSet(string $fieldName, string $fieldValue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::offsetUnset":{"id":"solrdocument.offsetunset","purpose":"Removes a field","prototype":"void SolrDocument::offsetUnset(string $fieldName)","return":"<p class=\"para\">   No return value.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::reset":{"id":"solrdocument.reset","purpose":"This is an alias to SolrDocument::clear()","prototype":"bool SolrDocument::reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::rewind":{"id":"solrdocument.rewind","purpose":"Resets the internal pointer to the beginning","prototype":"void SolrDocument::rewind()","return":"<p class=\"para\">   This method has no return value.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::serialize":{"id":"solrdocument.serialize","purpose":"Used for custom serialization","prototype":"string SolrDocument::serialize()","return":"<p class=\"para\">   Returns a string representing the serialized Solr document.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::__set":{"id":"solrdocument.set","purpose":"Adds another field to the document","prototype":"bool SolrDocument::__set(string $fieldName, string $fieldValue)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::sort":{"id":"solrdocument.sort","purpose":"Sorts the fields in the document","prototype":"bool SolrDocument::sort(int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::toArray":{"id":"solrdocument.toarray","purpose":"Returns an array representation of the document","prototype":"array SolrDocument::toArray()","return":"<p class=\"para\">   Returns an array representation of the document.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::unserialize":{"id":"solrdocument.unserialize","purpose":"Custom serialization of SolrDocument objects","prototype":"void SolrDocument::unserialize(string $serialized)","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::__unset":{"id":"solrdocument.unset","purpose":"Removes a field from the document","prototype":"bool SolrDocument::__unset(string $fieldName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocument::valid":{"id":"solrdocument.valid","purpose":"Checks if the current position internally is still valid","prototype":"bool SolrDocument::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success and <strong><code>FALSE<\/code><\/strong> if the current position is no longer valid.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocumentField::__construct":{"id":"solrdocumentfield.construct","purpose":"Constructor","prototype":" SolrDocumentField::__construct()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDocumentField::__destruct":{"id":"solrdocumentfield.destruct","purpose":"Destructor","prototype":"void SolrDocumentField::__destruct()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::__construct":{"id":"solrobject.construct","purpose":"Creates Solr object","prototype":" SolrObject::__construct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::__destruct":{"id":"solrobject.destruct","purpose":"Destructor","prototype":"void SolrObject::__destruct()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::getPropertyNames":{"id":"solrobject.getpropertynames","purpose":"Returns an array of all the names of the properties","prototype":"array SolrObject::getPropertyNames()","return":"<p class=\"para\">   Returns an array.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::offsetExists":{"id":"solrobject.offsetexists","purpose":"Checks if the property exists","prototype":"bool SolrObject::offsetExists(string $property_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::offsetGet":{"id":"solrobject.offsetget","purpose":"Used to retrieve a property","prototype":"mixed SolrObject::offsetGet(string $property_name)","return":"<p class=\"para\">   Returns the property value.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::offsetSet":{"id":"solrobject.offsetset","purpose":"Sets the value for a property","prototype":"void SolrObject::offsetSet(string $property_name, string $property_value)","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrObject::offsetUnset":{"id":"solrobject.offsetunset","purpose":"Unsets the value for the property","prototype":"void SolrObject::offsetUnset(string $property_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::addDocument":{"id":"solrclient.adddocument","purpose":"Adds a document to the index","prototype":"SolrUpdateResponse SolrClient::addDocument(SolrInputDocument $doc [, bool $overwrite = '' [, int $commitWithin = '']])","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrUpdateResponse<\/span> object or throws an Exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::addDocuments":{"id":"solrclient.adddocuments","purpose":"Adds a collection of SolrInputDocument instances to the index","prototype":"void SolrClient::addDocuments(array $docs [, bool $overwrite = '' [, int $commitWithin = '']])","return":"<p class=\"para\">    Returns a <span class=\"type\">SolrUpdateResponse<\/span> object or throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::commit":{"id":"solrclient.commit","purpose":"Finalizes all add\/deletes made to the index","prototype":"SolrUpdateResponse SolrClient::commit([bool $softCommit = '' [, bool $waitSearcher = '' [, bool $expungeDeletes = '']]])","return":"<p class=\"para\">   Returns a <span class=\"classname\">SolrUpdateResponse<\/span> object on success or throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::__construct":{"id":"solrclient.construct","purpose":"Constructor for the SolrClient object","prototype":" SolrClient::__construct(array $clientOptions)","return":"","versions":"PECL solr >= 0.9.2"},"SolrClient::deleteById":{"id":"solrclient.deletebyid","purpose":"Delete by Id","prototype":"SolrUpdateResponse SolrClient::deleteById(string $id)","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrUpdateResponse<\/span> on success and throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::deleteByIds":{"id":"solrclient.deletebyids","purpose":"Deletes by Ids","prototype":"SolrUpdateResponse SolrClient::deleteByIds(array $ids)","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrUpdateResponse<\/span> on success and throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::deleteByQueries":{"id":"solrclient.deletebyqueries","purpose":"Removes all documents matching any of the queries","prototype":"SolrUpdateResponse SolrClient::deleteByQueries(array $queries)","return":"<p class=\"para\">   Returns a SolrUpdateResponse on success and throws a SolrClientException on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::deleteByQuery":{"id":"solrclient.deletebyquery","purpose":"Deletes all documents matching the given query","prototype":"SolrUpdateResponse SolrClient::deleteByQuery(string $query)","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrUpdateResponse<\/span> on success and throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::__destruct":{"id":"solrclient.destruct","purpose":"Destructor for SolrClient","prototype":"void SolrClient::__destruct()","return":"<p class=\"para\">   Destructor for SolrClient  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::getById":{"id":"solrclient.getbyid","purpose":"Get Document By Id. Utilizes Solr Realtime Get (RTG)","prototype":"SolrQueryResponse SolrClient::getById(string $id)","return":"<p class=\"para\">   <span class=\"type\">SolrQueryResponse<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrClient::getByIds":{"id":"solrclient.getbyids","purpose":"Get Documents by their Ids. Utilizes Solr Realtime Get (RTG)","prototype":"SolrQueryResponse SolrClient::getByIds(array $ids)","return":"<p class=\"para\">   <span class=\"type\">SolrQueryResponse<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrClient::getDebug":{"id":"solrclient.getdebug","purpose":"Returns the debug data for the last connection attempt","prototype":"string SolrClient::getDebug()","return":"<p class=\"para\">   Returns a string on success and null if there is nothing to return.  <\/p>","versions":"PECL solr >= 0.9.7"},"SolrClient::getOptions":{"id":"solrclient.getoptions","purpose":"Returns the client options set internally","prototype":"array SolrClient::getOptions()","return":"<p class=\"para\">   Returns an array containing all the options for the SolrClient object set internally.  <\/p>","versions":"PECL solr >= 0.9.6"},"SolrClient::optimize":{"id":"solrclient.optimize","purpose":"Defragments the index","prototype":"SolrUpdateResponse SolrClient::optimize([int $maxSegments = 1 [, bool $softCommit = '' [, bool $waitSearcher = '']]])","return":"<p class=\"para\">   Returns a SolrUpdateResponse on success or throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::ping":{"id":"solrclient.ping","purpose":"Checks if Solr server is still up","prototype":"SolrPingResponse SolrClient::ping()","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrPingResponse<\/span> object on success and throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::query":{"id":"solrclient.query","purpose":"Sends a query to the server","prototype":"SolrQueryResponse SolrClient::query(SolrParams $query)","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrQueryResponse<\/span> object on success and throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::request":{"id":"solrclient.request","purpose":"Sends a raw update request","prototype":"SolrUpdateResponse SolrClient::request(string $raw_request)","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrUpdateResponse<\/span> on success. Throws an exception on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::rollback":{"id":"solrclient.rollback","purpose":"Rollbacks all add\/deletes made to the index since the last commit","prototype":"SolrUpdateResponse SolrClient::rollback()","return":"<p class=\"para\">   Returns a SolrUpdateResponse on success or throws a SolrClientException on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::setResponseWriter":{"id":"solrclient.setresponsewriter","purpose":"Sets the response writer used to prepare the response from Solr","prototype":"void SolrClient::setResponseWriter(string $responseWriter)","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PECL solr >= 0.9.11"},"SolrClient::setServlet":{"id":"solrclient.setservlet","purpose":"Changes the specified servlet type to a new value","prototype":"bool SolrClient::setServlet(int $type, string $value)","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClient::system":{"id":"solrclient.system","purpose":"Retrieve Solr Server information","prototype":"void SolrClient::system()","return":"<p class=\"para\">   Returns a <span class=\"type\">SolrGenericResponse<\/span> object on success.  <\/p>","versions":"PECL solr >= 2.0.0"},"SolrClient::threads":{"id":"solrclient.threads","purpose":"Checks the threads status","prototype":"void SolrClient::threads()","return":"<p class=\"para\">   Returns a SolrGenericResponse object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getDigestedResponse":{"id":"solrresponse.getdigestedresponse","purpose":"Returns the XML response as serialized PHP data","prototype":"string SolrResponse::getDigestedResponse()","return":"<p class=\"para\">   Returns the XML response as serialized PHP data  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getHttpStatus":{"id":"solrresponse.gethttpstatus","purpose":"Returns the HTTP status of the response","prototype":"int SolrResponse::getHttpStatus()","return":"<p class=\"para\">   Returns the HTTP status of the response.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getHttpStatusMessage":{"id":"solrresponse.gethttpstatusmessage","purpose":"Returns more details on the HTTP status","prototype":"string SolrResponse::getHttpStatusMessage()","return":"<p class=\"para\">   Returns more details on the HTTP status  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getRawRequest":{"id":"solrresponse.getrawrequest","purpose":"Returns the raw request sent to the Solr server","prototype":"string SolrResponse::getRawRequest()","return":"<p class=\"para\">   Returns the raw request sent to the Solr server  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getRawRequestHeaders":{"id":"solrresponse.getrawrequestheaders","purpose":"Returns the raw request headers sent to the Solr server","prototype":"string SolrResponse::getRawRequestHeaders()","return":"<p class=\"para\">   Returns the raw request headers sent to the Solr server  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getRawResponse":{"id":"solrresponse.getrawresponse","purpose":"Returns the raw response from the server","prototype":"string SolrResponse::getRawResponse()","return":"<p class=\"para\">   Returns the raw response from the server.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getRawResponseHeaders":{"id":"solrresponse.getrawresponseheaders","purpose":"Returns the raw response headers from the server","prototype":"string SolrResponse::getRawResponseHeaders()","return":"<p class=\"para\">   Returns the raw response headers from the server.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getRequestUrl":{"id":"solrresponse.getrequesturl","purpose":"Returns the full URL the request was sent to","prototype":"string SolrResponse::getRequestUrl()","return":"<p class=\"para\">   Returns the full URL the request was sent to  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::getResponse":{"id":"solrresponse.getresponse","purpose":"Returns a SolrObject representing the XML response from the server","prototype":"SolrObject SolrResponse::getResponse()","return":"<p class=\"para\">   Returns a SolrObject representing the XML response from the server  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::setParseMode":{"id":"solrresponse.setparsemode","purpose":"Sets the parse mode","prototype":"bool SolrResponse::setParseMode([int $parser_mode = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrResponse::success":{"id":"solrresponse.success","purpose":"Was the request a success","prototype":"bool SolrResponse::success()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if it was successful and <strong><code>FALSE<\/code><\/strong> if it was not.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQueryResponse::__construct":{"id":"solrqueryresponse.construct","purpose":"Constructor","prototype":" SolrQueryResponse::__construct()","return":"<p class=\"para\">  None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQueryResponse::__destruct":{"id":"solrqueryresponse.destruct","purpose":"Destructor","prototype":"void SolrQueryResponse::__destruct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrUpdateResponse::__construct":{"id":"solrupdateresponse.construct","purpose":"Constructor","prototype":" SolrUpdateResponse::__construct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrUpdateResponse::__destruct":{"id":"solrupdateresponse.destruct","purpose":"Destructor","prototype":"void SolrUpdateResponse::__destruct()","return":"<p class=\"para\">  None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrPingResponse::__construct":{"id":"solrpingresponse.construct","purpose":"Constructor","prototype":" SolrPingResponse::__construct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrPingResponse::__destruct":{"id":"solrpingresponse.destruct","purpose":"Destructor","prototype":"void SolrPingResponse::__destruct()","return":"<p class=\"para\">  None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrPingResponse::getResponse":{"id":"solrpingresponse.getresponse","purpose":"Returns the response from the server","prototype":"string SolrPingResponse::getResponse()","return":"<p class=\"para\">  Returns an empty string.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrGenericResponse::__construct":{"id":"solrgenericresponse.construct","purpose":"Constructor","prototype":" SolrGenericResponse::__construct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrGenericResponse::__destruct":{"id":"solrgenericresponse.destruct","purpose":"Destructor","prototype":"void SolrGenericResponse::__destruct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::add":{"id":"solrparams.add","purpose":"This is an alias for SolrParams::addParam","prototype":"SolrParams SolrParams::add(string $name, string $value)","return":"<p class=\"para\">Returns a SolrParams instance on success  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::addParam":{"id":"solrparams.addparam","purpose":"Adds a parameter to the object","prototype":"SolrParams SolrParams::addParam(string $name, string $value)","return":"<p class=\"para\">   Returns a SolrParam object on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::get":{"id":"solrparams.get","purpose":"This is an alias for SolrParams::getParam","prototype":"mixed SolrParams::get(string $param_name)","return":"<p class=\"para\">Returns an array or string depending on the type of parameter  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::getParam":{"id":"solrparams.getparam","purpose":"Returns a parameter value","prototype":"mixed SolrParams::getParam([string $param_name = ''])","return":"<p class=\"para\">Returns a string or an array depending on the type of the parameter  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::getParams":{"id":"solrparams.getparams","purpose":"Returns an array of non URL-encoded parameters","prototype":"array SolrParams::getParams()","return":"<p class=\"para\">   Returns an array of non URL-encoded parameters  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::getPreparedParams":{"id":"solrparams.getpreparedparams","purpose":"Returns an array of URL-encoded parameters","prototype":"array SolrParams::getPreparedParams()","return":"<p class=\"para\">   Returns an array on URL-encoded parameters  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::serialize":{"id":"solrparams.serialize","purpose":"Used for custom serialization","prototype":"string SolrParams::serialize()","return":"<p class=\"para\">  Used for custom serialization  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::set":{"id":"solrparams.set","purpose":"An alias of SolrParams::setParam","prototype":"void SolrParams::set(string $name, string $value)","return":"<p class=\"para\">Returns an instance of the SolrParams object on success  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::setParam":{"id":"solrparams.setparam","purpose":"Sets the parameter to the specified value","prototype":"SolrParams SolrParams::setParam(string $name, string $value)","return":"<p class=\"para\">   Returns a SolrParam object on success and <strong><code>FALSE<\/code><\/strong> on value.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::toString":{"id":"solrparams.tostring","purpose":"Returns all the name-value pair parameters in the object","prototype":"string SolrParams::toString([bool $url_encode = ''])","return":"<p class=\"para\"> Returns a string on success and <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrParams::unserialize":{"id":"solrparams.unserialize","purpose":"Used for custom serialization","prototype":"void SolrParams::unserialize(string $serialized)","return":"<p class=\"para\">  None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrModifiableParams::__construct":{"id":"solrmodifiableparams.construct","purpose":"Constructor","prototype":" SolrModifiableParams::__construct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrModifiableParams::__destruct":{"id":"solrmodifiableparams.destruct","purpose":"Destructor","prototype":"void SolrModifiableParams::__destruct()","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addExpandFilterQuery":{"id":"solrquery.addexpandfilterquery","purpose":"Overrides main filter query, determines which documents to include in the main group","prototype":"SolrQuery SolrQuery::addExpandFilterQuery(string $fq)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::addExpandSortField":{"id":"solrquery.addexpandsortfield","purpose":"Orders the documents within the expanded groups (expand.sort parameter)","prototype":"SolrQuery SolrQuery::addExpandSortField(string $field [, string $order = ''])","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::addFacetDateField":{"id":"solrquery.addfacetdatefield","purpose":"Maps to facet.date","prototype":"SolrQuery SolrQuery::addFacetDateField(string $dateField)","return":"<p class=\"para\">   Returns a SolrQuery object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addFacetDateOther":{"id":"solrquery.addfacetdateother","purpose":"Adds another facet.date.other parameter","prototype":"SolrQuery SolrQuery::addFacetDateOther(string $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addFacetField":{"id":"solrquery.addfacetfield","purpose":"Adds another field to the facet","prototype":"SolrQuery SolrQuery::addFacetField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addFacetQuery":{"id":"solrquery.addfacetquery","purpose":"Adds a facet query","prototype":"SolrQuery SolrQuery::addFacetQuery(string $facetQuery)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addField":{"id":"solrquery.addfield","purpose":"Specifies which fields to return in the result","prototype":"SolrQuery SolrQuery::addField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addFilterQuery":{"id":"solrquery.addfilterquery","purpose":"Specifies a filter query","prototype":"SolrQuery SolrQuery::addFilterQuery(string $fq)","return":"<p class=\"para\">   Returns the current SolrQuery object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addGroupField":{"id":"solrquery.addgroupfield","purpose":"Add a field to be used to group results","prototype":"SolrQuery SolrQuery::addGroupField(string $value)","return":"","versions":"PECL solr >= 2.2.0"},"SolrQuery::addGroupFunction":{"id":"solrquery.addgroupfunction","purpose":"Allows grouping results based on the unique values of a function query (group.func parameter)","prototype":"SolrQuery SolrQuery::addGroupFunction(string $value)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::addGroupQuery":{"id":"solrquery.addgroupquery","purpose":"Allows grouping of documents that match the given query","prototype":"SolrQuery SolrQuery::addGroupQuery(string $value)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::addGroupSortField":{"id":"solrquery.addgroupsortfield","purpose":"Add a group sort field (group.sort parameter)","prototype":"SolrQuery SolrQuery::addGroupSortField(string $field [, int $order = ''])","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::addHighlightField":{"id":"solrquery.addhighlightfield","purpose":"Maps to hl.fl","prototype":"SolrQuery SolrQuery::addHighlightField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addMltField":{"id":"solrquery.addmltfield","purpose":"Sets a field to use for similarity","prototype":"SolrQuery SolrQuery::addMltField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addMltQueryField":{"id":"solrquery.addmltqueryfield","purpose":"Maps to mlt.qf","prototype":"SolrQuery SolrQuery::addMltQueryField(string $field, float $boost)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addSortField":{"id":"solrquery.addsortfield","purpose":"Used to control how the results should be sorted","prototype":"SolrQuery SolrQuery::addSortField(string $field [, int $order = SolrQuery::ORDER_DESC])","return":"<p class=\"para\">   Returns the current SolrQuery object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addStatsFacet":{"id":"solrquery.addstatsfacet","purpose":"Requests a return of sub results for values within the given facet","prototype":"SolrQuery SolrQuery::addStatsFacet(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::addStatsField":{"id":"solrquery.addstatsfield","purpose":"Maps to stats.field parameter","prototype":"SolrQuery SolrQuery::addStatsField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::collapse":{"id":"solrquery.collapse","purpose":"Collapses the result set to a single document per group","prototype":"SolrQuery SolrQuery::collapse(SolrCollapseFunction $collapseFunction)","return":"<p class=\"para\">   Returns the current <span class=\"type\">SolrQuery<\/span> object  <\/p>","versions":""},"SolrQuery::__construct":{"id":"solrquery.construct","purpose":"Constructor","prototype":" SolrQuery::__construct([string $q = ''])","return":"<p class=\"para\">   None  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::__destruct":{"id":"solrquery.destruct","purpose":"Destructor","prototype":"void SolrQuery::__destruct()","return":"<p class=\"para\">   None.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getExpand":{"id":"solrquery.getexpand","purpose":"Returns true if group expanding is enabled","prototype":"bool SolrQuery::getExpand()","return":"","versions":"PECL solr >= 2.2.0"},"SolrQuery::getExpandFilterQueries":{"id":"solrquery.getexpandfilterqueries","purpose":"Returns the expand filter queries","prototype":"array SolrQuery::getExpandFilterQueries()","return":"","versions":"PECL solr >= 2.2.0"},"SolrQuery::getExpandQuery":{"id":"solrquery.getexpandquery","purpose":"Returns the expand query expand.q parameter","prototype":"array SolrQuery::getExpandQuery()","return":"","versions":"PECL solr >= 2.2.0"},"SolrQuery::getExpandRows":{"id":"solrquery.getexpandrows","purpose":"Returns The number of rows to display in each group (expand.rows)","prototype":"int SolrQuery::getExpandRows()","return":"","versions":"PECL solr >= 2.2.0"},"SolrQuery::getExpandSortFields":{"id":"solrquery.getexpandsortfields","purpose":"Returns an array of fields","prototype":"array SolrQuery::getExpandSortFields()","return":"","versions":"PECL solr >= 2.2.0"},"SolrQuery::getFacet":{"id":"solrquery.getfacet","purpose":"Returns the value of the facet parameter","prototype":"bool SolrQuery::getFacet()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetDateEnd":{"id":"solrquery.getfacetdateend","purpose":"Returns the value for the facet.date.end parameter","prototype":"string SolrQuery::getFacetDateEnd([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetDateFields":{"id":"solrquery.getfacetdatefields","purpose":"Returns all the facet.date fields","prototype":"array SolrQuery::getFacetDateFields()","return":"<p class=\"para\">   Returns all the facet.date fields as an array or <strong><code>NULL<\/code><\/strong> if none was set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetDateGap":{"id":"solrquery.getfacetdategap","purpose":"Returns the value of the facet.date.gap parameter","prototype":"string SolrQuery::getFacetDateGap([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetDateHardEnd":{"id":"solrquery.getfacetdatehardend","purpose":"Returns the value of the facet.date.hardend parameter","prototype":"string SolrQuery::getFacetDateHardEnd([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetDateOther":{"id":"solrquery.getfacetdateother","purpose":"Returns the value for the facet.date.other parameter","prototype":"array SolrQuery::getFacetDateOther([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetDateStart":{"id":"solrquery.getfacetdatestart","purpose":"Returns the  lower bound for the first date range for all date faceting on this field","prototype":"string SolrQuery::getFacetDateStart([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetFields":{"id":"solrquery.getfacetfields","purpose":"Returns all the facet fields","prototype":"array SolrQuery::getFacetFields()","return":"<p class=\"para\">Returns an array of all the fields and <strong><code>NULL<\/code><\/strong> if none was set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetLimit":{"id":"solrquery.getfacetlimit","purpose":"Returns the maximum number of constraint counts that should be returned for the facet fields","prototype":"int SolrQuery::getFacetLimit([string $field_override = ''])","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetMethod":{"id":"solrquery.getfacetmethod","purpose":"Returns the value of the facet.method parameter","prototype":"string SolrQuery::getFacetMethod([string $field_override = ''])","return":"<p class=\"para\">   Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetMinCount":{"id":"solrquery.getfacetmincount","purpose":"Returns the minimum counts for facet fields should be included in the response","prototype":"int SolrQuery::getFacetMinCount([string $field_override = ''])","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetMissing":{"id":"solrquery.getfacetmissing","purpose":"Returns the current state of the facet.missing parameter","prototype":"bool SolrQuery::getFacetMissing([string $field_override = ''])","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetOffset":{"id":"solrquery.getfacetoffset","purpose":"Returns an offset into the list of constraints to be used for pagination","prototype":"int SolrQuery::getFacetOffset([string $field_override = ''])","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetPrefix":{"id":"solrquery.getfacetprefix","purpose":"Returns the facet prefix","prototype":"string SolrQuery::getFacetPrefix([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetQueries":{"id":"solrquery.getfacetqueries","purpose":"Returns all the facet queries","prototype":"array SolrQuery::getFacetQueries()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFacetSort":{"id":"solrquery.getfacetsort","purpose":"Returns the facet sort type","prototype":"int SolrQuery::getFacetSort([string $field_override = ''])","return":"<p class=\"para\">   Returns an integer (SolrQuery::FACET_SORT_INDEX or SolrQuery::FACET_SORT_COUNT) on success or <strong><code>NULL<\/code><\/strong> if not set.   <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFields":{"id":"solrquery.getfields","purpose":"Returns the list of fields that will be returned in the response","prototype":"array SolrQuery::getFields()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getFilterQueries":{"id":"solrquery.getfilterqueries","purpose":"Returns an array of filter queries","prototype":"array SolrQuery::getFilterQueries()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getGroup":{"id":"solrquery.getgroup","purpose":"Returns true if grouping is enabled","prototype":"bool SolrQuery::getGroup()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupCachePercent":{"id":"solrquery.getgroupcachepercent","purpose":"Returns group cache percent value","prototype":"int SolrQuery::getGroupCachePercent()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupFacet":{"id":"solrquery.getgroupfacet","purpose":"Returns the group.facet parameter value","prototype":"bool SolrQuery::getGroupFacet()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupFields":{"id":"solrquery.getgroupfields","purpose":"Returns group fields (group.field parameter values)","prototype":"array SolrQuery::getGroupFields()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupFormat":{"id":"solrquery.getgroupformat","purpose":"Returns the group.format value","prototype":"string SolrQuery::getGroupFormat()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupFunctions":{"id":"solrquery.getgroupfunctions","purpose":"Returns group functions (group.func parameter values)","prototype":"array SolrQuery::getGroupFunctions()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupLimit":{"id":"solrquery.getgrouplimit","purpose":"Returns the group.limit value","prototype":"int SolrQuery::getGroupLimit()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupMain":{"id":"solrquery.getgroupmain","purpose":"Returns the group.main value","prototype":"bool SolrQuery::getGroupMain()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupNGroups":{"id":"solrquery.getgroupngroups","purpose":"Returns the group.ngroups value","prototype":"bool SolrQuery::getGroupNGroups()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupOffset":{"id":"solrquery.getgroupoffset","purpose":"Returns the group.offset value","prototype":"int SolrQuery::getGroupOffset()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupQueries":{"id":"solrquery.getgroupqueries","purpose":"Returns all the group.query parameter values","prototype":"array SolrQuery::getGroupQueries()","return":"<p class=\"para\">   <span class=\"type\">array<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupSortFields":{"id":"solrquery.getgroupsortfields","purpose":"Returns the group.sort value","prototype":"array SolrQuery::getGroupSortFields()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getGroupTruncate":{"id":"solrquery.getgrouptruncate","purpose":"Returns the group.truncate value","prototype":"bool SolrQuery::getGroupTruncate()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::getHighlight":{"id":"solrquery.gethighlight","purpose":"Returns the state of the hl parameter","prototype":"bool SolrQuery::getHighlight()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightAlternateField":{"id":"solrquery.gethighlightalternatefield","purpose":"Returns the highlight field to use as backup or default","prototype":"string SolrQuery::getHighlightAlternateField([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightFields":{"id":"solrquery.gethighlightfields","purpose":"Returns all the fields that Solr should generate highlighted snippets for","prototype":"array SolrQuery::getHighlightFields()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightFormatter":{"id":"solrquery.gethighlightformatter","purpose":"Returns the formatter for the highlighted output","prototype":"string SolrQuery::getHighlightFormatter([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightFragmenter":{"id":"solrquery.gethighlightfragmenter","purpose":"Returns the text snippet generator for highlighted text","prototype":"string SolrQuery::getHighlightFragmenter([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightFragsize":{"id":"solrquery.gethighlightfragsize","purpose":"Returns the number of characters of fragments to consider for highlighting","prototype":"int SolrQuery::getHighlightFragsize([string $field_override = ''])","return":"<p class=\"para\">Returns an integer on success or <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightHighlightMultiTerm":{"id":"solrquery.gethighlighthighlightmultiterm","purpose":"Returns whether or not to enable highlighting for range\/wildcard\/fuzzy\/prefix queries","prototype":"bool SolrQuery::getHighlightHighlightMultiTerm()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightMaxAlternateFieldLength":{"id":"solrquery.gethighlightmaxalternatefieldlength","purpose":"Returns the maximum number of characters of the field to return","prototype":"int SolrQuery::getHighlightMaxAlternateFieldLength([string $field_override = ''])","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightMaxAnalyzedChars":{"id":"solrquery.gethighlightmaxanalyzedchars","purpose":"Returns the maximum number of characters into a document to look for suitable snippets","prototype":"int SolrQuery::getHighlightMaxAnalyzedChars()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightMergeContiguous":{"id":"solrquery.gethighlightmergecontiguous","purpose":"Returns whether or not the collapse contiguous fragments into a single fragment","prototype":"bool SolrQuery::getHighlightMergeContiguous([string $field_override = ''])","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightRegexMaxAnalyzedChars":{"id":"solrquery.gethighlightregexmaxanalyzedchars","purpose":"Returns the maximum number of characters from a field when using the regex fragmenter","prototype":"int SolrQuery::getHighlightRegexMaxAnalyzedChars()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightRegexPattern":{"id":"solrquery.gethighlightregexpattern","purpose":"Returns the regular expression for fragmenting","prototype":"string SolrQuery::getHighlightRegexPattern()","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightRegexSlop":{"id":"solrquery.gethighlightregexslop","purpose":"Returns the deviation factor from the ideal fragment size","prototype":"float SolrQuery::getHighlightRegexSlop()","return":"<p class=\"para\">Returns a double on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightRequireFieldMatch":{"id":"solrquery.gethighlightrequirefieldmatch","purpose":"Returns if a field will only be highlighted if the query matched in this particular field","prototype":"bool SolrQuery::getHighlightRequireFieldMatch()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightSimplePost":{"id":"solrquery.gethighlightsimplepost","purpose":"Returns the text which appears after a highlighted term","prototype":"string SolrQuery::getHighlightSimplePost([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightSimplePre":{"id":"solrquery.gethighlightsimplepre","purpose":"Returns the text which appears before a highlighted term","prototype":"string SolrQuery::getHighlightSimplePre([string $field_override = ''])","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightSnippets":{"id":"solrquery.gethighlightsnippets","purpose":"Returns the maximum number of highlighted snippets to generate per field","prototype":"int SolrQuery::getHighlightSnippets([string $field_override = ''])","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getHighlightUsePhraseHighlighter":{"id":"solrquery.gethighlightusephrasehighlighter","purpose":"Returns the state of the hl.usePhraseHighlighter parameter","prototype":"bool SolrQuery::getHighlightUsePhraseHighlighter()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMlt":{"id":"solrquery.getmlt","purpose":"Returns whether or not MoreLikeThis results should be enabled","prototype":"bool SolrQuery::getMlt()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltBoost":{"id":"solrquery.getmltboost","purpose":"Returns whether or not the query will be boosted by the interesting term relevance","prototype":"bool SolrQuery::getMltBoost()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltCount":{"id":"solrquery.getmltcount","purpose":"Returns the number of similar documents to return for each result","prototype":"int SolrQuery::getMltCount()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltFields":{"id":"solrquery.getmltfields","purpose":"Returns all the fields to use for similarity","prototype":"array SolrQuery::getMltFields()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltMaxNumQueryTerms":{"id":"solrquery.getmltmaxnumqueryterms","purpose":"Returns the maximum number of query terms that will be included in any generated query","prototype":"int SolrQuery::getMltMaxNumQueryTerms()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltMaxNumTokens":{"id":"solrquery.getmltmaxnumtokens","purpose":"Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support","prototype":"int SolrQuery::getMltMaxNumTokens()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltMaxWordLength":{"id":"solrquery.getmltmaxwordlength","purpose":"Returns the maximum word length above which words will be ignored","prototype":"int SolrQuery::getMltMaxWordLength()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltMinDocFrequency":{"id":"solrquery.getmltmindocfrequency","purpose":"Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs","prototype":"int SolrQuery::getMltMinDocFrequency()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltMinTermFrequency":{"id":"solrquery.getmltmintermfrequency","purpose":"Returns the frequency below which terms will be ignored in the source document","prototype":"int SolrQuery::getMltMinTermFrequency()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltMinWordLength":{"id":"solrquery.getmltminwordlength","purpose":"Returns the minimum word length below which words will be ignored","prototype":"int SolrQuery::getMltMinWordLength()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getMltQueryFields":{"id":"solrquery.getmltqueryfields","purpose":"Returns the query fields and their boosts","prototype":"array SolrQuery::getMltQueryFields()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getQuery":{"id":"solrquery.getquery","purpose":"Returns the main query","prototype":"string SolrQuery::getQuery()","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getRows":{"id":"solrquery.getrows","purpose":"Returns the maximum number of documents","prototype":"int SolrQuery::getRows()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getSortFields":{"id":"solrquery.getsortfields","purpose":"Returns all the sort fields","prototype":"array SolrQuery::getSortFields()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if none of the parameters was set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getStart":{"id":"solrquery.getstart","purpose":"Returns the offset in the complete result set","prototype":"int SolrQuery::getStart()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getStats":{"id":"solrquery.getstats","purpose":"Returns whether or not stats is enabled","prototype":"bool SolrQuery::getStats()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getStatsFacets":{"id":"solrquery.getstatsfacets","purpose":"Returns all the stats facets that were set","prototype":"array SolrQuery::getStatsFacets()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getStatsFields":{"id":"solrquery.getstatsfields","purpose":"Returns all the statistics fields","prototype":"array SolrQuery::getStatsFields()","return":"<p class=\"para\">Returns an array on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTerms":{"id":"solrquery.getterms","purpose":"Returns whether or not the TermsComponent is enabled","prototype":"bool SolrQuery::getTerms()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsField":{"id":"solrquery.gettermsfield","purpose":"Returns the field from which the terms are retrieved","prototype":"string SolrQuery::getTermsField()","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsIncludeLowerBound":{"id":"solrquery.gettermsincludelowerbound","purpose":"Returns whether or not to include the lower bound in the result set","prototype":"bool SolrQuery::getTermsIncludeLowerBound()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsIncludeUpperBound":{"id":"solrquery.gettermsincludeupperbound","purpose":"Returns whether or not to include the upper bound term in the result set","prototype":"bool SolrQuery::getTermsIncludeUpperBound()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsLimit":{"id":"solrquery.gettermslimit","purpose":"Returns the maximum number of terms Solr should return","prototype":"int SolrQuery::getTermsLimit()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsLowerBound":{"id":"solrquery.gettermslowerbound","purpose":"Returns the term to start at","prototype":"string SolrQuery::getTermsLowerBound()","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsMaxCount":{"id":"solrquery.gettermsmaxcount","purpose":"Returns the maximum document frequency","prototype":"int SolrQuery::getTermsMaxCount()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsMinCount":{"id":"solrquery.gettermsmincount","purpose":"Returns the minimum document frequency to return in order to be included","prototype":"int SolrQuery::getTermsMinCount()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsPrefix":{"id":"solrquery.gettermsprefix","purpose":"Returns the term prefix","prototype":"string SolrQuery::getTermsPrefix()","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsReturnRaw":{"id":"solrquery.gettermsreturnraw","purpose":"Whether or not to return raw characters","prototype":"bool SolrQuery::getTermsReturnRaw()","return":"<p class=\"para\">Returns a boolean on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsSort":{"id":"solrquery.gettermssort","purpose":"Returns an integer indicating how terms are sorted","prototype":"int SolrQuery::getTermsSort()","return":"<p class=\"para\">Returns an integer on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTermsUpperBound":{"id":"solrquery.gettermsupperbound","purpose":"Returns the term to stop at","prototype":"string SolrQuery::getTermsUpperBound()","return":"<p class=\"para\">Returns a string on success and <strong><code>NULL<\/code><\/strong> if not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::getTimeAllowed":{"id":"solrquery.gettimeallowed","purpose":"Returns the time in milliseconds allowed for the query to finish","prototype":"int SolrQuery::getTimeAllowed()","return":"<p class=\"para\">Returns and integer on success and <strong><code>NULL<\/code><\/strong> if it is not set.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeExpandFilterQuery":{"id":"solrquery.removeexpandfilterquery","purpose":"Removes an expand filter query","prototype":"SolrQuery SolrQuery::removeExpandFilterQuery(string $fq)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::removeExpandSortField":{"id":"solrquery.removeexpandsortfield","purpose":"Removes an expand sort field from the expand.sort parameter","prototype":"SolrQuery SolrQuery::removeExpandSortField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::removeFacetDateField":{"id":"solrquery.removefacetdatefield","purpose":"Removes one of the facet date fields","prototype":"SolrQuery SolrQuery::removeFacetDateField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeFacetDateOther":{"id":"solrquery.removefacetdateother","purpose":"Removes one of the facet.date.other parameters","prototype":"SolrQuery SolrQuery::removeFacetDateOther(string $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeFacetField":{"id":"solrquery.removefacetfield","purpose":"Removes one of the facet.date parameters","prototype":"SolrQuery SolrQuery::removeFacetField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeFacetQuery":{"id":"solrquery.removefacetquery","purpose":"Removes one of the facet.query parameters","prototype":"SolrQuery SolrQuery::removeFacetQuery(string $value)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeField":{"id":"solrquery.removefield","purpose":"Removes a field from the list of fields","prototype":"SolrQuery SolrQuery::removeField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeFilterQuery":{"id":"solrquery.removefilterquery","purpose":"Removes a filter query","prototype":"SolrQuery SolrQuery::removeFilterQuery(string $fq)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeHighlightField":{"id":"solrquery.removehighlightfield","purpose":"Removes one of the fields used for highlighting","prototype":"SolrQuery SolrQuery::removeHighlightField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeMltField":{"id":"solrquery.removemltfield","purpose":"Removes one of the moreLikeThis fields","prototype":"SolrQuery SolrQuery::removeMltField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeMltQueryField":{"id":"solrquery.removemltqueryfield","purpose":"Removes one of the moreLikeThis query fields","prototype":"SolrQuery SolrQuery::removeMltQueryField(string $queryField)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeSortField":{"id":"solrquery.removesortfield","purpose":"Removes one of the sort fields","prototype":"SolrQuery SolrQuery::removeSortField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeStatsFacet":{"id":"solrquery.removestatsfacet","purpose":"Removes one of the stats.facet parameters","prototype":"SolrQuery SolrQuery::removeStatsFacet(string $value)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::removeStatsField":{"id":"solrquery.removestatsfield","purpose":"Removes one of the stats.field parameters","prototype":"SolrQuery SolrQuery::removeStatsField(string $field)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setEchoHandler":{"id":"solrquery.setechohandler","purpose":"Toggles the echoHandler parameter","prototype":"SolrQuery SolrQuery::setEchoHandler(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setEchoParams":{"id":"solrquery.setechoparams","purpose":"Determines what kind of parameters to include in the response","prototype":"SolrQuery SolrQuery::setEchoParams(string $type)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setExpand":{"id":"solrquery.setexpand","purpose":"Enables\/Disables the Expand Component","prototype":"SolrQuery SolrQuery::setExpand(bool $value)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setExpandQuery":{"id":"solrquery.setexpandquery","purpose":"Sets the expand.q parameter","prototype":"SolrQuery SolrQuery::setExpandQuery(string $q)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setExpandRows":{"id":"solrquery.setexpandrows","purpose":"Sets the number of rows to display in each group (expand.rows). Server Default 5","prototype":"SolrQuery SolrQuery::setExpandRows(int $value)","return":"<p class=\"para\">   <span class=\"type\">SolrQuery<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setExplainOther":{"id":"solrquery.setexplainother","purpose":"Sets the explainOther common query parameter","prototype":"SolrQuery SolrQuery::setExplainOther(string $query)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacet":{"id":"solrquery.setfacet","purpose":"Maps to the facet parameter. Enables or disables facetting","prototype":"SolrQuery SolrQuery::setFacet(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetDateEnd":{"id":"solrquery.setfacetdateend","purpose":"Maps to facet.date.end","prototype":"SolrQuery SolrQuery::setFacetDateEnd(string $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetDateGap":{"id":"solrquery.setfacetdategap","purpose":"Maps to facet.date.gap","prototype":"SolrQuery SolrQuery::setFacetDateGap(string $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetDateHardEnd":{"id":"solrquery.setfacetdatehardend","purpose":"Maps to facet.date.hardend","prototype":"SolrQuery SolrQuery::setFacetDateHardEnd(bool $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetDateStart":{"id":"solrquery.setfacetdatestart","purpose":"Maps to facet.date.start","prototype":"SolrQuery SolrQuery::setFacetDateStart(string $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetEnumCacheMinDefaultFrequency":{"id":"solrquery.setfacetenumcachemindefaultfrequency","purpose":"Sets the minimum document frequency used for determining term count","prototype":"SolrQuery SolrQuery::setFacetEnumCacheMinDefaultFrequency(int $frequency [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetLimit":{"id":"solrquery.setfacetlimit","purpose":"Maps to facet.limit","prototype":"SolrQuery SolrQuery::setFacetLimit(int $limit [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetMethod":{"id":"solrquery.setfacetmethod","purpose":"Specifies the type of algorithm to use when faceting a field","prototype":"SolrQuery SolrQuery::setFacetMethod(string $method [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetMinCount":{"id":"solrquery.setfacetmincount","purpose":"Maps to facet.mincount","prototype":"SolrQuery SolrQuery::setFacetMinCount(int $mincount [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetMissing":{"id":"solrquery.setfacetmissing","purpose":"Maps to facet.missing","prototype":"SolrQuery SolrQuery::setFacetMissing(bool $flag [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetOffset":{"id":"solrquery.setfacetoffset","purpose":"Sets the offset into the list of constraints to allow for pagination","prototype":"SolrQuery SolrQuery::setFacetOffset(int $offset [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetPrefix":{"id":"solrquery.setfacetprefix","purpose":"Specifies a string prefix with which to limits the terms on which to facet","prototype":"SolrQuery SolrQuery::setFacetPrefix(string $prefix [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setFacetSort":{"id":"solrquery.setfacetsort","purpose":"Determines the ordering of the facet field constraints","prototype":"SolrQuery SolrQuery::setFacetSort(int $facetSort [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setGroup":{"id":"solrquery.setgroup","purpose":"Enable\/Disable result grouping (group parameter)","prototype":"SolrQuery SolrQuery::setGroup(bool $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupCachePercent":{"id":"solrquery.setgroupcachepercent","purpose":"Enables caching for result grouping","prototype":"SolrQuery SolrQuery::setGroupCachePercent(int $percent)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupFacet":{"id":"solrquery.setgroupfacet","purpose":"Sets group.facet parameter","prototype":"SolrQuery SolrQuery::setGroupFacet(bool $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupFormat":{"id":"solrquery.setgroupformat","purpose":"Sets the group format, result structure (group.format parameter)","prototype":"SolrQuery SolrQuery::setGroupFormat(string $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupLimit":{"id":"solrquery.setgrouplimit","purpose":"Specifies the number of results to return for each group. The server default value is 1","prototype":"SolrQuery SolrQuery::setGroupLimit(int $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupMain":{"id":"solrquery.setgroupmain","purpose":"If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple","prototype":"SolrQuery SolrQuery::setGroupMain(string $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupNGroups":{"id":"solrquery.setgroupngroups","purpose":"If true, Solr includes the number of groups that have matched the query in the results","prototype":"SolrQuery SolrQuery::setGroupNGroups(bool $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupOffset":{"id":"solrquery.setgroupoffset","purpose":"Sets the group.offset parameter","prototype":"SolrQuery SolrQuery::setGroupOffset(int $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setGroupTruncate":{"id":"solrquery.setgrouptruncate","purpose":"If true, facet counts are based on the most relevant document of each group matching the query","prototype":"SolrQuery SolrQuery::setGroupTruncate(bool $value)","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrQuery::setHighlight":{"id":"solrquery.sethighlight","purpose":"Enables or disables highlighting","prototype":"SolrQuery SolrQuery::setHighlight(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightAlternateField":{"id":"solrquery.sethighlightalternatefield","purpose":"Specifies the backup field to use","prototype":"SolrQuery SolrQuery::setHighlightAlternateField(string $field [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightFormatter":{"id":"solrquery.sethighlightformatter","purpose":"Specify a formatter for the highlight output","prototype":"SolrQuery SolrQuery::setHighlightFormatter(string $formatter [, string $field_override = ''])","return":"","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightFragmenter":{"id":"solrquery.sethighlightfragmenter","purpose":"Sets a text snippet generator for highlighted text","prototype":"SolrQuery SolrQuery::setHighlightFragmenter(string $fragmenter [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightFragsize":{"id":"solrquery.sethighlightfragsize","purpose":"The size of fragments to consider for highlighting","prototype":"SolrQuery SolrQuery::setHighlightFragsize(int $size [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightHighlightMultiTerm":{"id":"solrquery.sethighlighthighlightmultiterm","purpose":"Use SpanScorer to highlight phrase terms","prototype":"SolrQuery SolrQuery::setHighlightHighlightMultiTerm(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightMaxAlternateFieldLength":{"id":"solrquery.sethighlightmaxalternatefieldlength","purpose":"Sets the maximum number of characters of the field to return","prototype":"SolrQuery SolrQuery::setHighlightMaxAlternateFieldLength(int $fieldLength [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightMaxAnalyzedChars":{"id":"solrquery.sethighlightmaxanalyzedchars","purpose":"Specifies the number of characters into a document to look for suitable snippets","prototype":"SolrQuery SolrQuery::setHighlightMaxAnalyzedChars(int $value)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightMergeContiguous":{"id":"solrquery.sethighlightmergecontiguous","purpose":"Whether or not to collapse contiguous fragments into a single fragment","prototype":"SolrQuery SolrQuery::setHighlightMergeContiguous(bool $flag [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightRegexMaxAnalyzedChars":{"id":"solrquery.sethighlightregexmaxanalyzedchars","purpose":"Specify the maximum number of characters to analyze","prototype":"SolrQuery SolrQuery::setHighlightRegexMaxAnalyzedChars(int $maxAnalyzedChars)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightRegexPattern":{"id":"solrquery.sethighlightregexpattern","purpose":"Specify the regular expression for fragmenting","prototype":"SolrQuery SolrQuery::setHighlightRegexPattern(string $value)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightRegexSlop":{"id":"solrquery.sethighlightregexslop","purpose":"Sets the factor by which the regex fragmenter can stray from the ideal fragment size","prototype":"SolrQuery SolrQuery::setHighlightRegexSlop(float $factor)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightRequireFieldMatch":{"id":"solrquery.sethighlightrequirefieldmatch","purpose":"Require field matching during highlighting","prototype":"SolrQuery SolrQuery::setHighlightRequireFieldMatch(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightSimplePost":{"id":"solrquery.sethighlightsimplepost","purpose":"Sets the text which appears after a highlighted term","prototype":"SolrQuery SolrQuery::setHighlightSimplePost(string $simplePost [, string $field_override = ''])","return":"","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightSimplePre":{"id":"solrquery.sethighlightsimplepre","purpose":"Sets the text which appears before a highlighted term","prototype":"SolrQuery SolrQuery::setHighlightSimplePre(string $simplePre [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightSnippets":{"id":"solrquery.sethighlightsnippets","purpose":"Sets the maximum number of highlighted snippets to generate per field","prototype":"SolrQuery SolrQuery::setHighlightSnippets(int $value [, string $field_override = ''])","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setHighlightUsePhraseHighlighter":{"id":"solrquery.sethighlightusephrasehighlighter","purpose":"Whether to highlight phrase terms only when they appear within the query phrase","prototype":"SolrQuery SolrQuery::setHighlightUsePhraseHighlighter(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMlt":{"id":"solrquery.setmlt","purpose":"Enables or disables moreLikeThis","prototype":"SolrQuery SolrQuery::setMlt(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltBoost":{"id":"solrquery.setmltboost","purpose":"Set if the query will be boosted by the interesting term relevance","prototype":"SolrQuery SolrQuery::setMltBoost(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltCount":{"id":"solrquery.setmltcount","purpose":"Set the number of similar documents to return for each result","prototype":"SolrQuery SolrQuery::setMltCount(int $count)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltMaxNumQueryTerms":{"id":"solrquery.setmltmaxnumqueryterms","purpose":"Sets the maximum number of query terms included","prototype":"SolrQuery SolrQuery::setMltMaxNumQueryTerms(int $value)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltMaxNumTokens":{"id":"solrquery.setmltmaxnumtokens","purpose":"Specifies the maximum number of tokens to parse","prototype":"SolrQuery SolrQuery::setMltMaxNumTokens(int $value)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltMaxWordLength":{"id":"solrquery.setmltmaxwordlength","purpose":"Sets the maximum word length","prototype":"SolrQuery SolrQuery::setMltMaxWordLength(int $maxWordLength)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltMinDocFrequency":{"id":"solrquery.setmltmindocfrequency","purpose":"Sets the mltMinDoc frequency","prototype":"SolrQuery SolrQuery::setMltMinDocFrequency(int $minDocFrequency)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltMinTermFrequency":{"id":"solrquery.setmltmintermfrequency","purpose":"Sets the frequency below which terms will be ignored in the source docs","prototype":"SolrQuery SolrQuery::setMltMinTermFrequency(int $minTermFrequency)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setMltMinWordLength":{"id":"solrquery.setmltminwordlength","purpose":"Sets the minimum word length","prototype":"SolrQuery SolrQuery::setMltMinWordLength(int $minWordLength)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setOmitHeader":{"id":"solrquery.setomitheader","purpose":"Exclude the header from the returned results","prototype":"SolrQuery SolrQuery::setOmitHeader(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setQuery":{"id":"solrquery.setquery","purpose":"Sets the search query","prototype":"SolrQuery SolrQuery::setQuery(string $query)","return":"<p class=\"para\">   Returns the current SolrQuery object  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setRows":{"id":"solrquery.setrows","purpose":"Specifies the maximum number of rows to return in the result","prototype":"SolrQuery SolrQuery::setRows(int $rows)","return":"<p class=\"para\">   Returns the current SolrQuery object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setShowDebugInfo":{"id":"solrquery.setshowdebuginfo","purpose":"Flag to show debug information","prototype":"SolrQuery SolrQuery::setShowDebugInfo(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setStart":{"id":"solrquery.setstart","purpose":"Specifies the number of rows to skip","prototype":"SolrQuery SolrQuery::setStart(int $start)","return":"<p class=\"para\">  Returns the current SolrQuery object.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setStats":{"id":"solrquery.setstats","purpose":"Enables or disables the Stats component","prototype":"SolrQuery SolrQuery::setStats(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTerms":{"id":"solrquery.setterms","purpose":"Enables or disables the TermsComponent","prototype":"SolrQuery SolrQuery::setTerms(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsField":{"id":"solrquery.settermsfield","purpose":"Sets the name of the field to get the Terms from","prototype":"SolrQuery SolrQuery::setTermsField(string $fieldname)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsIncludeLowerBound":{"id":"solrquery.settermsincludelowerbound","purpose":"Include the lower bound term in the result set","prototype":"SolrQuery SolrQuery::setTermsIncludeLowerBound(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsIncludeUpperBound":{"id":"solrquery.settermsincludeupperbound","purpose":"Include the upper bound term in the result set","prototype":"SolrQuery SolrQuery::setTermsIncludeUpperBound(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsLimit":{"id":"solrquery.settermslimit","purpose":"Sets the maximum number of terms to return","prototype":"SolrQuery SolrQuery::setTermsLimit(int $limit)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsLowerBound":{"id":"solrquery.settermslowerbound","purpose":"Specifies the Term to start from","prototype":"SolrQuery SolrQuery::setTermsLowerBound(string $lowerBound)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsMaxCount":{"id":"solrquery.settermsmaxcount","purpose":"Sets the maximum document frequency","prototype":"SolrQuery SolrQuery::setTermsMaxCount(int $frequency)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsMinCount":{"id":"solrquery.settermsmincount","purpose":"Sets the minimum document frequency","prototype":"SolrQuery SolrQuery::setTermsMinCount(int $frequency)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsPrefix":{"id":"solrquery.settermsprefix","purpose":"Restrict matches to terms that start with the prefix","prototype":"SolrQuery SolrQuery::setTermsPrefix(string $prefix)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsReturnRaw":{"id":"solrquery.settermsreturnraw","purpose":"Return the raw characters of the indexed term","prototype":"SolrQuery SolrQuery::setTermsReturnRaw(bool $flag)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsSort":{"id":"solrquery.settermssort","purpose":"Specifies how to sort the returned terms","prototype":"SolrQuery SolrQuery::setTermsSort(int $sortType)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTermsUpperBound":{"id":"solrquery.settermsupperbound","purpose":"Sets the term to stop at","prototype":"SolrQuery SolrQuery::setTermsUpperBound(string $upperBound)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrQuery::setTimeAllowed":{"id":"solrquery.settimeallowed","purpose":"The time allowed for search to finish","prototype":"SolrQuery SolrQuery::setTimeAllowed(int $timeAllowed)","return":"<p class=\"para\">   Returns the current SolrQuery object, if the return value is used.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrDisMaxQuery::addBigramPhraseField":{"id":"solrdismaxquery.addbigramphrasefield","purpose":"Adds a Phrase Bigram Field (pf2 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::addBigramPhraseField(string $field, string $boost [, string $slop = ''])","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::addBoostQuery":{"id":"solrdismaxquery.addboostquery","purpose":"Adds a boost query field with value and optional boost (bq parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::addBoostQuery(string $field, string $value [, string $boost = ''])","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::addPhraseField":{"id":"solrdismaxquery.addphrasefield","purpose":"Adds a Phrase Field (pf parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::addPhraseField(string $field, string $boost [, string $slop = ''])","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::addQueryField":{"id":"solrdismaxquery.addqueryfield","purpose":"Add a query field with optional boost (qf parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::addQueryField(string $field [, string $boost = ''])","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::addTrigramPhraseField":{"id":"solrdismaxquery.addtrigramphrasefield","purpose":"Adds a Trigram Phrase Field (pf3 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::addTrigramPhraseField(string $field, string $boost [, string $slop = ''])","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::addUserField":{"id":"solrdismaxquery.adduserfield","purpose":"Adds a field to User Fields Parameter (uf)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::addUserField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::__construct":{"id":"solrdismaxquery.construct","purpose":"Class Constructor","prototype":" SolrDisMaxQuery::__construct([string $q = ''])","return":"<p class=\"para\">     <\/p>","versions":""},"SolrDisMaxQuery::removeBigramPhraseField":{"id":"solrdismaxquery.removebigramphrasefield","purpose":"Removes phrase bigram field (pf2 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::removeBigramPhraseField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::removeBoostQuery":{"id":"solrdismaxquery.removeboostquery","purpose":"Removes a boost query partial by field name (bq)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::removeBoostQuery(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::removePhraseField":{"id":"solrdismaxquery.removephrasefield","purpose":"Removes a Phrase Field (pf parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::removePhraseField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::removeQueryField":{"id":"solrdismaxquery.removequeryfield","purpose":"Removes a Query Field (qf parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::removeQueryField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::removeTrigramPhraseField":{"id":"solrdismaxquery.removetrigramphrasefield","purpose":"Removes a Trigram Phrase Field (pf3 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::removeTrigramPhraseField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::removeUserField":{"id":"solrdismaxquery.removeuserfield","purpose":"Removes a field from The User Fields Parameter (uf)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::removeUserField(string $field)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setBigramPhraseFields":{"id":"solrdismaxquery.setbigramphrasefields","purpose":"Sets Bigram Phrase Fields and their boosts (and slops) using pf2 parameter","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setBigramPhraseFields(string $fields)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setBigramPhraseSlop":{"id":"solrdismaxquery.setbigramphraseslop","purpose":"Sets Bigram Phrase Slop (ps2 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setBigramPhraseSlop(string $slop)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setBoostFunction":{"id":"solrdismaxquery.setboostfunction","purpose":"Sets a Boost Function (bf parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setBoostFunction(string $function)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setBoostQuery":{"id":"solrdismaxquery.setboostquery","purpose":"Directly Sets Boost Query Parameter (bq)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setBoostQuery(string $q)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setMinimumMatch":{"id":"solrdismaxquery.setminimummatch","purpose":"Set Minimum \"Should\" Match (mm)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setMinimumMatch(string $value)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setPhraseFields":{"id":"solrdismaxquery.setphrasefields","purpose":"Sets  Phrase Fields and their boosts (and slops) using pf2 parameter","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setPhraseFields(string $fields)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setPhraseSlop":{"id":"solrdismaxquery.setphraseslop","purpose":"Sets the default slop on phrase queries (ps parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setPhraseSlop(string $slop)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setQueryAlt":{"id":"solrdismaxquery.setqueryalt","purpose":"Set Query Alternate (q.alt parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setQueryAlt(string $q)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setQueryPhraseSlop":{"id":"solrdismaxquery.setqueryphraseslop","purpose":"Specifies the amount of slop permitted on phrase queries explicitly included in the user's query string (qf parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setQueryPhraseSlop(string $slop)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setTieBreaker":{"id":"solrdismaxquery.settiebreaker","purpose":"Sets Tie Breaker parameter (tie parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setTieBreaker(string $tieBreaker)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setTrigramPhraseFields":{"id":"solrdismaxquery.settrigramphrasefields","purpose":"Directly Sets Trigram Phrase Fields (pf3 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setTrigramPhraseFields(string $fields)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setTrigramPhraseSlop":{"id":"solrdismaxquery.settrigramphraseslop","purpose":"Sets Trigram Phrase Slop (ps3 parameter)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setTrigramPhraseSlop(string $slop)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::setUserFields":{"id":"solrdismaxquery.setuserfields","purpose":"Sets User Fields parameter (uf)","prototype":"SolrDisMaxQuery SolrDisMaxQuery::setUserFields(string $fields)","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::useDisMaxQueryParser":{"id":"solrdismaxquery.usedismaxqueryparser","purpose":"Switch QueryParser to be DisMax Query Parser","prototype":"SolrDisMaxQuery SolrDisMaxQuery::useDisMaxQueryParser()","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrDisMaxQuery::useEDisMaxQueryParser":{"id":"solrdismaxquery.useedismaxqueryparser","purpose":"Switch QueryParser to be EDisMax","prototype":"SolrDisMaxQuery SolrDisMaxQuery::useEDisMaxQueryParser()","return":"<p class=\"para\">   <span class=\"type\">SolrDisMaxQuery<\/span>  <\/p>","versions":""},"SolrCollapseFunction::__construct":{"id":"solrcollapsefunction.construct","purpose":"Constructor","prototype":" SolrCollapseFunction::__construct([string $field = ''])","return":"","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::getField":{"id":"solrcollapsefunction.getfield","purpose":"Returns the field that is being collapsed on","prototype":"string SolrCollapseFunction::getField()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::getHint":{"id":"solrcollapsefunction.gethint","purpose":"Returns collapse hint","prototype":"string SolrCollapseFunction::getHint()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::getMax":{"id":"solrcollapsefunction.getmax","purpose":"Returns max parameter","prototype":"string SolrCollapseFunction::getMax()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::getMin":{"id":"solrcollapsefunction.getmin","purpose":"Returns min parameter","prototype":"string SolrCollapseFunction::getMin()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::getNullPolicy":{"id":"solrcollapsefunction.getnullpolicy","purpose":"Returns null policy","prototype":"string SolrCollapseFunction::getNullPolicy()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::getSize":{"id":"solrcollapsefunction.getsize","purpose":"Returns size parameter","prototype":"int SolrCollapseFunction::getSize()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::setField":{"id":"solrcollapsefunction.setfield","purpose":"Sets the field to collapse on","prototype":"SolrCollapseFunction SolrCollapseFunction::setField(string $fieldName)","return":"<p class=\"para\">   <span class=\"type\">SolrCollapseFunction<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::setHint":{"id":"solrcollapsefunction.sethint","purpose":"Sets collapse hint","prototype":"SolrCollapseFunction SolrCollapseFunction::setHint(string $hint)","return":"<p class=\"para\">   <span class=\"type\">SolrCollapseFunction<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::setMax":{"id":"solrcollapsefunction.setmax","purpose":"Selects the group heads by the max value of a numeric field or function query","prototype":"SolrCollapseFunction SolrCollapseFunction::setMax(string $max)","return":"<p class=\"para\">   <span class=\"type\">SolrCollapseFunction<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::setMin":{"id":"solrcollapsefunction.setmin","purpose":"Sets the initial size of the collapse data structures when collapsing on a numeric field only","prototype":"SolrCollapseFunction SolrCollapseFunction::setMin(string $min)","return":"<p class=\"para\">   <span class=\"type\">SolrCollapseFunction<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::setNullPolicy":{"id":"solrcollapsefunction.setnullpolicy","purpose":"Sets the NULL Policy","prototype":"SolrCollapseFunction SolrCollapseFunction::setNullPolicy(string $nullPolicy)","return":"<p class=\"para\">   <span class=\"type\">SolrCollapseFunction<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::setSize":{"id":"solrcollapsefunction.setsize","purpose":"Sets the initial size of the collapse data structures when collapsing on a numeric field only","prototype":"SolrCollapseFunction SolrCollapseFunction::setSize(int $size)","return":"<p class=\"para\">   <span class=\"type\">SolrCollapseFunction<\/span>  <\/p>","versions":"PECL solr >= 2.2.0"},"SolrCollapseFunction::__toString":{"id":"solrcollapsefunction.tostring","purpose":"Returns a string representing the constructed collapse function","prototype":"string SolrCollapseFunction::__toString()","return":"<p class=\"para\">     <\/p>","versions":"PECL solr >= 2.2.0"},"SolrException::getInternalInfo":{"id":"solrexception.getinternalinfo","purpose":"Returns internal information where the Exception was thrown","prototype":"array SolrException::getInternalInfo()","return":"<p class=\"para\">   Returns an array containing internal information where the error was thrown. Used only for debugging by extension developers.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrClientException::getInternalInfo":{"id":"solrclientexception.getinternalinfo","purpose":"Returns internal information where the Exception was thrown","prototype":"array SolrClientException::getInternalInfo()","return":"<p class=\"para\">   Returns an array containing internal information where the error was thrown. Used only for debugging by extension developers.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrServerException::getInternalInfo":{"id":"solrserverexception.getinternalinfo","purpose":"Returns internal information where the Exception was thrown","prototype":"array SolrServerException::getInternalInfo()","return":"<p class=\"para\">   Returns an array containing internal information where the error was thrown. Used only for debugging by extension developers.  <\/p>","versions":"PECL solr >= 1.1.0, >=2.0.0"},"SolrIllegalArgumentException::getInternalInfo":{"id":"solrillegalargumentexception.getinternalinfo","purpose":"Returns internal information where the Exception was thrown","prototype":"array SolrIllegalArgumentException::getInternalInfo()","return":"<p class=\"para\">   Returns an array containing internal information where the error was thrown. Used only for debugging by extension developers.  <\/p>","versions":"PECL solr >= 0.9.2"},"SolrIllegalOperationException::getInternalInfo":{"id":"solrillegaloperationexception.getinternalinfo","purpose":"Returns internal information where the Exception was thrown","prototype":"array SolrIllegalOperationException::getInternalInfo()","return":"<p class=\"para\">   Returns an array containing internal information where the error was thrown. Used only for debugging by extension developers.  <\/p>","versions":"PECL solr >= 0.9.2"},"SphinxClient::addQuery":{"id":"sphinxclient.addquery","purpose":"Add query to multi-query batch","prototype":"int SphinxClient::addQuery(string $query [, string $index = \"*\" [, string $comment = \"\"]])","return":"<p class=\"para\">   Returns an index in an array of results that will be returned   by <a href=\"sphinxclient.runqueries.html\" class=\"xref\">SphinxClient::runQueries<\/a> call or false on error.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::buildExcerpts":{"id":"sphinxclient.buildexcerpts","purpose":"Build text snippets","prototype":"array SphinxClient::buildExcerpts(array $docs, string $index, string $words [, array $opts = ''])","return":"<p class=\"para\">   Returns array of snippets on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::buildKeywords":{"id":"sphinxclient.buildkeywords","purpose":"Extract keywords from query","prototype":"array SphinxClient::buildKeywords(string $query, string $index, bool $hits)","return":"<p class=\"para\">   Returns an array of associative arrays with per-keyword information.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::close":{"id":"sphinxclient.close","purpose":"Closes previously opened persistent connection","prototype":"bool SphinxClient::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 1.0.3"},"SphinxClient::__construct":{"id":"sphinxclient.construct","purpose":"Create a new SphinxClient object","prototype":" SphinxClient::__construct()","return":"","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::escapeString":{"id":"sphinxclient.escapestring","purpose":"Escape special characters","prototype":"string SphinxClient::escapeString(string $string)","return":"<p class=\"para\">   Returns escaped string.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::getLastError":{"id":"sphinxclient.getlasterror","purpose":"Get the last error message","prototype":"string SphinxClient::getLastError()","return":"<p class=\"para\">   Returns the last error message or an empty string if there were no errors.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::getLastWarning":{"id":"sphinxclient.getlastwarning","purpose":"Get the last warning","prototype":"string SphinxClient::getLastWarning()","return":"<p class=\"para\">   Returns the last warning message or an empty string if there were no warnings.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::open":{"id":"sphinxclient.open","purpose":"Opens persistent connection to the server","prototype":"bool SphinxClient::open()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 1.0.3"},"SphinxClient::query":{"id":"sphinxclient.query","purpose":"Execute search query","prototype":"array SphinxClient::query(string $query [, string $index = \"*\" [, string $comment = \"\"]])","return":"<p class=\"para\">   On success, <span class=\"function\">SphinxClient::query<\/span> returns a list of    found matches and additional per-query statistics. The result set is a    hash utilize other structures instead of hash) with the following keys and   values:   <table class=\"doctable table\">    <caption><strong>Result set structure<\/strong><\/caption>         <thead>      <tr>       <th>Key<\/th>       <th>Value description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>&quot;matches&quot;<\/td>       <td>An array with found document IDs as keys and their weight and        attributes values as values<\/td>      <\/tr>      <tr>       <td>&quot;total&quot;<\/td>       <td>Total number of matches found and retrieved (depends on your        settings)<\/td>      <\/tr>      <tr>       <td>&quot;total_found&quot;<\/td>       <td>Total number of found documents matching the query<\/td>      <\/tr>      <tr>       <td>&quot;words&quot;<\/td>       <td>An array with words (case-folded and stemmed) as keys and        per-word statistics as values<\/td>      <\/tr>      <tr>       <td>&quot;error&quot;<\/td>       <td>Query error message reported by searchd<\/td>      <\/tr>      <tr>       <td>&quot;warning&quot;<\/td>       <td>Query warning reported by searchd<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::resetFilters":{"id":"sphinxclient.resetfilters","purpose":"Clear all filters","prototype":"void SphinxClient::resetFilters()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::resetGroupBy":{"id":"sphinxclient.resetgroupby","purpose":"Clear all group-by settings","prototype":"void SphinxClient::resetGroupBy()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::runQueries":{"id":"sphinxclient.runqueries","purpose":"Run a batch of search queries","prototype":"array SphinxClient::runQueries()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure and array of result sets on success.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setArrayResult":{"id":"sphinxclient.setarrayresult","purpose":"Change the format of result set array","prototype":"bool SphinxClient::setArrayResult(bool $array_result)","return":"<p class=\"para\">   Always returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setConnectTimeout":{"id":"sphinxclient.setconnecttimeout","purpose":"Set connection timeout","prototype":"bool SphinxClient::setConnectTimeout(float $timeout)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setFieldWeights":{"id":"sphinxclient.setfieldweights","purpose":"Set field weights","prototype":"bool SphinxClient::setFieldWeights(array $weights)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setFilter":{"id":"sphinxclient.setfilter","purpose":"Add new integer values set filter","prototype":"bool SphinxClient::setFilter(string $attribute, array $values [, bool $exclude = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setFilterFloatRange":{"id":"sphinxclient.setfilterfloatrange","purpose":"Add new float range filter","prototype":"bool SphinxClient::setFilterFloatRange(string $attribute, float $min, float $max [, bool $exclude = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setFilterRange":{"id":"sphinxclient.setfilterrange","purpose":"Add new integer range filter","prototype":"bool SphinxClient::setFilterRange(string $attribute, int $min, int $max [, bool $exclude = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setGeoAnchor":{"id":"sphinxclient.setgeoanchor","purpose":"Set anchor point for a geosphere distance calculations","prototype":"bool SphinxClient::setGeoAnchor(string $attrlat, string $attrlong, float $latitude, float $longitude)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setGroupBy":{"id":"sphinxclient.setgroupby","purpose":"Set grouping attribute","prototype":"bool SphinxClient::setGroupBy(string $attribute, int $func [, string $groupsort = \"@group desc\"])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setGroupDistinct":{"id":"sphinxclient.setgroupdistinct","purpose":"Set attribute name for per-group distinct values count calculations","prototype":"bool SphinxClient::setGroupDistinct(string $attribute)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setIDRange":{"id":"sphinxclient.setidrange","purpose":"Set a range of accepted document IDs","prototype":"bool SphinxClient::setIDRange(int $min, int $max)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setIndexWeights":{"id":"sphinxclient.setindexweights","purpose":"Set per-index weights","prototype":"bool SphinxClient::setIndexWeights(array $weights)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setLimits":{"id":"sphinxclient.setlimits","purpose":"Set offset and limit of the result set","prototype":"bool SphinxClient::setLimits(int $offset, int $limit [, int $max_matches = '' [, int $cutoff = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setMatchMode":{"id":"sphinxclient.setmatchmode","purpose":"Set full-text query matching mode","prototype":"bool SphinxClient::setMatchMode(int $mode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setMaxQueryTime":{"id":"sphinxclient.setmaxquerytime","purpose":"Set maximum query time","prototype":"bool SphinxClient::setMaxQueryTime(int $qtime)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setOverride":{"id":"sphinxclient.setoverride","purpose":"Sets temporary per-document attribute value   overrides","prototype":"bool SphinxClient::setOverride(string $attribute, int $type, array $values)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 1.0.3"},"SphinxClient::setRankingMode":{"id":"sphinxclient.setrankingmode","purpose":"Set ranking mode","prototype":"bool SphinxClient::setRankingMode(int $ranker)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setRetries":{"id":"sphinxclient.setretries","purpose":"Set retry count and delay","prototype":"bool SphinxClient::setRetries(int $count [, int $delay = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setSelect":{"id":"sphinxclient.setselect","purpose":"Set select clause","prototype":"bool SphinxClient::setSelect(string $clause)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 1.0.1"},"SphinxClient::setServer":{"id":"sphinxclient.setserver","purpose":"Set searchd host and port","prototype":"bool SphinxClient::setServer(string $server, int $port)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::setSortMode":{"id":"sphinxclient.setsortmode","purpose":"Set matches sorting mode","prototype":"bool SphinxClient::setSortMode(int $mode [, string $sortby = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"SphinxClient::status":{"id":"sphinxclient.status","purpose":"Queries searchd status","prototype":"array SphinxClient::status()","return":"<p class=\"para\">   Returns an associative array of search server statistics or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 1.0.3"},"SphinxClient::updateAttributes":{"id":"sphinxclient.updateattributes","purpose":"Update document attributes","prototype":"int SphinxClient::updateAttributes(string $index, array $attributes, array $values [, bool $mva = ''])","return":"<p class=\"para\">    Returns number of actually updated documents (0 or more) on success, or    <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL sphinx >= 0.1.0"},"Swish::__construct":{"id":"swish.construct","purpose":"Construct a Swish object","prototype":"void Swish::__construct(string $index_names)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL swish >= 0.1.0"},"Swish::getMetaList":{"id":"swish.getmetalist","purpose":"Get the list of meta entries for the index","prototype":"array Swish::getMetaList(string $index_name)","return":"<p class=\"para\">   Returns an array of meta entries for the given index.  <\/p>","versions":"PECL swish >= 0.1.0"},"Swish::getPropertyList":{"id":"swish.getpropertylist","purpose":"Get the list of properties for the index","prototype":"array Swish::getPropertyList(string $index_name)","return":"<p class=\"para\">   Returns an array of properties for the given index.  <\/p>","versions":"PECL swish >= 0.1.0"},"Swish::prepare":{"id":"swish.prepare","purpose":"Prepare a search query","prototype":"object Swish::prepare([string $query = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">SwishSearch<\/span> object.  <\/p>","versions":"PECL swish >= 0.1.0"},"Swish::query":{"id":"swish.query","purpose":"Execute a query and return results object","prototype":"object Swish::query(string $query)","return":"<p class=\"para\">   Returns <span class=\"classname\">SwishResults<\/span> object.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishResult::getMetaList":{"id":"swishresult.getmetalist","purpose":"Get a list of meta entries","prototype":"array SwishResult::getMetaList()","return":"<p class=\"para\">   Returns the same array as <span class=\"function\">swish::getmetalist<\/span>,   but uses the index file from the result handle.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishResult::stem":{"id":"swishresult.stem","purpose":"Stems the given word","prototype":"array SwishResult::stem(string $word)","return":"<p class=\"para\">   Returns array containing the stemmed word variants (usually just one).  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishResults::getParsedWords":{"id":"swishresults.getparsedwords","purpose":"Get an array of parsed words","prototype":"array SwishResults::getParsedWords(string $index_name)","return":"<p class=\"para\">   An array of parsed words with stopwords removed. The list of parsed words   may be useful for highlighting search terms in the results.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishResults::getRemovedStopwords":{"id":"swishresults.getremovedstopwords","purpose":"Get an array of stopwords removed from the query","prototype":"array SwishResults::getRemovedStopwords(string $index_name)","return":"<p class=\"para\">   Returns array of stopwords removed from the query.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishResults::nextResult":{"id":"swishresults.nextresult","purpose":"Get the next search result","prototype":"object SwishResults::nextResult()","return":"<p class=\"para\">   Returns the next <span class=\"classname\">SwishResult<\/span> object in the result   set or <strong><code>FALSE<\/code><\/strong> if there are no more results available.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishResults::seekResult":{"id":"swishresults.seekresult","purpose":"Set current seek pointer to the given position","prototype":"int SwishResults::seekResult(int $position)","return":"<p class=\"para\">   Returns new position value on success.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishSearch::execute":{"id":"swishsearch.execute","purpose":"Execute the search and get the results","prototype":"object SwishSearch::execute([string $query = ''])","return":"<p class=\"para\">   Returns <span class=\"classname\">SwishResults<\/span> object.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishSearch::resetLimit":{"id":"swishsearch.resetlimit","purpose":"Reset the search limits","prototype":"void SwishSearch::resetLimit()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishSearch::setLimit":{"id":"swishsearch.setlimit","purpose":"Set the search limits","prototype":"void SwishSearch::setLimit(string $property, string $low, string $high)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishSearch::setPhraseDelimiter":{"id":"swishsearch.setphrasedelimiter","purpose":"Set the phrase delimiter","prototype":"void SwishSearch::setPhraseDelimiter(string $delimiter)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishSearch::setSort":{"id":"swishsearch.setsort","purpose":"Set the sort order","prototype":"void SwishSearch::setSort(string $sort)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL swish >= 0.1.0"},"SwishSearch::setStructure":{"id":"swishsearch.setstructure","purpose":"Set the structure flag in the search object","prototype":"void SwishSearch::setStructure(int $structure)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL swish >= 0.1.0"},"apache_child_terminate":{"id":"function.apache-child-terminate","purpose":"Terminate apache process after this request","prototype":"bool apache_child_terminate()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if PHP is running as an Apache 1 module, the Apache version   is non-multithreaded, and the    <a href=\"apache.configuration.html#ini.child-terminate\" class=\"link\">child_terminate<\/a> PHP directive is    enabled (disabled by default). If these conditions are not met, <strong><code>FALSE<\/code><\/strong> is    returned and an error of level <strong><code>E_WARNING<\/code><\/strong> is generated.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"apache_get_modules":{"id":"function.apache-get-modules","purpose":"Get a list of loaded Apache modules","prototype":"array apache_get_modules()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of loaded Apache modules.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"apache_get_version":{"id":"function.apache-get-version","purpose":"Fetch Apache version","prototype":"string apache_get_version()","return":"<p class=\"para\">   Returns the Apache version on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"apache_getenv":{"id":"function.apache-getenv","purpose":"Get an Apache subprocess_env variable","prototype":"string apache_getenv(string $variable [, bool $walk_to_top = ''])","return":"<p class=\"para\">   The value of the Apache environment variable on success, or <strong><code>FALSE<\/code><\/strong> on   failure  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"apache_lookup_uri":{"id":"function.apache-lookup-uri","purpose":"Perform a partial request for the specified URI and return all info about it","prototype":"object apache_lookup_uri(string $filename)","return":"<p class=\"para\">   An <span class=\"type\">object<\/span> of related URI information. The properties of   this <span class=\"type\">object<\/span> are:  <\/p>  <p class=\"para\">   <ul class=\"simplelist\">    <li class=\"member\">status<\/li>    <li class=\"member\">the_request<\/li>    <li class=\"member\">status_line<\/li>    <li class=\"member\">method<\/li>    <li class=\"member\">content_type<\/li>    <li class=\"member\">handler<\/li>    <li class=\"member\">uri<\/li>    <li class=\"member\">filename<\/li>    <li class=\"member\">path_info<\/li>    <li class=\"member\">args<\/li>    <li class=\"member\">boundary<\/li>    <li class=\"member\">no_cache<\/li>    <li class=\"member\">no_local_copy<\/li>    <li class=\"member\">allowed<\/li>    <li class=\"member\">send_bodyct<\/li>    <li class=\"member\">bytes_sent<\/li>    <li class=\"member\">byterange<\/li>    <li class=\"member\">clength<\/li>    <li class=\"member\">unparsed_uri<\/li>    <li class=\"member\">mtime<\/li>    <li class=\"member\">request_time<\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"apache_note":{"id":"function.apache-note","purpose":"Get and set apache request notes","prototype":"string apache_note(string $note_name [, string $note_value = \"\"])","return":"<p class=\"para\">   If called with one argument, it returns the current value of note   <em>note_name<\/em>. If called with two arguments, it   sets the value of note <em>note_name<\/em> to   <em>note_value<\/em> and returns the previous value of   note <em>note_name<\/em>.   If the note cannot be retrieved, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"apache_request_headers":{"id":"function.apache-request-headers","purpose":"Fetch all HTTP request headers","prototype":"array apache_request_headers()","return":"<p class=\"para\">   An associative array of all the HTTP headers in the current request, or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"apache_reset_timeout":{"id":"function.apache-reset-timeout","purpose":"Reset the Apache write timer","prototype":"bool apache_reset_timeout()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"apache_response_headers":{"id":"function.apache-response-headers","purpose":"Fetch all HTTP response headers","prototype":"array apache_response_headers()","return":"<p class=\"para\">   An array of all Apache response headers on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"apache_setenv":{"id":"function.apache-setenv","purpose":"Set an Apache subprocess_env variable","prototype":"bool apache_setenv(string $variable, string $value [, bool $walk_to_top = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"getallheaders":{"id":"function.getallheaders","purpose":"Fetch all HTTP request headers","prototype":"array getallheaders()","return":"<p class=\"para\">   An associative array of all the HTTP headers in the current request, or   <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"virtual":{"id":"function.virtual","purpose":"Perform an Apache sub-request","prototype":"bool virtual(string $filename)","return":"<p class=\"para\">   Performs the virtual command on success, or returns <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fastcgi_finish_request":{"id":"function.fastcgi-finish-request","purpose":"Flushes all response data to the client","prototype":"bool fastcgi_finish_request()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.3, PHP 7"},"iis_add_server":{"id":"function.iis-add-server","purpose":"Creates a new virtual web server","prototype":"int iis_add_server(string $path, string $comment, string $server_ip, int $port, string $host_name, int $rights, int $start_server)","return":"","versions":"PECL iisfunc SVN"},"iis_get_dir_security":{"id":"function.iis-get-dir-security","purpose":"Gets Directory Security","prototype":"int iis_get_dir_security(int $server_instance, string $virtual_path)","return":"","versions":"PECL iisfunc SVN"},"iis_get_script_map":{"id":"function.iis-get-script-map","purpose":"Gets script mapping on a virtual directory for a specific extension","prototype":"string iis_get_script_map(int $server_instance, string $virtual_path, string $script_extension)","return":"","versions":"PECL iisfunc SVN"},"iis_get_server_by_comment":{"id":"function.iis-get-server-by-comment","purpose":"Return the instance number associated with the Comment","prototype":"int iis_get_server_by_comment(string $comment)","return":"","versions":"PECL iisfunc SVN"},"iis_get_server_by_path":{"id":"function.iis-get-server-by-path","purpose":"Return the instance number associated with the Path","prototype":"int iis_get_server_by_path(string $path)","return":"<p class=\"para\">   Returns the server instance number.  <\/p>","versions":"PECL iisfunc SVN"},"iis_get_server_rights":{"id":"function.iis-get-server-rights","purpose":"Gets server rights","prototype":"int iis_get_server_rights(int $server_instance, string $virtual_path)","return":"","versions":"PECL iisfunc SVN"},"iis_get_service_state":{"id":"function.iis-get-service-state","purpose":"Returns the state for the service defined by ServiceId","prototype":"int iis_get_service_state(string $service_id)","return":"","versions":"PECL iisfunc SVN"},"iis_remove_server":{"id":"function.iis-remove-server","purpose":"Removes the virtual web server indicated by ServerInstance","prototype":"int iis_remove_server(int $server_instance)","return":"","versions":"PECL iisfunc SVN"},"iis_set_app_settings":{"id":"function.iis-set-app-settings","purpose":"Creates application scope for a virtual directory","prototype":"int iis_set_app_settings(int $server_instance, string $virtual_path, string $application_scope)","return":"","versions":"PECL iisfunc SVN"},"iis_set_dir_security":{"id":"function.iis-set-dir-security","purpose":"Sets Directory Security","prototype":"int iis_set_dir_security(int $server_instance, string $virtual_path, int $directory_flags)","return":"","versions":"PECL iisfunc SVN"},"iis_set_script_map":{"id":"function.iis-set-script-map","purpose":"Sets script mapping on a virtual directory","prototype":"int iis_set_script_map(int $server_instance, string $virtual_path, string $script_extension, string $engine_path, int $allow_scripting)","return":"","versions":"PECL iisfunc SVN"},"iis_set_server_rights":{"id":"function.iis-set-server-rights","purpose":"Sets server rights","prototype":"int iis_set_server_rights(int $server_instance, string $virtual_path, int $directory_flags)","return":"","versions":"PECL iisfunc SVN"},"iis_start_server":{"id":"function.iis-start-server","purpose":"Starts the virtual web server","prototype":"int iis_start_server(int $server_instance)","return":"","versions":"PECL iisfunc SVN"},"iis_start_service":{"id":"function.iis-start-service","purpose":"Starts the service defined by ServiceId","prototype":"int iis_start_service(string $service_id)","return":"","versions":"PECL iisfunc SVN"},"iis_stop_server":{"id":"function.iis-stop-server","purpose":"Stops the virtual web server","prototype":"int iis_stop_server(int $server_instance)","return":"","versions":"PECL iisfunc SVN"},"iis_stop_service":{"id":"function.iis-stop-service","purpose":"Stops the service defined by ServiceId","prototype":"int iis_stop_service(string $service_id)","return":"","versions":"PECL iisfunc SVN"},"nsapi_request_headers":{"id":"function.nsapi-request-headers","purpose":"Fetch all HTTP request headers","prototype":"array nsapi_request_headers()","return":"<p class=\"para\">   Returns an associative array with all the HTTP headers.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5, PHP 7"},"nsapi_response_headers":{"id":"function.nsapi-response-headers","purpose":"Fetch all HTTP response headers","prototype":"array nsapi_response_headers()","return":"<p class=\"para\">   Returns an associative array with all the NSAPI response headers.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5, PHP 7"},"nsapi_virtual":{"id":"function.nsapi-virtual","purpose":"Perform an NSAPI sub-request","prototype":"bool nsapi_virtual(string $uri)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.3, PHP 5, PHP 7"},"msession_connect":{"id":"function.msession-connect","purpose":"Connect to msession server","prototype":"bool msession_connect(string $host, string $port)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_count":{"id":"function.msession-count","purpose":"Get session count","prototype":"int msession_count()","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_create":{"id":"function.msession-create","purpose":"Create a session","prototype":"bool msession_create(string $session [, string $classname = '' [, string $data = '']])","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_destroy":{"id":"function.msession-destroy","purpose":"Destroy a session","prototype":"bool msession_destroy(string $name)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_disconnect":{"id":"function.msession-disconnect","purpose":"Close connection to msession server","prototype":"void msession_disconnect()","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_find":{"id":"function.msession-find","purpose":"Find all sessions with name and value","prototype":"array msession_find(string $name, string $value)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_get_array":{"id":"function.msession-get-array","purpose":"Get array of msession variables","prototype":"array msession_get_array(string $session)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_get_data":{"id":"function.msession-get-data","purpose":"Get data session unstructured data","prototype":"string msession_get_data(string $session)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_get":{"id":"function.msession-get","purpose":"Get value from session","prototype":"string msession_get(string $session, string $name, string $value)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_inc":{"id":"function.msession-inc","purpose":"Increment value in session","prototype":"string msession_inc(string $session, string $name)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_list":{"id":"function.msession-list","purpose":"List all sessions","prototype":"array msession_list()","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_listvar":{"id":"function.msession-listvar","purpose":"List sessions with variable","prototype":"array msession_listvar(string $name)","return":"<p class=\"para\">   Returns an associative array of value\/session for all sessions   with a variable named <code class=\"parameter\">name<\/code>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_lock":{"id":"function.msession-lock","purpose":"Lock a session","prototype":"int msession_lock(string $name)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_plugin":{"id":"function.msession-plugin","purpose":"Call an escape function within the msession personality plugin","prototype":"string msession_plugin(string $session, string $val [, string $param = ''])","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_randstr":{"id":"function.msession-randstr","purpose":"Get random string","prototype":"string msession_randstr(int $param)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_set_array":{"id":"function.msession-set-array","purpose":"Set msession variables from an array","prototype":"void msession_set_array(string $session, array $tuples)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_set_data":{"id":"function.msession-set-data","purpose":"Set data session unstructured data","prototype":"bool msession_set_data(string $session, string $value)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_set":{"id":"function.msession-set","purpose":"Set value in session","prototype":"bool msession_set(string $session, string $name, string $value)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_timeout":{"id":"function.msession-timeout","purpose":"Set\/get session timeout","prototype":"int msession_timeout(string $session [, int $param = ''])","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_uniq":{"id":"function.msession-uniq","purpose":"Get unique id","prototype":"string msession_uniq(int $param [, string $classname = '' [, string $data = '']])","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"msession_unlock":{"id":"function.msession-unlock","purpose":"Unlock a session","prototype":"int msession_unlock(string $session, int $key)","return":"","versions":"PHP 4 >= 4.2.0, PHP 5 < 5.1.3"},"session_abort":{"id":"function.session-abort","purpose":"Discard session array changes and finish session","prototype":"bool session_abort()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"session_cache_expire":{"id":"function.session-cache-expire","purpose":"Return current cache expire","prototype":"int session_cache_expire([string $new_cache_expire = ''])","return":"<p class=\"para\">   Returns the current setting of <em>session.cache_expire<\/em>.   The value returned should be read in minutes, defaults to 180.   <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"session_cache_limiter":{"id":"function.session-cache-limiter","purpose":"Get and\/or set the current cache limiter","prototype":"string session_cache_limiter([string $cache_limiter = ''])","return":"<p class=\"para\">   Returns the name of the current cache limiter.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"session_commit":{"id":"function.session-commit","purpose":"Alias of session_write_close","prototype":" session_commit()","return":"","versions":"PHP 4 >= 4.4.0, PHP 5, PHP 7"},"session_create_id":{"id":"function.session-create-id","purpose":"Create new session id","prototype":"string session_create_id([string $prefix = ''])","return":"<p class=\"para\">   <span class=\"function\">session_create_id<\/span> returns new collision free   session id for the current session. If it is used without active   session, it omits collision check.  <\/p>","versions":"PHP 7 >= 7.1.0"},"session_decode":{"id":"function.session-decode","purpose":"Decodes session data from a session encoded string","prototype":"bool session_decode(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_destroy":{"id":"function.session-destroy","purpose":"Destroys all data registered to a session","prototype":"bool session_destroy()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_encode":{"id":"function.session-encode","purpose":"Encodes the current session data as a session encoded string","prototype":"string session_encode()","return":"<p class=\"para\">   Returns the contents of the current session encoded.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_gc":{"id":"function.session-gc","purpose":"Perform session data garbage collection","prototype":"int session_gc()","return":"<p class=\"para\">   <span class=\"function\">session_gc<\/span> returns number of deleted session   data for success, <strong><code>FALSE<\/code><\/strong> for failure.  <\/p>  <p class=\"para\">   Old save handlers do not return number of deleted session data, but    only success\/failure flag. If this is the case, number of deleted   session data became 1 regardless of actually deleted data.  <\/p>","versions":"PHP 7 >= 7.1.0"},"session_get_cookie_params":{"id":"function.session-get-cookie-params","purpose":"Get the session cookie parameters","prototype":"array session_get_cookie_params()","return":"<p class=\"para\">   Returns an array with the current session cookie information, the array   contains the following items:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      <a href=\"session.configuration.html#ini.session.cookie-lifetime\" class=\"link\">&quot;lifetime&quot;<\/a> -  The      lifetime of the cookie in seconds.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <a href=\"session.configuration.html#ini.session.cookie-path\" class=\"link\">&quot;path&quot;<\/a> -  The path where      information is stored.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <a href=\"session.configuration.html#ini.session.cookie-domain\" class=\"link\">&quot;domain&quot;<\/a> -  The domain      of the cookie.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <a href=\"session.configuration.html#ini.session.cookie-secure\" class=\"link\">&quot;secure&quot;<\/a> -  The cookie      should only be sent over secure connections.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      <a href=\"session.configuration.html#ini.session.cookie-httponly\" class=\"link\">&quot;httponly&quot;<\/a> - The      cookie can only be accessed through the HTTP protocol.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_id":{"id":"function.session-id","purpose":"Get and\/or set the current session id","prototype":"string session_id([string $id = ''])","return":"<p class=\"para\">   <span class=\"function\">session_id<\/span> returns the session id for the current   session or the empty string (<em>&quot;&quot;<\/em>) if there is no current   session (no current session id exists).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_is_registered":{"id":"function.session-is-registered","purpose":"Find out whether a global variable is registered in a session","prototype":"bool session_is_registered(string $name)","return":"<p class=\"para\">   <span class=\"function\">session_is_registered<\/span> returns <strong><code>TRUE<\/code><\/strong> if there is a   global variable with the name <code class=\"parameter\">name<\/code> registered in   the current session, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5 < 5.4.0"},"session_module_name":{"id":"function.session-module-name","purpose":"Get and\/or set the current session module","prototype":"string session_module_name([string $module = ''])","return":"<p class=\"para\">   Returns the name of the current session module.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_name":{"id":"function.session-name","purpose":"Get and\/or set the current session name","prototype":"string session_name([string $name = ''])","return":"<p class=\"para\">   Returns the name of the current session. If <code class=\"parameter\">name<\/code> is given   and function updates the session name, name of the <em class=\"emphasis\">old<\/em> session   is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_regenerate_id":{"id":"function.session-regenerate-id","purpose":"Update the current session id with a newly generated one","prototype":"bool session_regenerate_id([bool $delete_old_session = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.3.2, PHP 5, PHP 7"},"session_register_shutdown":{"id":"function.session-register-shutdown","purpose":"Session shutdown function","prototype":"void session_register_shutdown()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"session_register":{"id":"function.session-register","purpose":"Register one or more global variables with the current session","prototype":"bool session_register(mixed $name [, mixed $... = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.4.0"},"session_reset":{"id":"function.session-reset","purpose":"Re-initialize session array with original values","prototype":"bool session_reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"session_save_path":{"id":"function.session-save-path","purpose":"Get and\/or set the current session save path","prototype":"string session_save_path([string $path = ''])","return":"<p class=\"para\">   Returns the path of the current directory used for data storage.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_set_cookie_params":{"id":"function.session-set-cookie-params","purpose":"Set the session cookie parameters","prototype":"bool session_set_cookie_params(int $lifetime [, string $path = '' [, string $domain = '' [, bool $secure = '' [, bool $httponly = '']]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_set_save_handler":{"id":"function.session-set-save-handler","purpose":"Sets user-level session storage functions","prototype":"bool session_set_save_handler(callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc [, callable $create_sid = '' [, callable $validate_sid = '' [, callable $update_timestamp = '', object $sessionhandler [, bool $register_shutdown = '']]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_start":{"id":"function.session-start","purpose":"Start new or resume existing session","prototype":"bool session_start([array $options = array()])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if a session was successfully started,   otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_status":{"id":"function.session-status","purpose":"Returns the current session status","prototype":"int session_status()","return":"<p class=\"para\">   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\"><strong><code>PHP_SESSION_DISABLED<\/code><\/strong> if sessions are disabled.<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\"><strong><code>PHP_SESSION_NONE<\/code><\/strong> if sessions are enabled, but none exists.<\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\"><strong><code>PHP_SESSION_ACTIVE<\/code><\/strong> if sessions are enabled, and one exists.<\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"session_unregister":{"id":"function.session-unregister","purpose":"Unregister a global variable from the current session","prototype":"bool session_unregister(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5 < 5.4.0"},"session_unset":{"id":"function.session-unset","purpose":"Free all session variables","prototype":"bool session_unset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"session_write_close":{"id":"function.session-write-close","purpose":"Write session data and end session","prototype":"bool session_write_close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"SessionHandler::close":{"id":"sessionhandler.close","purpose":"Close the session","prototype":"bool SessionHandler::close()","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandler::create_sid":{"id":"sessionhandler.create-sid","purpose":"Return a new session ID","prototype":"string SessionHandler::create_sid()","return":"<p class=\"para\">   A session ID valid for the default session handler.  <\/p>","versions":"PHP 5 >= 5.5.1, PHP 7"},"SessionHandler::destroy":{"id":"sessionhandler.destroy","purpose":"Destroy a session","prototype":"bool SessionHandler::destroy(string $session_id)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandler::gc":{"id":"sessionhandler.gc","purpose":"Cleanup old sessions","prototype":"int SessionHandler::gc(int $maxlifetime)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandler::open":{"id":"sessionhandler.open","purpose":"Initialize session","prototype":"bool SessionHandler::open(string $save_path, string $session_name)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandler::read":{"id":"sessionhandler.read","purpose":"Read session data","prototype":"string SessionHandler::read(string $session_id)","return":"<p class=\"para\">   Returns an encoded string of the read data. If nothing was read, it must return an empty string. Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandler::write":{"id":"sessionhandler.write","purpose":"Write session data","prototype":"bool SessionHandler::write(string $session_id, string $session_data)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandlerInterface::close":{"id":"sessionhandlerinterface.close","purpose":"Close the session","prototype":"bool SessionHandlerInterface::close()","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandlerInterface::destroy":{"id":"sessionhandlerinterface.destroy","purpose":"Destroy a session","prototype":"bool SessionHandlerInterface::destroy(string $session_id)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandlerInterface::gc":{"id":"sessionhandlerinterface.gc","purpose":"Cleanup old sessions","prototype":"int SessionHandlerInterface::gc(int $maxlifetime)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandlerInterface::open":{"id":"sessionhandlerinterface.open","purpose":"Initialize session","prototype":"bool SessionHandlerInterface::open(string $save_path, string $session_name)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandlerInterface::read":{"id":"sessionhandlerinterface.read","purpose":"Read session data","prototype":"string SessionHandlerInterface::read(string $session_id)","return":"<p class=\"para\">   Returns an encoded string of the read data. If nothing was read, it must return an empty string. Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionHandlerInterface::write":{"id":"sessionhandlerinterface.write","purpose":"Write session data","prototype":"bool SessionHandlerInterface::write(string $session_id, string $session_data)","return":"<p class=\"para\">   The return value (usually <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> on failure). Note this value is returned internally to PHP for processing.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"SessionIdInterface::create_sid":{"id":"sessionidinterface.create-sid","purpose":"Create session ID","prototype":"string SessionIdInterface::create_sid()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.5.1, PHP 7"},"SessionUpdateTimestampHandlerInterface::updateTimestamp":{"id":"sessionupdatetimestamphandlerinterface.updatetimestamp","purpose":"Update timestamp","prototype":"bool SessionUpdateTimestampHandlerInterface::updateTimestamp(string $key, string $val)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the timestamp was updated, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7"},"SessionUpdateTimestampHandlerInterface::validateId":{"id":"sessionupdatetimestamphandlerinterface.validateid","purpose":"Validate ID","prototype":"bool SessionUpdateTimestampHandlerInterface::validateId(string $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> for valid ID, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7"},"session_pgsql_add_error":{"id":"function.session-pgsql-add-error","purpose":"Increments error counts and sets last error message","prototype":"bool session_pgsql_add_error(int $error_level [, string $error_message = ''])","return":"<p class=\"para\">  Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL session_pgsql SVN"},"session_pgsql_get_error":{"id":"function.session-pgsql-get-error","purpose":"Returns number of errors and last error message","prototype":"array session_pgsql_get_error([bool $with_error_message = ''])","return":"<p class=\"para\">   The number of errors are returned as <span class=\"type\">array<\/span>.  <\/p>","versions":"PECL session_pgsql SVN"},"session_pgsql_get_field":{"id":"function.session-pgsql-get-field","purpose":"Get custom field value","prototype":"string session_pgsql_get_field()","return":"","versions":"PECL session_pgsql SVN"},"session_pgsql_reset":{"id":"function.session-pgsql-reset","purpose":"Reset connection to session database servers","prototype":"bool session_pgsql_reset()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL session_pgsql SVN"},"session_pgsql_set_field":{"id":"function.session-pgsql-set-field","purpose":"Set custom field value","prototype":"bool session_pgsql_set_field(string $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL session_pgsql SVN"},"session_pgsql_status":{"id":"function.session-pgsql-status","purpose":"Get current save handler status","prototype":"array session_pgsql_status()","return":"","versions":"PECL session_pgsql SVN"},"bbcode_add_element":{"id":"function.bbcode-add-element","purpose":"Adds a bbcode element","prototype":"bool bbcode_add_element(resource $bbcode_container, string $tag_name, array $tag_rules)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bbcode >= 0.9.0"},"bbcode_add_smiley":{"id":"function.bbcode-add-smiley","purpose":"Adds a smiley to the parser","prototype":"bool bbcode_add_smiley(resource $bbcode_container, string $smiley, string $replace_by)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bbcode >= 0.10.2"},"bbcode_create":{"id":"function.bbcode-create","purpose":"Create a BBCode Resource","prototype":"resource bbcode_create([array $bbcode_initial_tags = null])","return":"<p class=\"para\">   Returns a BBCode_Container  <\/p>","versions":"PECL bbcode >= 0.9.0"},"bbcode_destroy":{"id":"function.bbcode-destroy","purpose":"Close BBCode_container resource","prototype":"bool bbcode_destroy(resource $bbcode_container)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bbcode >= 0.9.0"},"bbcode_parse":{"id":"function.bbcode-parse","purpose":"Parse a string following a given rule set","prototype":"string bbcode_parse(resource $bbcode_container, string $to_parse)","return":"<p class=\"para\">   Returns the parsed string,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bbcode >= 0.9.0"},"bbcode_set_arg_parser":{"id":"function.bbcode-set-arg-parser","purpose":"Attach another parser in order to use another rule set for argument parsing","prototype":"bool bbcode_set_arg_parser(resource $bbcode_container, resource $bbcode_arg_parser)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bbcode >= 0.10.2"},"bbcode_set_flags":{"id":"function.bbcode-set-flags","purpose":"Set or alter parser options","prototype":"bool bbcode_set_flags(resource $bbcode_container, int $flags [, int $mode = BBCODE_SET_FLAGS_SET])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL bbcode >= 0.10.2"},"CommonMark\\Node\\Heading::__construct":{"id":"commonmark-node-heading.construct","purpose":"Heading Construction","prototype":" CommonMark\\Node\\Heading::__construct(int $level)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node\\BulletList::__construct":{"id":"commonmark-node-bulletlist.construct","purpose":"BulletList Construction","prototype":" CommonMark\\Node\\BulletList::__construct(int $tight, int $delimiter)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node\\OrderedList::__construct":{"id":"commonmark-node-orderedlist.construct","purpose":"OrderedList Construction","prototype":" CommonMark\\Node\\OrderedList::__construct(int $tight, int $delimiter, int $start)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node\\Text::__construct":{"id":"commonmark-node-text.construct","purpose":"Text Construction","prototype":" CommonMark\\Node\\Text::__construct(string $literal)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node\\CodeBlock::__construct":{"id":"commonmark-node-codeblock.construct","purpose":"CodeBlock Construction","prototype":" CommonMark\\Node\\CodeBlock::__construct(string $fence, string $literal)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node\\Image::__construct":{"id":"commonmark-node-image.construct","purpose":"Image Construction","prototype":" CommonMark\\Node\\Image::__construct(string $url, string $title)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node\\Link::__construct":{"id":"commonmark-node-link.construct","purpose":"Link Construction","prototype":" CommonMark\\Node\\Link::__construct(string $url, string $title)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Node::appendChild":{"id":"commonmark-node.appendchild","purpose":"AST Manipulation","prototype":"CommonMark\\Node CommonMark\\Node::appendChild(CommonMark\\Node $child)","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Node::prependChild":{"id":"commonmark-node.prependchild","purpose":"AST Manipulation","prototype":"CommonMark\\Node CommonMark\\Node::prependChild(CommonMark\\Node $child)","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Node::insertAfter":{"id":"commonmark-node.insertafter","purpose":"AST Manipulation","prototype":"CommonMark\\Node CommonMark\\Node::insertAfter(CommonMark\\Node $sibling)","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Node::insertBefore":{"id":"commonmark-node.insertbefore","purpose":"AST Manipulation","prototype":"CommonMark\\Node CommonMark\\Node::insertBefore(CommonMark\\Node $sibling)","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Node::replace":{"id":"commonmark-node.replace","purpose":"AST Manipulation","prototype":"CommonMark\\Node CommonMark\\Node::replace(CommonMark\\Node $target)","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Node::unlink":{"id":"commonmark-node.unlink","purpose":"AST Manipulation","prototype":"void CommonMark\\Node::unlink()","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Node::accept":{"id":"commonmark-node.accept","purpose":"Visitation","prototype":"void CommonMark\\Node::accept(CommonMark\\Interfaces\\IVisitor $visitor)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Interfaces\\IVisitor::enter":{"id":"commonmark-interfaces-ivisitor.enter","purpose":"Visitation","prototype":"?int|IVisitable CommonMark\\Interfaces\\IVisitor::enter(IVisitable $visitable)","return":"<p class=\"para\">   Returning <var class=\"varname\">CommonMark\\Interfaces\\IVisitor::Done<\/var> will cause the backing iterator to exit.  <\/p>  <p class=\"para\">  Returning <var class=\"varname\">CommonMark\\Interfaces\\IVisitor::Enter<\/var> will reset the backing iterator at entering the current <span class=\"classname\">IVisitable<\/span>  <\/p>  <p class=\"para\">  Returning <var class=\"varname\">CommonMark\\Interfaces\\IVisitor::Leave<\/var> will reset the backing iterator at exiting the current <span class=\"classname\">IVisitable<\/span>  <\/p>  <p class=\"para\">  Returning an <span class=\"classname\">IVisitable<\/span> will reset the backing iterator at entering the given <span class=\"classname\">IVisitable<\/span>  <\/p>  <p class=\"para\">  Returning nothing will allow the backing iterator to continue  <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Interfaces\\IVisitor::leave":{"id":"commonmark-interfaces-ivisitor.leave","purpose":"Visitation","prototype":"?int|IVisitable CommonMark\\Interfaces\\IVisitor::leave(IVisitable $visitable)","return":"<p class=\"para\">   Returning <var class=\"varname\">CommonMark\\Interfaces\\IVisitor::Done<\/var> will cause the backing iterator to exit.  <\/p>  <p class=\"para\">  Returning <var class=\"varname\">CommonMark\\Interfaces\\IVisitor::Enter<\/var> will reset the backing iterator at entering the current <span class=\"classname\">IVisitable<\/span>  <\/p>  <p class=\"para\">  Returning <var class=\"varname\">CommonMark\\Interfaces\\IVisitor::Leave<\/var> will reset the backing iterator at exiting the current <span class=\"classname\">IVisitable<\/span>  <\/p>  <p class=\"para\">  Returning an <span class=\"classname\">IVisitable<\/span> will reset the backing iterator at exiting the given <span class=\"classname\">IVisitable<\/span>  <\/p>  <p class=\"para\">  Returning nothing will allow the backing iterator to continue  <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Interfaces\\IVisitable::accept":{"id":"commonmark-interfaces-ivisitable.accept","purpose":"Visitation","prototype":"void CommonMark\\Interfaces\\IVisitable::accept(CommonMark\\Interfaces\\IVisitor $visitor)","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Parser::__construct":{"id":"commonmark-parser.construct","purpose":"Parsing","prototype":" CommonMark\\Parser::__construct([int $options = ''])","return":"","versions":"cmark >= 1.0.0"},"CommonMark\\Parser::parse":{"id":"commonmark-parser.parse","purpose":"Parsing","prototype":"void CommonMark\\Parser::parse(string $buffer)","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Parser::finish":{"id":"commonmark-parser.finish","purpose":"Parsing","prototype":"CommonMark\\Node CommonMark\\Parser::finish()","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\CQL::__construct":{"id":"commonmark-cql.construct","purpose":"CQL Construction","prototype":" CommonMark\\CQL::__construct(string $query)","return":"","versions":"cmark >= 1.1.0"},"CommonMark\\CQL::__invoke":{"id":"commonmark-cql.invoke","purpose":"CQL Execution","prototype":"\\CommonMark\\Node CommonMark\\CQL::__invoke(\\CommonMark\\Node $root, callable $handler)","return":"","versions":"cmark >= 1.1.0"},"CommonMark\\Parse":{"id":"function.commonmark-parse","purpose":"Parsing","prototype":"CommonMark\\Node CommonMark\\Parse(string $content [, int $options = ''])","return":"<p class=\"para\">   Shall return root CommonMark\\Node  <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Render":{"id":"function.commonmark-render","purpose":"Rendering","prototype":"string CommonMark\\Render(CommonMark\\Node $node [, int $options = '' [, int $width = '']])","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Render\\HTML":{"id":"function.commonmark-render-html","purpose":"Rendering","prototype":"string CommonMark\\Render\\HTML(CommonMark\\Node $node [, int $options = ''])","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Render\\Latex":{"id":"function.commonmark-render-latex","purpose":"Rendering","prototype":"string CommonMark\\Render\\Latex(CommonMark\\Node $node [, int $options = '' [, int $width = '']])","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Render\\Man":{"id":"function.commonmark-render-man","purpose":"Rendering","prototype":"string CommonMark\\Render\\Man(CommonMark\\Node $node [, int $options = '' [, int $width = '']])","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"CommonMark\\Render\\XML":{"id":"function.commonmark-render-xml","purpose":"Rendering","prototype":"string CommonMark\\Render\\XML(CommonMark\\Node $node [, int $options = ''])","return":"<p class=\"para\">     <\/p>","versions":"cmark >= 1.0.0"},"Parle\\Lexer::advance":{"id":"parle-lexer.advance","purpose":"Process next lexer rule","prototype":"void Parle\\Lexer::advance()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::build":{"id":"parle-lexer.build","purpose":"Finalize the lexer rule set","prototype":"void Parle\\Lexer::build()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::callout":{"id":"parle-lexer.callout","purpose":"Define token callback","prototype":"void Parle\\Lexer::callout(int $id, callable $callback)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.2"},"Parle\\Lexer::consume":{"id":"parle-lexer.consume","purpose":"Pass the data for processing","prototype":"void Parle\\Lexer::consume(string $data)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::dump":{"id":"parle-lexer.dump","purpose":"Dump the state machine","prototype":"void Parle\\Lexer::dump()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::getToken":{"id":"parle-lexer.gettoken","purpose":"Retrieve the current token","prototype":"Parle\\Token Parle\\Lexer::getToken()","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">Parle\\Token<\/span>.   <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::insertMacro":{"id":"parle-lexer.insertmacro","purpose":"Insert regex macro","prototype":"void Parle\\Lexer::insertMacro(string $name, string $regex)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::push":{"id":"parle-lexer.push","purpose":"Add a lexer rule","prototype":"void Parle\\Lexer::push(string $regex, int $id)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Lexer::reset":{"id":"parle-lexer.reset","purpose":"Reset lexer","prototype":"void Parle\\Lexer::reset(int $pos)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.1"},"Parle\\RLexer::advance":{"id":"parle-rlexer.advance","purpose":"Process next lexer rule","prototype":"void Parle\\RLexer::advance()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::build":{"id":"parle-rlexer.build","purpose":"Finalize the lexer rule set","prototype":"void Parle\\RLexer::build()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::callout":{"id":"parle-rlexer.callout","purpose":"Define token callback","prototype":"void Parle\\RLexer::callout(int $id, callable $callback)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.2"},"Parle\\RLexer::consume":{"id":"parle-rlexer.consume","purpose":"Pass the data for processing","prototype":"void Parle\\RLexer::consume(string $data)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::dump":{"id":"parle-rlexer.dump","purpose":"Dump the state machine","prototype":"void Parle\\RLexer::dump()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::getToken":{"id":"parle-rlexer.gettoken","purpose":"Retrieve the current token","prototype":"Parle\\Token Parle\\RLexer::getToken()","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">Parle\\Token<\/span>.   <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::insertMacro":{"id":"parle-rlexer.insertmacro","purpose":"Insert regex macro","prototype":"void Parle\\RLexer::insertMacro(string $name, string $regex)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::push":{"id":"parle-rlexer.push","purpose":"Add a lexer rule","prototype":"void Parle\\RLexer::push(string $regex, int $id, string $state, string $newState)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::pushState":{"id":"parle-rlexer.pushstate","purpose":"Push a new start state","prototype":"int Parle\\RLexer::pushState(string $state)","return":"<p class=\"para\">     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RLexer::reset":{"id":"parle-rlexer.reset","purpose":"Reset lexer","prototype":"void Parle\\RLexer::reset(int $pos)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.1"},"Parle\\Parser::advance":{"id":"parle-parser.advance","purpose":"Process next parser rule","prototype":"void Parle\\Parser::advance()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::build":{"id":"parle-parser.build","purpose":"Finalize the grammar rules","prototype":"void Parle\\Parser::build()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::consume":{"id":"parle-parser.consume","purpose":"Consume the data for processing","prototype":"void Parle\\Parser::consume(string $data, Parle\\Lexer $lexer)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::dump":{"id":"parle-parser.dump","purpose":"Dump the grammar","prototype":"void Parle\\Parser::dump()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::errorInfo":{"id":"parle-parser.errorinfo","purpose":"Retrieve the error information","prototype":"Parle\\ErrorInfo Parle\\Parser::errorInfo()","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">Parle\\ErrorInfo<\/span>.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::left":{"id":"parle-parser.left","purpose":"Declare a token with left-associativity","prototype":"void Parle\\Parser::left(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::nonassoc":{"id":"parle-parser.nonassoc","purpose":"Declare a token with no associativity","prototype":"void Parle\\Parser::nonassoc(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::precedence":{"id":"parle-parser.precedence","purpose":"Declare a precedence rule","prototype":"void Parle\\Parser::precedence(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::push":{"id":"parle-parser.push","purpose":"Add a grammar rule","prototype":"int Parle\\Parser::push(string $name, string $rule)","return":"<p class=\"para\">   Returns <span class=\"type\">integer<\/span> representing the rule index.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::reset":{"id":"parle-parser.reset","purpose":"Reset parser state","prototype":"void Parle\\Parser::reset([int $tokenId = ''])","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.1"},"Parle\\Parser::right":{"id":"parle-parser.right","purpose":"Declare a token with right-associativity","prototype":"void Parle\\Parser::right(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::sigil":{"id":"parle-parser.sigil","purpose":"Retrieve a matching part of a rule","prototype":"string Parle\\Parser::sigil([int $idx = ''])","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> with the matched part.   <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::token":{"id":"parle-parser.token","purpose":"Declare a token","prototype":"void Parle\\Parser::token(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::tokenId":{"id":"parle-parser.tokenid","purpose":"Get token id","prototype":"int Parle\\Parser::tokenId(string $tok)","return":"<p class=\"para\">   Returns <span class=\"type\">integer<\/span> representing the token id.    <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::trace":{"id":"parle-parser.trace","purpose":"Trace the parser operation","prototype":"string Parle\\Parser::trace()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> with the trace information.   <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Parser::validate":{"id":"parle-parser.validate","purpose":"Validate input","prototype":"bool Parle\\Parser::validate(string $data, Parle\\Lexer $lexer)","return":"<p class=\"para\">   Returns <span class=\"type\">boolean<\/span> witnessing whether the input chimes or not with the defined rules.  <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\RParser::advance":{"id":"parle-rparser.advance","purpose":"Process next parser rule","prototype":"void Parle\\RParser::advance()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::build":{"id":"parle-rparser.build","purpose":"Finalize the grammar rules","prototype":"void Parle\\RParser::build()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::consume":{"id":"parle-rparser.consume","purpose":"Consume the data for processing","prototype":"void Parle\\RParser::consume(string $data, Parle\\RLexer $rlexer)","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::dump":{"id":"parle-rparser.dump","purpose":"Dump the grammar","prototype":"void Parle\\RParser::dump()","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::errorInfo":{"id":"parle-rparser.errorinfo","purpose":"Retrieve the error information","prototype":"Parle\\ErrorInfo Parle\\RParser::errorInfo()","return":"<p class=\"para\">   Returns an instance of <span class=\"classname\">Parle\\ErrorInfo<\/span>.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::left":{"id":"parle-rparser.left","purpose":"Declare a token with left-associativity","prototype":"void Parle\\RParser::left(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::nonassoc":{"id":"parle-rparser.nonassoc","purpose":"Declare a token with no associativity","prototype":"void Parle\\RParser::nonassoc(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::precedence":{"id":"parle-rparser.precedence","purpose":"Declare a precedence rule","prototype":"void Parle\\RParser::precedence(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::push":{"id":"parle-rparser.push","purpose":"Add a grammar rule","prototype":"int Parle\\RParser::push(string $name, string $rule)","return":"<p class=\"para\">   Returns <span class=\"type\">integer<\/span> representing the rule index.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::reset":{"id":"parle-rparser.reset","purpose":"Reset parser state","prototype":"void Parle\\RParser::reset([int $tokenId = ''])","return":"<p class=\"para\">   No value is returned.     <\/p>","versions":"PECL parle >= 0.7.1"},"Parle\\RParser::right":{"id":"parle-rparser.right","purpose":"Declare a token with right-associativity","prototype":"void Parle\\RParser::right(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::sigil":{"id":"parle-rparser.sigil","purpose":"Retrieve a matching part of a rule","prototype":"string Parle\\RParser::sigil([int $idx = ''])","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> with the matched part.   <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::token":{"id":"parle-rparser.token","purpose":"Declare a token","prototype":"void Parle\\RParser::token(string $tok)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::tokenId":{"id":"parle-rparser.tokenid","purpose":"Get token id","prototype":"int Parle\\RParser::tokenId(string $tok)","return":"<p class=\"para\">   Returns <span class=\"type\">integer<\/span> representing the token id.    <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::trace":{"id":"parle-rparser.trace","purpose":"Trace the parser operation","prototype":"string Parle\\RParser::trace()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> with the trace information.   <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\RParser::validate":{"id":"parle-rparser.validate","purpose":"Validate input","prototype":"bool Parle\\RParser::validate(string $data, Parle\\RLexer $lexer)","return":"<p class=\"para\">   Returns <span class=\"type\">boolean<\/span> whitnessing whether the input chimes or not with the defined rules.  <\/p>","versions":"PECL parle >= 0.7.0"},"Parle\\Stack::pop":{"id":"parle-stack.pop","purpose":"Pop an item from the stack","prototype":"void Parle\\Stack::pop()","return":"<p class=\"para\">   No value is returned.   <\/p>","versions":"PECL parle >= 0.5.1"},"Parle\\Stack::push":{"id":"parle-stack.push","purpose":"Push an item into the stack","prototype":"void Parle\\Stack::push(mixed $item)","return":"<p class=\"para\">   No value is returned.    <\/p>","versions":"PECL parle >= 0.5.1"},"preg_filter":{"id":"function.preg-filter","purpose":"Perform a regular expression search and replace","prototype":"mixed preg_filter(mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int $count = '']])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> if the <code class=\"parameter\">subject<\/code>   parameter is an <span class=\"type\">array<\/span>, or a <span class=\"type\">string<\/span> otherwise.  <\/p>  <p class=\"para\">   If no matches are found or an error occurred, an empty <span class=\"type\">array<\/span>    is returned when <code class=\"parameter\">subject<\/code> is an <span class=\"type\">array<\/span>   or <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"preg_grep":{"id":"function.preg-grep","purpose":"Return array entries that match the pattern","prototype":"array preg_grep(string $pattern, array $input [, int $flags = ''])","return":"<p class=\"para\">   Returns an array indexed using the keys from the   <code class=\"parameter\">input<\/code> array.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"preg_last_error":{"id":"function.preg-last-error","purpose":"Returns the error code of the last PCRE regex execution","prototype":"int preg_last_error()","return":"<p class=\"para\">   Returns one of the following constants (<a href=\"pcre.constants.html\" class=\"link\">explained on their own page<\/a>):   <ul class=\"simplelist\">    <li class=\"member\"><strong><code>PREG_NO_ERROR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>PREG_INTERNAL_ERROR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>PREG_BACKTRACK_LIMIT_ERROR<\/code><\/strong> (see also <a href=\"pcre.configuration.html#ini.pcre.backtrack-limit\" class=\"link\">pcre.backtrack_limit<\/a>)<\/li>    <li class=\"member\"><strong><code>PREG_RECURSION_LIMIT_ERROR<\/code><\/strong> (see also <a href=\"pcre.configuration.html#ini.pcre.recursion-limit\" class=\"link\">pcre.recursion_limit<\/a>)<\/li>    <li class=\"member\"><strong><code>PREG_BAD_UTF8_ERROR<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>PREG_BAD_UTF8_OFFSET_ERROR<\/code><\/strong> (since PHP 5.3.0)<\/li>    <li class=\"member\"><strong><code>PREG_JIT_STACKLIMIT_ERROR<\/code><\/strong> (since PHP 7.0.0)<\/li>   <\/ul>  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"preg_match_all":{"id":"function.preg-match-all","purpose":"Perform a global regular expression match","prototype":"int preg_match_all(string $pattern, string $subject [, array $matches = '' [, int $flags = '' [, int $offset = '']]])","return":"<p class=\"para\">   Returns the number of full pattern matches (which might be zero),   or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"preg_match":{"id":"function.preg-match","purpose":"Perform a regular expression match","prototype":"int preg_match(string $pattern, string $subject [, array $matches = '' [, int $flags = '' [, int $offset = '']]])","return":"<p class=\"para\">   <span class=\"function\">preg_match<\/span> returns 1 if the <code class=\"parameter\">pattern<\/code>   matches given <code class=\"parameter\">subject<\/code>, 0 if it does not, or <strong><code>FALSE<\/code><\/strong>   if an error occurred.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"preg_quote":{"id":"function.preg-quote","purpose":"Quote regular expression characters","prototype":"string preg_quote(string $str [, string $delimiter = ''])","return":"<p class=\"para\">   Returns the quoted (escaped) string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"preg_replace_callback_array":{"id":"function.preg-replace-callback-array","purpose":"Perform a regular expression search and replace using callbacks","prototype":"mixed preg_replace_callback_array(array $patterns_and_callbacks, mixed $subject [, int $limit = -1 [, int $count = '']])","return":"<p class=\"para\">   <span class=\"function\">preg_replace_callback_array<\/span> returns an array if the   <code class=\"parameter\">subject<\/code> parameter is an array, or a string   otherwise. On errors the return value is <strong><code>NULL<\/code><\/strong>  <\/p>  <p class=\"para\">   If matches are found, the new subject will be returned, otherwise   <code class=\"parameter\">subject<\/code> will be returned unchanged.   <\/p>","versions":"PHP 7"},"preg_replace_callback":{"id":"function.preg-replace-callback","purpose":"Perform a regular expression search and replace using a callback","prototype":"mixed preg_replace_callback(mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int $count = '']])","return":"<p class=\"para\">   <span class=\"function\">preg_replace_callback<\/span> returns an array if the   <code class=\"parameter\">subject<\/code> parameter is an array, or a string   otherwise. On errors the return value is <strong><code>NULL<\/code><\/strong>  <\/p>  <p class=\"para\">   If matches are found, the new subject will be returned, otherwise   <code class=\"parameter\">subject<\/code> will be returned unchanged.   <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"preg_replace":{"id":"function.preg-replace","purpose":"Perform a regular expression search and replace","prototype":"mixed preg_replace(mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int $count = '']])","return":"<p class=\"para\">   <span class=\"function\">preg_replace<\/span> returns an array if the   <code class=\"parameter\">subject<\/code> parameter is an array, or a string   otherwise.  <\/p>  <p class=\"para\">   If matches are found, the new <code class=\"parameter\">subject<\/code> will   be returned, otherwise <code class=\"parameter\">subject<\/code> will be   returned unchanged or <strong><code>NULL<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"preg_split":{"id":"function.preg-split","purpose":"Split string by a regular expression","prototype":"array preg_split(string $pattern, string $subject [, int $limit = -1 [, int $flags = '']])","return":"<p class=\"para\">   Returns an array containing substrings of <code class=\"parameter\">subject<\/code>   split along boundaries matched by <code class=\"parameter\">pattern<\/code>,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ereg_replace":{"id":"function.ereg-replace","purpose":"Replace regular expression","prototype":"string ereg_replace(string $pattern, string $replacement, string $string)","return":"<p class=\"para\">   The modified string is returned. If no matches are found in    <code class=\"parameter\">string<\/code>, then it will be returned unchanged.  <\/p>","versions":"PHP 4, PHP 5"},"ereg":{"id":"function.ereg","purpose":"Regular expression match","prototype":"int ereg(string $pattern, string $string [, array $regs = ''])","return":"<p class=\"para\">   Returns the length of the matched string if a match for   <code class=\"parameter\">pattern<\/code> was found in <code class=\"parameter\">string<\/code>,   or <strong><code>FALSE<\/code><\/strong> if no matches were found or an error occurred.  <\/p>  <p class=\"para\">   If the optional parameter <code class=\"parameter\">regs<\/code> was not passed or   the length of the matched string is <em>0<\/em>, this function returns <em>1<\/em>.  <\/p>","versions":"PHP 4, PHP 5"},"eregi_replace":{"id":"function.eregi-replace","purpose":"Replace regular expression case insensitive","prototype":"string eregi_replace(string $pattern, string $replacement, string $string)","return":"<p class=\"para\">   The modified string is returned. If no matches are found in    <code class=\"parameter\">string<\/code>, then it will be returned unchanged.  <\/p>","versions":"PHP 4, PHP 5"},"eregi":{"id":"function.eregi","purpose":"Case insensitive regular expression match","prototype":"int eregi(string $pattern, string $string [, array $regs = ''])","return":"<p class=\"para\">   Returns the length of the matched string if a match for   <code class=\"parameter\">pattern<\/code> was found in <code class=\"parameter\">string<\/code>,   or <strong><code>FALSE<\/code><\/strong> if no matches were found or an error occurred.  <\/p>  <p class=\"para\">   If the optional parameter <code class=\"parameter\">regs<\/code> was not passed or   the length of the matched string is <em>0<\/em>, this function returns <em>1<\/em>.  <\/p>","versions":"PHP 4, PHP 5"},"split":{"id":"function.split","purpose":"Split string into array by regular expression","prototype":"array split(string $pattern, string $string [, int $limit = -1])","return":"<p class=\"para\">   Returns an array of strings, each of which is a substring of   <code class=\"parameter\">string<\/code> formed by splitting it on boundaries formed   by the case-sensitive regular expression <code class=\"parameter\">pattern<\/code>.  <\/p>  <p class=\"para\">   If there are <span class=\"replaceable\">n<\/span> occurrences of   <code class=\"parameter\">pattern<\/code>, the returned array will contain   <em><span class=\"replaceable\">n<\/span>+1<\/em> items. For example, if   there is no occurrence of <code class=\"parameter\">pattern<\/code>, an array with   only one element will be returned. Of course, this is also true if   <code class=\"parameter\">string<\/code> is empty. If an error occurs,   <span class=\"function\">split<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5"},"spliti":{"id":"function.spliti","purpose":"Split string into array by regular expression case insensitive","prototype":"array spliti(string $pattern, string $string [, int $limit = -1])","return":"<p class=\"para\">   Returns an array of strings, each of which is a substring of   <code class=\"parameter\">string<\/code> formed by splitting it on boundaries formed   by the case insensitive regular expression <code class=\"parameter\">pattern<\/code>.  <\/p>  <p class=\"para\">   If there are <span class=\"replaceable\">n<\/span> occurrences of   <code class=\"parameter\">pattern<\/code>, the returned array will contain   <em><span class=\"replaceable\">n<\/span>+1<\/em> items. For example, if   there is no occurrence of <code class=\"parameter\">pattern<\/code>, an array with   only one element will be returned. Of course, this is also true if   <code class=\"parameter\">string<\/code> is empty. If an error occurs,   <span class=\"function\">spliti<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5"},"sql_regcase":{"id":"function.sql-regcase","purpose":"Make regular expression for case insensitive match","prototype":"string sql_regcase(string $string)","return":"<p class=\"para\">   Returns a valid regular expression which will match   <code class=\"parameter\">string<\/code>, ignoring case. This expression is   <code class=\"parameter\">string<\/code> with each alphabetic character converted to   a bracket expression; this bracket expression contains that character&#039;s   uppercase and lowercase form.  Other characters remain unchanged.  <\/p>","versions":"PHP 4, PHP 5"},"ssdeep_fuzzy_compare":{"id":"function.ssdeep-fuzzy-compare","purpose":"Calculates the match score between two fuzzy hash signatures","prototype":"int ssdeep_fuzzy_compare(string $signature1, string $signature2)","return":"<p class=\"para\">   Returns an integer from 0 to 100 on success, <strong><code>FALSE<\/code><\/strong> otherwise.   <\/p>","versions":"PECL ssdeep >= 1.0.0"},"ssdeep_fuzzy_hash_filename":{"id":"function.ssdeep-fuzzy-hash-filename","purpose":"Create a fuzzy hash from a file","prototype":"string ssdeep_fuzzy_hash_filename(string $file_name)","return":"<p class=\"para\">   Returns a string on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ssdeep >= 1.0.0"},"ssdeep_fuzzy_hash":{"id":"function.ssdeep-fuzzy-hash","purpose":"Create a fuzzy hash from a string","prototype":"string ssdeep_fuzzy_hash(string $to_hash)","return":"<p class=\"para\">   Returns a string on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PECL ssdeep >= 1.0.0"},"addcslashes":{"id":"function.addcslashes","purpose":"Quote string with slashes in a C style","prototype":"string addcslashes(string $str, string $charlist)","return":"<p class=\"para\">   Returns the escaped string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"addslashes":{"id":"function.addslashes","purpose":"Quote string with slashes","prototype":"string addslashes(string $str)","return":"<p class=\"para\">   Returns the escaped string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"bin2hex":{"id":"function.bin2hex","purpose":"Convert binary data into hexadecimal representation","prototype":"string bin2hex(string $str)","return":"<p class=\"para\">   Returns the hexadecimal representation of the given string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"chop":{"id":"function.chop","purpose":"Alias of rtrim","prototype":" chop()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"chr":{"id":"function.chr","purpose":"Return a specific character","prototype":"string chr(int $ascii)","return":"<p class=\"para\">   Returns the specified character.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"chunk_split":{"id":"function.chunk-split","purpose":"Split a string into smaller chunks","prototype":"string chunk_split(string $body [, int $chunklen = 76 [, string $end = \"\\r\\n\"]])","return":"<p class=\"para\">   Returns the chunked string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"convert_cyr_string":{"id":"function.convert-cyr-string","purpose":"Convert from one Cyrillic character set to another","prototype":"string convert_cyr_string(string $str, string $from, string $to)","return":"<p class=\"para\">   Returns the converted string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"convert_uudecode":{"id":"function.convert-uudecode","purpose":"Decode a uuencoded string","prototype":"string convert_uudecode(string $data)","return":"<p class=\"para\">   Returns the decoded data as a string  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"convert_uuencode":{"id":"function.convert-uuencode","purpose":"Uuencode a string","prototype":"string convert_uuencode(string $data)","return":"<p class=\"para\">   Returns the uuencoded data  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"count_chars":{"id":"function.count-chars","purpose":"Return information about characters used in a string","prototype":"mixed count_chars(string $string [, int $mode = ''])","return":"<p class=\"para\">   Depending on <code class=\"parameter\">mode<\/code>   <span class=\"function\">count_chars<\/span> returns one of the following:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      0 - an array with the byte-value as key and the frequency of      every byte as value.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      1 - same as 0 but only byte-values with a frequency greater      than zero are listed.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      2 - same as 0 but only byte-values with a frequency equal to      zero are listed.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      3 - a string containing all unique characters is returned.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      4 - a string containing all not used characters is returned.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"crc32":{"id":"function.crc32","purpose":"Calculates the crc32 polynomial of a string","prototype":"int crc32(string $str)","return":"<p class=\"para\">   Returns the crc32 checksum of <code class=\"parameter\">str<\/code> as an integer.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"crypt":{"id":"function.crypt","purpose":"One-way string hashing","prototype":"string crypt(string $str [, string $salt = ''])","return":"<p class=\"para\">   Returns the hashed string or a string that is shorter than 13 characters   and is guaranteed to differ from the salt on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong>   <p class=\"simpara\">    When validating passwords, a string comparison function that isn&#039;t    vulnerable to timing attacks should be used to compare the output of    <span class=\"function\">crypt<\/span> to the previously known hash. PHP 5.6 onwards    provides <span class=\"function\">hash_equals<\/span> for this purpose.   <\/p>  <\/div>","versions":"PHP 4, PHP 5, PHP 7"},"echo":{"id":"function.echo","purpose":"Output one or more strings","prototype":"void echo(string $arg1 [, string $... = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"explode":{"id":"function.explode","purpose":"Split a string by a string","prototype":"array explode(string $delimiter, string $string [, int $limit = PHP_INT_MAX])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> of <span class=\"type\">string<\/span>s   created by splitting the <code class=\"parameter\">string<\/code> parameter on   boundaries formed by the <code class=\"parameter\">delimiter<\/code>.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">delimiter<\/code> is an empty <span class=\"type\">string<\/span> (&quot;&quot;),   <span class=\"function\">explode<\/span> will return <strong><code>FALSE<\/code><\/strong>.   If <code class=\"parameter\">delimiter<\/code> contains a value that is not   contained in <code class=\"parameter\">string<\/code> and a negative   <code class=\"parameter\">limit<\/code> is used, then an empty <span class=\"type\">array<\/span> will be   returned, otherwise an <span class=\"type\">array<\/span> containing   <code class=\"parameter\">string<\/code> will be returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"fprintf":{"id":"function.fprintf","purpose":"Write a formatted string to a stream","prototype":"int fprintf(resource $handle, string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns the length of the string written.  <\/p>","versions":"PHP 5, PHP 7"},"get_html_translation_table":{"id":"function.get-html-translation-table","purpose":"Returns the translation table used by htmlspecialchars and htmlentities","prototype":"array get_html_translation_table([int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = \"UTF-8\"]]])","return":"<p class=\"para\">   Returns the translation table as an array, with the original characters   as keys and entities as values.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"hebrev":{"id":"function.hebrev","purpose":"Convert logical Hebrew text to visual text","prototype":"string hebrev(string $hebrew_text [, int $max_chars_per_line = ''])","return":"<p class=\"para\">   Returns the visual string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"hebrevc":{"id":"function.hebrevc","purpose":"Convert logical Hebrew text to visual text with newline conversion","prototype":"string hebrevc(string $hebrew_text [, int $max_chars_per_line = ''])","return":"<p class=\"para\">   Returns the visual string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"hex2bin":{"id":"function.hex2bin","purpose":"Decodes a hexadecimally encoded binary string","prototype":"string hex2bin(string $data)","return":"<p class=\"para\">   Returns the binary representation of the given data  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"html_entity_decode":{"id":"function.html-entity-decode","purpose":"Convert all HTML entities to their applicable characters","prototype":"string html_entity_decode(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\")]])","return":"<p class=\"para\">   Returns the decoded string.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"htmlentities":{"id":"function.htmlentities","purpose":"Convert all applicable characters to HTML entities","prototype":"string htmlentities(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\") [, bool $double_encode = '']]])","return":"<p class=\"para\">   Returns the encoded string.  <\/p>  <p class=\"para\">   If the input <code class=\"parameter\">string<\/code> contains an invalid code unit   sequence within the given <code class=\"parameter\">encoding<\/code> an empty string   will be returned, unless either the <strong><code>ENT_IGNORE<\/code><\/strong> or   <strong><code>ENT_SUBSTITUTE<\/code><\/strong> flags are set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"htmlspecialchars_decode":{"id":"function.htmlspecialchars-decode","purpose":"Convert special HTML entities back to characters","prototype":"string htmlspecialchars_decode(string $string [, int $flags = ENT_COMPAT | ENT_HTML401])","return":"<p class=\"para\">   Returns the decoded string.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"htmlspecialchars":{"id":"function.htmlspecialchars","purpose":"Convert special characters to HTML entities","prototype":"string htmlspecialchars(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(\"default_charset\") [, bool $double_encode = '']]])","return":"<p class=\"para\">   The converted <span class=\"type\">string<\/span>.  <\/p>  <p class=\"para\">   If the input <code class=\"parameter\">string<\/code> contains an invalid code unit   sequence within the given <code class=\"parameter\">encoding<\/code> an empty string   will be returned, unless either the <strong><code>ENT_IGNORE<\/code><\/strong> or   <strong><code>ENT_SUBSTITUTE<\/code><\/strong> flags are set.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"implode":{"id":"function.implode","purpose":"Join array elements with a string","prototype":"string implode(string $glue, array $pieces)","return":"<p class=\"para\">   Returns a string containing a string representation of all the array   elements in the same order, with the glue string between each element.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"join":{"id":"function.join","purpose":"Alias of implode","prototype":" join()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"lcfirst":{"id":"function.lcfirst","purpose":"Make a string's first character lowercase","prototype":"string lcfirst(string $str)","return":"<p class=\"para\">   Returns the resulting string.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"levenshtein":{"id":"function.levenshtein","purpose":"Calculate Levenshtein distance between two strings","prototype":"int levenshtein(string $str1, string $str2, int $cost_ins, int $cost_rep, int $cost_del)","return":"<p class=\"para\">   This function returns the Levenshtein-Distance between the   two argument strings or -1, if one of the argument strings   is longer than the limit of 255 characters.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"localeconv":{"id":"function.localeconv","purpose":"Get numeric formatting information","prototype":"array localeconv()","return":"<p class=\"para\">   <span class=\"function\">localeconv<\/span> returns data based upon the current locale   as set by <span class=\"function\">setlocale<\/span>.  The associative array that is   returned contains the following fields:   <table class=\"doctable informaltable\">         <thead>      <tr>       <th>Array element<\/th>       <th>Description<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>decimal_point<\/td>       <td>Decimal point character<\/td>      <\/tr>      <tr>       <td>thousands_sep<\/td>       <td>Thousands separator<\/td>      <\/tr>      <tr>       <td>grouping<\/td>       <td>Array containing numeric groupings<\/td>      <\/tr>      <tr>       <td>int_curr_symbol<\/td>       <td>International currency symbol (i.e. USD)<\/td>      <\/tr>      <tr>       <td>currency_symbol<\/td>       <td>Local currency symbol (i.e. $)<\/td>      <\/tr>      <tr>       <td>mon_decimal_point<\/td>       <td>Monetary decimal point character<\/td>      <\/tr>      <tr>       <td>mon_thousands_sep<\/td>       <td>Monetary thousands separator<\/td>      <\/tr>      <tr>       <td>mon_grouping<\/td>       <td>Array containing monetary groupings<\/td>      <\/tr>      <tr>       <td>positive_sign<\/td>       <td>Sign for positive values<\/td>      <\/tr>      <tr>       <td>negative_sign<\/td>       <td>Sign for negative values<\/td>      <\/tr>      <tr>       <td>int_frac_digits<\/td>       <td>International fractional digits<\/td>      <\/tr>      <tr>       <td>frac_digits<\/td>       <td>Local fractional digits<\/td>      <\/tr>      <tr>       <td>p_cs_precedes<\/td>       <td>        <strong><code>TRUE<\/code><\/strong> if currency_symbol precedes a positive value, <strong><code>FALSE<\/code><\/strong>        if it succeeds one       <\/td>      <\/tr>      <tr>       <td>p_sep_by_space<\/td>       <td>        <strong><code>TRUE<\/code><\/strong> if a space separates currency_symbol from a positive        value, <strong><code>FALSE<\/code><\/strong> otherwise       <\/td>      <\/tr>      <tr>       <td>n_cs_precedes<\/td>       <td>        <strong><code>TRUE<\/code><\/strong> if currency_symbol precedes a negative value, <strong><code>FALSE<\/code><\/strong>        if it succeeds one       <\/td>      <\/tr>      <tr>       <td>n_sep_by_space<\/td>       <td>        <strong><code>TRUE<\/code><\/strong> if a space separates currency_symbol from a negative        value, <strong><code>FALSE<\/code><\/strong> otherwise       <\/td>      <\/tr>      <tr style=\"vertical-align: top;\">       <td>p_sign_posn<\/td>       <td>        <ul class=\"simplelist\">         <li class=\"member\">0 - Parentheses surround the quantity and currency_symbol<\/li>         <li class=\"member\">1 - The sign string precedes the quantity and currency_symbol<\/li>         <li class=\"member\">2 - The sign string succeeds the quantity and currency_symbol<\/li>         <li class=\"member\">3 - The sign string immediately precedes the currency_symbol<\/li>         <li class=\"member\">4 - The sign string immediately succeeds the currency_symbol<\/li>        <\/ul>       <\/td>      <\/tr>      <tr style=\"vertical-align: top;\">       <td>n_sign_posn<\/td>       <td>        <ul class=\"simplelist\">         <li class=\"member\">0 - Parentheses surround the quantity and currency_symbol<\/li>         <li class=\"member\">1 - The sign string precedes the quantity and currency_symbol<\/li>         <li class=\"member\">2 - The sign string succeeds the quantity and currency_symbol<\/li>         <li class=\"member\">3 - The sign string immediately precedes the currency_symbol<\/li>         <li class=\"member\">4 - The sign string immediately succeeds the currency_symbol<\/li>        <\/ul>       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>  <p class=\"para\">   The <em>p_sign_posn<\/em>, and <em>n_sign_posn<\/em> contain a string   of formatting options. Each number representing one of the above listed conditions.  <\/p>  <p class=\"para\">   The grouping fields contain arrays that define the way numbers should be   grouped. For example, the monetary grouping field for the nl_NL locale (in   UTF-8 mode with the euro sign), would contain a 2 item array with the   values 3 and 3. The higher the index in the array, the farther left the   grouping is. If an array element is equal to <strong><code>CHAR_MAX<\/code><\/strong>,   no further grouping is done. If an array element is equal to 0, the previous   element should be used.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"ltrim":{"id":"function.ltrim","purpose":"Strip whitespace (or other characters) from the beginning of a string","prototype":"string ltrim(string $str [, string $character_mask = ''])","return":"<p class=\"para\">   This function returns a string with whitespace stripped from the   beginning of <code class=\"parameter\">str<\/code>.   Without the second parameter,   <span class=\"function\">ltrim<\/span> will strip these characters:      <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      &quot; &quot; (<acronym class=\"acronym\">ASCII<\/acronym> <em>32<\/em>      (<em>0x20<\/em>)), an ordinary space.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;\\t&quot; (<acronym class=\"acronym\">ASCII<\/acronym> <em>9<\/em>      (<em>0x09<\/em>)), a tab.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;\\n&quot; (<acronym class=\"acronym\">ASCII<\/acronym> <em>10<\/em>      (<em>0x0A<\/em>)), a new line (line feed).     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;\\r&quot; (<acronym class=\"acronym\">ASCII<\/acronym> <em>13<\/em>      (<em>0x0D<\/em>)), a carriage return.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;\\0&quot; (<acronym class=\"acronym\">ASCII<\/acronym> <em>0<\/em>      (<em>0x00<\/em>)), the <em>NUL<\/em>-byte.     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">       &quot;\\x0B&quot; (<acronym class=\"acronym\">ASCII<\/acronym> <em>11<\/em>      (<em>0x0B<\/em>)), a vertical tab.     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"md5_file":{"id":"function.md5-file","purpose":"Calculates the md5 hash of a given file","prototype":"string md5_file(string $filename [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"md5":{"id":"function.md5","purpose":"Calculate the md5 hash of a string","prototype":"string md5(string $str [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns the hash as a 32-character hexadecimal number.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"metaphone":{"id":"function.metaphone","purpose":"Calculate the metaphone key of a string","prototype":"string metaphone(string $str [, int $phonemes = ''])","return":"<p class=\"para\">   Returns the metaphone key as a string,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"money_format":{"id":"function.money-format","purpose":"Formats a number as a currency string","prototype":"string money_format(string $format, float $number)","return":"<p class=\"para\">   Returns the formatted string. Characters before and after the formatting   string will be returned unchanged.   Non-numeric <code class=\"parameter\">number<\/code> causes returning <strong><code>NULL<\/code><\/strong> and   emitting <strong><code>E_WARNING<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"nl_langinfo":{"id":"function.nl-langinfo","purpose":"Query language and locale information","prototype":"string nl_langinfo(int $item)","return":"<p class=\"para\">   Returns the element as a string, or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">item<\/code>   is not valid.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"nl2br":{"id":"function.nl2br","purpose":"Inserts HTML line breaks before all newlines in a string","prototype":"string nl2br(string $string [, bool $is_xhtml = ''])","return":"<p class=\"para\">   Returns the altered string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"number_format":{"id":"function.number-format","purpose":"Format a number with grouped thousands","prototype":"string number_format(float $number, int $decimals, string $dec_point, string $thousands_sep)","return":"<p class=\"para\">   A formatted version of <code class=\"parameter\">number<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ord":{"id":"function.ord","purpose":"Return ASCII value of character","prototype":"int ord(string $string)","return":"<p class=\"para\">   Returns the ASCII value as an integer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"parse_str":{"id":"function.parse-str","purpose":"Parses the string into variables","prototype":"void parse_str(string $encoded_string [, array $result = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"print":{"id":"function.print","purpose":"Output a string","prototype":"int print(string $arg)","return":"<p class=\"para\">   Returns <em>1<\/em>, always.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"printf":{"id":"function.printf","purpose":"Output a formatted string","prototype":"int printf(string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns the length of the outputted string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"quoted_printable_decode":{"id":"function.quoted-printable-decode","purpose":"Convert a quoted-printable string to an 8 bit string","prototype":"string quoted_printable_decode(string $str)","return":"<p class=\"para\">   Returns the 8-bit binary string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"quoted_printable_encode":{"id":"function.quoted-printable-encode","purpose":"Convert a 8 bit string to a quoted-printable string","prototype":"string quoted_printable_encode(string $str)","return":"<p class=\"para\">   Returns the encoded string.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"quotemeta":{"id":"function.quotemeta","purpose":"Quote meta characters","prototype":"string quotemeta(string $str)","return":"<p class=\"para\">   Returns the string with meta characters quoted, or <strong><code>FALSE<\/code><\/strong> if an empty   string is given as <code class=\"parameter\">str<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"rtrim":{"id":"function.rtrim","purpose":"Strip whitespace (or other characters) from the end of a string","prototype":"string rtrim(string $str [, string $character_mask = ''])","return":"<p class=\"para\">   Returns the modified string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"setlocale":{"id":"function.setlocale","purpose":"Set locale information","prototype":"string setlocale(int $category, array $locale [, string $... = ''])","return":"<p class=\"para\">   Returns the new current locale, or <strong><code>FALSE<\/code><\/strong> if the locale functionality is   not implemented on your platform, the specified locale does not exist or   the category name is invalid.  <\/p>  <p class=\"para\">   An invalid category name also causes a warning message. Category\/locale   names can be found in <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc1766\" class=\"link external\">&raquo;&nbsp;RFC 1766<\/a>   and <a href=\"http:\/\/www.w3.org\/WAI\/ER\/IG\/ert\/iso639.htm\" class=\"link external\">&raquo;&nbsp;ISO 639<\/a>.   Different systems have different naming schemes for locales.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    The return value of <span class=\"function\">setlocale<\/span> depends    on the system that PHP is running.  It returns exactly    what the system <em>setlocale<\/em> function returns.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"sha1_file":{"id":"function.sha1-file","purpose":"Calculate the sha1 hash of a file","prototype":"string sha1_file(string $filename [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns a string on success, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"sha1":{"id":"function.sha1","purpose":"Calculate the sha1 hash of a string","prototype":"string sha1(string $str [, bool $raw_output = ''])","return":"<p class=\"para\">   Returns the sha1 hash as a string.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"similar_text":{"id":"function.similar-text","purpose":"Calculate the similarity between two strings","prototype":"int similar_text(string $first, string $second [, float $percent = ''])","return":"<p class=\"para\">   Returns the number of matching chars in both strings.  <\/p>  <p class=\"para\">   The number of matching characters is calculated by finding the longest first   common substring, and then doing this for the prefixes and the suffixes,   recursively. The lengths of all found common substrings are added.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"soundex":{"id":"function.soundex","purpose":"Calculate the soundex key of a string","prototype":"string soundex(string $str)","return":"<p class=\"para\">   Returns the soundex key as a string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sprintf":{"id":"function.sprintf","purpose":"Return a formatted string","prototype":"string sprintf(string $format [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns a string produced according to the formatting string   <code class=\"parameter\">format<\/code>,  or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sscanf":{"id":"function.sscanf","purpose":"Parses input from a string according to a format","prototype":"mixed sscanf(string $str, string $format [, mixed $... = ''])","return":"<p class=\"para\">   If only two parameters were passed to this function, the values parsed will   be returned as an array. Otherwise, if optional parameters are passed, the   function will return the number of assigned values. The optional parameters   must be passed by reference.  <\/p>  <p class=\"para\">   If there are more substrings expected in the <code class=\"parameter\">format<\/code>   than there are available within <code class=\"parameter\">str<\/code>,   <em>-1<\/em> will be returned.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"str_getcsv":{"id":"function.str-getcsv","purpose":"Parse a CSV string into an array","prototype":"array str_getcsv(string $input [, string $delimiter = \",\" [, string $enclosure = '\"' [, string $escape = \"\\\\\"]]])","return":"<p class=\"para\">   Returns an indexed array containing the fields read.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"str_ireplace":{"id":"function.str-ireplace","purpose":"Case-insensitive version of str_replace","prototype":"mixed str_ireplace(mixed $search, mixed $replace, mixed $subject [, int $count = ''])","return":"<p class=\"para\">   Returns a string or an array of replacements.  <\/p>","versions":"PHP 5, PHP 7"},"str_pad":{"id":"function.str-pad","purpose":"Pad a string to a certain length with another string","prototype":"string str_pad(string $input, int $pad_length [, string $pad_string = \" \" [, int $pad_type = STR_PAD_RIGHT]])","return":"<p class=\"para\">   Returns the padded string.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"str_repeat":{"id":"function.str-repeat","purpose":"Repeat a string","prototype":"string str_repeat(string $input, int $multiplier)","return":"<p class=\"para\">   Returns the repeated string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"str_replace":{"id":"function.str-replace","purpose":"Replace all occurrences of the search string with the replacement string","prototype":"mixed str_replace(mixed $search, mixed $replace, mixed $subject [, int $count = ''])","return":"<p class=\"para\">   This function returns a string or an array with the replaced values.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"str_rot13":{"id":"function.str-rot13","purpose":"Perform the rot13 transform on a string","prototype":"string str_rot13(string $str)","return":"<p class=\"para\">   Returns the ROT13 version of the given string.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"str_shuffle":{"id":"function.str-shuffle","purpose":"Randomly shuffles a string","prototype":"string str_shuffle(string $str)","return":"<p class=\"para\">   Returns the shuffled string.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"str_split":{"id":"function.str-split","purpose":"Convert a string to an array","prototype":"array str_split(string $string [, int $split_length = 1])","return":"<p class=\"para\">   If the optional <code class=\"parameter\">split_length<\/code> parameter is   specified, the returned array will be broken down into chunks with each   being <code class=\"parameter\">split_length<\/code> in length, otherwise each chunk   will be one character in length.  <\/p>  <p class=\"para\">   <strong><code>FALSE<\/code><\/strong> is returned if <code class=\"parameter\">split_length<\/code> is less than 1.   If the <code class=\"parameter\">split_length<\/code> length exceeds the length of   <code class=\"parameter\">string<\/code>, the entire string is returned as the first   (and only) array element.  <\/p>","versions":"PHP 5, PHP 7"},"str_word_count":{"id":"function.str-word-count","purpose":"Return information about words used in a string","prototype":"mixed str_word_count(string $string [, int $format = '' [, string $charlist = '']])","return":"<p class=\"para\">   Returns an array or an integer, depending on the   <code class=\"parameter\">format<\/code> chosen.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"strcasecmp":{"id":"function.strcasecmp","purpose":"Binary safe case-insensitive string comparison","prototype":"int strcasecmp(string $str1, string $str2)","return":"<p class=\"para\">   Returns &lt; 0 if <code class=\"parameter\">str1<\/code> is less than   <code class=\"parameter\">str2<\/code>; &gt; 0 if <code class=\"parameter\">str1<\/code>   is greater than <code class=\"parameter\">str2<\/code>, and 0 if they are   equal.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strchr":{"id":"function.strchr","purpose":"Alias of strstr","prototype":" strchr()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"strcmp":{"id":"function.strcmp","purpose":"Binary safe string comparison","prototype":"int strcmp(string $str1, string $str2)","return":"<p class=\"para\">   Returns &lt; 0 if <code class=\"parameter\">str1<\/code> is less than   <code class=\"parameter\">str2<\/code>; &gt; 0 if <code class=\"parameter\">str1<\/code>   is greater than <code class=\"parameter\">str2<\/code>, and 0 if they are   equal.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strcoll":{"id":"function.strcoll","purpose":"Locale based string comparison","prototype":"int strcoll(string $str1, string $str2)","return":"<p class=\"para\">   Returns &lt; 0 if <code class=\"parameter\">str1<\/code> is less than   <code class=\"parameter\">str2<\/code>; &gt; 0 if   <code class=\"parameter\">str1<\/code> is greater than   <code class=\"parameter\">str2<\/code>, and 0 if they are equal.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"strcspn":{"id":"function.strcspn","purpose":"Find length of initial segment not matching mask","prototype":"int strcspn(string $subject, string $mask [, int $start = '' [, int $length = '']])","return":"<p class=\"para\">   Returns the length of the initial segment of <code class=\"parameter\">subject<\/code>   which consists entirely of characters <em class=\"emphasis\">not<\/em> in <code class=\"parameter\">mask<\/code>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    When a <code class=\"parameter\">start<\/code> parameter is set, the returned length    is counted starting from this position, not from the beginning of    <code class=\"parameter\">subject<\/code>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"strip_tags":{"id":"function.strip-tags","purpose":"Strip HTML and PHP tags from a string","prototype":"string strip_tags(string $str [, string $allowable_tags = ''])","return":"<p class=\"para\">   Returns the stripped string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"stripcslashes":{"id":"function.stripcslashes","purpose":"Un-quote string quoted with addcslashes","prototype":"string stripcslashes(string $str)","return":"<p class=\"para\">   Returns the unescaped string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"stripos":{"id":"function.stripos","purpose":"Find the position of the first occurrence of a case-insensitive substring in a string","prototype":"int stripos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position of where the needle exists relative to the beginnning of   the <code class=\"parameter\">haystack<\/code> string (independent of offset).   Also note that string positions start at 0, and not 1.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the needle was not found.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"stripslashes":{"id":"function.stripslashes","purpose":"Un-quotes a quoted string","prototype":"string stripslashes(string $str)","return":"<p class=\"para\">   Returns a string with backslashes stripped off.   (<em>\\&#039;<\/em> becomes <em>&#039;<\/em> and so on.)   Double backslashes (<em>\\\\<\/em>) are made into a single   backslash (<em>\\<\/em>).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"stristr":{"id":"function.stristr","purpose":"Case-insensitive strstr","prototype":"string stristr(string $haystack, mixed $needle [, bool $before_needle = ''])","return":"<p class=\"para\">   Returns the matched substring. If <code class=\"parameter\">needle<\/code> is not   found, returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strlen":{"id":"function.strlen","purpose":"Get string length","prototype":"int strlen(string $string)","return":"<p class=\"para\">   The length of the <code class=\"parameter\">string<\/code> on success,    and <em>0<\/em> if the <code class=\"parameter\">string<\/code> is empty.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strnatcasecmp":{"id":"function.strnatcasecmp","purpose":"Case insensitive string comparisons using a \"natural order\" algorithm","prototype":"int strnatcasecmp(string $str1, string $str2)","return":"<p class=\"para\">   Similar to other string comparison functions, this one returns &lt; 0 if   <code class=\"parameter\">str1<\/code> is less than <code class=\"parameter\">str2<\/code> &gt;   0 if <code class=\"parameter\">str1<\/code> is greater than   <code class=\"parameter\">str2<\/code>, and 0 if they are equal.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strnatcmp":{"id":"function.strnatcmp","purpose":"String comparisons using a \"natural order\" algorithm","prototype":"int strnatcmp(string $str1, string $str2)","return":"<p class=\"para\">   Similar to other string comparison functions, this one returns &lt; 0 if   <code class=\"parameter\">str1<\/code> is less than <code class=\"parameter\">str2<\/code>; &gt;   0 if <code class=\"parameter\">str1<\/code> is greater than   <code class=\"parameter\">str2<\/code>, and 0 if they are equal.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strncasecmp":{"id":"function.strncasecmp","purpose":"Binary safe case-insensitive string comparison of the first n characters","prototype":"int strncasecmp(string $str1, string $str2, int $len)","return":"<p class=\"para\">   Returns &lt; 0 if <code class=\"parameter\">str1<\/code> is less than   <code class=\"parameter\">str2<\/code>; &gt; 0 if <code class=\"parameter\">str1<\/code> is   greater than <code class=\"parameter\">str2<\/code>, and 0 if they are equal.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"strncmp":{"id":"function.strncmp","purpose":"Binary safe string comparison of the first n characters","prototype":"int strncmp(string $str1, string $str2, int $len)","return":"<p class=\"para\">   Returns &lt; 0 if <code class=\"parameter\">str1<\/code> is less than   <code class=\"parameter\">str2<\/code>; &gt; 0 if <code class=\"parameter\">str1<\/code>   is greater than <code class=\"parameter\">str2<\/code>, and 0 if they are   equal.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strpbrk":{"id":"function.strpbrk","purpose":"Search a string for any of a set of characters","prototype":"string strpbrk(string $haystack, string $char_list)","return":"<p class=\"para\">   Returns a string starting from the character found, or <strong><code>FALSE<\/code><\/strong> if it is   not found.  <\/p>","versions":"PHP 5, PHP 7"},"strpos":{"id":"function.strpos","purpose":"Find the position of the first occurrence of a substring in a string","prototype":"int strpos(string $haystack, mixed $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position of where the needle exists relative to the beginning of   the <code class=\"parameter\">haystack<\/code> string (independent of offset).   Also note that string positions start at 0, and not 1.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the needle was not found.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"strrchr":{"id":"function.strrchr","purpose":"Find the last occurrence of a character in a string","prototype":"string strrchr(string $haystack, mixed $needle)","return":"<p class=\"para\">   This function returns the portion of string, or <strong><code>FALSE<\/code><\/strong> if   <code class=\"parameter\">needle<\/code> is not found.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strrev":{"id":"function.strrev","purpose":"Reverse a string","prototype":"string strrev(string $string)","return":"<p class=\"para\">   Returns the reversed string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strripos":{"id":"function.strripos","purpose":"Find the position of the last occurrence of a case-insensitive substring in a string","prototype":"int strripos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position where the needle exists relative to the beginnning of   the <code class=\"parameter\">haystack<\/code> string (independent of search direction   or offset).   Also note that string positions start at 0, and not 1.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the needle was not found.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"strrpos":{"id":"function.strrpos","purpose":"Find the position of the last occurrence of a substring in a string","prototype":"int strrpos(string $haystack, string $needle [, int $offset = ''])","return":"<p class=\"para\">   Returns the position where the needle exists relative to the beginning of   the <code class=\"parameter\">haystack<\/code> string (independent of search direction   or offset).   Also note that string positions start at 0, and not 1.  <\/p>  <p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if the needle was not found.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"strspn":{"id":"function.strspn","purpose":"Finds the length of the initial segment of a string consisting   entirely of characters contained within a given mask","prototype":"int strspn(string $subject, string $mask [, int $start = '' [, int $length = '']])","return":"<p class=\"para\">   Returns the length of the initial segment of <code class=\"parameter\">subject<\/code>   which consists entirely of characters in <code class=\"parameter\">mask<\/code>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    When a <code class=\"parameter\">start<\/code> parameter is set, the returned length    is counted starting from this position, not from the beginning of    <code class=\"parameter\">subject<\/code>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"strstr":{"id":"function.strstr","purpose":"Find the first occurrence of a string","prototype":"string strstr(string $haystack, mixed $needle [, bool $before_needle = ''])","return":"<p class=\"para\">   Returns the portion of string, or <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">needle<\/code>   is not found.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strtok":{"id":"function.strtok","purpose":"Tokenize string","prototype":"string strtok(string $str, string $token)","return":"<p class=\"para\">   A <span class=\"type\">string<\/span> token.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strtolower":{"id":"function.strtolower","purpose":"Make a string lowercase","prototype":"string strtolower(string $string)","return":"<p class=\"para\">   Returns the lowercased string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strtoupper":{"id":"function.strtoupper","purpose":"Make a string uppercase","prototype":"string strtoupper(string $string)","return":"<p class=\"para\">   Returns the uppercased string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strtr":{"id":"function.strtr","purpose":"Translate characters or replace substrings","prototype":"string strtr(string $str, string $from, string $to, array $replace_pairs)","return":"<p class=\"para\">   Returns the translated <span class=\"type\">string<\/span>.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">replace_pairs<\/code> contains a key which   is an empty <span class=\"type\">string<\/span> (<em>&quot;&quot;<\/em>),   <strong><code>FALSE<\/code><\/strong> will be returned. If the <code class=\"parameter\">str<\/code> is not a scalar   then it is not typecasted into a string, instead a warning is raised and    <strong><code>NULL<\/code><\/strong> is returned.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"substr_compare":{"id":"function.substr-compare","purpose":"Binary safe comparison of two strings from an offset, up to length characters","prototype":"int substr_compare(string $main_str, string $str, int $offset [, int $length = '' [, bool $case_insensitivity = '']])","return":"<p class=\"para\">   Returns &lt; 0 if <code class=\"parameter\">main_str<\/code> from position   <code class=\"parameter\">offset<\/code> is less than <code class=\"parameter\">str<\/code>, &gt;   0 if it is greater than <code class=\"parameter\">str<\/code>, and 0 if they are equal.   If <code class=\"parameter\">offset<\/code> is equal to or greater than the length of   <code class=\"parameter\">main_str<\/code>, or the <code class=\"parameter\">length<\/code> is   set and is less than 1 (prior to PHP 5.5.11),   <span class=\"function\">substr_compare<\/span> prints a warning and returns   <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"substr_count":{"id":"function.substr-count","purpose":"Count the number of substring occurrences","prototype":"int substr_count(string $haystack, string $needle [, int $offset = '' [, int $length = '']])","return":"<p class=\"para\">   This function returns an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"substr_replace":{"id":"function.substr-replace","purpose":"Replace text within a portion of a string","prototype":"mixed substr_replace(mixed $string, mixed $replacement, mixed $start [, mixed $length = ''])","return":"<p class=\"para\">   The result string is returned. If <code class=\"parameter\">string<\/code> is an   array then array is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"substr":{"id":"function.substr","purpose":"Return part of a string","prototype":"string substr(string $string, int $start [, int $length = ''])","return":"<p class=\"para\">   Returns the extracted part of <code class=\"parameter\">string<\/code>;  or <strong><code>FALSE<\/code><\/strong> on failure, or   an empty string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"trim":{"id":"function.trim","purpose":"Strip whitespace (or other characters) from the beginning and end of a string","prototype":"string trim(string $str [, string $character_mask = \" \\t\\n\\r\\0\\x0B\"])","return":"<p class=\"para\">   The trimmed string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ucfirst":{"id":"function.ucfirst","purpose":"Make a string's first character uppercase","prototype":"string ucfirst(string $str)","return":"<p class=\"para\">   Returns the resulting string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ucwords":{"id":"function.ucwords","purpose":"Uppercase the first character of each word in a string","prototype":"string ucwords(string $str [, string $delimiters = \" \\t\\r\\n\\f\\v\"])","return":"<p class=\"para\">   Returns the modified string.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"vfprintf":{"id":"function.vfprintf","purpose":"Write a formatted string to a stream","prototype":"int vfprintf(resource $handle, string $format, array $args)","return":"<p class=\"para\">   Returns the length of the outputted string.  <\/p>","versions":"PHP 5, PHP 7"},"vprintf":{"id":"function.vprintf","purpose":"Output a formatted string","prototype":"int vprintf(string $format, array $args)","return":"<p class=\"para\">   Returns the length of the outputted string.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"vsprintf":{"id":"function.vsprintf","purpose":"Return a formatted string","prototype":"string vsprintf(string $format, array $args)","return":"<p class=\"para\">   Return array values as a formatted string according to   <code class=\"parameter\">format<\/code> (which is described in the documentation   for <span class=\"function\">sprintf<\/span>).  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"wordwrap":{"id":"function.wordwrap","purpose":"Wraps a string to a given number of characters","prototype":"string wordwrap(string $str [, int $width = 75 [, string $break = \"\\n\" [, bool $cut = '']]])","return":"<p class=\"para\">   Returns the given string wrapped at the specified length.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"array_change_key_case":{"id":"function.array-change-key-case","purpose":"Changes the case of all keys in an array","prototype":"array array_change_key_case(array $array [, int $case = CASE_LOWER])","return":"<p class=\"para\">   Returns an array with its keys lower or uppercased, or <strong><code>FALSE<\/code><\/strong> if   <code class=\"parameter\">array<\/code> is not an array.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"array_chunk":{"id":"function.array-chunk","purpose":"Split an array into chunks","prototype":"array array_chunk(array $array, int $size [, bool $preserve_keys = ''])","return":"<p class=\"para\">   Returns a multidimensional numerically indexed array, starting with zero,   with each dimension containing <code class=\"parameter\">size<\/code> elements.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"array_column":{"id":"function.array-column","purpose":"Return the values from a single column in the input array","prototype":"array array_column(array $input, mixed $column_key [, mixed $index_key = ''])","return":"<p class=\"para\">   Returns an array of values representing a single column from the input array.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"array_combine":{"id":"function.array-combine","purpose":"Creates an array by using one array for keys and another for its values","prototype":"array array_combine(array $keys, array $values)","return":"<p class=\"para\">   Returns the combined <span class=\"type\">array<\/span>, <strong><code>FALSE<\/code><\/strong> if the number of elements   for each array isn&#039;t equal.  <\/p>","versions":"PHP 5, PHP 7"},"array_count_values":{"id":"function.array-count-values","purpose":"Counts all the values of an array","prototype":"array array_count_values(array $array)","return":"<p class=\"para\">   Returns an associative array of values from <code class=\"parameter\">array<\/code> as   keys and their count as value.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_diff_assoc":{"id":"function.array-diff-assoc","purpose":"Computes the difference of arrays with additional index check","prototype":"array array_diff_assoc(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all the values from   <code class=\"parameter\">array1<\/code> that are not present in any of the other arrays.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"array_diff_key":{"id":"function.array-diff-key","purpose":"Computes the difference of arrays using keys for comparison","prototype":"array array_diff_key(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all the entries from   <code class=\"parameter\">array1<\/code> whose keys are absent from all of the   other arrays.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"array_diff_uassoc":{"id":"function.array-diff-uassoc","purpose":"Computes the difference of arrays with additional index check which is performed by a user supplied callback function","prototype":"array array_diff_uassoc(array $array1, array $array2 [, array $... = '', callable $key_compare_func])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all the entries from   <code class=\"parameter\">array1<\/code> that are not present in any of the other arrays.  <\/p>","versions":"PHP 5, PHP 7"},"array_diff_ukey":{"id":"function.array-diff-ukey","purpose":"Computes the difference of arrays using a callback function on the keys for comparison","prototype":"array array_diff_ukey(array $array1, array $array2 [, array $... = '', callable $key_compare_func])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all the entries from   <code class=\"parameter\">array1<\/code> that are not present in any of the other arrays.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"array_diff":{"id":"function.array-diff","purpose":"Computes the difference of arrays","prototype":"array array_diff(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all the entries from   <code class=\"parameter\">array1<\/code> that are not present in any of the other arrays.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"array_fill_keys":{"id":"function.array-fill-keys","purpose":"Fill an array with values, specifying keys","prototype":"array array_fill_keys(array $keys, mixed $value)","return":"<p class=\"para\">   Returns the filled array  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"array_fill":{"id":"function.array-fill","purpose":"Fill an array with values","prototype":"array array_fill(int $start_index, int $num, mixed $value)","return":"<p class=\"para\">   Returns the filled array  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"array_filter":{"id":"function.array-filter","purpose":"Filters elements of an array using a callback function","prototype":"array array_filter(array $array [, callable $callback = '' [, int $flag = '']])","return":"<p class=\"para\">   Returns the filtered array.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"array_flip":{"id":"function.array-flip","purpose":"Exchanges all keys with their associated values in an array","prototype":"string array_flip(array $array)","return":"<p class=\"para\">   Returns the flipped array on success and <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_intersect_assoc":{"id":"function.array-intersect-assoc","purpose":"Computes the intersection of arrays with additional index check","prototype":"array array_intersect_assoc(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an associative array containing all the values in    <code class=\"parameter\">array1<\/code> that are present in all of the arguments.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"array_intersect_key":{"id":"function.array-intersect-key","purpose":"Computes the intersection of arrays using keys for comparison","prototype":"array array_intersect_key(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an associative array containing all the entries of    <code class=\"parameter\">array1<\/code> which have keys that are present in all   arguments.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"array_intersect_uassoc":{"id":"function.array-intersect-uassoc","purpose":"Computes the intersection of arrays with additional index check, compares indexes by a callback function","prototype":"array array_intersect_uassoc(array $array1, array $array2 [, array $... = '', callable $key_compare_func])","return":"<p class=\"para\">   Returns the values of <code class=\"parameter\">array1<\/code> whose values exist   in all of the arguments.  <\/p>","versions":"PHP 5, PHP 7"},"array_intersect_ukey":{"id":"function.array-intersect-ukey","purpose":"Computes the intersection of arrays using a callback function on the keys for comparison","prototype":"array array_intersect_ukey(array $array1, array $array2 [, array $... = '', callable $key_compare_func])","return":"<p class=\"para\">   Returns the values of <code class=\"parameter\">array1<\/code> whose keys exist   in all the arguments.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"array_intersect":{"id":"function.array-intersect","purpose":"Computes the intersection of arrays","prototype":"array array_intersect(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an array containing all of the values in    <code class=\"parameter\">array1<\/code> whose values exist in all of the parameters.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"array_key_exists":{"id":"function.array-key-exists","purpose":"Checks if the given key or index exists in the array","prototype":"bool array_key_exists(mixed $key, array $array)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    <span class=\"function\">array_key_exists<\/span> will search for the keys in the first dimension only.    Nested keys in multidimensional arrays will not be found.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4 >= 4.0.7, PHP 5, PHP 7"},"array_keys":{"id":"function.array-keys","purpose":"Return all the keys or a subset of the keys of an array","prototype":"array array_keys(array $array [, mixed $search_value = '' [, bool $strict = '']])","return":"<p class=\"para\">   Returns an array of all the keys in <code class=\"parameter\">array<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_map":{"id":"function.array-map","purpose":"Applies the callback to the elements of the given arrays","prototype":"array array_map(callable $callback, array $array1 [, array $... = ''])","return":"<p class=\"para\">   Returns an array containing all the elements of <code class=\"parameter\">array1<\/code>   after applying the <code class=\"parameter\">callback<\/code> function to each one.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"array_merge_recursive":{"id":"function.array-merge-recursive","purpose":"Merge two or more arrays recursively","prototype":"array array_merge_recursive(array $array1 [, array $... = ''])","return":"<p class=\"para\">   An array of values resulted from merging the arguments together.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"array_merge":{"id":"function.array-merge","purpose":"Merge one or more arrays","prototype":"array array_merge(array $array1 [, array $... = ''])","return":"<p class=\"para\">   Returns the resulting array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_multisort":{"id":"function.array-multisort","purpose":"Sort multiple or multi-dimensional arrays","prototype":"string array_multisort(array $array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_pad":{"id":"function.array-pad","purpose":"Pad array to the specified length with a value","prototype":"array array_pad(array $array, int $size, mixed $value)","return":"<p class=\"para\">   Returns a copy of the <code class=\"parameter\">array<\/code> padded to size specified   by <code class=\"parameter\">size<\/code> with value    <code class=\"parameter\">value<\/code>. If <code class=\"parameter\">size<\/code> is    positive then the array is padded on the right, if it&#039;s negative then    on the left. If the absolute value of <code class=\"parameter\">size<\/code> is less   than or equal to the length of the <code class=\"parameter\">array<\/code> then no   padding takes place.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_pop":{"id":"function.array-pop","purpose":"Pop the element off the end of array","prototype":"array array_pop(array $array)","return":"<p class=\"para\">   Returns the last value of <code class=\"parameter\">array<\/code>.   If <code class=\"parameter\">array<\/code> is empty (or is not an array),   <strong><code>NULL<\/code><\/strong> will be returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_product":{"id":"function.array-product","purpose":"Calculate the product of values in an array","prototype":"number array_product(array $array)","return":"<p class=\"para\">   Returns the product as an integer or float.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"array_push":{"id":"function.array-push","purpose":"Push one or more elements onto the end of array","prototype":"int array_push(array $array [, mixed $... = ''])","return":"<p class=\"para\">   Returns the new number of elements in the array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_rand":{"id":"function.array-rand","purpose":"Pick one or more random keys out of an array","prototype":"mixed array_rand(array $array [, int $num = 1])","return":"<p class=\"para\">   When picking only one entry, <span class=\"function\">array_rand<\/span> returns   the key for a random entry. Otherwise, an array of keys for the random   entries is returned. This is done so that random keys can be picked   from the array as well as random values. Trying to pick more elements   than there are in the array will result in an   <strong><code>E_WARNING<\/code><\/strong> level error, and NULL will be returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_reduce":{"id":"function.array-reduce","purpose":"Iteratively reduce the array to a single value using a callback function","prototype":"mixed array_reduce(array $array, callable $callback [, mixed $initial = ''])","return":"<p class=\"para\">   Returns the resulting value.  <\/p>  <p class=\"para\">   If the array is empty and <code class=\"parameter\">initial<\/code> is not passed,   <span class=\"function\">array_reduce<\/span> returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"array_replace_recursive":{"id":"function.array-replace-recursive","purpose":"Replaces elements from passed arrays into the first array recursively","prototype":"array array_replace_recursive(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span>, or <strong><code>NULL<\/code><\/strong> if an error occurs.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"array_replace":{"id":"function.array-replace","purpose":"Replaces elements from passed arrays into the first array","prototype":"array array_replace(array $array1, array $array2 [, array $... = ''])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span>, or <strong><code>NULL<\/code><\/strong> if an error occurs.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"array_reverse":{"id":"function.array-reverse","purpose":"Return an array with elements in reverse order","prototype":"array array_reverse(array $array [, bool $preserve_keys = ''])","return":"<p class=\"para\">   Returns the reversed array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_search":{"id":"function.array-search","purpose":"Searches the array for a given value and returns the first corresponding key if successful","prototype":"mixed array_search(mixed $needle, array $haystack [, bool $strict = ''])","return":"<p class=\"para\">   Returns the key for <code class=\"parameter\">needle<\/code> if it is found in the   array, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">needle<\/code> is found in <code class=\"parameter\">haystack<\/code>   more than once, the first matching key is returned. To return the keys for   all matching values, use <span class=\"function\">array_keys<\/span> with the optional   <code class=\"parameter\">search_value<\/code> parameter instead.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"array_shift":{"id":"function.array-shift","purpose":"Shift an element off the beginning of array","prototype":"array array_shift(array $array)","return":"<p class=\"para\">   Returns the shifted value, or <strong><code>NULL<\/code><\/strong> if <code class=\"parameter\">array<\/code> is   empty or is not an array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_slice":{"id":"function.array-slice","purpose":"Extract a slice of the array","prototype":"array array_slice(array $array, int $offset [, int $length = '' [, bool $preserve_keys = '']])","return":"<p class=\"para\">   Returns the slice. If the offset is larger than the size of the array then returns an empty array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_splice":{"id":"function.array-splice","purpose":"Remove a portion of the array and replace it with something else","prototype":"array array_splice(array $input, int $offset [, int $length = count($input) [, mixed $replacement = array()]])","return":"<p class=\"para\">   Returns an array consisting of the extracted elements.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_sum":{"id":"function.array-sum","purpose":"Calculate the sum of values in an array","prototype":"number array_sum(array $array)","return":"<p class=\"para\">   Returns the sum of values as an integer or float; <em>0<\/em> if the   <code class=\"parameter\">array<\/code> is empty.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"array_udiff_assoc":{"id":"function.array-udiff-assoc","purpose":"Computes the difference of arrays with additional index check, compares data by a callback function","prototype":"array array_udiff_assoc(array $array1, array $array2 [, array $... = '', callable $value_compare_func])","return":"<p class=\"para\">   <span class=\"function\">array_udiff_assoc<\/span> returns an <span class=\"type\">array<\/span>   containing all the values from <code class=\"parameter\">array1<\/code>   that are not present in any of the other arguments.   Note that the keys are used in the comparison unlike   <span class=\"function\">array_diff<\/span> and <span class=\"function\">array_udiff<\/span>.   The comparison of arrays&#039; data is performed by using an user-supplied   callback. In this aspect the behaviour is opposite to the behaviour of   <span class=\"function\">array_diff_assoc<\/span> which uses internal function for   comparison.  <\/p>","versions":"PHP 5, PHP 7"},"array_udiff_uassoc":{"id":"function.array-udiff-uassoc","purpose":"Computes the difference of arrays with additional index check, compares data and indexes by a callback function","prototype":"array array_udiff_uassoc(array $array1, array $array2 [, array $... = '', callable $value_compare_func, callable $key_compare_func])","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> containing all the values from   <code class=\"parameter\">array1<\/code> that are not present in any of the other   arguments.  <\/p>","versions":"PHP 5, PHP 7"},"array_udiff":{"id":"function.array-udiff","purpose":"Computes the difference of arrays by using a callback function for data comparison","prototype":"array array_udiff(array $array1, array $array2 [, array $... = '', callable $value_compare_func])","return":"<p class=\"para\">   Returns an array containing all the values of <code class=\"parameter\">array1<\/code>   that are not present in any of the other arguments.  <\/p>","versions":"PHP 5, PHP 7"},"array_uintersect_assoc":{"id":"function.array-uintersect-assoc","purpose":"Computes the intersection of arrays with additional index check, compares data by a callback function","prototype":"array array_uintersect_assoc(array $array1, array $array2 [, array $... = '', callable $value_compare_func])","return":"<p class=\"para\">   Returns an array containing all the values of   <code class=\"parameter\">array1<\/code> that are present in all the arguments.  <\/p>","versions":"PHP 5, PHP 7"},"array_uintersect_uassoc":{"id":"function.array-uintersect-uassoc","purpose":"Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions","prototype":"array array_uintersect_uassoc(array $array1, array $array2 [, array $... = '', callable $value_compare_func, callable $key_compare_func])","return":"<p class=\"para\">   Returns an array containing all the values of   <code class=\"parameter\">array1<\/code> that are present in all the arguments.  <\/p>","versions":"PHP 5, PHP 7"},"array_uintersect":{"id":"function.array-uintersect","purpose":"Computes the intersection of arrays, compares data by a callback function","prototype":"array array_uintersect(array $array1, array $array2 [, array $... = '', callable $value_compare_func])","return":"<p class=\"para\">   Returns an array containing all the values of <code class=\"parameter\">array1<\/code>   that are present in all the arguments.  <\/p>","versions":"PHP 5, PHP 7"},"array_unique":{"id":"function.array-unique","purpose":"Removes duplicate values from an array","prototype":"array array_unique(array $array [, int $sort_flags = SORT_STRING])","return":"<p class=\"para\">   Returns the filtered array.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"array_unshift":{"id":"function.array-unshift","purpose":"Prepend one or more elements to the beginning of an array","prototype":"int array_unshift(array $array [, mixed $... = ''])","return":"<p class=\"para\">   Returns the new number of elements in the <code class=\"parameter\">array<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_values":{"id":"function.array-values","purpose":"Return all the values of an array","prototype":"array array_values(array $array)","return":"<p class=\"para\">   Returns an indexed array of values.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array_walk_recursive":{"id":"function.array-walk-recursive","purpose":"Apply a user function recursively to every member of an array","prototype":"bool array_walk_recursive(array $array, callable $callback [, mixed $userdata = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"array_walk":{"id":"function.array-walk","purpose":"Apply a user supplied function to every member of an array","prototype":"bool array_walk(array $array, callable $callback [, mixed $userdata = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"array":{"id":"function.array","purpose":"Create an array","prototype":"array array([mixed $... = ''])","return":"<p class=\"para\">   Returns an array of the parameters.  The parameters can be given   an index with the <em>=&gt;<\/em> operator.  Read the section   on the <a href=\"language.types.array.html\" class=\"link\">array type<\/a> for more   information on what an array is.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"arsort":{"id":"function.arsort","purpose":"Sort an array in reverse order and maintain index association","prototype":"bool arsort(array $array [, int $sort_flags = SORT_REGULAR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"asort":{"id":"function.asort","purpose":"Sort an array and maintain index association","prototype":"bool asort(array $array [, int $sort_flags = SORT_REGULAR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"compact":{"id":"function.compact","purpose":"Create array containing variables and their values","prototype":"array compact(mixed $varname1 [, mixed $... = ''])","return":"<p class=\"para\">   Returns the output array with all the variables added to it.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"count":{"id":"function.count","purpose":"Count all elements in an array, or something in an object","prototype":"int count(mixed $array_or_countable [, int $mode = COUNT_NORMAL])","return":"<p class=\"para\">   Returns the number of elements in <code class=\"parameter\">array_or_countable<\/code>.   When the parameter is neither an array nor an object with   implemented <span class=\"classname\">Countable<\/span> interface,   <em>1<\/em> will be returned.   There is one exception, if <code class=\"parameter\">array_or_countable<\/code> is <strong><code>NULL<\/code><\/strong>,   <em>0<\/em> will be returned.  <\/p>  <div class=\"caution\"><strong class=\"caution\">Caution<\/strong>   <p class=\"para\">    <span class=\"function\">count<\/span> may return 0 for a variable that isn&#039;t set,    but it may also return 0 for a variable that has been initialized with an    empty array. Use <span class=\"function\">isset<\/span> to test if a variable is set.   <\/p>  <\/div>","versions":"PHP 4, PHP 5, PHP 7"},"current":{"id":"function.current","purpose":"Return the current element in an array","prototype":"mixed current(array $array)","return":"<p class=\"para\">   The <span class=\"function\">current<\/span> function simply returns the   value of the array element that&#039;s currently being pointed to by the   internal pointer.  It does not move the pointer in any way.  If the   internal pointer points beyond the end of the elements list or the array is    empty, <span class=\"function\">current<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"each":{"id":"function.each","purpose":"Return the current key and value pair from an array and advance the array cursor","prototype":"array each(array $array)","return":"<p class=\"para\">   Returns the current key and value pair from the array   <code class=\"parameter\">array<\/code>. This pair is returned in a four-element   array, with the keys <em>0<\/em>, <em>1<\/em>,   <em>key<\/em>, and <em>value<\/em>. Elements   <em>0<\/em> and <em>key<\/em> contain the key name of   the array element, and <em>1<\/em> and <em>value<\/em>   contain the data.  <\/p>  <p class=\"para\">   If the internal pointer for the array points past the end of the   array contents, <span class=\"function\">each<\/span> returns   <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"end":{"id":"function.end","purpose":"Set the internal pointer of an array to its last element","prototype":"mixed end(array $array)","return":"<p class=\"para\">   Returns the value of the last element or <strong><code>FALSE<\/code><\/strong> for empty array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"extract":{"id":"function.extract","purpose":"Import variables into the current symbol table from an array","prototype":"int extract(array $array [, int $flags = EXTR_OVERWRITE [, string $prefix = '']])","return":"<p class=\"para\">   Returns the number of variables successfully imported into the symbol   table.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"in_array":{"id":"function.in-array","purpose":"Checks if a value exists in an array","prototype":"bool in_array(mixed $needle, array $haystack [, bool $strict = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">needle<\/code> is found in the array,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"key_exists":{"id":"function.key-exists","purpose":"Alias of array_key_exists","prototype":" key_exists()","return":"","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"key":{"id":"function.key","purpose":"Fetch a key from an array","prototype":"mixed key(array $array)","return":"<p class=\"para\">   The <span class=\"function\">key<\/span> function simply returns the   key of the array element that&#039;s currently being pointed to by the   internal pointer.  It does not move the pointer in any way.  If the   internal pointer points beyond the end of the elements list or the array is    empty, <span class=\"function\">key<\/span> returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"krsort":{"id":"function.krsort","purpose":"Sort an array by key in reverse order","prototype":"bool krsort(array $array [, int $sort_flags = SORT_REGULAR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"ksort":{"id":"function.ksort","purpose":"Sort an array by key","prototype":"bool ksort(array $array [, int $sort_flags = SORT_REGULAR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"list":{"id":"function.list","purpose":"Assign variables as if they were an array","prototype":"array list(mixed $var1 [, mixed $... = ''])","return":"<p class=\"para\">   Returns the assigned array.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"natcasesort":{"id":"function.natcasesort","purpose":"Sort an array using a case insensitive \"natural order\" algorithm","prototype":"bool natcasesort(array $array)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"natsort":{"id":"function.natsort","purpose":"Sort an array using a \"natural order\" algorithm","prototype":"bool natsort(array $array)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"next":{"id":"function.next","purpose":"Advance the internal pointer of an array","prototype":"mixed next(array $array)","return":"<p class=\"para\">   Returns the array value in the next place that&#039;s pointed to by the   internal array pointer, or <strong><code>FALSE<\/code><\/strong> if there are no more elements.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"pos":{"id":"function.pos","purpose":"Alias of current","prototype":" pos()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"prev":{"id":"function.prev","purpose":"Rewind the internal array pointer","prototype":"mixed prev(array $array)","return":"<p class=\"para\">   Returns the array value in the previous place that&#039;s pointed to by   the internal array pointer, or <strong><code>FALSE<\/code><\/strong> if there are no more   elements.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"range":{"id":"function.range","purpose":"Create an array containing a range of elements","prototype":"array range(mixed $start, mixed $end [, number $step = 1])","return":"<p class=\"para\">   Returns an array of elements from <code class=\"parameter\">start<\/code> to   <code class=\"parameter\">end<\/code>, inclusive.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"reset":{"id":"function.reset","purpose":"Set the internal pointer of an array to its first element","prototype":"mixed reset(array $array)","return":"<p class=\"para\">   Returns the value of the first array element, or <strong><code>FALSE<\/code><\/strong> if the array is   empty.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 4, PHP 5, PHP 7"},"rsort":{"id":"function.rsort","purpose":"Sort an array in reverse order","prototype":"bool rsort(array $array [, int $sort_flags = SORT_REGULAR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"shuffle":{"id":"function.shuffle","purpose":"Shuffle an array","prototype":"bool shuffle(array $array)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"sizeof":{"id":"function.sizeof","purpose":"Alias of count","prototype":" sizeof()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"sort":{"id":"function.sort","purpose":"Sort an array","prototype":"bool sort(array $array [, int $sort_flags = SORT_REGULAR])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"uasort":{"id":"function.uasort","purpose":"Sort an array with a user-defined comparison function and maintain index association","prototype":"bool uasort(array $array, callable $value_compare_func)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"uksort":{"id":"function.uksort","purpose":"Sort an array by keys using a user-defined comparison function","prototype":"bool uksort(array $array, callable $key_compare_func)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"usort":{"id":"function.usort","purpose":"Sort an array by values using a user-defined comparison function","prototype":"bool usort(array $array, callable $value_compare_func)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"__autoload":{"id":"function.autoload","purpose":"Attempt to load undefined class","prototype":"void __autoload(string $class)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"call_user_method_array":{"id":"function.call-user-method-array","purpose":"Call a user method given with an array of parameters","prototype":"mixed call_user_method_array(string $method_name, object $obj, array $params)","return":"","versions":"PHP 4 >= 4.0.5, PHP 5"},"call_user_method":{"id":"function.call-user-method","purpose":"Call a user method on an specific object","prototype":"mixed call_user_method(string $method_name, object $obj [, mixed $parameter = '' [, mixed $... = '']])","return":"","versions":"PHP 4, PHP 5"},"class_alias":{"id":"function.class-alias","purpose":"Creates an alias for a class","prototype":"bool class_alias(string $original, string $alias [, bool $autoload = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"class_exists":{"id":"function.class-exists","purpose":"Checks if the class has been defined","prototype":"bool class_exists(string $class_name [, bool $autoload = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">class_name<\/code> is a defined class,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_called_class":{"id":"function.get-called-class","purpose":"The \"Late Static Binding\" class name","prototype":"string get_called_class()","return":"<p class=\"para\">   Returns the class name.  Returns <strong><code>FALSE<\/code><\/strong> if called from outside a class.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"get_class_methods":{"id":"function.get-class-methods","purpose":"Gets the class methods' names","prototype":"array get_class_methods(mixed $class_name)","return":"<p class=\"para\">   Returns an array of method names defined for the class specified by   <code class=\"parameter\">class_name<\/code>. In case of an error, it returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_class_vars":{"id":"function.get-class-vars","purpose":"Get the default properties of the class","prototype":"array get_class_vars(string $class_name)","return":"<p class=\"para\">   Returns an associative array of declared properties visible from the   current scope, with their default value.   The resulting array elements are in the form of    <em>varname =&gt; value<\/em>.   In case of an error, it returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_class":{"id":"function.get-class","purpose":"Returns the name of the class of an object","prototype":"string get_class([object $object = ''])","return":"<p class=\"para\">   Returns the name of the class of which <code class=\"parameter\">object<\/code> is an   instance. Returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">object<\/code> is not an    object.  <\/p>  <p class=\"para\">   If <code class=\"parameter\">object<\/code> is omitted when inside a class, the   name of that class is returned.  <\/p>  <p class=\"para\">   If the <code class=\"parameter\">object<\/code> is an instance of a class which exists    in a namespace, the qualified namespaced name of that class is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_declared_classes":{"id":"function.get-declared-classes","purpose":"Returns an array with the name of the defined classes","prototype":"array get_declared_classes()","return":"<p class=\"para\">   Returns an array of the names of the declared classes in the current   script.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Note that depending on what extensions you have compiled or    loaded into PHP, additional classes could be present. This means that    you will not be able to define your own classes using these    names. There is a list of predefined classes in the <a href=\"reserved.classes.html\" class=\"link\">Predefined Classes<\/a> section of    the appendices.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"get_declared_interfaces":{"id":"function.get-declared-interfaces","purpose":"Returns an array of all declared interfaces","prototype":"array get_declared_interfaces()","return":"<p class=\"para\">   Returns an array of the names of the declared interfaces in the current   script.  <\/p>","versions":"PHP 5, PHP 7"},"get_declared_traits":{"id":"function.get-declared-traits","purpose":"Returns an array of all declared traits","prototype":"array get_declared_traits()","return":"<p class=\"para\">   Returns an array with names of all declared traits in values.   Returns <strong><code>NULL<\/code><\/strong> in case of a failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"get_object_vars":{"id":"function.get-object-vars","purpose":"Gets the properties of the given object","prototype":"array get_object_vars(object $object)","return":"<p class=\"para\">   Returns an associative array of defined object accessible non-static properties    for the specified <code class=\"parameter\">object<\/code> in scope. If a property has   not been assigned a value, it will be returned with a <strong><code>NULL<\/code><\/strong> value.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"get_parent_class":{"id":"function.get-parent-class","purpose":"Retrieves the parent class name for object or class","prototype":"string get_parent_class([mixed $object = ''])","return":"<p class=\"para\">   Returns the name of the parent class of the class of which   <code class=\"parameter\">object<\/code> is an instance or the name.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    If the object does not have a parent or the class given does not exist <strong><code>FALSE<\/code><\/strong> will be returned.   <\/p>  <\/p><\/blockquote>  <p class=\"para\">   If called without parameter outside object, this function returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"interface_exists":{"id":"function.interface-exists","purpose":"Checks if the interface has been defined","prototype":"bool interface_exists(string $interface_name [, bool $autoload = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the interface given by    <code class=\"parameter\">interface_name<\/code> has been defined, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.0.2, PHP 7"},"is_a":{"id":"function.is-a","purpose":"Checks if the object is of this class or has this class as one of its parents","prototype":"bool is_a(object $object, string $class_name [, bool $allow_string = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the object is of this class or has this class as one of   its parents, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"is_subclass_of":{"id":"function.is-subclass-of","purpose":"Checks if the object has this class as one of its parents or implements it","prototype":"bool is_subclass_of(mixed $object, string $class_name [, bool $allow_string = ''])","return":"<p class=\"para\">   This function returns <strong><code>TRUE<\/code><\/strong> if the object <code class=\"parameter\">object<\/code>,   belongs to a class which is a subclass of   <code class=\"parameter\">class_name<\/code>, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"method_exists":{"id":"function.method-exists","purpose":"Checks if the class method exists","prototype":"bool method_exists(mixed $object, string $method_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the method given by <code class=\"parameter\">method_name<\/code>   has been defined for the given <code class=\"parameter\">object<\/code>, <strong><code>FALSE<\/code><\/strong>    otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"property_exists":{"id":"function.property-exists","purpose":"Checks if the object or class has a property","prototype":"bool property_exists(mixed $class, string $property)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the property exists, <strong><code>FALSE<\/code><\/strong> if it doesn&#039;t exist or   <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"trait_exists":{"id":"function.trait-exists","purpose":"Checks if the trait exists","prototype":"bool trait_exists(string $traitname [, bool $autoload = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if trait exists, <strong><code>FALSE<\/code><\/strong> if not, <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"classkit_import":{"id":"function.classkit-import","purpose":"Import new class method definitions from a file","prototype":"array classkit_import(string $filename)","return":"<p class=\"para\">   Associative array of imported methods  <\/p>","versions":"PECL classkit >= 0.3"},"classkit_method_add":{"id":"function.classkit-method-add","purpose":"Dynamically adds a new method to a given class","prototype":"bool classkit_method_add(string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL classkit >= 0.1"},"classkit_method_copy":{"id":"function.classkit-method-copy","purpose":"Copies a method from class to another","prototype":"bool classkit_method_copy(string $dClass, string $dMethod, string $sClass [, string $sMethod = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL classkit >= 0.2"},"classkit_method_redefine":{"id":"function.classkit-method-redefine","purpose":"Dynamically changes the code of the given method","prototype":"bool classkit_method_redefine(string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL classkit >= 0.1"},"classkit_method_remove":{"id":"function.classkit-method-remove","purpose":"Dynamically removes the given method","prototype":"bool classkit_method_remove(string $classname, string $methodname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL classkit >= 0.1"},"classkit_method_rename":{"id":"function.classkit-method-rename","purpose":"Dynamically changes the name of the given method","prototype":"bool classkit_method_rename(string $classname, string $methodname, string $newname)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL classkit >= 0.1"},"ctype_alnum":{"id":"function.ctype-alnum","purpose":"Check for alphanumeric character(s)","prototype":"string ctype_alnum(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is either   a letter or a digit, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_alpha":{"id":"function.ctype-alpha","purpose":"Check for alphabetic character(s)","prototype":"string ctype_alpha(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is    a letter from the current locale, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_cntrl":{"id":"function.ctype-cntrl","purpose":"Check for control character(s)","prototype":"string ctype_cntrl(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is    a control character from the current locale, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_digit":{"id":"function.ctype-digit","purpose":"Check for numeric character(s)","prototype":"string ctype_digit(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in the string   <code class=\"parameter\">text<\/code> is a decimal digit, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_graph":{"id":"function.ctype-graph","purpose":"Check for any printable character(s) except space","prototype":"string ctype_graph(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is    printable and actually creates visible output (no white space), <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_lower":{"id":"function.ctype-lower","purpose":"Check for lowercase character(s)","prototype":"string ctype_lower(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is    a lowercase letter in the current locale.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_print":{"id":"function.ctype-print","purpose":"Check for printable character(s)","prototype":"string ctype_print(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code>    will actually create output (including blanks). Returns <strong><code>FALSE<\/code><\/strong> if    <code class=\"parameter\">text<\/code> contains control characters or characters    that do not have any output or control function at all.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_punct":{"id":"function.ctype-punct","purpose":"Check for any printable character which is not whitespace or an   alphanumeric character","prototype":"string ctype_punct(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code>    is printable, but neither letter, digit or blank, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_space":{"id":"function.ctype-space","purpose":"Check for whitespace character(s)","prototype":"string ctype_space(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code>    creates some sort of white space, <strong><code>FALSE<\/code><\/strong> otherwise. Besides the    blank character this also includes tab, vertical tab, line feed,   carriage return and form feed characters.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_upper":{"id":"function.ctype-upper","purpose":"Check for uppercase character(s)","prototype":"string ctype_upper(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is    an uppercase letter in the current locale.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"ctype_xdigit":{"id":"function.ctype-xdigit","purpose":"Check for character(s) representing a hexadecimal digit","prototype":"string ctype_xdigit(string $text)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if every character in <code class=\"parameter\">text<\/code> is    a hexadecimal &#039;digit&#039;, that is a decimal digit or a character from    <em>[A-Fa-f]<\/em> , <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"filter_has_var":{"id":"function.filter-has-var","purpose":"Checks if variable of specified type exists","prototype":"bool filter_has_var(int $type, string $variable_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"filter_id":{"id":"function.filter-id","purpose":"Returns the filter ID belonging to a named filter","prototype":"int filter_id(string $filtername)","return":"<p class=\"para\">   ID of a filter on success or <strong><code>FALSE<\/code><\/strong> if filter doesn&#039;t exist.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"filter_input_array":{"id":"function.filter-input-array","purpose":"Gets external variables and optionally filters them","prototype":"mixed filter_input_array(int $type [, mixed $definition = '' [, bool $add_empty = '']])","return":"<p class=\"para\">   An array containing the values of the requested variables on success.   If the input array designated by <code class=\"parameter\">type<\/code> is not populated,   the function returns <strong><code>NULL<\/code><\/strong> if the <strong><code>FILTER_NULL_ON_FAILURE<\/code><\/strong>   flag is not given, or <strong><code>FALSE<\/code><\/strong> otherwise. For other failures, <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>  <p class=\"para\">   An array value will be <strong><code>FALSE<\/code><\/strong> if the filter fails, or <strong><code>NULL<\/code><\/strong> if    the variable is not set. Or if the flag <strong><code>FILTER_NULL_ON_FAILURE<\/code><\/strong>   is used, it returns <strong><code>FALSE<\/code><\/strong> if the variable is not set and <strong><code>NULL<\/code><\/strong> if the filter    fails. If the <code class=\"parameter\">add_empty<\/code> parameter is <strong><code>FALSE<\/code><\/strong>, no array   element will be added for unset variables.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"filter_input":{"id":"function.filter-input","purpose":"Gets a specific external variable by name and optionally filters it","prototype":"mixed filter_input(int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options = '']])","return":"<p class=\"para\">   Value of the requested variable on success, <strong><code>FALSE<\/code><\/strong> if the filter fails,   or <strong><code>NULL<\/code><\/strong> if the <code class=\"parameter\">variable_name<\/code> variable is not set.   If the flag <strong><code>FILTER_NULL_ON_FAILURE<\/code><\/strong> is used, it   returns <strong><code>FALSE<\/code><\/strong> if the variable is not set and <strong><code>NULL<\/code><\/strong> if the filter fails.   <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"filter_list":{"id":"function.filter-list","purpose":"Returns a list of all supported filters","prototype":"array filter_list()","return":"<p class=\"para\">   Returns an array of names of all supported filters, empty array if there   are no such filters. Indexes of this array are not filter IDs, they can be   obtained with <span class=\"function\">filter_id<\/span> from a name instead.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"filter_var_array":{"id":"function.filter-var-array","purpose":"Gets multiple variables and optionally filters them","prototype":"mixed filter_var_array(array $data [, mixed $definition = '' [, bool $add_empty = '']])","return":"<p class=\"para\">   An array containing the values of the requested variables on success, or <strong><code>FALSE<\/code><\/strong>    on failure. An array value will be <strong><code>FALSE<\/code><\/strong> if the filter fails, or <strong><code>NULL<\/code><\/strong> if    the variable is not set.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"filter_var":{"id":"function.filter-var","purpose":"Filters a variable with a specified filter","prototype":"mixed filter_var(mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options = '']])","return":"<p class=\"para\">   Returns the filtered data, or <strong><code>FALSE<\/code><\/strong> if the filter fails.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"call_user_func_array":{"id":"function.call-user-func-array","purpose":"Call a callback with an array of parameters","prototype":"mixed call_user_func_array(callable $callback, array $param_arr)","return":"<p class=\"para\">   Returns the return value of the callback, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"call_user_func":{"id":"function.call-user-func","purpose":"Call the callback given by the first parameter","prototype":"mixed call_user_func(callable $callback [, mixed $parameter = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns the return value of the callback.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"create_function":{"id":"function.create-function","purpose":"Create an anonymous (lambda-style) function","prototype":"string create_function(string $args, string $code)","return":"<p class=\"para\">   Returns a unique function name as a string, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4 >= 4.0.1, PHP 5, PHP 7"},"forward_static_call_array":{"id":"function.forward-static-call-array","purpose":"Call a static method and pass the arguments as array","prototype":"mixed forward_static_call_array(callable $function, array $parameters)","return":"<p class=\"para\">   Returns the function result, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"forward_static_call":{"id":"function.forward-static-call","purpose":"Call a static method","prototype":"mixed forward_static_call(callable $function [, mixed $parameter = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns the function result, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"func_get_arg":{"id":"function.func-get-arg","purpose":"Return an item from the argument list","prototype":"mixed func_get_arg(int $arg_num)","return":"<p class=\"para\">   Returns the specified argument, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"func_get_args":{"id":"function.func-get-args","purpose":"Returns an array comprising a function's argument list","prototype":"array func_get_args()","return":"<p class=\"para\">   Returns an array in which each element is a copy of the corresponding   member of the current user-defined function&#039;s argument list.   <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"func_num_args":{"id":"function.func-num-args","purpose":"Returns the number of arguments passed to the function","prototype":"int func_num_args()","return":"<p class=\"para\">   Returns the number of arguments passed into the current user-defined   function.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"function_exists":{"id":"function.function-exists","purpose":"Return TRUE if the given function has been defined","prototype":"bool function_exists(string $function_name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">function_name<\/code> exists and is a   function, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    This function will return <strong><code>FALSE<\/code><\/strong> for constructs, such as     <span class=\"function\">include_once<\/span> and <span class=\"function\">echo<\/span>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"get_defined_functions":{"id":"function.get-defined-functions","purpose":"Returns an array of all defined functions","prototype":"array get_defined_functions([bool $exclude_disabled = ''])","return":"<p class=\"para\">   Returns a multidimensional array containing a list of all defined   functions, both built-in (internal) and user-defined. The internal   functions will be accessible via <var class=\"varname\">$arr[&quot;internal&quot;]<\/var>, and   the user defined ones using <var class=\"varname\">$arr[&quot;user&quot;]<\/var> (see example   below).  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"register_shutdown_function":{"id":"function.register-shutdown-function","purpose":"Register a function for execution on shutdown","prototype":"void register_shutdown_function(callable $callback [, mixed $parameter = '' [, mixed $... = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"register_tick_function":{"id":"function.register-tick-function","purpose":"Register a function for execution on each tick","prototype":"bool register_tick_function(callable $function [, mixed $arg = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"unregister_tick_function":{"id":"function.unregister-tick-function","purpose":"De-register a function for execution on each tick","prototype":"void unregister_tick_function(string $function_name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.0.3, PHP 5, PHP 7"},"QuickHashIntSet::add":{"id":"quickhashintset.add","purpose":"This method adds a new entry to the set","prototype":"bool QuickHashIntSet::add(int $key)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was added, and <strong><code>FALSE<\/code><\/strong> if the entry was not added.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::__construct":{"id":"quickhashintset.construct","purpose":"Creates a new QuickHashIntSet object","prototype":" QuickHashIntSet::__construct(int $size [, int $options = ''])","return":"<p class=\"para\">   Returns a new QuickHashIntSet object.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::delete":{"id":"quickhashintset.delete","purpose":"This method deletes an entry from the set","prototype":"bool QuickHashIntSet::delete(int $key)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was deleted, and <strong><code>FALSE<\/code><\/strong> if the entry was not deleted.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::exists":{"id":"quickhashintset.exists","purpose":"This method checks whether a key is part of the set","prototype":"bool QuickHashIntSet::exists(int $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> when the entry was found, or <strong><code>FALSE<\/code><\/strong> when the entry is not   found.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::getSize":{"id":"quickhashintset.getsize","purpose":"Returns the number of elements in the set","prototype":"int QuickHashIntSet::getSize()","return":"<p class=\"para\">   The number of elements in the set.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::loadFromFile":{"id":"quickhashintset.loadfromfile","purpose":"This factory method creates a set from a file","prototype":"QuickHashIntSet QuickHashIntSet::loadFromFile(string $filename [, int $size = '' [, int $options = '']])","return":"<p class=\"para\">   Returns a new QuickHashIntSet.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::loadFromString":{"id":"quickhashintset.loadfromstring","purpose":"This factory method creates a set from a string","prototype":"QuickHashIntSet QuickHashIntSet::loadFromString(string $contents [, int $size = '' [, int $options = '']])","return":"<p class=\"para\">   Returns a new QuickHashIntSet.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::saveToFile":{"id":"quickhashintset.savetofile","purpose":"This method stores an in-memory set to disk","prototype":"void QuickHashIntSet::saveToFile(string $filename)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntSet::saveToString":{"id":"quickhashintset.savetostring","purpose":"This method returns a serialized version of the set","prototype":"string QuickHashIntSet::saveToString()","return":"<p class=\"para\">   This method returns a string containing a serialized format of the set.   Each element is stored as a four byte value in the Endianness that the   current system uses.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::add":{"id":"quickhashinthash.add","purpose":"This method adds a new entry to the hash","prototype":"bool QuickHashIntHash::add(int $key [, int $value = ''])","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was added, and <strong><code>FALSE<\/code><\/strong> if the entry was not added.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::__construct":{"id":"quickhashinthash.construct","purpose":"Creates a new QuickHashIntHash object","prototype":" QuickHashIntHash::__construct(int $size [, int $options = ''])","return":"<p class=\"para\">   Returns a new QuickHashIntHash object.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::delete":{"id":"quickhashinthash.delete","purpose":"This method deletes am entry from the hash","prototype":"bool QuickHashIntHash::delete(int $key)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was deleted, and <strong><code>FALSE<\/code><\/strong> if the entry was not deleted.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::exists":{"id":"quickhashinthash.exists","purpose":"This method checks whether a key is part of the hash","prototype":"bool QuickHashIntHash::exists(int $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> when the entry was found, or <strong><code>FALSE<\/code><\/strong> when the entry is not   found.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::get":{"id":"quickhashinthash.get","purpose":"This method retrieves a value from the hash by its key","prototype":"int QuickHashIntHash::get(int $key)","return":"<p class=\"para\">   The value if the key exists, or <strong><code>NULL<\/code><\/strong> if the key wasn&#039;t part of the hash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::getSize":{"id":"quickhashinthash.getsize","purpose":"Returns the number of elements in the hash","prototype":"int QuickHashIntHash::getSize()","return":"<p class=\"para\">   The number of elements in the hash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::loadFromFile":{"id":"quickhashinthash.loadfromfile","purpose":"This factory method creates a hash from a file","prototype":"QuickHashIntHash QuickHashIntHash::loadFromFile(string $filename [, int $options = ''])","return":"<p class=\"para\">   Returns a new QuickHashIntHash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::loadFromString":{"id":"quickhashinthash.loadfromstring","purpose":"This factory method creates a hash from a string","prototype":"QuickHashIntHash QuickHashIntHash::loadFromString(string $contents [, int $options = ''])","return":"<p class=\"para\">   Returns a new QuickHashIntHash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::saveToFile":{"id":"quickhashinthash.savetofile","purpose":"This method stores an in-memory hash to disk","prototype":"void QuickHashIntHash::saveToFile(string $filename)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::saveToString":{"id":"quickhashinthash.savetostring","purpose":"This method returns a serialized version of the hash","prototype":"string QuickHashIntHash::saveToString()","return":"<p class=\"para\">   This method returns a string containing a serialized format of the hash.   Each element is stored as a four byte value in the Endianness that the   current system uses.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::set":{"id":"quickhashinthash.set","purpose":"This method updates an entry in the hash with a new value, or  adds a new one if the entry doesn't exist","prototype":"bool QuickHashIntHash::set(int $key, int $value)","return":"<p class=\"para\">   2 if the entry was found and updated, 1 if the entry was newly added or 0   if there was an error.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntHash::update":{"id":"quickhashinthash.update","purpose":"This method updates an entry in the hash with a new value","prototype":"bool QuickHashIntHash::update(int $key, int $value)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was found and updated, and <strong><code>FALSE<\/code><\/strong> if the entry was   not part of the hash already.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashStringIntHash::add":{"id":"quickhashstringinthash.add","purpose":"This method adds a new entry to the hash","prototype":"bool QuickHashStringIntHash::add(string $key, int $value)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was added, and <strong><code>FALSE<\/code><\/strong> if the entry was not added.  <\/p>","versions":""},"QuickHashStringIntHash::__construct":{"id":"quickhashstringinthash.construct","purpose":"Creates a new QuickHashStringIntHash object","prototype":" QuickHashStringIntHash::__construct(int $size [, int $options = ''])","return":"<p class=\"para\">   Returns a new QuickHashStringIntHash object.  <\/p>","versions":""},"QuickHashStringIntHash::delete":{"id":"quickhashstringinthash.delete","purpose":"This method deletes am entry from the hash","prototype":"bool QuickHashStringIntHash::delete(string $key)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was deleted, and <strong><code>FALSE<\/code><\/strong> if the entry was not deleted.  <\/p>","versions":""},"QuickHashStringIntHash::exists":{"id":"quickhashstringinthash.exists","purpose":"This method checks whether a key is part of the hash","prototype":"bool QuickHashStringIntHash::exists(string $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> when the entry was found, or <strong><code>FALSE<\/code><\/strong> when the entry is not   found.  <\/p>","versions":""},"QuickHashStringIntHash::get":{"id":"quickhashstringinthash.get","purpose":"This method retrieves a value from the hash by its key","prototype":"mixed QuickHashStringIntHash::get(string $key)","return":"<p class=\"para\">   The value if the key exists, or <strong><code>NULL<\/code><\/strong> if the key wasn&#039;t part of the hash.  <\/p>","versions":""},"QuickHashStringIntHash::getSize":{"id":"quickhashstringinthash.getsize","purpose":"Returns the number of elements in the hash","prototype":"int QuickHashStringIntHash::getSize()","return":"<p class=\"para\">   The number of elements in the hash.  <\/p>","versions":""},"QuickHashStringIntHash::loadFromFile":{"id":"quickhashstringinthash.loadfromfile","purpose":"This factory method creates a hash from a file","prototype":"QuickHashStringIntHash QuickHashStringIntHash::loadFromFile(string $filename [, int $size = '' [, int $options = '']])","return":"<p class=\"para\">   Returns a new QuickHashStringIntHash.  <\/p>","versions":""},"QuickHashStringIntHash::loadFromString":{"id":"quickhashstringinthash.loadfromstring","purpose":"This factory method creates a hash from a string","prototype":"QuickHashStringIntHash QuickHashStringIntHash::loadFromString(string $contents [, int $size = '' [, int $options = '']])","return":"<p class=\"para\">   Returns a new QuickHashStringIntHash.  <\/p>","versions":""},"QuickHashStringIntHash::saveToFile":{"id":"quickhashstringinthash.savetofile","purpose":"This method stores an in-memory hash to disk","prototype":"void QuickHashStringIntHash::saveToFile(string $filename)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":""},"QuickHashStringIntHash::saveToString":{"id":"quickhashstringinthash.savetostring","purpose":"This method returns a serialized version of the hash","prototype":"string QuickHashStringIntHash::saveToString()","return":"<p class=\"para\">   This method returns a serialized format of an existing hash, in the same format   that loadFromString() can read.  <\/p>","versions":""},"QuickHashStringIntHash::set":{"id":"quickhashstringinthash.set","purpose":"This method updates an entry in the hash with a new value, or  adds a new one if the entry doesn't exist","prototype":"int QuickHashStringIntHash::set(string $key, int $value)","return":"<p class=\"para\">   2 if the entry was found and updated, 1 if the entry was newly added or 0   if there was an error.  <\/p>","versions":""},"QuickHashStringIntHash::update":{"id":"quickhashstringinthash.update","purpose":"This method updates an entry in the hash with a new value","prototype":"bool QuickHashStringIntHash::update(string $key, int $value)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was found and updated, and <strong><code>FALSE<\/code><\/strong> if the entry was   not part of the hash already.  <\/p>","versions":""},"QuickHashIntStringHash::add":{"id":"quickhashintstringhash.add","purpose":"This method adds a new entry to the hash","prototype":"bool QuickHashIntStringHash::add(int $key, string $value)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was added, and <strong><code>FALSE<\/code><\/strong> if the entry was not added.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::__construct":{"id":"quickhashintstringhash.construct","purpose":"Creates a new QuickHashIntStringHash object","prototype":" QuickHashIntStringHash::__construct(int $size [, int $options = ''])","return":"<p class=\"para\">   Returns a new QuickHashIntStringHash object.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::delete":{"id":"quickhashintstringhash.delete","purpose":"This method deletes am entry from the hash","prototype":"bool QuickHashIntStringHash::delete(int $key)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was deleted, and <strong><code>FALSE<\/code><\/strong> if the entry was not deleted.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::exists":{"id":"quickhashintstringhash.exists","purpose":"This method checks whether a key is part of the hash","prototype":"bool QuickHashIntStringHash::exists(int $key)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> when the entry was found, or <strong><code>FALSE<\/code><\/strong> when the entry is not   found.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::get":{"id":"quickhashintstringhash.get","purpose":"This method retrieves a value from the hash by its key","prototype":"mixed QuickHashIntStringHash::get(int $key)","return":"<p class=\"para\">   The value if the key exists, or <strong><code>NULL<\/code><\/strong> if the key wasn&#039;t part of the hash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::getSize":{"id":"quickhashintstringhash.getsize","purpose":"Returns the number of elements in the hash","prototype":"int QuickHashIntStringHash::getSize()","return":"<p class=\"para\">   The number of elements in the hash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::loadFromFile":{"id":"quickhashintstringhash.loadfromfile","purpose":"This factory method creates a hash from a file","prototype":"QuickHashIntStringHash QuickHashIntStringHash::loadFromFile(string $filename [, int $size = '' [, int $options = '']])","return":"<p class=\"para\">   Returns a new QuickHashIntStringHash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::loadFromString":{"id":"quickhashintstringhash.loadfromstring","purpose":"This factory method creates a hash from a string","prototype":"QuickHashIntStringHash QuickHashIntStringHash::loadFromString(string $contents [, int $size = '' [, int $options = '']])","return":"<p class=\"para\">   Returns a new QuickHashIntStringHash.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::saveToFile":{"id":"quickhashintstringhash.savetofile","purpose":"This method stores an in-memory hash to disk","prototype":"void QuickHashIntStringHash::saveToFile(string $filename)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::saveToString":{"id":"quickhashintstringhash.savetostring","purpose":"This method returns a serialized version of the hash","prototype":"string QuickHashIntStringHash::saveToString()","return":"<p class=\"para\">   This method returns a string containing a serialized format of the hash.   Each element is stored as a four byte value in the Endianness that the   current system uses.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::set":{"id":"quickhashintstringhash.set","purpose":"This method updates an entry in the hash with a new value, or  adds a new one if the entry doesn't exist","prototype":"int QuickHashIntStringHash::set(int $key, string $value)","return":"<p class=\"para\">   2 if the entry was found and updated, 1 if the entry was newly added or 0   if there was an error.  <\/p>","versions":"PECL quickhash >= Unknown"},"QuickHashIntStringHash::update":{"id":"quickhashintstringhash.update","purpose":"This method updates an entry in the hash with a new value","prototype":"bool QuickHashIntStringHash::update(int $key, string $value)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> when the entry was found and updated, and <strong><code>FALSE<\/code><\/strong> if the entry was   not part of the hash already.  <\/p>","versions":"PECL quickhash >= Unknown"},"Reflection::export":{"id":"reflection.export","purpose":"Exports","prototype":"string Reflection::export(Reflector $reflector [, bool $return = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">return<\/code> parameteris set to <strong><code>TRUE<\/code><\/strong>, then the export is returned as a <span class=\"type\">string<\/span>,otherwise <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"Reflection::getModifierNames":{"id":"reflection.getmodifiernames","purpose":"Gets modifier names","prototype":"array Reflection::getModifierNames(int $modifiers)","return":"<p class=\"para\">   An array of modifier names.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::__construct":{"id":"reflectionclass.construct","purpose":"Constructs a ReflectionClass","prototype":" ReflectionClass::__construct(mixed $argument)","return":"<p class=\"para\">   Returns constructed <span class=\"classname\">ReflectionClass<\/span> instance.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::export":{"id":"reflectionclass.export","purpose":"Exports a class","prototype":"string ReflectionClass::export(mixed $argument [, bool $return = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">return<\/code> parameteris set to <strong><code>TRUE<\/code><\/strong>, then the export is returned as a <span class=\"type\">string<\/span>,otherwise <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getConstant":{"id":"reflectionclass.getconstant","purpose":"Gets defined constant","prototype":"mixed ReflectionClass::getConstant(string $name)","return":"<p class=\"para\">   Value of the constant.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getConstants":{"id":"reflectionclass.getconstants","purpose":"Gets constants","prototype":"array ReflectionClass::getConstants()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of constants, where the keys hold the name   and the values the value of the constants.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getConstructor":{"id":"reflectionclass.getconstructor","purpose":"Gets the constructor of the class","prototype":"ReflectionMethod ReflectionClass::getConstructor()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionMethod<\/span> object reflecting the class&#039; constructor, or <strong><code>NULL<\/code><\/strong> if the class   has no constructor.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getDefaultProperties":{"id":"reflectionclass.getdefaultproperties","purpose":"Gets default properties","prototype":"array ReflectionClass::getDefaultProperties()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of default properties, with the key being the name of   the property and the value being the default value of the property or <strong><code>NULL<\/code><\/strong>   if the property doesn&#039;t have a default value. The function does not distinguish   between static and non static properties and does not take visibility modifiers   into account.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getDocComment":{"id":"reflectionclass.getdoccomment","purpose":"Gets doc comments","prototype":"string ReflectionClass::getDocComment()","return":"<p class=\"para\">   The doc comment if it exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getEndLine":{"id":"reflectionclass.getendline","purpose":"Gets end line","prototype":"int ReflectionClass::getEndLine()","return":"<p class=\"para\">   The ending line number of the user defined class, or <strong><code>FALSE<\/code><\/strong> if unknown.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getExtension":{"id":"reflectionclass.getextension","purpose":"Gets a ReflectionExtension object for the extension which defined the class","prototype":"ReflectionExtension ReflectionClass::getExtension()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionExtension<\/span> object representing the extension which defined the class,   or <strong><code>NULL<\/code><\/strong> for user-defined classes.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getExtensionName":{"id":"reflectionclass.getextensionname","purpose":"Gets the name of the extension which defined the class","prototype":"string ReflectionClass::getExtensionName()","return":"<p class=\"para\">   The name of the extension which defined the class, or <strong><code>FALSE<\/code><\/strong> for user-defined classes.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getFileName":{"id":"reflectionclass.getfilename","purpose":"Gets the filename of the file in which the class has been defined","prototype":"string ReflectionClass::getFileName()","return":"<p class=\"para\">   Returns the filename of the file in which the class has been defined.   If the class is defined in the PHP core or in a PHP extension, <strong><code>FALSE<\/code><\/strong>   is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getInterfaceNames":{"id":"reflectionclass.getinterfacenames","purpose":"Gets the interface names","prototype":"array ReflectionClass::getInterfaceNames()","return":"<p class=\"para\">   A numerical array with interface names as the values.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionClass::getInterfaces":{"id":"reflectionclass.getinterfaces","purpose":"Gets the interfaces","prototype":"array ReflectionClass::getInterfaces()","return":"<p class=\"para\">   An associative <span class=\"type\">array<\/span> of interfaces, with keys as interface   names and the array values as <span class=\"classname\">ReflectionClass<\/span> objects.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getMethod":{"id":"reflectionclass.getmethod","purpose":"Gets a ReflectionMethod for a class method","prototype":"ReflectionMethod ReflectionClass::getMethod(string $name)","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionMethod<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getMethods":{"id":"reflectionclass.getmethods","purpose":"Gets an array of methods","prototype":"array ReflectionClass::getMethods([int $filter = ''])","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of <span class=\"classname\">ReflectionMethod<\/span> objects   reflecting each method.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getModifiers":{"id":"reflectionclass.getmodifiers","purpose":"Gets the class modifiers","prototype":"int ReflectionClass::getModifiers()","return":"<p class=\"para\">   Returns bitmask of <a href=\"class.reflectionclass.html#reflectionclass.constants.modifiers\" class=\"link\">   modifier constants<\/a>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getName":{"id":"reflectionclass.getname","purpose":"Gets class name","prototype":"string ReflectionClass::getName()","return":"<p class=\"para\">   The class name.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getNamespaceName":{"id":"reflectionclass.getnamespacename","purpose":"Gets namespace name","prototype":"string ReflectionClass::getNamespaceName()","return":"<p class=\"para\">   The namespace name.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionClass::getParentClass":{"id":"reflectionclass.getparentclass","purpose":"Gets parent class","prototype":"ReflectionClass ReflectionClass::getParentClass()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClass<\/span> or <strong><code>FALSE<\/code><\/strong> if there&#039;s no parent.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getProperties":{"id":"reflectionclass.getproperties","purpose":"Gets properties","prototype":"array ReflectionClass::getProperties([int $filter = ''])","return":"<p class=\"para\">   An array of <span class=\"classname\">ReflectionProperty<\/span> objects.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getProperty":{"id":"reflectionclass.getproperty","purpose":"Gets a ReflectionProperty for a class's property","prototype":"ReflectionProperty ReflectionClass::getProperty(string $name)","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionProperty<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getReflectionConstant":{"id":"reflectionclass.getreflectionconstant","purpose":"Gets a ReflectionClassConstant for a class's constant","prototype":"ReflectionClassConstant ReflectionClass::getReflectionConstant(string $name)","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClassConstant<\/span>.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClass::getReflectionConstants":{"id":"reflectionclass.getreflectionconstants","purpose":"Gets class constants","prototype":"array ReflectionClass::getReflectionConstants()","return":"<p class=\"para\">   An array of <span class=\"classname\">ReflectionClassConstant<\/span> objects.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClass::getShortName":{"id":"reflectionclass.getshortname","purpose":"Gets short name","prototype":"string ReflectionClass::getShortName()","return":"<p class=\"para\">   The class short name.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionClass::getStartLine":{"id":"reflectionclass.getstartline","purpose":"Gets starting line number","prototype":"int ReflectionClass::getStartLine()","return":"<p class=\"para\">   The starting line number, as an <span class=\"type\">integer<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getStaticProperties":{"id":"reflectionclass.getstaticproperties","purpose":"Gets static properties","prototype":"array ReflectionClass::getStaticProperties()","return":"<p class=\"para\">   The static properties, as an <span class=\"type\">array<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::getStaticPropertyValue":{"id":"reflectionclass.getstaticpropertyvalue","purpose":"Gets static property value","prototype":"mixed ReflectionClass::getStaticPropertyValue(string $name [, mixed $def_value = ''])","return":"<p class=\"para\">   The value of the static property.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionClass::getTraitAliases":{"id":"reflectionclass.gettraitaliases","purpose":"Returns an array of trait aliases","prototype":"array ReflectionClass::getTraitAliases()","return":"<p class=\"para\">   Returns an array with new method names in keys and original names (in the   format <em>&quot;TraitName::original&quot;<\/em>) in values.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionClass::getTraitNames":{"id":"reflectionclass.gettraitnames","purpose":"Returns an array of names of traits used by this class","prototype":"array ReflectionClass::getTraitNames()","return":"<p class=\"para\">   Returns an array with trait names in values.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionClass::getTraits":{"id":"reflectionclass.gettraits","purpose":"Returns an array of traits used by this class","prototype":"array ReflectionClass::getTraits()","return":"<p class=\"para\">   Returns an array with trait names in keys and instances of trait&#039;s   <span class=\"classname\">ReflectionClass<\/span> in values.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionClass::hasConstant":{"id":"reflectionclass.hasconstant","purpose":"Checks if constant is defined","prototype":"bool ReflectionClass::hasConstant(string $name)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the constant is defined, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionClass::hasMethod":{"id":"reflectionclass.hasmethod","purpose":"Checks if method is defined","prototype":"bool ReflectionClass::hasMethod(string $name)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it has the method, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionClass::hasProperty":{"id":"reflectionclass.hasproperty","purpose":"Checks if property is defined","prototype":"bool ReflectionClass::hasProperty(string $name)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it has the property, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionClass::implementsInterface":{"id":"reflectionclass.implementsinterface","purpose":"Implements interface","prototype":"bool ReflectionClass::implementsInterface(string $interface)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::inNamespace":{"id":"reflectionclass.innamespace","purpose":"Checks if in namespace","prototype":"bool ReflectionClass::inNamespace()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionClass::isAbstract":{"id":"reflectionclass.isabstract","purpose":"Checks if class is abstract","prototype":"bool ReflectionClass::isAbstract()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isAnonymous":{"id":"reflectionclass.isanonymous","purpose":"Checks if class is anonymous","prototype":"bool ReflectionClass::isAnonymous()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 7"},"ReflectionClass::isCloneable":{"id":"reflectionclass.iscloneable","purpose":"Returns whether this class is cloneable","prototype":"bool ReflectionClass::isCloneable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the class is cloneable, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionClass::isFinal":{"id":"reflectionclass.isfinal","purpose":"Checks if class is final","prototype":"bool ReflectionClass::isFinal()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isInstance":{"id":"reflectionclass.isinstance","purpose":"Checks class for instance","prototype":"bool ReflectionClass::isInstance(object $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isInstantiable":{"id":"reflectionclass.isinstantiable","purpose":"Checks if the class is instantiable","prototype":"bool ReflectionClass::isInstantiable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isInterface":{"id":"reflectionclass.isinterface","purpose":"Checks if the class is an interface","prototype":"bool ReflectionClass::isInterface()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isInternal":{"id":"reflectionclass.isinternal","purpose":"Checks if class is defined internally by an extension, or the core","prototype":"bool ReflectionClass::isInternal()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isIterable":{"id":"reflectionclass.isiterable","purpose":"Check whether this class is iterable","prototype":"bool ReflectionClass::isIterable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this class is iterable (can be used inside <a href=\"control-structures.foreach.html\" class=\"link\">foreach<\/a>),   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7 >= 7.2.0"},"ReflectionClass::isIterateable":{"id":"reflectionclass.isiterateable","purpose":"Checks if iterateable","prototype":"bool ReflectionClass::isIterateable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isSubclassOf":{"id":"reflectionclass.issubclassof","purpose":"Checks if a subclass","prototype":"bool ReflectionClass::isSubclassOf(string $class)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::isTrait":{"id":"reflectionclass.istrait","purpose":"Returns whether this is a trait","prototype":"bool ReflectionClass::isTrait()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this is a trait, <strong><code>FALSE<\/code><\/strong> otherwise.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionClass::isUserDefined":{"id":"reflectionclass.isuserdefined","purpose":"Checks if user defined","prototype":"bool ReflectionClass::isUserDefined()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::newInstance":{"id":"reflectionclass.newinstance","purpose":"Creates a new class instance from given arguments","prototype":"object ReflectionClass::newInstance(mixed $args [, mixed $... = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClass::newInstanceArgs":{"id":"reflectionclass.newinstanceargs","purpose":"Creates a new class instance from given arguments","prototype":"object ReflectionClass::newInstanceArgs([array $args = ''])","return":"<p class=\"para\">   Returns a new instance of the class.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"ReflectionClass::newInstanceWithoutConstructor":{"id":"reflectionclass.newinstancewithoutconstructor","purpose":"Creates a new class instance without invoking the constructor","prototype":"object ReflectionClass::newInstanceWithoutConstructor()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionClass::setStaticPropertyValue":{"id":"reflectionclass.setstaticpropertyvalue","purpose":"Sets static property value","prototype":"void ReflectionClass::setStaticPropertyValue(string $name, mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionClass::__toString":{"id":"reflectionclass.tostring","purpose":"Returns the string representation of the ReflectionClass object","prototype":"string ReflectionClass::__toString()","return":"<p class=\"para\">   A string representation of this <span class=\"classname\">ReflectionClass<\/span> instance.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionClassConstant::__construct":{"id":"reflectionclassconstant.construct","purpose":"Constructs a ReflectionClassConstant","prototype":" ReflectionClassConstant::__construct(mixed $class, string $name)","return":"<p class=\"para\">   Returns constructed <span class=\"classname\">ReflectionClassConstant<\/span> instance.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::export":{"id":"reflectionclassconstant.export","purpose":"Export","prototype":"string ReflectionClassConstant::export(mixed $class, string $name [, bool $return = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::getDeclaringClass":{"id":"reflectionclassconstant.getdeclaringclass","purpose":"Gets declaring class","prototype":"ReflectionClass ReflectionClassConstant::getDeclaringClass()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClass<\/span> object.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::getDocComment":{"id":"reflectionclassconstant.getdoccomment","purpose":"Gets doc comments","prototype":"string ReflectionClassConstant::getDocComment()","return":"<p class=\"para\">   The doc comment if it exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::getModifiers":{"id":"reflectionclassconstant.getmodifiers","purpose":"Gets the class constant modifiers","prototype":"int ReflectionClassConstant::getModifiers()","return":"<p class=\"para\">   A numeric representation of the modifiers.   The actual meanings of these modifiers are described in the   <a href=\"class.reflectionmethod.html#reflectionmethod.constants.modifiers\" class=\"link\">predefined constants<\/a>.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::getName":{"id":"reflectionclassconstant.getname","purpose":"Get name of the constant","prototype":"string ReflectionClassConstant::getName()","return":"<p class=\"para\">   Returns the constant&#039;s name.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::getValue":{"id":"reflectionclassconstant.getvalue","purpose":"Gets value","prototype":"mixed ReflectionClassConstant::getValue()","return":"<p class=\"para\">   The value of the class constant.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::isPrivate":{"id":"reflectionclassconstant.isprivate","purpose":"Checks if class constant is private","prototype":"bool ReflectionClassConstant::isPrivate()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the class constant is private, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::isProtected":{"id":"reflectionclassconstant.isprotected","purpose":"Checks if class constant is protected","prototype":"bool ReflectionClassConstant::isProtected()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the class constant is protected, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::isPublic":{"id":"reflectionclassconstant.ispublic","purpose":"Checks if class constant is public","prototype":"bool ReflectionClassConstant::isPublic()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the class constant is public, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionClassConstant::__toString":{"id":"reflectionclassconstant.tostring","purpose":"Returns the string representation of the ReflectionClassConstant object","prototype":"string ReflectionClassConstant::__toString()","return":"<p class=\"para\">   A string representation of this <span class=\"classname\">ReflectionClassConstant<\/span> instance.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionZendExtension::__clone":{"id":"reflectionzendextension.clone","purpose":"Clone handler","prototype":"void ReflectionZendExtension::__clone()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::__construct":{"id":"reflectionzendextension.construct","purpose":"Constructor","prototype":" ReflectionZendExtension::__construct(string $name)","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::export":{"id":"reflectionzendextension.export","purpose":"Export","prototype":"string ReflectionZendExtension::export(string $name [, bool $return = ''])","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::getAuthor":{"id":"reflectionzendextension.getauthor","purpose":"Gets author","prototype":"string ReflectionZendExtension::getAuthor()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::getCopyright":{"id":"reflectionzendextension.getcopyright","purpose":"Gets copyright","prototype":"string ReflectionZendExtension::getCopyright()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::getName":{"id":"reflectionzendextension.getname","purpose":"Gets name","prototype":"string ReflectionZendExtension::getName()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::getURL":{"id":"reflectionzendextension.geturl","purpose":"Gets URL","prototype":"string ReflectionZendExtension::getURL()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::getVersion":{"id":"reflectionzendextension.getversion","purpose":"Gets version","prototype":"string ReflectionZendExtension::getVersion()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionZendExtension::__toString":{"id":"reflectionzendextension.tostring","purpose":"To string handler","prototype":"string ReflectionZendExtension::__toString()","return":"<p class=\"para\">  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionExtension::__clone":{"id":"reflectionextension.clone","purpose":"Clones","prototype":"void ReflectionExtension::__clone()","return":"<p class=\"para\">   No value is returned, if called a fatal error will occur.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::__construct":{"id":"reflectionextension.construct","purpose":"Constructs a ReflectionExtension","prototype":"object ReflectionExtension::__construct(string $name)","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionExtension<\/span> <span class=\"type\">object<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::export":{"id":"reflectionextension.export","purpose":"Export","prototype":"string ReflectionExtension::export(string $name [, string $return = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">return<\/code> parameteris set to <strong><code>TRUE<\/code><\/strong>, then the export is returned as a <span class=\"type\">string<\/span>,otherwise <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getClasses":{"id":"reflectionextension.getclasses","purpose":"Gets classes","prototype":"array ReflectionExtension::getClasses()","return":"<p class=\"para\">   An array of <span class=\"classname\">ReflectionClass<\/span> objects, one   for each class within the extension. If no classes are defined,   an empty array is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getClassNames":{"id":"reflectionextension.getclassnames","purpose":"Gets class names","prototype":"array ReflectionExtension::getClassNames()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of class names, as defined in the extension.   If no classes are defined, an empty array is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getConstants":{"id":"reflectionextension.getconstants","purpose":"Gets constants","prototype":"array ReflectionExtension::getConstants()","return":"<p class=\"para\">   An associative array with constant names as keys.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getDependencies":{"id":"reflectionextension.getdependencies","purpose":"Gets dependencies","prototype":"array ReflectionExtension::getDependencies()","return":"<p class=\"para\">   An associative <span class=\"type\">array<\/span> with dependencies as keys and   either <em>Required<\/em>, <em>Optional<\/em>    or <em>Conflicts<\/em> as the values.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"ReflectionExtension::getFunctions":{"id":"reflectionextension.getfunctions","purpose":"Gets extension functions","prototype":"array ReflectionExtension::getFunctions()","return":"<p class=\"para\">   An associative array of <span class=\"classname\">ReflectionFunction<\/span> objects,    for each function defined in the extension with the keys being the function   names. If no function are defined, an empty array is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getINIEntries":{"id":"reflectionextension.getinientries","purpose":"Gets extension ini entries","prototype":"array ReflectionExtension::getINIEntries()","return":"<p class=\"para\">   An associative <span class=\"type\">array<\/span> with the ini entries as keys,   with their defined values as values.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getName":{"id":"reflectionextension.getname","purpose":"Gets extension name","prototype":"string ReflectionExtension::getName()","return":"<p class=\"para\">   The extensions name.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::getVersion":{"id":"reflectionextension.getversion","purpose":"Gets extension version","prototype":"string ReflectionExtension::getVersion()","return":"<p class=\"para\">   The version of the extension.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionExtension::info":{"id":"reflectionextension.info","purpose":"Print extension info","prototype":"void ReflectionExtension::info()","return":"<p class=\"para\">   Information about the extension.  <\/p>","versions":"PHP 5 >= 5.2.4, PHP 7"},"ReflectionExtension::isPersistent":{"id":"reflectionextension.ispersistent","purpose":"Returns whether this extension is persistent","prototype":"void ReflectionExtension::isPersistent()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> for extensions loaded by <a href=\"ini.core.html#ini.extension\" class=\"link\"><em>extension<\/em><\/a>, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionExtension::isTemporary":{"id":"reflectionextension.istemporary","purpose":"Returns whether this extension is temporary","prototype":"void ReflectionExtension::isTemporary()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> for extensions loaded by <span class=\"function\">dl<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionExtension::__toString":{"id":"reflectionextension.tostring","purpose":"To string","prototype":"string ReflectionExtension::__toString()","return":"<p class=\"para\">   Returns the exported extension as a string, in the same way as the     <span class=\"methodname\">ReflectionExtension::export<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionFunction::__construct":{"id":"reflectionfunction.construct","purpose":"Constructs a ReflectionFunction object","prototype":" ReflectionFunction::__construct(mixed $name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionFunction::export":{"id":"reflectionfunction.export","purpose":"Exports function","prototype":"string ReflectionFunction::export(string $name [, string $return = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">return<\/code> parameteris set to <strong><code>TRUE<\/code><\/strong>, then the export is returned as a <span class=\"type\">string<\/span>,otherwise <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionFunction::getClosure":{"id":"reflectionfunction.getclosure","purpose":"Returns a dynamically created closure for the function","prototype":"Closure ReflectionFunction::getClosure()","return":"<p class=\"para\">   Returns <span class=\"classname\">Closure<\/span>.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionFunction::invoke":{"id":"reflectionfunction.invoke","purpose":"Invokes function","prototype":"mixed ReflectionFunction::invoke([mixed $parameter = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns the result of the invoked function call.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionFunction::invokeArgs":{"id":"reflectionfunction.invokeargs","purpose":"Invokes function args","prototype":"mixed ReflectionFunction::invokeArgs(array $args)","return":"<p class=\"para\">   Returns the result of the invoked function  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionFunction::isDisabled":{"id":"reflectionfunction.isdisabled","purpose":"Checks if function is disabled","prototype":"bool ReflectionFunction::isDisabled()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it&#039;s disable, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunction::__toString":{"id":"reflectionfunction.tostring","purpose":"To string","prototype":"string ReflectionFunction::__toString()","return":"<p class=\"para\">   Returns  <span class=\"methodname\">ReflectionFunction::export<\/span>-like output for    the function.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionFunctionAbstract::__clone":{"id":"reflectionfunctionabstract.clone","purpose":"Clones function","prototype":"void ReflectionFunctionAbstract::__clone()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getClosureScopeClass":{"id":"reflectionfunctionabstract.getclosurescopeclass","purpose":"Returns the scope associated to the closure","prototype":"ReflectionClass ReflectionFunctionAbstract::getClosureScopeClass()","return":"<p class=\"para\">   Returns the class on success or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionFunctionAbstract::getClosureThis":{"id":"reflectionfunctionabstract.getclosurethis","purpose":"Returns this pointer bound to closure","prototype":"object ReflectionFunctionAbstract::getClosureThis()","return":"<p class=\"para\">   Returns <var class=\"varname\">$this<\/var> pointer.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionFunctionAbstract::getDocComment":{"id":"reflectionfunctionabstract.getdoccomment","purpose":"Gets doc comment","prototype":"string ReflectionFunctionAbstract::getDocComment()","return":"<p class=\"para\">   The doc comment if it exists, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ReflectionFunctionAbstract::getEndLine":{"id":"reflectionfunctionabstract.getendline","purpose":"Gets end line number","prototype":"int ReflectionFunctionAbstract::getEndLine()","return":"<p class=\"para\">   The ending line number of the user defined function, or <strong><code>FALSE<\/code><\/strong> if unknown.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getExtension":{"id":"reflectionfunctionabstract.getextension","purpose":"Gets extension info","prototype":"ReflectionExtension ReflectionFunctionAbstract::getExtension()","return":"<p class=\"para\">   The extension information, as a <span class=\"classname\">ReflectionExtension<\/span> object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getExtensionName":{"id":"reflectionfunctionabstract.getextensionname","purpose":"Gets extension name","prototype":"string ReflectionFunctionAbstract::getExtensionName()","return":"<p class=\"para\">   The extensions name.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getFileName":{"id":"reflectionfunctionabstract.getfilename","purpose":"Gets file name","prototype":"string ReflectionFunctionAbstract::getFileName()","return":"<p class=\"para\">   The file name.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getName":{"id":"reflectionfunctionabstract.getname","purpose":"Gets function name","prototype":"string ReflectionFunctionAbstract::getName()","return":"<p class=\"para\">   The name of the function.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getNamespaceName":{"id":"reflectionfunctionabstract.getnamespacename","purpose":"Gets namespace name","prototype":"string ReflectionFunctionAbstract::getNamespaceName()","return":"<p class=\"para\">   The namespace name.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionFunctionAbstract::getNumberOfParameters":{"id":"reflectionfunctionabstract.getnumberofparameters","purpose":"Gets number of parameters","prototype":"int ReflectionFunctionAbstract::getNumberOfParameters()","return":"<p class=\"para\">   The number of parameters.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionFunctionAbstract::getNumberOfRequiredParameters":{"id":"reflectionfunctionabstract.getnumberofrequiredparameters","purpose":"Gets number of required parameters","prototype":"int ReflectionFunctionAbstract::getNumberOfRequiredParameters()","return":"<p class=\"para\">   The number of required parameters.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionFunctionAbstract::getParameters":{"id":"reflectionfunctionabstract.getparameters","purpose":"Gets parameters","prototype":"ReflectionParameter ReflectionFunctionAbstract::getParameters()","return":"<p class=\"para\">   The parameters, as a <span class=\"classname\">ReflectionParameter<\/span> object.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getReturnType":{"id":"reflectionfunctionabstract.getreturntype","purpose":"Gets the specified return type of a function","prototype":"ReflectionType ReflectionFunctionAbstract::getReturnType()","return":"<p class=\"para\">   Returns a <span class=\"classname\">ReflectionType<\/span> object if a return type is   specified, <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7"},"ReflectionFunctionAbstract::getShortName":{"id":"reflectionfunctionabstract.getshortname","purpose":"Gets function short name","prototype":"string ReflectionFunctionAbstract::getShortName()","return":"<p class=\"para\">   The short name of the function.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionFunctionAbstract::getStartLine":{"id":"reflectionfunctionabstract.getstartline","purpose":"Gets starting line number","prototype":"int ReflectionFunctionAbstract::getStartLine()","return":"<p class=\"para\">   The starting line number.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::getStaticVariables":{"id":"reflectionfunctionabstract.getstaticvariables","purpose":"Gets static variables","prototype":"array ReflectionFunctionAbstract::getStaticVariables()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of static variables.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::hasReturnType":{"id":"reflectionfunctionabstract.hasreturntype","purpose":"Checks if the function has a specified return type","prototype":"bool ReflectionFunctionAbstract::hasReturnType()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the function is a specified return type, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 7"},"ReflectionFunctionAbstract::inNamespace":{"id":"reflectionfunctionabstract.innamespace","purpose":"Checks if function in namespace","prototype":"bool ReflectionFunctionAbstract::inNamespace()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it&#039;s in a namespace, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionFunctionAbstract::isClosure":{"id":"reflectionfunctionabstract.isclosure","purpose":"Checks if closure","prototype":"bool ReflectionFunctionAbstract::isClosure()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the function is a <span class=\"classname\">Closure<\/span>, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionFunctionAbstract::isDeprecated":{"id":"reflectionfunctionabstract.isdeprecated","purpose":"Checks if deprecated","prototype":"bool ReflectionFunctionAbstract::isDeprecated()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it&#039;s deprecated, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::isGenerator":{"id":"reflectionfunctionabstract.isgenerator","purpose":"Returns whether this function is a generator","prototype":"bool ReflectionFunctionAbstract::isGenerator()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the function is generator, <strong><code>FALSE<\/code><\/strong> if it is not or <strong><code>NULL<\/code><\/strong>   on failure.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"ReflectionFunctionAbstract::isInternal":{"id":"reflectionfunctionabstract.isinternal","purpose":"Checks if is internal","prototype":"bool ReflectionFunctionAbstract::isInternal()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it&#039;s internal, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::isUserDefined":{"id":"reflectionfunctionabstract.isuserdefined","purpose":"Checks if user defined","prototype":"bool ReflectionFunctionAbstract::isUserDefined()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it&#039;s user-defined, otherwise false;  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::isVariadic":{"id":"reflectionfunctionabstract.isvariadic","purpose":"Checks if the function is variadic","prototype":"bool ReflectionFunctionAbstract::isVariadic()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the function is variadic, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"ReflectionFunctionAbstract::returnsReference":{"id":"reflectionfunctionabstract.returnsreference","purpose":"Checks if returns reference","prototype":"bool ReflectionFunctionAbstract::returnsReference()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it returns a reference, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionFunctionAbstract::__toString":{"id":"reflectionfunctionabstract.tostring","purpose":"To string","prototype":"void ReflectionFunctionAbstract::__toString()","return":"<p class=\"para\">   The string.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"ReflectionMethod::__construct":{"id":"reflectionmethod.construct","purpose":"Constructs a ReflectionMethod","prototype":" ReflectionMethod::__construct(mixed $class, string $name, string $class_method)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::export":{"id":"reflectionmethod.export","purpose":"Export a reflection method","prototype":"string ReflectionMethod::export(string $class, string $name [, bool $return = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">return<\/code> parameteris set to <strong><code>TRUE<\/code><\/strong>, then the export is returned as a <span class=\"type\">string<\/span>,otherwise <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::getClosure":{"id":"reflectionmethod.getclosure","purpose":"Returns a dynamically created closure for the method","prototype":"Closure ReflectionMethod::getClosure(object $object)","return":"<p class=\"para\">   Returns <span class=\"classname\">Closure<\/span>.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionMethod::getDeclaringClass":{"id":"reflectionmethod.getdeclaringclass","purpose":"Gets declaring class for the reflected method","prototype":"ReflectionClass ReflectionMethod::getDeclaringClass()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClass<\/span> object of the class that the   reflected method is part of.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::getModifiers":{"id":"reflectionmethod.getmodifiers","purpose":"Gets the method modifiers","prototype":"int ReflectionMethod::getModifiers()","return":"<p class=\"para\">   A numeric representation of the modifiers. The modifiers are listed below.   The actual meanings of these modifiers are described in the   <a href=\"class.reflectionmethod.html#reflectionmethod.constants.modifiers\" class=\"link\">predefined constants<\/a>.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::getPrototype":{"id":"reflectionmethod.getprototype","purpose":"Gets the method prototype (if there is one)","prototype":"ReflectionMethod ReflectionMethod::getPrototype()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionMethod<\/span> instance of the method prototype.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionMethod::invoke":{"id":"reflectionmethod.invoke","purpose":"Invoke","prototype":"mixed ReflectionMethod::invoke(object $object [, mixed $parameter = '' [, mixed $... = '']])","return":"<p class=\"para\">   Returns the method result.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::invokeArgs":{"id":"reflectionmethod.invokeargs","purpose":"Invoke args","prototype":"mixed ReflectionMethod::invokeArgs(object $object, array $args)","return":"<p class=\"para\">   Returns the method result.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionMethod::isAbstract":{"id":"reflectionmethod.isabstract","purpose":"Checks if method is abstract","prototype":"bool ReflectionMethod::isAbstract()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is abstract, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isConstructor":{"id":"reflectionmethod.isconstructor","purpose":"Checks if method is a constructor","prototype":"bool ReflectionMethod::isConstructor()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is a constructor, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isDestructor":{"id":"reflectionmethod.isdestructor","purpose":"Checks if method is a destructor","prototype":"bool ReflectionMethod::isDestructor()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is a destructor, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isFinal":{"id":"reflectionmethod.isfinal","purpose":"Checks if method is final","prototype":"bool ReflectionMethod::isFinal()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is final, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isPrivate":{"id":"reflectionmethod.isprivate","purpose":"Checks if method is private","prototype":"bool ReflectionMethod::isPrivate()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is private, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isProtected":{"id":"reflectionmethod.isprotected","purpose":"Checks if method is protected","prototype":"bool ReflectionMethod::isProtected()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is protected, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isPublic":{"id":"reflectionmethod.ispublic","purpose":"Checks if method is public","prototype":"bool ReflectionMethod::isPublic()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is public, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::isStatic":{"id":"reflectionmethod.isstatic","purpose":"Checks if method is static","prototype":"bool ReflectionMethod::isStatic()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the method is static, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionMethod::setAccessible":{"id":"reflectionmethod.setaccessible","purpose":"Set method accessibility","prototype":"void ReflectionMethod::setAccessible(bool $accessible)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.2, PHP 7"},"ReflectionMethod::__toString":{"id":"reflectionmethod.tostring","purpose":"Returns the string representation of the Reflection method object","prototype":"string ReflectionMethod::__toString()","return":"<p class=\"para\">   A string representation of this <span class=\"classname\">ReflectionMethod<\/span> instance.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionNamedType::getName":{"id":"reflectionnamedtype.getname","purpose":"Get the text of the type hint","prototype":"string ReflectionNamedType::getName()","return":"<p class=\"para\">   Returns the text of the type hint.  <\/p>","versions":"PHP 7 >= 7.1.0"},"ReflectionObject::__construct":{"id":"reflectionobject.construct","purpose":"Constructs a ReflectionObject","prototype":" ReflectionObject::__construct(object $argument)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionObject::export":{"id":"reflectionobject.export","purpose":"Export","prototype":"string ReflectionObject::export(string $argument [, bool $return = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">return<\/code> parameteris set to <strong><code>TRUE<\/code><\/strong>, then the export is returned as a <span class=\"type\">string<\/span>,otherwise <strong><code>NULL<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::allowsNull":{"id":"reflectionparameter.allowsnull","purpose":"Checks if null is allowed","prototype":"bool ReflectionParameter::allowsNull()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if <strong><code>NULL<\/code><\/strong> is allowed, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::canBePassedByValue":{"id":"reflectionparameter.canbepassedbyvalue","purpose":"Returns whether this parameter can be passed by value","prototype":"bool ReflectionParameter::canBePassedByValue()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the parameter can be passed by value, <strong><code>FALSE<\/code><\/strong> otherwise.   Returns <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionParameter::__clone":{"id":"reflectionparameter.clone","purpose":"Clone","prototype":"void ReflectionParameter::__clone()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::__construct":{"id":"reflectionparameter.construct","purpose":"Construct","prototype":" ReflectionParameter::__construct(string $function, string $parameter)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::export":{"id":"reflectionparameter.export","purpose":"Exports","prototype":"string ReflectionParameter::export(string $function, string $parameter [, bool $return = ''])","return":"<p class=\"para\">   The exported reflection.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::getClass":{"id":"reflectionparameter.getclass","purpose":"Get the type hinted class","prototype":"ReflectionClass ReflectionParameter::getClass()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClass<\/span> object.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::getDeclaringClass":{"id":"reflectionparameter.getdeclaringclass","purpose":"Gets declaring class","prototype":"ReflectionClass ReflectionParameter::getDeclaringClass()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClass<\/span> object or <strong><code>NULL<\/code><\/strong> if called on function.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"ReflectionParameter::getDeclaringFunction":{"id":"reflectionparameter.getdeclaringfunction","purpose":"Gets declaring function","prototype":"ReflectionFunctionAbstract ReflectionParameter::getDeclaringFunction()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionFunction<\/span> object.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"ReflectionParameter::getDefaultValue":{"id":"reflectionparameter.getdefaultvalue","purpose":"Gets default parameter value","prototype":"mixed ReflectionParameter::getDefaultValue()","return":"<p class=\"para\">   The parameters default value.  <\/p>","versions":"PHP 5 >= 5.0.3, PHP 7"},"ReflectionParameter::getDefaultValueConstantName":{"id":"reflectionparameter.getdefaultvalueconstantname","purpose":"Returns the default value's constant name if default value is constant or null","prototype":"string ReflectionParameter::getDefaultValueConstantName()","return":"<p class=\"para\">   Returns string on success or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.6, PHP 7"},"ReflectionParameter::getName":{"id":"reflectionparameter.getname","purpose":"Gets parameter name","prototype":"string ReflectionParameter::getName()","return":"<p class=\"para\">   The name of the reflected parameter.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::getPosition":{"id":"reflectionparameter.getposition","purpose":"Gets parameter position","prototype":"int ReflectionParameter::getPosition()","return":"<p class=\"para\">   The position of the parameter, left to right, starting at position #0.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"ReflectionParameter::getType":{"id":"reflectionparameter.gettype","purpose":"Gets a parameter's type","prototype":"ReflectionType ReflectionParameter::getType()","return":"<p class=\"para\">   Returns a <span class=\"classname\">ReflectionType<\/span> object if a parameter type is   specified, <strong><code>NULL<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7"},"ReflectionParameter::hasType":{"id":"reflectionparameter.hastype","purpose":"Checks if parameter has a type","prototype":"bool ReflectionParameter::hasType()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if a type is specified, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 7"},"ReflectionParameter::isArray":{"id":"reflectionparameter.isarray","purpose":"Checks if parameter expects an array","prototype":"bool ReflectionParameter::isArray()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if an <span class=\"type\">array<\/span> is expected, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"ReflectionParameter::isCallable":{"id":"reflectionparameter.iscallable","purpose":"Returns whether parameter MUST be callable","prototype":"bool ReflectionParameter::isCallable()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the parameter is <span class=\"type\">callable<\/span>, <strong><code>FALSE<\/code><\/strong> if it is   not or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"ReflectionParameter::isDefaultValueAvailable":{"id":"reflectionparameter.isdefaultvalueavailable","purpose":"Checks if a default value is available","prototype":"bool ReflectionParameter::isDefaultValueAvailable()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if a default value is available, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.0.3, PHP 7"},"ReflectionParameter::isDefaultValueConstant":{"id":"reflectionparameter.isdefaultvalueconstant","purpose":"Returns whether the default value of this parameter is constant","prototype":"bool ReflectionParameter::isDefaultValueConstant()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the default value is constant, <strong><code>FALSE<\/code><\/strong> if it is not or   <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.6, PHP 7"},"ReflectionParameter::isOptional":{"id":"reflectionparameter.isoptional","purpose":"Checks if optional","prototype":"bool ReflectionParameter::isOptional()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the parameter is optional, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5 >= 5.0.3, PHP 7"},"ReflectionParameter::isPassedByReference":{"id":"reflectionparameter.ispassedbyreference","purpose":"Checks if passed by reference","prototype":"bool ReflectionParameter::isPassedByReference()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the parameter is passed in by reference, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionParameter::isVariadic":{"id":"reflectionparameter.isvariadic","purpose":"Checks if the parameter is variadic","prototype":"bool ReflectionParameter::isVariadic()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the parameter is variadic, otherwise <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.6.0, PHP 7"},"ReflectionParameter::__toString":{"id":"reflectionparameter.tostring","purpose":"To string","prototype":"string ReflectionParameter::__toString()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::__clone":{"id":"reflectionproperty.clone","purpose":"Clone","prototype":"void ReflectionProperty::__clone()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::__construct":{"id":"reflectionproperty.construct","purpose":"Construct a ReflectionProperty object","prototype":" ReflectionProperty::__construct(mixed $class, string $name)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::export":{"id":"reflectionproperty.export","purpose":"Export","prototype":"string ReflectionProperty::export(mixed $class, string $name [, bool $return = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::getDeclaringClass":{"id":"reflectionproperty.getdeclaringclass","purpose":"Gets declaring class","prototype":"ReflectionClass ReflectionProperty::getDeclaringClass()","return":"<p class=\"para\">   A <span class=\"classname\">ReflectionClass<\/span> object.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::getDocComment":{"id":"reflectionproperty.getdoccomment","purpose":"Gets the property doc comment","prototype":"string ReflectionProperty::getDocComment()","return":"<p class=\"para\">   The property doc comment.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"ReflectionProperty::getModifiers":{"id":"reflectionproperty.getmodifiers","purpose":"Gets the property modifiers","prototype":"int ReflectionProperty::getModifiers()","return":"<p class=\"para\">   A numeric representation of the modifiers.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::getName":{"id":"reflectionproperty.getname","purpose":"Gets property name","prototype":"string ReflectionProperty::getName()","return":"<p class=\"para\">   The name of the reflected property.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::getValue":{"id":"reflectionproperty.getvalue","purpose":"Gets value","prototype":"mixed ReflectionProperty::getValue([object $object = ''])","return":"<p class=\"para\">   The current value of the property.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::isDefault":{"id":"reflectionproperty.isdefault","purpose":"Checks if property is a default property","prototype":"bool ReflectionProperty::isDefault()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the property was declared at compile-time, or <strong><code>FALSE<\/code><\/strong> if   it was created at run-time.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::isPrivate":{"id":"reflectionproperty.isprivate","purpose":"Checks if property is private","prototype":"bool ReflectionProperty::isPrivate()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the property is private, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::isProtected":{"id":"reflectionproperty.isprotected","purpose":"Checks if property is protected","prototype":"bool ReflectionProperty::isProtected()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the property is protected, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::isPublic":{"id":"reflectionproperty.ispublic","purpose":"Checks if property is public","prototype":"bool ReflectionProperty::isPublic()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the property is public, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::isStatic":{"id":"reflectionproperty.isstatic","purpose":"Checks if property is static","prototype":"bool ReflectionProperty::isStatic()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the property is static, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::setAccessible":{"id":"reflectionproperty.setaccessible","purpose":"Set property accessibility","prototype":"void ReflectionProperty::setAccessible(bool $accessible)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"ReflectionProperty::setValue":{"id":"reflectionproperty.setvalue","purpose":"Set property value","prototype":"void ReflectionProperty::setValue(object $object, mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"ReflectionProperty::__toString":{"id":"reflectionproperty.tostring","purpose":"To string","prototype":"string ReflectionProperty::__toString()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"ReflectionType::allowsNull":{"id":"reflectiontype.allowsnull","purpose":"Checks if null is allowed","prototype":"bool ReflectionType::allowsNull()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if <strong><code>NULL<\/code><\/strong> is allowed, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 7"},"ReflectionType::isBuiltin":{"id":"reflectiontype.isbuiltin","purpose":"Checks if it is a built-in type","prototype":"bool ReflectionType::isBuiltin()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if it&#039;s a built-in type, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 7"},"ReflectionType::__toString":{"id":"reflectiontype.tostring","purpose":"To string","prototype":"string ReflectionType::__toString()","return":"<p class=\"para\">   Returns the type of the parameter.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::__construct":{"id":"reflectiongenerator.construct","purpose":"Constructs a ReflectionGenerator object","prototype":" ReflectionGenerator::__construct(Generator $generator)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::getExecutingFile":{"id":"reflectiongenerator.getexecutingfile","purpose":"Gets the file name of the currently executing generator","prototype":"string ReflectionGenerator::getExecutingFile()","return":"<p class=\"para\">   Returns the full path and file name of the currently executing generator.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::getExecutingGenerator":{"id":"reflectiongenerator.getexecutinggenerator","purpose":"Gets the executing Generator object","prototype":"Generator ReflectionGenerator::getExecutingGenerator()","return":"<p class=\"para\">   Returns the currently executing <span class=\"classname\">Generator<\/span> object.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::getExecutingLine":{"id":"reflectiongenerator.getexecutingline","purpose":"Gets the currently executing line of the generator","prototype":"int ReflectionGenerator::getExecutingLine()","return":"<p class=\"para\">   Returns the line number of the currently executing statement in the generator.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::getFunction":{"id":"reflectiongenerator.getfunction","purpose":"Gets the function name of the generator","prototype":"ReflectionFunctionAbstract ReflectionGenerator::getFunction()","return":"<p class=\"para\">   Returns a <span class=\"classname\">ReflectionFunctionAbstract<\/span> class. This will   be <span class=\"classname\">ReflectionFunction<\/span> for functions, or   <span class=\"classname\">ReflectionMethod<\/span> for methods.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::getThis":{"id":"reflectiongenerator.getthis","purpose":"Gets the $this value of the generator","prototype":"object ReflectionGenerator::getThis()","return":"<p class=\"para\">   Returns the <em>$this<\/em> value, or <strong><code>NULL<\/code><\/strong> if the generator was   not created in a class context.  <\/p>","versions":"PHP 7"},"ReflectionGenerator::getTrace":{"id":"reflectiongenerator.gettrace","purpose":"Gets the trace of the executing generator","prototype":"array ReflectionGenerator::getTrace([int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT])","return":"<p class=\"para\">   Returns the trace of the currently executing generator.  <\/p>","versions":"PHP 7"},"Reflector::export":{"id":"reflector.export","purpose":"Exports","prototype":"string Reflector::export()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"Reflector::__toString":{"id":"reflector.tostring","purpose":"To string","prototype":"string Reflector::__toString()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5, PHP 7"},"boolval":{"id":"function.boolval","purpose":"Get the boolean value of a variable","prototype":"boolean boolval(mixed $var)","return":"<p class=\"para\">   The <span class=\"type\">boolean<\/span> value of <code class=\"parameter\">var<\/code>.  <\/p>","versions":"PHP 5 >= 5.5.0, PHP 7"},"debug_zval_dump":{"id":"function.debug-zval-dump","purpose":"Dumps a string representation of an internal zend value to output","prototype":"void debug_zval_dump(mixed $variable [, mixed $... = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"doubleval":{"id":"function.doubleval","purpose":"Alias of floatval","prototype":" doubleval()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"empty":{"id":"function.empty","purpose":"Determine whether a variable is empty","prototype":"bool empty(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">var<\/code> exists and has a non-empty, non-zero value.   Otherwise returns <strong><code>TRUE<\/code><\/strong>.  <\/p>  <p class=\"para\">   The following values are considered to be empty:   <ul class=\"simplelist\">    <li class=\"member\"><em>&quot;&quot;<\/em> (an empty string)<\/li>    <li class=\"member\"><em>0<\/em> (0 as an integer)<\/li>    <li class=\"member\"><em>0.0<\/em> (0 as a float)<\/li>    <li class=\"member\"><em>&quot;0&quot;<\/em> (0 as a string)<\/li>    <li class=\"member\"><strong><code>NULL<\/code><\/strong><\/li>    <li class=\"member\"><strong><code>FALSE<\/code><\/strong><\/li>    <li class=\"member\"><em>array()<\/em> (an empty array)<\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"floatval":{"id":"function.floatval","purpose":"Get float value of a variable","prototype":"float floatval(mixed $var)","return":"<p class=\"para\">   The float value of the given variable. Empty arrays return 0, non-empty   arrays return 1.  <\/p>  <p class=\"para\">   Strings will most likely return 0 although this depends on the    leftmost characters of the string. The common rules of    <a href=\"language.types.float.html#language.types.float.casting\" class=\"link\">float casting<\/a>    apply.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"get_defined_vars":{"id":"function.get-defined-vars","purpose":"Returns an array of all defined variables","prototype":"array get_defined_vars()","return":"<p class=\"para\">   A multidimensional array with all the variables.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"get_resource_type":{"id":"function.get-resource-type","purpose":"Returns the resource type","prototype":"string get_resource_type(resource $handle)","return":"<p class=\"para\">   If the given <code class=\"parameter\">handle<\/code> is a resource, this function   will return a string representing its type. If the type is not identified   by this function, the return value will be the string    <em>Unknown<\/em>.  <\/p>  <p class=\"para\">   This function will return <strong><code>NULL<\/code><\/strong> and generate an error if    <code class=\"parameter\">handle<\/code> is not a <span class=\"type\">resource<\/span>.  <\/p>","versions":"PHP 4 >= 4.0.2, PHP 5, PHP 7"},"gettype":{"id":"function.gettype","purpose":"Get the type of a variable","prototype":"string gettype(mixed $var)","return":"<p class=\"para\">   Possible values for the returned string are:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">boolean<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">integer<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">double<\/span>&quot; (for historical reasons &quot;double&quot; is      returned in case of a <span class=\"type\">float<\/span>, and not simply      &quot;float&quot;)     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">string<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">array<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">object<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">resource<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;resource (closed)&quot; as of PHP 7.2.0     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;<span class=\"type\">NULL<\/span>&quot;     <\/span>    <\/li>    <li class=\"listitem\">     <span class=\"simpara\">      &quot;unknown type&quot;     <\/span>    <\/li>   <\/ul>  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"import_request_variables":{"id":"function.import-request-variables","purpose":"Import GET\/POST\/Cookie variables into the global scope","prototype":"bool import_request_variables(string $types [, string $prefix = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5 < 5.4.0"},"intval":{"id":"function.intval","purpose":"Get the integer value of a variable","prototype":"integer intval(mixed $var [, int $base = 10])","return":"<p class=\"para\">   The integer value of <code class=\"parameter\">var<\/code> on success, or 0 on   failure. Empty arrays return 0, non-empty arrays return 1.  <\/p>  <p class=\"para\">   The maximum value depends on the system. 32 bit systems have a    maximum signed integer range of -2147483648 to 2147483647. So for example    on such a system, <em>intval(&#039;1000000000000&#039;)<\/em> will return    2147483647. The maximum signed integer value for 64 bit systems is    9223372036854775807.  <\/p>  <p class=\"para\">   Strings will most likely return 0 although this depends on the    leftmost characters of the string. The common rules of    <a href=\"language.types.integer.html#language.types.integer.casting\" class=\"link\">integer casting<\/a>    apply.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_array":{"id":"function.is-array","purpose":"Finds whether a variable is an array","prototype":"bool is_array(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is an <span class=\"type\">array<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_bool":{"id":"function.is-bool","purpose":"Finds out whether a variable is a boolean","prototype":"bool is_bool(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is a <span class=\"type\">boolean<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_callable":{"id":"function.is-callable","purpose":"Verify that the contents of a variable can be called as a function","prototype":"bool is_callable(mixed $var [, bool $syntax_only = '' [, string $callable_name = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is callable, <strong><code>FALSE<\/code><\/strong>    otherwise.  <\/p>","versions":"PHP 4 >= 4.0.6, PHP 5, PHP 7"},"is_countable":{"id":"function.is-countable","purpose":"Verify that the contents of a variable is a countable value","prototype":"array is_countable(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is countable, <strong><code>FALSE<\/code><\/strong>    otherwise.  <\/p>","versions":"PHP 7 >= 7.3.0"},"is_double":{"id":"function.is-double","purpose":"Alias of is_float","prototype":" is_double()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"is_float":{"id":"function.is-float","purpose":"Finds whether the type of a variable is float","prototype":"bool is_float(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is a <span class=\"type\">float<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_int":{"id":"function.is-int","purpose":"Find whether the type of a variable is integer","prototype":"bool is_int(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is an <span class=\"type\">integer<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_integer":{"id":"function.is-integer","purpose":"Alias of is_int","prototype":" is_integer()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"is_iterable":{"id":"function.is-iterable","purpose":"Verify that the contents of a variable is an iterable value","prototype":"array is_iterable(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is iterable, <strong><code>FALSE<\/code><\/strong>    otherwise.  <\/p>","versions":"PHP 7 >= 7.1.0"},"is_long":{"id":"function.is-long","purpose":"Alias of is_int","prototype":" is_long()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"is_null":{"id":"function.is-null","purpose":"Finds whether a variable is NULL","prototype":"bool is_null(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is <span class=\"type\">null<\/span>, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.0.4, PHP 5, PHP 7"},"is_numeric":{"id":"function.is-numeric","purpose":"Finds whether a variable is a number or a numeric string","prototype":"bool is_numeric(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is a number or a numeric   string, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_object":{"id":"function.is-object","purpose":"Finds whether a variable is an object","prototype":"bool is_object(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is an <span class=\"type\">object<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_real":{"id":"function.is-real","purpose":"Alias of is_float","prototype":" is_real()","return":"","versions":"PHP 4, PHP 5, PHP 7"},"is_resource":{"id":"function.is-resource","purpose":"Finds whether a variable is a resource","prototype":"bool is_resource(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is a <span class=\"type\">resource<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"is_scalar":{"id":"function.is-scalar","purpose":"Finds whether a variable is a scalar","prototype":"resource is_scalar(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is a scalar, <strong><code>FALSE<\/code><\/strong>   otherwise.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"is_string":{"id":"function.is-string","purpose":"Find whether the type of a variable is string","prototype":"bool is_string(mixed $var)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> is of type <span class=\"type\">string<\/span>,   <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"isset":{"id":"function.isset","purpose":"Determine if a variable is set and is not NULL","prototype":"bool isset(mixed $var [, mixed $... = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">var<\/code> exists and has value other   than <strong><code>NULL<\/code><\/strong>. <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"print_r":{"id":"function.print-r","purpose":"Prints human-readable information about a variable","prototype":"mixed print_r(mixed $expression [, bool $return = ''])","return":"<p class=\"para\">   If given a <span class=\"type\">string<\/span>, <span class=\"type\">integer<\/span> or <span class=\"type\">float<\/span>,   the value itself will be printed.  If given an <span class=\"type\">array<\/span>, values   will be presented in a format that shows keys and elements.  Similar   notation is used for <span class=\"type\">object<\/span>s.  <\/p>  <p class=\"para\">   When the <code class=\"parameter\">return<\/code> parameter is <strong><code>TRUE<\/code><\/strong>, this function   will return a <span class=\"type\">string<\/span>. Otherwise, the return value is <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"serialize":{"id":"function.serialize","purpose":"Generates a storable representation of a value","prototype":"string serialize(mixed $value)","return":"<p class=\"para\">   Returns a string containing a byte-stream representation of    <code class=\"parameter\">value<\/code> that can be stored anywhere.  <\/p>  <p class=\"para\">   Note that this is a binary string which may include null bytes, and needs   to be stored and handled as such. For example,   <span class=\"function\">serialize<\/span> output should generally be stored in a BLOB   field in a database, rather than a CHAR or TEXT field.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"settype":{"id":"function.settype","purpose":"Set the type of a variable","prototype":"bool settype(mixed $var, string $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"strval":{"id":"function.strval","purpose":"Get string value of a variable","prototype":"string strval(mixed $var)","return":"<p class=\"para\">   The <span class=\"type\">string<\/span> value of <code class=\"parameter\">var<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"unserialize":{"id":"function.unserialize","purpose":"Creates a PHP value from a stored representation","prototype":"mixed unserialize(string $str [, array $options = ''])","return":"<p class=\"para\">   The converted value is returned, and can be a <span class=\"type\">boolean<\/span>,   <span class=\"type\">integer<\/span>, <span class=\"type\">float<\/span>, <span class=\"type\">string<\/span>,   <span class=\"type\">array<\/span> or <span class=\"type\">object<\/span>.  <\/p>  <p class=\"para\">   In case the passed string is not unserializeable, <strong><code>FALSE<\/code><\/strong> is returned and   <strong><code>E_NOTICE<\/code><\/strong> is issued.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"unset":{"id":"function.unset","purpose":"Unset a given variable","prototype":"void unset(mixed $var [, mixed $... = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"var_dump":{"id":"function.var-dump","purpose":"Dumps information about a variable","prototype":"string var_dump(mixed $expression [, mixed $... = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"var_export":{"id":"function.var-export","purpose":"Outputs or returns a parsable string representation of a variable","prototype":"mixed var_export(mixed $expression [, bool $return = ''])","return":"<p class=\"para\">   Returns the variable representation when the <code class=\"parameter\">return<\/code>    parameter is used and evaluates to <strong><code>TRUE<\/code><\/strong>. Otherwise, this function will   return <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"oauth_get_sbs":{"id":"function.oauth-get-sbs","purpose":"Generate a Signature Base String","prototype":"string oauth_get_sbs(string $http_method, string $uri [, array $request_parameters = ''])","return":"<p class=\"para\">   Returns a Signature Base String.  <\/p>","versions":"PECL OAuth >=0.99.7"},"oauth_urlencode":{"id":"function.oauth-urlencode","purpose":"Encode a URI to RFC 3986","prototype":"string oauth_urlencode(string $uri)","return":"<p class=\"para\">   Returns an <a href=\"http:\/\/www.faqs.org\/rfcs\/rfc3986\" class=\"link external\">&raquo;&nbsp;RFC 3986<\/a> encoded string.  <\/p>","versions":"PECL OAuth >=0.99.2"},"OAuth::__construct":{"id":"oauth.construct","purpose":"Create a new OAuth object","prototype":" OAuth::__construct(string $consumer_key, string $consumer_secret [, string $signature_method = '' [, int $auth_type = '']])","return":"","versions":"PECL OAuth >= 0.99.1"},"OAuth::__destruct":{"id":"oauth.destruct","purpose":"The destructor","prototype":"void OAuth::__destruct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 0.99.9"},"OAuth::disableDebug":{"id":"oauth.disabledebug","purpose":"Turn off verbose debugging","prototype":"bool OAuth::disableDebug()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.3"},"OAuth::disableRedirects":{"id":"oauth.disableredirects","purpose":"Turn off redirects","prototype":"bool OAuth::disableRedirects()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.9"},"OAuth::disableSSLChecks":{"id":"oauth.disablesslchecks","purpose":"Turn off SSL checks","prototype":"bool OAuth::disableSSLChecks()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.5"},"OAuth::enableDebug":{"id":"oauth.enabledebug","purpose":"Turn on verbose debugging","prototype":"bool OAuth::enableDebug()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.3"},"OAuth::enableRedirects":{"id":"oauth.enableredirects","purpose":"Turn on redirects","prototype":"bool OAuth::enableRedirects()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.9"},"OAuth::enableSSLChecks":{"id":"oauth.enablesslchecks","purpose":"Turn on SSL checks","prototype":"bool OAuth::enableSSLChecks()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.5"},"OAuth::fetch":{"id":"oauth.fetch","purpose":"Fetch an OAuth protected resource","prototype":"mixed OAuth::fetch(string $protected_resource_url [, array $extra_parameters = '' [, string $http_method = '' [, array $http_headers = '']]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::generateSignature":{"id":"oauth.generatesignature","purpose":"Generate a signature","prototype":"string OAuth::generateSignature(string $http_method, string $url [, mixed $extra_parameters = ''])","return":"<p class=\"para\">   A string containing the generated signature or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":""},"OAuth::getAccessToken":{"id":"oauth.getaccesstoken","purpose":"Fetch an access token","prototype":"array OAuth::getAccessToken(string $access_token_url [, string $auth_session_handle = '' [, string $verifier_token = '' [, string $http_method = '']]])","return":"<p class=\"para\">   Returns an array containing the parsed OAuth response on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::getCAPath":{"id":"oauth.getcapath","purpose":"Gets CA information","prototype":"array OAuth::getCAPath()","return":"<p class=\"para\">   An <span class=\"type\">array<\/span> of Certificate Authority information, specifically as   <em>ca_path<\/em> and <em>ca_info<\/em> keys within the returned   associative array.  <\/p>","versions":"PECL OAuth >= 0.99.8"},"OAuth::getLastResponse":{"id":"oauth.getlastresponse","purpose":"Get the last response","prototype":"string OAuth::getLastResponse()","return":"<p class=\"para\">   Returns a string containing the last response.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::getLastResponseHeaders":{"id":"oauth.getlastresponseheaders","purpose":"Get headers for last response","prototype":"string OAuth::getLastResponseHeaders()","return":"<p class=\"para\">   A string containing the last response&#039;s headers or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":""},"OAuth::getLastResponseInfo":{"id":"oauth.getlastresponseinfo","purpose":"Get HTTP information about the last response","prototype":"array OAuth::getLastResponseInfo()","return":"<p class=\"para\">   Returns an array containing the response information for the last   request. Constants from <span class=\"function\">curl_getinfo<\/span> may be   used.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::getRequestHeader":{"id":"oauth.getrequestheader","purpose":"Generate OAuth header string signature","prototype":"string OAuth::getRequestHeader(string $http_method, string $url [, mixed $extra_parameters = ''])","return":"<p class=\"para\">   A string containing the generated request header or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":""},"OAuth::getRequestToken":{"id":"oauth.getrequesttoken","purpose":"Fetch a request token","prototype":"array OAuth::getRequestToken(string $request_token_url [, string $callback_url = '' [, string $http_method = '']])","return":"<p class=\"para\">   Returns an array containing the parsed OAuth response on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::setAuthType":{"id":"oauth.setauthtype","purpose":"Set authorization type","prototype":"bool OAuth::setAuthType(int $auth_type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if a parameter is correctly set, otherwise <strong><code>FALSE<\/code><\/strong>   (e.g., if an invalid <code class=\"parameter\">auth_type<\/code> is passed in.)  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::setCAPath":{"id":"oauth.setcapath","purpose":"Set CA path and info","prototype":"mixed OAuth::setCAPath([string $ca_path = '' [, string $ca_info = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if either <code class=\"parameter\">ca_path<\/code>   or <code class=\"parameter\">ca_info<\/code> are considered invalid.  <\/p>","versions":"PECL OAuth >= 0.99.8"},"OAuth::setNonce":{"id":"oauth.setnonce","purpose":"Set the nonce for subsequent requests","prototype":"mixed OAuth::setNonce(string $nonce)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> if the   <code class=\"parameter\">nonce<\/code> is considered invalid.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::setRequestEngine":{"id":"oauth.setrequestengine","purpose":"The setRequestEngine purpose","prototype":"void OAuth::setRequestEngine(int $reqengine)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuth::setRSACertificate":{"id":"oauth.setrsacertificate","purpose":"Set the RSA certificate","prototype":"mixed OAuth::setRSACertificate(string $cert)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, or <strong><code>FALSE<\/code><\/strong> on failure (e.g., the RSA certificate   cannot be parsed.)  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuth::setSSLChecks":{"id":"oauth.setsslchecks","purpose":"Tweak specific SSL checks for requests","prototype":"bool OAuth::setSSLChecks(int $sslcheck)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"OAuth::setTimestamp":{"id":"oauth.settimestamp","purpose":"Set the timestamp","prototype":"mixed OAuth::setTimestamp(string $timestamp)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong>, unless the <code class=\"parameter\">timestamp<\/code> is invalid, in which   case <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuth::setToken":{"id":"oauth.settoken","purpose":"Sets the token and secret","prototype":"bool OAuth::setToken(string $token, string $token_secret)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuth::setVersion":{"id":"oauth.setversion","purpose":"Set the OAuth version","prototype":"bool OAuth::setVersion(string $version)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 0.99.1"},"OAuthProvider::addRequiredParameter":{"id":"oauthprovider.addrequiredparameter","purpose":"Add required parameters","prototype":"bool OAuthProvider::addRequiredParameter(string $req_params)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::callconsumerHandler":{"id":"oauthprovider.callconsumerhandler","purpose":"Calls the consumerNonceHandler callback","prototype":"void OAuthProvider::callconsumerHandler()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":""},"OAuthProvider::callTimestampNonceHandler":{"id":"oauthprovider.calltimestampnoncehandler","purpose":"Calls the timestampNonceHandler callback","prototype":"void OAuthProvider::callTimestampNonceHandler()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::calltokenHandler":{"id":"oauthprovider.calltokenhandler","purpose":"Calls the tokenNonceHandler callback","prototype":"void OAuthProvider::calltokenHandler()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::checkOAuthRequest":{"id":"oauthprovider.checkoauthrequest","purpose":"Check an oauth request","prototype":"void OAuthProvider::checkOAuthRequest([string $uri = '' [, string $method = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::__construct":{"id":"oauthprovider.construct","purpose":"Constructs a new OAuthProvider object","prototype":"object OAuthProvider::__construct([array $params_array = ''])","return":"<p class=\"para\">   An <span class=\"classname\">OAuthProvider<\/span> <span class=\"type\">object<\/span>.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::consumerHandler":{"id":"oauthprovider.consumerhandler","purpose":"Set the consumerHandler handler callback","prototype":"void OAuthProvider::consumerHandler(callable $callback_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::generateToken":{"id":"oauthprovider.generatetoken","purpose":"Generate a random token","prototype":"string OAuthProvider::generateToken(int $size [, bool $strong = ''])","return":"<p class=\"para\">   The generated token, as a <span class=\"type\">string<\/span> of bytes.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::is2LeggedEndpoint":{"id":"oauthprovider.is2leggedendpoint","purpose":"is2LeggedEndpoint","prototype":"void OAuthProvider::is2LeggedEndpoint(mixed $params_array)","return":"<p class=\"para\">   An <span class=\"classname\">OAuthProvider<\/span> <span class=\"type\">object<\/span>.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::isRequestTokenEndpoint":{"id":"oauthprovider.isrequesttokenendpoint","purpose":"Sets isRequestTokenEndpoint","prototype":"void OAuthProvider::isRequestTokenEndpoint(bool $will_issue_request_token)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::removeRequiredParameter":{"id":"oauthprovider.removerequiredparameter","purpose":"Remove a required parameter","prototype":"bool OAuthProvider::removeRequiredParameter(string $req_params)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::reportProblem":{"id":"oauthprovider.reportproblem","purpose":"Report a problem","prototype":"string OAuthProvider::reportProblem(string $oauthexception [, bool $send_headers = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::setParam":{"id":"oauthprovider.setparam","purpose":"Set a parameter","prototype":"bool OAuthProvider::setParam(string $param_key [, mixed $param_val = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::setRequestTokenPath":{"id":"oauthprovider.setrequesttokenpath","purpose":"Set request token path","prototype":"bool OAuthProvider::setRequestTokenPath(string $path)","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong>  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::timestampNonceHandler":{"id":"oauthprovider.timestampnoncehandler","purpose":"Set the timestampNonceHandler handler callback","prototype":"void OAuthProvider::timestampNonceHandler(callable $callback_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"OAuthProvider::tokenHandler":{"id":"oauthprovider.tokenhandler","purpose":"Set the tokenHandler handler callback","prototype":"void OAuthProvider::tokenHandler(callable $callback_function)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PECL OAuth >= 1.0.0"},"SCA::createDataObject":{"id":"sca.createdataobject","purpose":"Create an SDO","prototype":"SDO_DataObject SCA::createDataObject(string $type_namespace_uri, string $type_name)","return":"<p class=\"para\"> Returns the newly created SDO_DataObject. <\/p>","versions":"PECL SDO >= 0.5.0"},"SCA::getService":{"id":"sca.getservice","purpose":"Obtain a proxy for a service","prototype":"mixed SCA::getService(string $target [, string $binding = '' [, array $config = '']])","return":"<p class=\"para\">   The SCA_LocalProxy or SCA_SoapProxy.  <\/p>","versions":"PECL SDO >= 0.5.0"},"SCA_LocalProxy::createDataObject":{"id":"sca-localproxy.createdataobject","purpose":"Create an SDO","prototype":"SDO_DataObject SCA_LocalProxy::createDataObject(string $type_namespace_uri, string $type_name)","return":"<p class=\"para\"> Returns the newly created SDO_DataObject. <\/p>","versions":"PECL SDO >= 0.5.0"},"SCA_SoapProxy::createDataObject":{"id":"sca-soapproxy.createdataobject","purpose":"Create an SDO","prototype":"SDO_DataObject SCA_SoapProxy::createDataObject(string $type_namespace_uri, string $type_name)","return":"<p class=\"para\"> Returns the newly created SDO_DataObject. <\/p>","versions":"PECL SDO >= 0.5.0"},"is_soap_fault":{"id":"function.is-soap-fault","purpose":"Checks if a SOAP call has failed","prototype":"bool is_soap_fault(mixed $object)","return":"<p class=\"para\">   This will return <strong><code>TRUE<\/code><\/strong> on error, and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"use_soap_error_handler":{"id":"function.use-soap-error-handler","purpose":"Set whether to use the SOAP error handler","prototype":"bool use_soap_error_handler([bool $handler = ''])","return":"<p class=\"para\">   Returns the original value.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__call":{"id":"soapclient.call","purpose":"Calls a SOAP function (deprecated)","prototype":"mixed SoapClient::__call(string $function_name, string $arguments)","return":"","versions":"PHP 5, PHP 7"},"SoapClient::__construct":{"id":"soapclient.construct","purpose":"SoapClient constructor","prototype":" SoapClient::__construct(mixed $wsdl [, array $options = ''])","return":"","versions":"PHP 5, PHP 7"},"SoapClient::__doRequest":{"id":"soapclient.dorequest","purpose":"Performs a SOAP request","prototype":"string SoapClient::__doRequest(string $request, string $location, string $action, int $version [, int $one_way = ''])","return":"<p class=\"para\">   The XML SOAP response.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__getCookies":{"id":"soapclient.getcookies","purpose":"Get list of cookies","prototype":"array SoapClient::__getCookies()","return":"<p class=\"para\">     <\/p>","versions":"PHP 5 >= 5.4.30, PHP 7"},"SoapClient::__getFunctions":{"id":"soapclient.getfunctions","purpose":"Returns list of available SOAP functions","prototype":"array SoapClient::__getFunctions()","return":"<p class=\"para\">   The <span class=\"type\">array<\/span> of SOAP function prototypes, detailing the return type,   the function name and type-hinted parameters.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__getLastRequest":{"id":"soapclient.getlastrequest","purpose":"Returns last SOAP request","prototype":"string SoapClient::__getLastRequest()","return":"<p class=\"para\">   The last SOAP request, as an XML string.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__getLastRequestHeaders":{"id":"soapclient.getlastrequestheaders","purpose":"Returns the SOAP headers from the last request","prototype":"string SoapClient::__getLastRequestHeaders()","return":"<p class=\"para\">   The last SOAP request headers.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__getLastResponse":{"id":"soapclient.getlastresponse","purpose":"Returns last SOAP response","prototype":"string SoapClient::__getLastResponse()","return":"<p class=\"para\">   The last SOAP response, as an XML string.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__getLastResponseHeaders":{"id":"soapclient.getlastresponseheaders","purpose":"Returns the SOAP headers from the last response","prototype":"string SoapClient::__getLastResponseHeaders()","return":"<p class=\"para\">   The last SOAP response headers.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__getTypes":{"id":"soapclient.gettypes","purpose":"Returns a list of SOAP types","prototype":"array SoapClient::__getTypes()","return":"<p class=\"para\">   The <span class=\"type\">array<\/span> of SOAP types, detailing all structures and types.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::__setCookie":{"id":"soapclient.setcookie","purpose":"The __setCookie purpose","prototype":"void SoapClient::__setCookie(string $name [, string $value = ''])","return":"<p class=\"para\">  No value is returned.  <\/p>","versions":"PHP 5 >= 5.0.4, PHP 7"},"SoapClient::__setLocation":{"id":"soapclient.setlocation","purpose":"Sets the location of the Web service to use","prototype":"string SoapClient::__setLocation([string $new_location = ''])","return":"<p class=\"para\">   The old endpoint URL.  <\/p>","versions":"PHP 5 >= 5.0.4, PHP 7"},"SoapClient::__setSoapHeaders":{"id":"soapclient.setsoapheaders","purpose":"Sets SOAP headers for subsequent calls","prototype":"bool SoapClient::__setSoapHeaders([mixed $soapheaders = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.0.5, PHP 7"},"SoapClient::__soapCall":{"id":"soapclient.soapcall","purpose":"Calls a SOAP function","prototype":"mixed SoapClient::__soapCall(string $function_name, array $arguments [, array $options = '' [, mixed $input_headers = '' [, array $output_headers = '']]])","return":"<p class=\"para\">   SOAP functions may return one, or multiple values. If only one value is returned   by the SOAP function, the return value of <em>__soapCall<\/em> will be   a simple value (e.g. an integer, a string, etc). If multiple values are   returned, <em>__soapCall<\/em> will return   an associative array of named output parameters.  <\/p>  <p class=\"para\">   On error, if the SoapClient object was constructed with the <em>exceptions<\/em>   option set to <strong><code>FALSE<\/code><\/strong>, a SoapFault object will be returned.  <\/p>","versions":"PHP 5, PHP 7"},"SoapClient::SoapClient":{"id":"soapclient.soapclient","purpose":"SoapClient constructor","prototype":" SoapClient::SoapClient(mixed $wsdl [, array $options = ''])","return":"","versions":"PHP 5, PHP 7"},"SoapServer::addFunction":{"id":"soapserver.addfunction","purpose":"Adds one or more functions to handle SOAP requests","prototype":"void SoapServer::addFunction(mixed $functions)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SoapServer::addSoapHeader":{"id":"soapserver.addsoapheader","purpose":"Add a SOAP header to the response","prototype":"void SoapServer::addSoapHeader(SoapHeader $object)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"SoapServer::__construct":{"id":"soapserver.construct","purpose":"SoapServer constructor","prototype":" SoapServer::__construct(mixed $wsdl [, array $options = ''])","return":"","versions":"PHP 5, PHP 7"},"SoapServer::fault":{"id":"soapserver.fault","purpose":"Issue SoapServer fault indicating an error","prototype":"void SoapServer::fault(string $code, string $string [, string $actor = '' [, string $details = '' [, string $name = '']]])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SoapServer::getFunctions":{"id":"soapserver.getfunctions","purpose":"Returns list of defined functions","prototype":"array SoapServer::getFunctions()","return":"<p class=\"para\">   An <em>array<\/em> of the defined functions.  <\/p>","versions":"PHP 5, PHP 7"},"SoapServer::handle":{"id":"soapserver.handle","purpose":"Handles a SOAP request","prototype":"void SoapServer::handle([string $soap_request = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SoapServer::setClass":{"id":"soapserver.setclass","purpose":"Sets the class which handles SOAP requests","prototype":"void SoapServer::setClass(string $class_name [, mixed $args = '' [, mixed $... = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SoapServer::setObject":{"id":"soapserver.setobject","purpose":"Sets the object which will be used to handle SOAP requests","prototype":"void SoapServer::setObject(object $object)","return":"<p class=\"para\">    No value is returned.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"SoapServer::setPersistence":{"id":"soapserver.setpersistence","purpose":"Sets SoapServer persistence mode","prototype":"void SoapServer::setPersistence(int $mode)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SoapServer::SoapServer":{"id":"soapserver.soapserver","purpose":"SoapServer constructor","prototype":" SoapServer::SoapServer(mixed $wsdl [, array $options = ''])","return":"","versions":"PHP 5, PHP 7"},"SoapFault::__construct":{"id":"soapfault.construct","purpose":"SoapFault constructor","prototype":" SoapFault::__construct(string $faultcode, string $faultstring [, string $faultactor = '' [, string $detail = '' [, string $faultname = '' [, string $headerfault = '']]]])","return":"","versions":"PHP 5, PHP 7"},"SoapFault::SoapFault":{"id":"soapfault.soapfault","purpose":"SoapFault constructor","prototype":" SoapFault::SoapFault(string $faultcode, string $faultstring [, string $faultactor = '' [, string $detail = '' [, string $faultname = '' [, string $headerfault = '']]]])","return":"","versions":"PHP 5, PHP 7"},"SoapFault::__toString":{"id":"soapfault.tostring","purpose":"Obtain a string representation of a SoapFault","prototype":"string SoapFault::__toString()","return":"<p class=\"para\">   A string describing the SoapFault.  <\/p>","versions":"PHP 5, PHP 7"},"SoapHeader::__construct":{"id":"soapheader.construct","purpose":"SoapHeader constructor","prototype":" SoapHeader::__construct(string $namespace, string $name [, mixed $data = '' [, bool $mustunderstand = '' [, string $actor = '']]])","return":"","versions":"PHP 5, PHP 7"},"SoapHeader::SoapHeader":{"id":"soapheader.soapheader","purpose":"SoapHeader constructor","prototype":" SoapHeader::SoapHeader(string $namespace, string $name [, mixed $data = '' [, bool $mustunderstand = '' [, string $actor = '']]])","return":"","versions":"PHP 5, PHP 7"},"SoapParam::__construct":{"id":"soapparam.construct","purpose":"SoapParam constructor","prototype":" SoapParam::__construct(mixed $data, string $name)","return":"","versions":"PHP 5, PHP 7"},"SoapParam::SoapParam":{"id":"soapparam.soapparam","purpose":"SoapParam constructor","prototype":" SoapParam::SoapParam(mixed $data, string $name)","return":"","versions":"PHP 5, PHP 7"},"SoapVar::__construct":{"id":"soapvar.construct","purpose":"SoapVar constructor","prototype":" SoapVar::__construct(mixed $data, string $encoding [, string $type_name = '' [, string $type_namespace = '' [, string $node_name = '' [, string $node_namespace = '']]]])","return":"","versions":"PHP 5, PHP 7"},"SoapVar::SoapVar":{"id":"soapvar.soapvar","purpose":"SoapVar constructor","prototype":" SoapVar::SoapVar(mixed $data, string $encoding [, string $type_name = '' [, string $type_namespace = '' [, string $node_name = '' [, string $node_namespace = '']]]])","return":"","versions":"PHP 5, PHP 7"},"Yar_Server::__construct":{"id":"yar-server.construct","purpose":"Register a server","prototype":" Yar_Server::__construct(Object $obj)","return":"<p class=\"para\">   An instance of <span class=\"classname\">Yar_Server<\/span>.  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Server::handle":{"id":"yar-server.handle","purpose":"Start RPC Server","prototype":"bool Yar_Server::handle()","return":"<p class=\"para\">   boolean  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Client::__call":{"id":"yar-client.call","purpose":"Call service","prototype":"void Yar_Client::__call(string $method, array $parameters)","return":"<p class=\"para\">  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Client::__construct":{"id":"yar-client.construct","purpose":"Create a client","prototype":" Yar_Client::__construct(string $url [, array $options = ''])","return":"<p class=\"para\">    <span class=\"classname\">Yar_Client<\/span> instance.  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Client::setOpt":{"id":"yar-client.setopt","purpose":"Set calling contexts","prototype":"Yar_Client Yar_Client::setOpt(int $name, mixed $value)","return":"<p class=\"para\">   Returns <var class=\"varname\">$this<\/var> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Concurrent_Client::call":{"id":"yar-concurrent-client.call","purpose":"Register a concurrent call","prototype":"int Yar_Concurrent_Client::call(string $uri, string $method [, array $parameters = '' [, callable $callback = '' [, callable $error_callback = '' [, array $options = '']]]])","return":"<p class=\"para\">   An unique id, can be used to identified which call it is.  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Concurrent_Client::loop":{"id":"yar-concurrent-client.loop","purpose":"Send all calls","prototype":"bool Yar_Concurrent_Client::loop([callable $callback = '' [, callable $error_callback = '']])","return":"<p class=\"para\">  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Concurrent_Client::reset":{"id":"yar-concurrent-client.reset","purpose":"Clean all registered calls","prototype":"bool Yar_Concurrent_Client::reset()","return":"<p class=\"para\">  <\/p>","versions":"PECL yar >= 1.2.4"},"Yar_Server_Exception::getType":{"id":"yar-server-exception.gettype","purpose":"Retrieve exception's type","prototype":"string Yar_Server_Exception::getType()","return":"<p class=\"para\">   string  <\/p>","versions":"PECL yar >= 1.0.0"},"Yar_Client_Exception::getType":{"id":"yar-client-exception.gettype","purpose":"Retrieve exception's type","prototype":"string Yar_Client_Exception::getType()","return":"<p class=\"para\">   Returns <em>&quot;Yar_Exception_Client&quot;<\/em>.  <\/p>","versions":"PECL yar >= 1.0.0"},"xmlrpc_decode_request":{"id":"function.xmlrpc-decode-request","purpose":"Decodes XML into native PHP types","prototype":"mixed xmlrpc_decode_request(string $xml, string $method [, string $encoding = ''])","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_decode":{"id":"function.xmlrpc-decode","purpose":"Decodes XML into native PHP types","prototype":"mixed xmlrpc_decode(string $xml [, string $encoding = \"iso-8859-1\"])","return":"<p class=\"para\">   Returns either an array, or an integer, or a string, or a boolean according   to the response returned by the XMLRPC method.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_encode_request":{"id":"function.xmlrpc-encode-request","purpose":"Generates XML for a method request","prototype":"string xmlrpc_encode_request(string $method, mixed $params [, array $output_options = ''])","return":"<p class=\"para\">   Returns a string containing the XML representation of the request.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_encode":{"id":"function.xmlrpc-encode","purpose":"Generates XML for a PHP value","prototype":"string xmlrpc_encode(mixed $value)","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_get_type":{"id":"function.xmlrpc-get-type","purpose":"Gets xmlrpc type for a PHP value","prototype":"string xmlrpc_get_type(mixed $value)","return":"<p class=\"para\">   Returns the XML-RPC type.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_is_fault":{"id":"function.xmlrpc-is-fault","purpose":"Determines if an array value represents an XMLRPC fault","prototype":"bool xmlrpc_is_fault(array $arg)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the argument means fault, <strong><code>FALSE<\/code><\/strong> otherwise. Fault   description is available in <em>$arg[&quot;faultString&quot;]<\/em>, fault   code is in <em>$arg[&quot;faultCode&quot;]<\/em>.  <\/p>","versions":"PHP 4 >= 4.3.0, PHP 5, PHP 7"},"xmlrpc_parse_method_descriptions":{"id":"function.xmlrpc-parse-method-descriptions","purpose":"Decodes XML into a list of method descriptions","prototype":"array xmlrpc_parse_method_descriptions(string $xml)","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_server_add_introspection_data":{"id":"function.xmlrpc-server-add-introspection-data","purpose":"Adds introspection documentation","prototype":"int xmlrpc_server_add_introspection_data(resource $server, array $desc)","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_server_call_method":{"id":"function.xmlrpc-server-call-method","purpose":"Parses XML requests and call methods","prototype":"string xmlrpc_server_call_method(resource $server, string $xml, mixed $user_data [, array $output_options = ''])","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_server_create":{"id":"function.xmlrpc-server-create","purpose":"Creates an xmlrpc server","prototype":"resource xmlrpc_server_create()","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_server_destroy":{"id":"function.xmlrpc-server-destroy","purpose":"Destroys server resources","prototype":"bool xmlrpc_server_destroy(resource $server)","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_server_register_introspection_callback":{"id":"function.xmlrpc-server-register-introspection-callback","purpose":"Register a PHP function to generate documentation","prototype":"bool xmlrpc_server_register_introspection_callback(resource $server, string $function)","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_server_register_method":{"id":"function.xmlrpc-server-register-method","purpose":"Register a PHP function to resource method matching method_name","prototype":"bool xmlrpc_server_register_method(resource $server, string $method_name, string $function)","return":"","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"xmlrpc_set_type":{"id":"function.xmlrpc-set-type","purpose":"Sets xmlrpc type, base64 or datetime, for a PHP string value","prototype":"bool xmlrpc_set_type(string $value, string $type)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If successful, <code class=\"parameter\">value<\/code> is converted to an object.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"com_create_guid":{"id":"function.com-create-guid","purpose":"Generate a globally unique identifier (GUID)","prototype":"string com_create_guid()","return":"<p class=\"para\">   Returns the GUID as a string.  <\/p>","versions":"PHP 5, PHP 7"},"com_event_sink":{"id":"function.com-event-sink","purpose":"Connect events from a COM object to a PHP object","prototype":"bool com_event_sink(variant $comobject, object $sinkobject [, mixed $sinkinterface = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"com_get_active_object":{"id":"function.com-get-active-object","purpose":"Returns a handle to an already running instance of a COM object","prototype":"variant com_get_active_object(string $progid [, int $code_page = ''])","return":"<p class=\"para\">   If the requested object is running, it will be returned to your script   just like any other COM object.  <\/p>","versions":"PHP 5, PHP 7"},"com_load_typelib":{"id":"function.com-load-typelib","purpose":"Loads a Typelib","prototype":"bool com_load_typelib(string $typelib_name [, bool $case_insensitive = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.1.0, PHP 5, PHP 7"},"com_message_pump":{"id":"function.com-message-pump","purpose":"Process COM messages, sleeping for up to timeoutms milliseconds","prototype":"bool com_message_pump([int $timeoutms = ''])","return":"<p class=\"para\">   If a message or messages arrives before the timeout, they will be   dispatched, and the function will return <strong><code>TRUE<\/code><\/strong>. If the timeout occurs and   no messages were processed, the return value will be <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"com_print_typeinfo":{"id":"function.com-print-typeinfo","purpose":"Print out a PHP class definition for a dispatchable interface","prototype":"bool com_print_typeinfo(object $comobject [, string $dispinterface = '' [, bool $wantsink = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.2.0, PHP 5, PHP 7"},"variant_abs":{"id":"function.variant-abs","purpose":"Returns the absolute value of a variant","prototype":"mixed variant_abs(mixed $val)","return":"<p class=\"para\">   Returns the absolute value of <code class=\"parameter\">val<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"variant_add":{"id":"function.variant-add","purpose":"\"Adds\" two variant values together and returns the result","prototype":"mixed variant_add(mixed $left, mixed $right)","return":"<p class=\"para\">   Returns the result.  <\/p>","versions":"PHP 5, PHP 7"},"variant_and":{"id":"function.variant-and","purpose":"Performs a bitwise AND operation between two variants","prototype":"mixed variant_and(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant AND Rules<\/strong><\/caption>         <thead>      <tr>       <th>If <code class=\"parameter\">left<\/code> is<\/th>       <th>If <code class=\"parameter\">right<\/code> is<\/th>       <th>then the result is<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_cast":{"id":"function.variant-cast","purpose":"Convert a variant into a new variant object of another type","prototype":"variant variant_cast(variant $variant, int $type)","return":"<p class=\"para\">   Returns a variant of given <code class=\"parameter\">type<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"variant_cat":{"id":"function.variant-cat","purpose":"Concatenates two variant values together and returns the result","prototype":"mixed variant_cat(mixed $left, mixed $right)","return":"<p class=\"para\">   Returns the result of the concatenation.  <\/p>","versions":"PHP 5, PHP 7"},"variant_cmp":{"id":"function.variant-cmp","purpose":"Compares two variants","prototype":"int variant_cmp(mixed $left, mixed $right [, int $lcid = '' [, int $flags = '']])","return":"<p class=\"para\">   Returns one of the following:   <table class=\"doctable table\">    <caption><strong>Variant Comparision Results<\/strong><\/caption>         <thead>      <tr>       <th>value<\/th>       <th>meaning<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td><strong><code>VARCMP_LT<\/code><\/strong><\/td>       <td><code class=\"parameter\">left<\/code> is less than        <code class=\"parameter\">right<\/code>       <\/td>      <\/tr>      <tr>       <td><strong><code>VARCMP_EQ<\/code><\/strong><\/td>       <td><code class=\"parameter\">left<\/code> is equal to        <code class=\"parameter\">right<\/code>       <\/td>      <\/tr>      <tr>       <td><strong><code>VARCMP_GT<\/code><\/strong><\/td>       <td><code class=\"parameter\">left<\/code> is greater than        <code class=\"parameter\">right<\/code>       <\/td>      <\/tr>      <tr>       <td><strong><code>VARCMP_NULL<\/code><\/strong><\/td>       <td>Either <code class=\"parameter\">left<\/code>,        <code class=\"parameter\">right<\/code> or both are <strong><code>NULL<\/code><\/strong>       <\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_date_from_timestamp":{"id":"function.variant-date-from-timestamp","purpose":"Returns a variant date representation of a Unix timestamp","prototype":"variant variant_date_from_timestamp(int $timestamp)","return":"<p class=\"para\">   Returns a <strong><code>VT_DATE<\/code><\/strong> variant.  <\/p>","versions":"PHP 5, PHP 7"},"variant_date_to_timestamp":{"id":"function.variant-date-to-timestamp","purpose":"Converts a variant date\/time value to Unix timestamp","prototype":"int variant_date_to_timestamp(variant $variant)","return":"<p class=\"para\">   Returns a unix timestamp.  <\/p>","versions":"PHP 5, PHP 7"},"variant_div":{"id":"function.variant-div","purpose":"Returns the result from dividing two variants","prototype":"mixed variant_div(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant Division Rules<\/strong><\/caption>         <thead>      <tr>       <th>If<\/th>       <th>Then<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>Both expressions are of the string, date, character, boolean type<\/td>       <td>Double is returned<\/td>      <\/tr>      <tr>       <td>One expression is a string type and the other a       character<\/td>       <td>Division and a double is returned<\/td>      <\/tr>      <tr>       <td>One expression is numeric and the other is a string<\/td>       <td>Division and a double is returned.<\/td>      <\/tr>      <tr>       <td>Both expressions are numeric<\/td>       <td>Division and a double is returned<\/td>      <\/tr>      <tr>       <td>Either expression is NULL<\/td>       <td>NULL is returned<\/td>      <\/tr>      <tr>       <td><code class=\"parameter\">right<\/code> is empty and       <code class=\"parameter\">left<\/code> is anything but empty<\/td>       <td>A com_exception with code <strong><code>DISP_E_DIVBYZERO<\/code><\/strong>       is thrown<\/td>      <\/tr>      <tr>       <td><code class=\"parameter\">left<\/code> is empty and       <code class=\"parameter\">right<\/code> is anything but empty.<\/td>       <td>0 as type double is returned<\/td>      <\/tr>      <tr>       <td>Both expressions are empty<\/td>       <td>A com_exception with code <strong><code>DISP_E_OVERFLOW<\/code><\/strong>       is thrown<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_eqv":{"id":"function.variant-eqv","purpose":"Performs a bitwise equivalence on two variants","prototype":"mixed variant_eqv(mixed $left, mixed $right)","return":"<p class=\"para\">   If each bit in <code class=\"parameter\">left<\/code> is equal to the corresponding   bit in <code class=\"parameter\">right<\/code> then <strong><code>TRUE<\/code><\/strong> is returned, otherwise   <strong><code>FALSE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 5, PHP 7"},"variant_fix":{"id":"function.variant-fix","purpose":"Returns the integer portion of a variant","prototype":"mixed variant_fix(mixed $variant)","return":"<p class=\"para\">   If <code class=\"parameter\">variant<\/code> is negative, then the first negative   integer greater than or equal to the variant is returned, otherwise   returns the integer portion of the value of   <code class=\"parameter\">variant<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"variant_get_type":{"id":"function.variant-get-type","purpose":"Returns the type of a variant object","prototype":"int variant_get_type(variant $variant)","return":"<p class=\"para\">   This function returns an integer value that indicates the type of   <code class=\"parameter\">variant<\/code>, which can be an instance of   <a href=\"class.com.html\" class=\"xref\">COM<\/a>, <a href=\"class.dotnet.html\" class=\"xref\">DOTNET<\/a> or   <a href=\"class.variant.html\" class=\"xref\">VARIANT<\/a> classes.  The return value can be compared   to one of the <strong><code>VT_XXX<\/code><\/strong> constants.  <\/p>  <p class=\"para\">   The return value for COM and DOTNET objects will usually be   <strong><code>VT_DISPATCH<\/code><\/strong>; the only reason this function works for   those classes is because COM and DOTNET are descendants of VARIANT.  <\/p>  <p class=\"para\">   In PHP versions prior to 5, you could obtain this information from   instances of the VARIANT class ONLY, by reading a fake   <code class=\"parameter\">type<\/code> property.  See the <a href=\"class.variant.html\" class=\"xref\">VARIANT<\/a> class for more information on   this.  <\/p>","versions":"PHP 5, PHP 7"},"variant_idiv":{"id":"function.variant-idiv","purpose":"Converts variants to integers and then returns the result from dividing them","prototype":"mixed variant_idiv(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant Integer Division Rules<\/strong><\/caption>         <thead>      <tr>       <th>If<\/th>       <th>Then<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>Both expressions are of the string, date, character, boolean type<\/td>       <td>Division and integer is returned<\/td>      <\/tr>      <tr>       <td>One expression is a string type and the other a       character<\/td>       <td>Division<\/td>      <\/tr>      <tr>       <td>One expression is numeric and the other is a string<\/td>       <td>Division<\/td>      <\/tr>      <tr>       <td>Both expressions are numeric<\/td>       <td>Division<\/td>      <\/tr>      <tr>       <td>Either expression is NULL<\/td>       <td>NULL is returned<\/td>      <\/tr>      <tr>       <td>Both expressions are empty<\/td>       <td>A com_exception with code <strong><code>DISP_E_DIVBYZERO<\/code><\/strong>       is thrown<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_imp":{"id":"function.variant-imp","purpose":"Performs a bitwise implication on two variants","prototype":"mixed variant_imp(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant Implication Table<\/strong><\/caption>        <thead>     <tr>      <th>If <code class=\"parameter\">left<\/code> is<\/th>      <th>If <code class=\"parameter\">right<\/code> is<\/th>      <th>then the result is<\/th>     <\/tr>    <\/thead>    <tbody class=\"tbody\">     <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>     <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>    <\/tbody>     <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_int":{"id":"function.variant-int","purpose":"Returns the integer portion of a variant","prototype":"mixed variant_int(mixed $variant)","return":"<p class=\"para\">   If <code class=\"parameter\">variant<\/code> is negative, then the first negative   integer greater than or equal to the variant is returned, otherwise   returns the integer portion of the value of   <code class=\"parameter\">variant<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"variant_mod":{"id":"function.variant-mod","purpose":"Divides two variants and returns only the remainder","prototype":"mixed variant_mod(mixed $left, mixed $right)","return":"<p class=\"para\">   Returns the remainder of the division.  <\/p>","versions":"PHP 5, PHP 7"},"variant_mul":{"id":"function.variant-mul","purpose":"Multiplies the values of the two variants","prototype":"mixed variant_mul(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant Multiplication Rules<\/strong><\/caption>         <thead>      <tr>       <th>If<\/th>       <th>Then<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>Both expressions are of the string, date, character, boolean type<\/td>       <td>Multiplication<\/td>      <\/tr>      <tr>       <td>One expression is a string type and the other a       character<\/td>       <td>Multiplication<\/td>      <\/tr>      <tr>       <td>One expression is numeric and the other is a string<\/td>       <td>Multiplication<\/td>      <\/tr>      <tr>       <td>Both expressions are numeric<\/td>       <td>Multiplication<\/td>      <\/tr>      <tr>       <td>Either expression is NULL<\/td>       <td>NULL is returned<\/td>      <\/tr>      <tr>       <td>Both expressions are empty<\/td>       <td>Empty string is returned<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_neg":{"id":"function.variant-neg","purpose":"Performs logical negation on a variant","prototype":"mixed variant_neg(mixed $variant)","return":"<p class=\"para\">   Returns the result of the logical negation.  <\/p>","versions":"PHP 5, PHP 7"},"variant_not":{"id":"function.variant-not","purpose":"Performs bitwise not negation on a variant","prototype":"mixed variant_not(mixed $variant)","return":"<p class=\"para\">   Returns the bitwise not negation. If <code class=\"parameter\">variant<\/code> is   <strong><code>NULL<\/code><\/strong>, the result will also be <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"variant_or":{"id":"function.variant-or","purpose":"Performs a logical disjunction on two variants","prototype":"mixed variant_or(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant OR Rules<\/strong><\/caption>         <thead>      <tr>       <th>If <code class=\"parameter\">left<\/code> is<\/th>       <th>If <code class=\"parameter\">right<\/code> is<\/th>       <th>then the result is<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_pow":{"id":"function.variant-pow","purpose":"Returns the result of performing the power function with two variants","prototype":"mixed variant_pow(mixed $left, mixed $right)","return":"<p class=\"para\">   Returns the result of <code class=\"parameter\">left<\/code> to the power of   <code class=\"parameter\">right<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"variant_round":{"id":"function.variant-round","purpose":"Rounds a variant to the specified number of decimal places","prototype":"mixed variant_round(mixed $variant, int $decimals)","return":"<p class=\"para\">   Returns the rounded value.  <\/p>","versions":"PHP 5, PHP 7"},"variant_set_type":{"id":"function.variant-set-type","purpose":"Convert a variant into another type \"in-place\"","prototype":"void variant_set_type(variant $variant, int $type)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"variant_set":{"id":"function.variant-set","purpose":"Assigns a new value for a variant object","prototype":"void variant_set(variant $variant, mixed $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"variant_sub":{"id":"function.variant-sub","purpose":"Subtracts the value of the right variant from the left variant value","prototype":"mixed variant_sub(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant Subtraction Rules<\/strong><\/caption>         <thead>      <tr>       <th>If<\/th>       <th>Then<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr>       <td>Both expressions are of the string type<\/td>       <td>Subtraction<\/td>      <\/tr>      <tr>       <td>One expression is a string type and the other a       character<\/td>       <td>Subtraction<\/td>      <\/tr>      <tr>       <td>One expression is numeric and the other is a string<\/td>       <td>Subtraction.<\/td>      <\/tr>      <tr>       <td>Both expressions are numeric<\/td>       <td>Subtraction<\/td>      <\/tr>      <tr>       <td>Either expression is NULL<\/td>       <td>NULL is returned<\/td>      <\/tr>      <tr>       <td>Both expressions are empty<\/td>       <td>Empty string is returned<\/td>      <\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"variant_xor":{"id":"function.variant-xor","purpose":"Performs a logical exclusion on two variants","prototype":"mixed variant_xor(mixed $left, mixed $right)","return":"<p class=\"para\">   <table class=\"doctable table\">    <caption><strong>Variant XOR Rules<\/strong><\/caption>         <thead>      <tr>       <th>If <code class=\"parameter\">left<\/code> is<\/th>       <th>If <code class=\"parameter\">right<\/code> is<\/th>       <th>then the result is<\/th>      <\/tr>     <\/thead>     <tbody class=\"tbody\">      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><td><strong><code>TRUE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><td><strong><code>FALSE<\/code><\/strong><\/td><\/tr>      <tr><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><td><strong><code>NULL<\/code><\/strong><\/td><\/tr>     <\/tbody>       <\/table>  <\/p>","versions":"PHP 5, PHP 7"},"win32_ps_list_procs":{"id":"function.win32-ps-list-procs","purpose":"List running processes","prototype":"array win32_ps_list_procs()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure, or an array consisting of process statistics like    <span class=\"function\">win32_ps_stat_proc<\/span> returns for all running processes on success.  <\/p>","versions":"PECL win32ps >= 1.0.1"},"win32_ps_stat_mem":{"id":"function.win32-ps-stat-mem","purpose":"Stat memory utilization","prototype":"array win32_ps_stat_mem()","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure, or an array consisting of the   following information on success:  <\/p>  <p class=\"para\">   <dl>         <dt><code class=\"parameter\">load<\/code><\/dt>     <dd>      <p class=\"para\">       The current memory load in percent of physical memory.      <\/p>     <\/dd>             <dt><code class=\"parameter\">unit<\/code><\/dt>     <dd>      <p class=\"para\">       This is always 1024, and indicates that the following values are the count of 1024 bytes.      <\/p>     <\/dd>             <dt><code class=\"parameter\">total_phys<\/code><\/dt>     <dd>      <p class=\"para\">       The amount of total physical memory.      <\/p>     <\/dd>             <dt><code class=\"parameter\">avail_phys<\/code><\/dt>     <dd>      <p class=\"para\">       The amount of still available physical memory.      <\/p>     <\/dd>             <dt><code class=\"parameter\">total_pagefile<\/code><\/dt>     <dd>      <p class=\"para\">       The amount of total pageable memory (physical memory + paging file).      <\/p>     <\/dd>             <dt><code class=\"parameter\">avail_pagefile<\/code><\/dt>     <dd>      <p class=\"para\">       The amount of still available pageable memory (physical memory + paging file).      <\/p>     <\/dd>             <dt><code class=\"parameter\">total_virtual<\/code><\/dt>     <dd>      <p class=\"para\">       The amount of total virtual memory for a process.      <\/p>     <\/dd>             <dt><code class=\"parameter\">avail_virtual<\/code><\/dt>     <dd>      <p class=\"para\">       The amount of still available virtual memory for a process.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL win32ps >= 1.0.1"},"win32_ps_stat_proc":{"id":"function.win32-ps-stat-proc","purpose":"Stat process","prototype":"array win32_ps_stat_proc([int $pid = ''])","return":"<p class=\"para\">   Returns <strong><code>FALSE<\/code><\/strong> on failure, or an array consisting of the   following information on success:  <\/p>  <p class=\"para\">   <dl>         <dt><code class=\"parameter\">pid<\/code><\/dt>     <dd>      <p class=\"para\">       The process id.      <\/p>     <\/dd>             <dt><code class=\"parameter\">exe<\/code><\/dt>     <dd>      <p class=\"para\">       The path to the executable image.      <\/p>     <\/dd>             <dt><code class=\"parameter\">mem<\/code><\/dt>     <dd>      <p class=\"para\">       An array containing information about the following memory utilization indicators:       <code class=\"parameter\">page_fault_count<\/code>,       <code class=\"parameter\">peak_working_set_size<\/code>,       <code class=\"parameter\">working_set_size<\/code>,       <code class=\"parameter\">quota_peak_paged_pool_usage<\/code>,       <code class=\"parameter\">quota_paged_pool_usage<\/code>,       <code class=\"parameter\">quota_peak_non_paged_pool_usage<\/code>,       <code class=\"parameter\">quota_non_paged_pool_usage<\/code>,       <code class=\"parameter\">pagefile_usage<\/code> and       <code class=\"parameter\">peak_pagefile_usage<\/code>.      <\/p>     <\/dd>             <dt><code class=\"parameter\">tms<\/code><\/dt>     <dd>      <p class=\"para\">       An array containing information about the following CPU time utilization indicators:       <code class=\"parameter\">created<\/code>, <code class=\"parameter\">kernel<\/code> and <code class=\"parameter\">user<\/code>.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL win32ps >= 1.0.1"},"win32_continue_service":{"id":"function.win32-continue-service","purpose":"Resumes a paused service","prototype":"int win32_continue_service(string $servicename [, string $machine = ''])","return":"<p class=\"para\">   Returns <strong><code>WIN32_NO_ERROR<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_create_service":{"id":"function.win32-create-service","purpose":"Creates a new service entry in the SCM database","prototype":"mixed win32_create_service(array $details [, string $machine = ''])","return":"<p class=\"para\">   Returns <strong><code>WIN32_NO_ERROR<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_delete_service":{"id":"function.win32-delete-service","purpose":"Deletes a service entry from the SCM database","prototype":"mixed win32_delete_service(string $servicename [, string $machine = ''])","return":"<p class=\"para\">   Returns <strong><code>WIN32_NO_ERROR<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_get_last_control_message":{"id":"function.win32-get-last-control-message","purpose":"Returns the last control message that was sent to this service","prototype":"int win32_get_last_control_message()","return":"<p class=\"para\">   Returns a control constant which will be one of the   <a href=\"win32service.constants.servicecontrol.html\" class=\"link\">Win32Service Service Control Message Constants<\/a>:   <strong><code>WIN32_SERVICE_CONTROL_CONTINUE<\/code><\/strong>,   <strong><code>WIN32_SERVICE_CONTROL_INTERROGATE<\/code><\/strong>,   <strong><code>WIN32_SERVICE_CONTROL_PAUSE<\/code><\/strong>,   <strong><code>WIN32_SERVICE_CONTROL_PRESHUTDOWN<\/code><\/strong>,   <strong><code>WIN32_SERVICE_CONTROL_SHUTDOWN<\/code><\/strong>,   <strong><code>WIN32_SERVICE_CONTROL_STOP<\/code><\/strong>.  <\/p>","versions":"PECL win32service SVN"},"win32_pause_service":{"id":"function.win32-pause-service","purpose":"Pauses a service","prototype":"int win32_pause_service(string $servicename [, string $machine = ''])","return":"<p class=\"para\">   Returns <strong><code>WIN32_NO_ERROR<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_query_service_status":{"id":"function.win32-query-service-status","purpose":"Queries the status of a service","prototype":"mixed win32_query_service_status(string $servicename [, string $machine = ''])","return":"<p class=\"para\">   Returns an array consisting of the following information on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>  <p class=\"para\">   <dl>         <dt><code class=\"parameter\">ServiceType<\/code><\/dt>     <dd>      <p class=\"para\">       The dwServiceType. See <a href=\"win32service.constants.servicetype.html\" class=\"link\">Win32Service Service Type Bitmasks<\/a>.      <\/p>     <\/dd>             <dt><code class=\"parameter\">CurrentState<\/code><\/dt>     <dd>      <p class=\"para\">       The dwCurrentState. See <a href=\"win32service.constants.servicestatus.html\" class=\"link\">Win32Service Service Status Constants<\/a>.      <\/p>     <\/dd>             <dt><code class=\"parameter\">ControlsAccepted<\/code><\/dt>     <dd>      <p class=\"para\">       Which service controls are accepted by the service. See <a href=\"win32service.constants.controlsaccepted.html\" class=\"link\">Win32Service Service Control Message Accepted Bitmasks<\/a>.      <\/p>     <\/dd>             <dt><code class=\"parameter\">Win32ExitCode<\/code><\/dt>     <dd>      <p class=\"para\">       If the service exited, the return code from the process.      <\/p>     <\/dd>             <dt><code class=\"parameter\">ServiceSpecificExitCode<\/code><\/dt>     <dd>      <p class=\"para\">       If the service exited with an error condition, the service specific       code that is logged in the event log is visible here.      <\/p>     <\/dd>             <dt><code class=\"parameter\">CheckPoint<\/code><\/dt>     <dd>      <p class=\"para\">       If the service is shutting down, holds the current check point number.       This is used by the SCM as a kind of heart-beat to detect a wedged service       process.  The value of the check point is best interpreted in       conjunction with the WaitHint value.      <\/p>     <\/dd>             <dt><code class=\"parameter\">WaitHint<\/code><\/dt>     <dd>      <p class=\"para\">       If the service is shutting down it will set WaitHint to a checkpoint       value that will indicate 100% completion.  This can be used to       implement a progress indicator.      <\/p>     <\/dd>             <dt><code class=\"parameter\">ProcessId<\/code><\/dt>     <dd>      <p class=\"para\">       The Windows process identifier.  If 0, the process is not running.      <\/p>     <\/dd>             <dt><code class=\"parameter\">ServiceFlags<\/code><\/dt>     <dd>      <p class=\"para\">       The dwServiceFlags. See <a href=\"win32service.constants.serviceflag.html\" class=\"link\">Win32Service Service Service Flag Constants<\/a>.      <\/p>     <\/dd>       <\/dl>  <\/p>","versions":"PECL win32service SVN"},"win32_set_service_status":{"id":"function.win32-set-service-status","purpose":"Update the service status","prototype":"bool win32_set_service_status(int $status [, int $checkpoint = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_start_service_ctrl_dispatcher":{"id":"function.win32-start-service-ctrl-dispatcher","purpose":"Registers the script with the SCM, so that it can act as the service with the given name","prototype":"mixed win32_start_service_ctrl_dispatcher(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_start_service":{"id":"function.win32-start-service","purpose":"Starts a service","prototype":"int win32_start_service(string $servicename [, string $machine = ''])","return":"<p class=\"para\">   Returns <strong><code>WIN32_NO_ERROR<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"win32_stop_service":{"id":"function.win32-stop-service","purpose":"Stops a service","prototype":"int win32_stop_service(string $servicename [, string $machine = ''])","return":"<p class=\"para\">   Returns <strong><code>WIN32_NO_ERROR<\/code><\/strong> on success, <strong><code>FALSE<\/code><\/strong> if there is a problem with the parameters or a <a href=\"win32service.constants.errors.html\" class=\"link\">Win32 Error Code<\/a> on failure.  <\/p>","versions":"PECL win32service SVN"},"DOMAttr::__construct":{"id":"domattr.construct","purpose":"Creates a new DOMAttr object","prototype":" DOMAttr::__construct(string $name [, string $value = ''])","return":"","versions":"PHP 5, PHP 7"},"DOMAttr::isId":{"id":"domattr.isid","purpose":"Checks if attribute is a defined ID","prototype":"bool DOMAttr::isId()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMCdataSection::__construct":{"id":"domcdatasection.construct","purpose":"Constructs a new DOMCdataSection object","prototype":" DOMCdataSection::__construct(string $value)","return":"","versions":"PHP 5, PHP 7"},"DOMCharacterData::appendData":{"id":"domcharacterdata.appenddata","purpose":"Append the string to the end of the character data of the node","prototype":"void DOMCharacterData::appendData(string $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMCharacterData::deleteData":{"id":"domcharacterdata.deletedata","purpose":"Remove a range of characters from the node","prototype":"void DOMCharacterData::deleteData(int $offset, int $count)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMCharacterData::insertData":{"id":"domcharacterdata.insertdata","purpose":"Insert a string at the specified 16-bit unit offset","prototype":"void DOMCharacterData::insertData(int $offset, string $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMCharacterData::replaceData":{"id":"domcharacterdata.replacedata","purpose":"Replace a substring within the DOMCharacterData node","prototype":"void DOMCharacterData::replaceData(int $offset, int $count, string $data)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMCharacterData::substringData":{"id":"domcharacterdata.substringdata","purpose":"Extracts a range of data from the node","prototype":"string DOMCharacterData::substringData(int $offset, int $count)","return":"<p class=\"para\">   The specified substring. If the sum of <code class=\"parameter\">offset<\/code>    and <code class=\"parameter\">count<\/code> exceeds the length, then all 16-bit units    to the end of the data are returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMComment::__construct":{"id":"domcomment.construct","purpose":"Creates a new DOMComment object","prototype":" DOMComment::__construct([string $value = ''])","return":"","versions":"PHP 5, PHP 7"},"DOMDocument::__construct":{"id":"domdocument.construct","purpose":"Creates a new DOMDocument object","prototype":" DOMDocument::__construct([string $version = '' [, string $encoding = '']])","return":"","versions":"PHP 5, PHP 7"},"DOMDocument::createAttribute":{"id":"domdocument.createattribute","purpose":"Create new attribute","prototype":"DOMAttr DOMDocument::createAttribute(string $name)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMAttr<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createAttributeNS":{"id":"domdocument.createattributens","purpose":"Create new attribute node with an associated namespace","prototype":"DOMAttr DOMDocument::createAttributeNS(string $namespaceURI, string $qualifiedName)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMAttr<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createCDATASection":{"id":"domdocument.createcdatasection","purpose":"Create new cdata node","prototype":"DOMCDATASection DOMDocument::createCDATASection(string $data)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMCDATASection<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createComment":{"id":"domdocument.createcomment","purpose":"Create new comment node","prototype":"DOMComment DOMDocument::createComment(string $data)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMComment<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createDocumentFragment":{"id":"domdocument.createdocumentfragment","purpose":"Create new document fragment","prototype":"DOMDocumentFragment DOMDocument::createDocumentFragment()","return":"<p class=\"para\">   The new <span class=\"classname\">DOMDocumentFragment<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createElement":{"id":"domdocument.createelement","purpose":"Create new element node","prototype":"DOMElement DOMDocument::createElement(string $name [, string $value = ''])","return":"<p class=\"para\">   Returns a new instance of class <span class=\"classname\">DOMElement<\/span> or <strong><code>FALSE<\/code><\/strong>   if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createElementNS":{"id":"domdocument.createelementns","purpose":"Create new element node with an associated namespace","prototype":"DOMElement DOMDocument::createElementNS(string $namespaceURI, string $qualifiedName [, string $value = ''])","return":"<p class=\"para\">   The new <span class=\"classname\">DOMElement<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createEntityReference":{"id":"domdocument.createentityreference","purpose":"Create new entity reference node","prototype":"DOMEntityReference DOMDocument::createEntityReference(string $name)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMEntityReference<\/span> or <strong><code>FALSE<\/code><\/strong> if an error   occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createProcessingInstruction":{"id":"domdocument.createprocessinginstruction","purpose":"Creates new PI node","prototype":"DOMProcessingInstruction DOMDocument::createProcessingInstruction(string $target [, string $data = ''])","return":"<p class=\"para\">   The new <span class=\"classname\">DOMProcessingInstruction<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::createTextNode":{"id":"domdocument.createtextnode","purpose":"Create new text node","prototype":"DOMText DOMDocument::createTextNode(string $content)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMText<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::getElementById":{"id":"domdocument.getelementbyid","purpose":"Searches for an element with a certain id","prototype":"DOMElement DOMDocument::getElementById(string $elementId)","return":"<p class=\"para\">   Returns the <span class=\"classname\">DOMElement<\/span> or <strong><code>NULL<\/code><\/strong> if the element is   not found.   <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::getElementsByTagName":{"id":"domdocument.getelementsbytagname","purpose":"Searches for all elements with given local tag name","prototype":"DOMNodeList DOMDocument::getElementsByTagName(string $name)","return":"<p class=\"para\">   A new <span class=\"classname\">DOMNodeList<\/span> object containing all the matched    elements.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::getElementsByTagNameNS":{"id":"domdocument.getelementsbytagnamens","purpose":"Searches for all elements with given tag name in specified namespace","prototype":"DOMNodeList DOMDocument::getElementsByTagNameNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   A new <span class=\"classname\">DOMNodeList<\/span> object containing all the matched    elements.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::importNode":{"id":"domdocument.importnode","purpose":"Import node into current document","prototype":"DOMNode DOMDocument::importNode(DOMNode $importedNode [, bool $deep = ''])","return":"<p class=\"para\">   The copied node or <strong><code>FALSE<\/code><\/strong>, if it cannot be copied.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::load":{"id":"domdocument.load","purpose":"Load XML from a file","prototype":"mixed DOMDocument::load(string $filename [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  If called statically, returns a   <span class=\"classname\">DOMDocument<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::loadHTML":{"id":"domdocument.loadhtml","purpose":"Load HTML from a string","prototype":"bool DOMDocument::loadHTML(string $source [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. If called statically, returns a   <span class=\"classname\">DOMDocument<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::loadHTMLFile":{"id":"domdocument.loadhtmlfile","purpose":"Load HTML from a file","prototype":"bool DOMDocument::loadHTMLFile(string $filename [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. If called statically, returns a   <span class=\"classname\">DOMDocument<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::loadXML":{"id":"domdocument.loadxml","purpose":"Load XML from a string","prototype":"mixed DOMDocument::loadXML(string $source [, int $options = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. If called statically, returns a   <span class=\"classname\">DOMDocument<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::normalizeDocument":{"id":"domdocument.normalizedocument","purpose":"Normalizes the document","prototype":"void DOMDocument::normalizeDocument()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::registerNodeClass":{"id":"domdocument.registernodeclass","purpose":"Register extended class used to create base node type","prototype":"bool DOMDocument::registerNodeClass(string $baseclass, string $extendedclass)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"DOMDocument::relaxNGValidate":{"id":"domdocument.relaxngvalidate","purpose":"Performs relaxNG validation on the document","prototype":"bool DOMDocument::relaxNGValidate(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::relaxNGValidateSource":{"id":"domdocument.relaxngvalidatesource","purpose":"Performs relaxNG validation on the document","prototype":"bool DOMDocument::relaxNGValidateSource(string $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::save":{"id":"domdocument.save","purpose":"Dumps the internal XML tree back into a file","prototype":"int DOMDocument::save(string $filename [, int $options = ''])","return":"<p class=\"para\">   Returns the number of bytes written or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::saveHTML":{"id":"domdocument.savehtml","purpose":"Dumps the internal document into a string using HTML formatting","prototype":"string DOMDocument::saveHTML([DOMNode $node = null])","return":"<p class=\"para\">   Returns the HTML, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::saveHTMLFile":{"id":"domdocument.savehtmlfile","purpose":"Dumps the internal document into a file using HTML formatting","prototype":"int DOMDocument::saveHTMLFile(string $filename)","return":"<p class=\"para\">   Returns the number of bytes written or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::saveXML":{"id":"domdocument.savexml","purpose":"Dumps the internal XML tree back into a string","prototype":"string DOMDocument::saveXML([DOMNode $node = '' [, int $options = '']])","return":"<p class=\"para\">   Returns the XML, or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::schemaValidate":{"id":"domdocument.schemavalidate","purpose":"Validates a document based on a schema","prototype":"bool DOMDocument::schemaValidate(string $filename [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::schemaValidateSource":{"id":"domdocument.schemavalidatesource","purpose":"Validates a document based on a schema","prototype":"bool DOMDocument::schemaValidateSource(string $source [, int $flags = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::validate":{"id":"domdocument.validate","purpose":"Validates the document based on its DTD","prototype":"bool DOMDocument::validate()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.   If the document have no DTD attached, this method will return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocument::xinclude":{"id":"domdocument.xinclude","purpose":"Substitutes XIncludes in a DOMDocument Object","prototype":"int DOMDocument::xinclude([int $options = ''])","return":"<p class=\"para\">   Returns the number of XIncludes in the document, -1 if some processing failed,   or <strong><code>FALSE<\/code><\/strong> if there were no substitutions.  <\/p>","versions":"PHP 5, PHP 7"},"DOMDocumentFragment::appendXML":{"id":"domdocumentfragment.appendxml","purpose":"Append raw XML data","prototype":"bool DOMDocumentFragment::appendXML(string $data)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"DOMElement::__construct":{"id":"domelement.construct","purpose":"Creates a new DOMElement object","prototype":" DOMElement::__construct(string $name [, string $value = '' [, string $namespaceURI = '']])","return":"","versions":"PHP 5, PHP 7"},"DOMElement::getAttribute":{"id":"domelement.getattribute","purpose":"Returns value of attribute","prototype":"string DOMElement::getAttribute(string $name)","return":"<p class=\"para\">   The value of the attribute, or an empty string if no attribute with the   given <code class=\"parameter\">name<\/code> is found.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::getAttributeNode":{"id":"domelement.getattributenode","purpose":"Returns attribute node","prototype":"DOMAttr DOMElement::getAttributeNode(string $name)","return":"<p class=\"para\">   The attribute node. Note that for XML namespace declarations   (<em>xmlns<\/em> and <em>xmlns:*<\/em> attributes) an    instance of <span class=\"classname\">DOMNameSpaceNode<\/span> is returned instead of a   <span class=\"classname\">DOMAttr<\/span>.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::getAttributeNodeNS":{"id":"domelement.getattributenodens","purpose":"Returns attribute node","prototype":"DOMAttr DOMElement::getAttributeNodeNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   The attribute node. Note that for XML namespace declarations   (<em>xmlns<\/em> and <em>xmlns:*<\/em> attributes) an    instance of <span class=\"classname\">DOMNameSpaceNode<\/span> is returned instead of a   <span class=\"classname\">DOMAttr<\/span> object.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::getAttributeNS":{"id":"domelement.getattributens","purpose":"Returns value of attribute","prototype":"string DOMElement::getAttributeNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   The value of the attribute, or an empty string if no attribute with the   given <code class=\"parameter\">localName<\/code> and <code class=\"parameter\">namespaceURI<\/code>    is found.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::getElementsByTagName":{"id":"domelement.getelementsbytagname","purpose":"Gets elements by tagname","prototype":"DOMNodeList DOMElement::getElementsByTagName(string $name)","return":"<p class=\"para\">   This function returns a new instance of the class   <span class=\"classname\">DOMNodeList<\/span> of all matched elements.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::getElementsByTagNameNS":{"id":"domelement.getelementsbytagnamens","purpose":"Get elements by namespaceURI and localName","prototype":"DOMNodeList DOMElement::getElementsByTagNameNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   This function returns a new instance of the class   <span class=\"classname\">DOMNodeList<\/span> of all matched elements in the order in   which they are encountered in a preorder traversal of this element tree.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::hasAttribute":{"id":"domelement.hasattribute","purpose":"Checks to see if attribute exists","prototype":"bool DOMElement::hasAttribute(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::hasAttributeNS":{"id":"domelement.hasattributens","purpose":"Checks to see if attribute exists","prototype":"bool DOMElement::hasAttributeNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::removeAttribute":{"id":"domelement.removeattribute","purpose":"Removes attribute","prototype":"bool DOMElement::removeAttribute(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::removeAttributeNode":{"id":"domelement.removeattributenode","purpose":"Removes attribute","prototype":"bool DOMElement::removeAttributeNode(DOMAttr $oldnode)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::removeAttributeNS":{"id":"domelement.removeattributens","purpose":"Removes attribute","prototype":"bool DOMElement::removeAttributeNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setAttribute":{"id":"domelement.setattribute","purpose":"Adds new attribute","prototype":"DOMAttr DOMElement::setAttribute(string $name, string $value)","return":"<p class=\"para\">   The new <span class=\"classname\">DOMAttr<\/span> or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setAttributeNode":{"id":"domelement.setattributenode","purpose":"Adds new attribute node to element","prototype":"DOMAttr DOMElement::setAttributeNode(DOMAttr $attr)","return":"<p class=\"para\">   Returns old node if the attribute has been replaced or <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setAttributeNodeNS":{"id":"domelement.setattributenodens","purpose":"Adds new attribute node to element","prototype":"DOMAttr DOMElement::setAttributeNodeNS(DOMAttr $attr)","return":"<p class=\"para\">   Returns the old node if the attribute has been replaced.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setAttributeNS":{"id":"domelement.setattributens","purpose":"Adds new attribute","prototype":"void DOMElement::setAttributeNS(string $namespaceURI, string $qualifiedName, string $value)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setIdAttribute":{"id":"domelement.setidattribute","purpose":"Declares the attribute specified by name to be of type ID","prototype":"void DOMElement::setIdAttribute(string $name, bool $isId)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setIdAttributeNode":{"id":"domelement.setidattributenode","purpose":"Declares the attribute specified by node to be of type ID","prototype":"void DOMElement::setIdAttributeNode(DOMAttr $attr, bool $isId)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMElement::setIdAttributeNS":{"id":"domelement.setidattributens","purpose":"Declares the attribute specified by local name and namespace URI to be of type ID","prototype":"void DOMElement::setIdAttributeNS(string $namespaceURI, string $localName, bool $isId)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMEntityReference::__construct":{"id":"domentityreference.construct","purpose":"Creates a new DOMEntityReference object","prototype":" DOMEntityReference::__construct(string $name)","return":"","versions":"PHP 5, PHP 7"},"DOMImplementation::__construct":{"id":"domimplementation.construct","purpose":"Creates a new DOMImplementation object","prototype":" DOMImplementation::__construct()","return":"","versions":"PHP 5, PHP 7"},"DOMImplementation::createDocument":{"id":"domimplementation.createdocument","purpose":"Creates a DOMDocument object of the specified type with its document element","prototype":"DOMDocument DOMImplementation::createDocument([string $namespaceURI = '' [, string $qualifiedName = '' [, DOMDocumentType $doctype = '']]])","return":"<p class=\"para\">   A new <span class=\"classname\">DOMDocument<\/span> object. If    <code class=\"parameter\">namespaceURI<\/code>, <code class=\"parameter\">qualifiedName<\/code>,    and <code class=\"parameter\">doctype<\/code> are null, the returned    <span class=\"classname\">DOMDocument<\/span> is empty with no document element  <\/p>","versions":"PHP 5, PHP 7"},"DOMImplementation::createDocumentType":{"id":"domimplementation.createdocumenttype","purpose":"Creates an empty DOMDocumentType object","prototype":"DOMDocumentType DOMImplementation::createDocumentType([string $qualifiedName = '' [, string $publicId = '' [, string $systemId = '']]])","return":"<p class=\"para\">   A new <span class=\"classname\">DOMDocumentType<\/span> node with its    <em>ownerDocument<\/em> set to <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"DOMImplementation::hasFeature":{"id":"domimplementation.hasfeature","purpose":"Test if the DOM implementation implements a specific feature","prototype":"bool DOMImplementation::hasFeature(string $feature, string $version)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNamedNodeMap::getNamedItem":{"id":"domnamednodemap.getnameditem","purpose":"Retrieves a node specified by name","prototype":"DOMNode DOMNamedNodeMap::getNamedItem(string $name)","return":"<p class=\"para\">   A node (of any type) with the specified <em>nodeName<\/em>, or    <strong><code>NULL<\/code><\/strong> if no node is found.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNamedNodeMap::getNamedItemNS":{"id":"domnamednodemap.getnameditemns","purpose":"Retrieves a node specified by local name and namespace URI","prototype":"DOMNode DOMNamedNodeMap::getNamedItemNS(string $namespaceURI, string $localName)","return":"<p class=\"para\">   A node (of any type) with the specified local name and namespace URI, or    <strong><code>NULL<\/code><\/strong> if no node is found.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNamedNodeMap::item":{"id":"domnamednodemap.item","purpose":"Retrieves a node specified by index","prototype":"DOMNode DOMNamedNodeMap::item(int $index)","return":"<p class=\"para\">   The node at the <code class=\"parameter\">index<\/code>th position in the map, or <strong><code>NULL<\/code><\/strong>   if that is not a valid index (greater than or equal to the number of nodes    in this map).  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::appendChild":{"id":"domnode.appendchild","purpose":"Adds new child at the end of the children","prototype":"DOMNode DOMNode::appendChild(DOMNode $newnode)","return":"<p class=\"para\">   The node added.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::C14N":{"id":"domnode.c14n","purpose":"Canonicalize nodes to a string","prototype":"string DOMNode::C14N([bool $exclusive = '' [, bool $with_comments = '' [, array $xpath = '' [, array $ns_prefixes = '']]]])","return":"<p class=\"para\">   Returns canonicalized nodes as a string or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"DOMNode::C14NFile":{"id":"domnode.c14nfile","purpose":"Canonicalize nodes to a file","prototype":"int DOMNode::C14NFile(string $uri [, bool $exclusive = '' [, bool $with_comments = '' [, array $xpath = '' [, array $ns_prefixes = '']]]])","return":"<p class=\"para\">   Number of bytes written or <strong><code>FALSE<\/code><\/strong> on failure  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"DOMNode::cloneNode":{"id":"domnode.clonenode","purpose":"Clones a node","prototype":"DOMNode DOMNode::cloneNode([bool $deep = ''])","return":"<p class=\"para\">   The cloned node.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::getLineNo":{"id":"domnode.getlineno","purpose":"Get line number for a node","prototype":"int DOMNode::getLineNo()","return":"<p class=\"para\">   Always returns the line number where the node was defined in.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"DOMNode::getNodePath":{"id":"domnode.getnodepath","purpose":"Get an XPath for a node","prototype":"string DOMNode::getNodePath()","return":"<p class=\"para\">   Returns a <span class=\"type\">string<\/span> containing the XPath, or <strong><code>NULL<\/code><\/strong> in case of an error.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"DOMNode::hasAttributes":{"id":"domnode.hasattributes","purpose":"Checks if node has attributes","prototype":"bool DOMNode::hasAttributes()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::hasChildNodes":{"id":"domnode.haschildnodes","purpose":"Checks if node has children","prototype":"bool DOMNode::hasChildNodes()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::insertBefore":{"id":"domnode.insertbefore","purpose":"Adds a new child before a reference node","prototype":"DOMNode DOMNode::insertBefore(DOMNode $newnode [, DOMNode $refnode = ''])","return":"<p class=\"para\">   The inserted node.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::isDefaultNamespace":{"id":"domnode.isdefaultnamespace","purpose":"Checks if the specified namespaceURI is the default namespace or not","prototype":"bool DOMNode::isDefaultNamespace(string $namespaceURI)","return":"<p class=\"para\">   Return <strong><code>TRUE<\/code><\/strong> if <code class=\"parameter\">namespaceURI<\/code> is the default   namespace, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::isSameNode":{"id":"domnode.issamenode","purpose":"Indicates if two nodes are the same node","prototype":"bool DOMNode::isSameNode(DOMNode $node)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::isSupported":{"id":"domnode.issupported","purpose":"Checks if feature is supported for specified version","prototype":"bool DOMNode::isSupported(string $feature, string $version)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::lookupNamespaceUri":{"id":"domnode.lookupnamespaceuri","purpose":"Gets the namespace URI of the node based on the prefix","prototype":"string DOMNode::lookupNamespaceUri(string $prefix)","return":"<p class=\"para\">   The namespace URI of the node.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::lookupPrefix":{"id":"domnode.lookupprefix","purpose":"Gets the namespace prefix of the node based on the namespace URI","prototype":"string DOMNode::lookupPrefix(string $namespaceURI)","return":"<p class=\"para\">   The prefix of the namespace.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::normalize":{"id":"domnode.normalize","purpose":"Normalizes the node","prototype":"void DOMNode::normalize()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::removeChild":{"id":"domnode.removechild","purpose":"Removes child from list of children","prototype":"DOMNode DOMNode::removeChild(DOMNode $oldnode)","return":"<p class=\"para\">   If the child could be removed the function returns the old child.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNode::replaceChild":{"id":"domnode.replacechild","purpose":"Replaces a child","prototype":"DOMNode DOMNode::replaceChild(DOMNode $newnode, DOMNode $oldnode)","return":"<p class=\"para\">   The old node or <strong><code>FALSE<\/code><\/strong> if an error occur.  <\/p>","versions":"PHP 5, PHP 7"},"DOMNodeList::count":{"id":"domnodelist.count","purpose":"Get number of nodes in the list","prototype":"int DOMNodeList::count()","return":"<p class=\"para\">   Returns number of nodes in the list or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"DOMNodeList::item":{"id":"domnodelist.item","purpose":"Retrieves a node specified by index","prototype":"DOMNode DOMNodeList::item(int $index)","return":"<p class=\"para\">   The node at the <code class=\"parameter\">index<\/code>th position in the    <span class=\"classname\">DOMNodeList<\/span>, or <strong><code>NULL<\/code><\/strong> if that is not a valid   index.  <\/p>","versions":"PHP 5, PHP 7"},"DOMProcessingInstruction::__construct":{"id":"domprocessinginstruction.construct","purpose":"Creates a new DOMProcessingInstruction object","prototype":" DOMProcessingInstruction::__construct(string $name [, string $value = ''])","return":"","versions":"PHP 5, PHP 7"},"DOMText::__construct":{"id":"domtext.construct","purpose":"Creates a new DOMText object","prototype":" DOMText::__construct([string $value = ''])","return":"","versions":"PHP 5, PHP 7"},"DOMText::isElementContentWhitespace":{"id":"domtext.iselementcontentwhitespace","purpose":"Returns whether this text node contains whitespace in element content","prototype":"bool DOMText::isElementContentWhitespace()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":""},"DOMText::isWhitespaceInElementContent":{"id":"domtext.iswhitespaceinelementcontent","purpose":"Indicates whether this text node contains whitespace","prototype":"bool DOMText::isWhitespaceInElementContent()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if node contains zero or more whitespace characters and   nothing else. Returns <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"DOMText::splitText":{"id":"domtext.splittext","purpose":"Breaks this node into two nodes at the specified offset","prototype":"DOMText DOMText::splitText(int $offset)","return":"<p class=\"para\">   The new node of the same type, which contains all the content at and after the    <code class=\"parameter\">offset<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"DOMXPath::__construct":{"id":"domxpath.construct","purpose":"Creates a new DOMXPath object","prototype":" DOMXPath::__construct(DOMDocument $doc)","return":"","versions":"PHP 5, PHP 7"},"DOMXPath::evaluate":{"id":"domxpath.evaluate","purpose":"Evaluates the given XPath expression and returns a typed result if possible","prototype":"mixed DOMXPath::evaluate(string $expression [, DOMNode $contextnode = '' [, bool $registerNodeNS = '']])","return":"<p class=\"para\">   Returns a typed result if possible or a <span class=\"classname\">DOMNodeList<\/span>    containing all nodes matching the given XPath <code class=\"parameter\">expression<\/code>.   <\/p>  <p class=\"para\">   If the <code class=\"parameter\">expression<\/code> is malformed or the   <code class=\"parameter\">contextnode<\/code> is invalid,    <span class=\"methodname\">DOMXPath::evaluate<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"DOMXPath::query":{"id":"domxpath.query","purpose":"Evaluates the given XPath expression","prototype":"DOMNodeList DOMXPath::query(string $expression [, DOMNode $contextnode = '' [, bool $registerNodeNS = '']])","return":"<p class=\"para\">   Returns a <span class=\"classname\">DOMNodeList<\/span> containing all nodes matching   the given XPath <code class=\"parameter\">expression<\/code>. Any expression which   does not return nodes will return an empty   <span class=\"classname\">DOMNodeList<\/span>.  <\/p>  <p class=\"para\">   If the <code class=\"parameter\">expression<\/code> is malformed or the   <code class=\"parameter\">contextnode<\/code> is invalid,    <span class=\"methodname\">DOMXPath::query<\/span> returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"PHP 5, PHP 7"},"DOMXPath::registerNamespace":{"id":"domxpath.registernamespace","purpose":"Registers the namespace with the DOMXPath object","prototype":"bool DOMXPath::registerNamespace(string $prefix, string $namespaceURI)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"DOMXPath::registerPhpFunctions":{"id":"domxpath.registerphpfunctions","purpose":"Register PHP functions as XPath functions","prototype":"void DOMXPath::registerPhpFunctions([mixed $restrict = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"dom_import_simplexml":{"id":"function.dom-import-simplexml","purpose":"Gets a DOMElement object from a   SimpleXMLElement object","prototype":"DOMElement dom_import_simplexml(SimpleXMLElement $node)","return":"<p class=\"para\">   The <span class=\"classname\">DOMElement<\/span> node added or <strong><code>FALSE<\/code><\/strong> if any errors occur.  <\/p>","versions":"PHP 5, PHP 7"},"libxml_clear_errors":{"id":"function.libxml-clear-errors","purpose":"Clear libxml error buffer","prototype":"void libxml_clear_errors()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"libxml_disable_entity_loader":{"id":"function.libxml-disable-entity-loader","purpose":"Disable the ability to load external entities","prototype":"bool libxml_disable_entity_loader([bool $disable = ''])","return":"<p class=\"para\">   Returns the previous value.  <\/p>","versions":"PHP 5 >= 5.2.11, PHP 7"},"libxml_get_errors":{"id":"function.libxml-get-errors","purpose":"Retrieve array of errors","prototype":"array libxml_get_errors()","return":"<p class=\"para\">   Returns an array with <span class=\"type\">LibXMLError<\/span> objects if there are any   errors in the buffer, or an empty array otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"libxml_get_last_error":{"id":"function.libxml-get-last-error","purpose":"Retrieve last error from libxml","prototype":"LibXMLError libxml_get_last_error()","return":"<p class=\"para\">   Returns a <span class=\"type\">LibXMLError<\/span> object if there is any error in the   buffer, <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"libxml_set_external_entity_loader":{"id":"function.libxml-set-external-entity-loader","purpose":"Changes the default external entity loader","prototype":"bool libxml_set_external_entity_loader(callable $resolver_function)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.4.0, PHP 7"},"libxml_set_streams_context":{"id":"function.libxml-set-streams-context","purpose":"Set the streams context for the next libxml document load or write","prototype":"void libxml_set_streams_context(resource $streams_context)","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"libxml_use_internal_errors":{"id":"function.libxml-use-internal-errors","purpose":"Disable libxml errors and allow user to fetch error information as needed","prototype":"bool libxml_use_internal_errors([bool $use_errors = ''])","return":"<p class=\"para\">   This function returns the previous value of   <code class=\"parameter\">use_errors<\/code>.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SDO_DAS_ChangeSummary::beginLogging":{"id":"sdo-das-changesummary.beginlogging","purpose":"Begin change logging","prototype":"void SDO_DAS_ChangeSummary::beginLogging()","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_ChangeSummary::endLogging":{"id":"sdo-das-changesummary.endlogging","purpose":"End change logging","prototype":"void SDO_DAS_ChangeSummary::endLogging()","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_ChangeSummary::getChangeType":{"id":"sdo-das-changesummary.getchangetype","purpose":"Get the type of change made to an SDO_DataObject","prototype":"int SDO_DAS_ChangeSummary::getChangeType(SDO_DataObject $dataObject)","return":"<p class=\"para\">   The type of change which has been made. The change type is expressed as an    enumeration and will be one of the following four values:   <ul class=\"itemizedlist\">    <li class=\"listitem\">     <p class=\"para\">      SDO_DAS_ChangeSummary::NONE     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      SDO_DAS_ChangeSummary::MODIFICATION     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      SDO_DAS_ChangeSummary::ADDITION     <\/p>    <\/li>    <li class=\"listitem\">     <p class=\"para\">      SDO_DAS_ChangeSummary::DELETION     <\/p>    <\/li>   <\/ul>  <\/p>","versions":"^"},"SDO_DAS_ChangeSummary::getChangedDataObjects":{"id":"sdo-das-changesummary.getchangeddataobjects","purpose":"Get the changed data objects from a change summary","prototype":"SDO_List SDO_DAS_ChangeSummary::getChangedDataObjects()","return":"<p class=\"para\">   Returns an SDO_List of SDO_DataObjects.  <\/p>","versions":"^"},"SDO_DAS_ChangeSummary::getOldContainer":{"id":"sdo-das-changesummary.getoldcontainer","purpose":"Get the old container for a deleted SDO_DataObject","prototype":"SDO_DataObject SDO_DAS_ChangeSummary::getOldContainer(SDO_DataObject $data_object)","return":"<p class=\"para\">   The old containing data object of the deleted SDO_DataObject.  <\/p>","versions":"^"},"SDO_DAS_ChangeSummary::getOldValues":{"id":"sdo-das-changesummary.getoldvalues","purpose":"Get the old values for a given changed SDO_DataObject","prototype":"SDO_List SDO_DAS_ChangeSummary::getOldValues(SDO_DataObject $data_object)","return":"<p class=\"para\">   A list of SDO_DAS_Settings describing the old values for the    changed properties of the SDO_DataObject.   If the change type is SDO_DAS_ChangeSummary::ADDITION, this   list is empty.  <\/p>","versions":"^"},"SDO_DAS_ChangeSummary::isLogging":{"id":"sdo-das-changesummary.islogging","purpose":"Test to see whether change logging is switched on","prototype":"bool SDO_DAS_ChangeSummary::isLogging()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if change logging is on, otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_DAS_DataFactory::addPropertyToType":{"id":"sdo-das-datafactory.addpropertytotype","purpose":"Adds a property to a type","prototype":"void SDO_DAS_DataFactory::addPropertyToType(string $parent_type_namespace_uri, string $parent_type_name, string $property_name, string $type_namespace_uri, string $type_name [, array $options = ''])","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_DataFactory::addType":{"id":"sdo-das-datafactory.addtype","purpose":"Add a new type to a model","prototype":"void SDO_DAS_DataFactory::addType(string $type_namespace_uri, string $type_name [, array $options = ''])","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_DataFactory::getDataFactory":{"id":"sdo-das-datafactory.getdatafactory","purpose":"Get a data factory instance","prototype":"SDO_DAS_DataFactory SDO_DAS_DataFactory::getDataFactory()","return":"<p class=\"para\">   Returns an SDO_DAS_DataFactory.  <\/p>","versions":"^"},"SDO_DAS_DataObject::getChangeSummary":{"id":"sdo-das-dataobject.getchangesummary","purpose":"Get a data object's change summary","prototype":"SDO_DAS_ChangeSummary SDO_DAS_DataObject::getChangeSummary()","return":"<p class=\"para\">   Returns the SDO_DAS_ChangeSummary for an SDO_DAS_DataObject,    or NULL if it does not have one.  <\/p>","versions":"^"},"SDO_DAS_Setting::getListIndex":{"id":"sdo-das-setting.getlistindex","purpose":"Get the list index for a changed many-valued property","prototype":"int SDO_DAS_Setting::getListIndex()","return":"<p class=\"para\">   The list index for the element of the many-valued property which    has been changed.  <\/p>","versions":"^"},"SDO_DAS_Setting::getPropertyIndex":{"id":"sdo-das-setting.getpropertyindex","purpose":"Get the property index for a changed property","prototype":"int SDO_DAS_Setting::getPropertyIndex()","return":"<p class=\"para\">   The property index for a changed property.  <\/p>","versions":"^"},"SDO_DAS_Setting::getPropertyName":{"id":"sdo-das-setting.getpropertyname","purpose":"Get the property name for a changed property","prototype":"string SDO_DAS_Setting::getPropertyName()","return":"<p class=\"para\">   The property name for a changed property.  <\/p>","versions":"^"},"SDO_DAS_Setting::getValue":{"id":"sdo-das-setting.getvalue","purpose":"Get the old value for the changed property","prototype":"mixed SDO_DAS_Setting::getValue()","return":"<p class=\"para\">   Returns the old value of the changed property.  <\/p>","versions":"^"},"SDO_DAS_Setting::isSet":{"id":"sdo-das-setting.isset","purpose":"Test whether a property was set prior to being modified","prototype":"bool SDO_DAS_Setting::isSet()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the property was set prior to being modified,    otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_DataFactory::create":{"id":"sdo-datafactory.create","purpose":"Create an SDO_DataObject","prototype":"void SDO_DataFactory::create(string $type_namespace_uri, string $type_name)","return":"<p class=\"para\">   Returns the newly created SDO_DataObject.  <\/p>","versions":"^"},"SDO_DataObject::clear":{"id":"sdo-dataobject.clear","purpose":"Clear an SDO_DataObject's properties","prototype":"void SDO_DataObject::clear()","return":"<p class=\"para\">   No return values.  <\/p>","versions":"^"},"SDO_DataObject::createDataObject":{"id":"sdo-dataobject.createdataobject","purpose":"Create a child SDO_DataObject","prototype":"SDO_DataObject SDO_DataObject::createDataObject(mixed $identifier)","return":"<p class=\"para\">   Returns the newly created SDO_DataObject.  <\/p>","versions":"^"},"SDO_DataObject::getContainer":{"id":"sdo-dataobject.getcontainer","purpose":"Get a data object's container","prototype":"SDO_DataObject SDO_DataObject::getContainer()","return":"<p class=\"para\">   Returns the SDO_DataObject which contains this SDO_DataObject,    or returns NULL if this is a root SDO_DataObject    (i.e. it has no container).  <\/p>","versions":"^"},"SDO_DataObject::getSequence":{"id":"sdo-dataobject.getsequence","purpose":"Get the sequence for a data object","prototype":"SDO_Sequence SDO_DataObject::getSequence()","return":"<p class=\"para\">   The SDO_Sequence for this SDO_DataObject, or returns NULL if the   SDO_DataObject is not of a type which can have a sequence.  <\/p>","versions":"^"},"SDO_DataObject::getTypeName":{"id":"sdo-dataobject.gettypename","purpose":"Return the name of the type for a data object","prototype":"string SDO_DataObject::getTypeName()","return":"<p class=\"para\">   The name of the type for the data object.  <\/p>","versions":"^"},"SDO_DataObject::getTypeNamespaceURI":{"id":"sdo-dataobject.gettypenamespaceuri","purpose":"Return the namespace URI of the type for a data object","prototype":"string SDO_DataObject::getTypeNamespaceURI()","return":"<p class=\"para\">   The namespace URI of the type for the data object.  <\/p>","versions":"^"},"SDO_Exception::getCause":{"id":"sdo-exception.getcause","purpose":"Get the cause of the exception","prototype":"mixed SDO_Exception::getCause()","return":"<p class=\"para\">   Returns the cause of this exception or NULL if the cause is nonexistent or unknown.  <\/p>","versions":"^"},"SDO_List::insert":{"id":"sdo-list.insert","purpose":"Insert into a list","prototype":"void SDO_List::insert(mixed $value [, int $index = ''])","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_Model_Property::getContainingType":{"id":"sdo-model-property.getcontainingtype","purpose":"Get the SDO_Model_Type which contains this property","prototype":"SDO_Model_Type SDO_Model_Property::getContainingType()","return":"<p class=\"para\">   Returns the SDO_Model_Type which contains this property.  <\/p>","versions":"^"},"SDO_Model_Property::getDefault":{"id":"sdo-model-property.getdefault","purpose":"Get the default value for the property","prototype":"mixed SDO_Model_Property::getDefault()","return":"<p class=\"para\">   Returns the default value for the property.  <\/p>","versions":"^"},"SDO_Model_Property::getName":{"id":"sdo-model-property.getname","purpose":"Get the name of the SDO_Model_Property","prototype":"string SDO_Model_Property::getName()","return":"<p class=\"para\">   Returns the name of the SDO_Model_Property.  <\/p>","versions":"^"},"SDO_Model_Property::getType":{"id":"sdo-model-property.gettype","purpose":"Get the SDO_Model_Type of the property","prototype":"SDO_Model_Type SDO_Model_Property::getType()","return":"<p class=\"para\">   Returns the SDO_Model_Type describing the property&#039;s type information.  <\/p>","versions":"^"},"SDO_Model_Property::isContainment":{"id":"sdo-model-property.iscontainment","purpose":"Test to see if the property defines a containment relationship","prototype":"bool SDO_Model_Property::isContainment()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the property defines a containment relationship,   or <strong><code>FALSE<\/code><\/strong> if it is reference.  <\/p>","versions":"^"},"SDO_Model_Property::isMany":{"id":"sdo-model-property.ismany","purpose":"Test to see if the property is many-valued","prototype":"bool SDO_Model_Property::isMany()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this is a many-valued property, otherwise returns    <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Model_ReflectionDataObject::__construct":{"id":"sdo-model-reflectiondataobject.construct","purpose":"Construct an SDO_Model_ReflectionDataObject","prototype":" SDO_Model_ReflectionDataObject::__construct(SDO_DataObject $data_object)","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_Model_ReflectionDataObject::export":{"id":"sdo-model-reflectiondataobject.export","purpose":"Get a string describing the SDO_DataObject","prototype":"mixed SDO_Model_ReflectionDataObject::export(SDO_Model_ReflectionDataObject $rdo [, bool $return = ''])","return":"<p class=\"para\">   Returns the output if TRUE is specified for return,    otherwise NULL.  <\/p>","versions":"^"},"SDO_Model_ReflectionDataObject::getContainmentProperty":{"id":"sdo-model-reflectiondataobject.getcontainmentproperty","purpose":"Get the property which defines the containment relationship to the data object","prototype":"SDO_Model_Property SDO_Model_ReflectionDataObject::getContainmentProperty()","return":"<p class=\"para\">   Returns the container&#039;s SDO_Model_Property which references the    SDO_DataObject, or <strong><code>NULL<\/code><\/strong> if it is a root SDO_DataObject.  <\/p>","versions":"^"},"SDO_Model_ReflectionDataObject::getInstanceProperties":{"id":"sdo-model-reflectiondataobject.getinstanceproperties","purpose":"Get the instance properties of the SDO_DataObject","prototype":"array SDO_Model_ReflectionDataObject::getInstanceProperties()","return":"<p class=\"para\">    An array of SDO_Model_Property objects.  <\/p>","versions":"^"},"SDO_Model_ReflectionDataObject::getType":{"id":"sdo-model-reflectiondataobject.gettype","purpose":"Get the SDO_Model_Type for the SDO_DataObject","prototype":"SDO_Model_Type SDO_Model_ReflectionDataObject::getType()","return":"<p class=\"para\">   Returns the SDO_Model_Type for the SDO_DataObject.  <\/p>","versions":"^"},"SDO_Model_Type::getBaseType":{"id":"sdo-model-type.getbasetype","purpose":"Get the base type for this type","prototype":"SDO_Model_Type SDO_Model_Type::getBaseType()","return":"<p class=\"para\">   Returns the SDO_Model_Type for the base type if this type inherits from    another, otherwise returns <strong><code>NULL<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Model_Type::getName":{"id":"sdo-model-type.getname","purpose":"Get the name of the type","prototype":"string SDO_Model_Type::getName()","return":"<p class=\"para\">   Returns the name of the type.  <\/p>","versions":"^"},"SDO_Model_Type::getNamespaceURI":{"id":"sdo-model-type.getnamespaceuri","purpose":"Get the namespace URI of the type","prototype":"string SDO_Model_Type::getNamespaceURI()","return":"<p class=\"para\">   Returns the namespace URI of the type.  <\/p>","versions":"^"},"SDO_Model_Type::getProperties":{"id":"sdo-model-type.getproperties","purpose":"Get the SDO_Model_Property objects defined for the type","prototype":"array SDO_Model_Type::getProperties()","return":"<p class=\"para\">   Returns an array of SDO_Model_Property objects.  <\/p>","versions":"^"},"SDO_Model_Type::getProperty":{"id":"sdo-model-type.getproperty","purpose":"Get an SDO_Model_Property of the type","prototype":"SDO_Model_Property SDO_Model_Type::getProperty(mixed $identifier)","return":"<p class=\"para\">   Returns the SDO_Model_Property.  <\/p>","versions":"^"},"SDO_Model_Type::isAbstractType":{"id":"sdo-model-type.isabstracttype","purpose":"Test to see if this SDO_Model_Type is an abstract data type","prototype":"bool SDO_Model_Type::isAbstractType()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this type is an abstract data type, otherwise returns    <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Model_Type::isDataType":{"id":"sdo-model-type.isdatatype","purpose":"Test to see if this SDO_Model_Type is a primitive data type","prototype":"bool SDO_Model_Type::isDataType()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this type is a primitive data type, otherwise returns    <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Model_Type::isInstance":{"id":"sdo-model-type.isinstance","purpose":"Test for an SDO_DataObject being an instance of this SDO_Model_Type","prototype":"bool SDO_Model_Type::isInstance(SDO_DataObject $data_object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the SDO_DataObject provided is an instance of this    SDO_Model_Type, or a derived type, otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Model_Type::isOpenType":{"id":"sdo-model-type.isopentype","purpose":"Test to see if this type is an open type","prototype":"bool SDO_Model_Type::isOpenType()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this type is open, otherwise returns <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Model_Type::isSequencedType":{"id":"sdo-model-type.issequencedtype","purpose":"Test to see if this is a sequenced type","prototype":"bool SDO_Model_Type::isSequencedType()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if this type is sequence, otherwise return <strong><code>FALSE<\/code><\/strong>.  <\/p>","versions":"^"},"SDO_Sequence::getProperty":{"id":"sdo-sequence.getproperty","purpose":"Return the property for the specified sequence index","prototype":"SDO_Model_Property SDO_Sequence::getProperty(int $sequence_index)","return":"<p class=\"para\">   An SDO_Model_Property. A return value of NULL means the sequence element does not belong to a property and must therefore be unstructured text.   <\/p>","versions":"^"},"SDO_Sequence::insert":{"id":"sdo-sequence.insert","purpose":"Insert into a sequence","prototype":"void SDO_Sequence::insert(mixed $value [, int $sequenceIndex = '' [, mixed $propertyIdentifier = '']])","return":"<p class=\"para\">    None.  <\/p>","versions":"^"},"SDO_Sequence::move":{"id":"sdo-sequence.move","purpose":"Move an item to another sequence position","prototype":"void SDO_Sequence::move(int $toIndex, int $fromIndex)","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_Relational::applyChanges":{"id":"sdo-das-relational.applychanges","purpose":"Applies the changes made to a data graph back to the database","prototype":"void SDO_DAS_Relational::applyChanges(PDO $database_handle, SDODataObject $root_data_object)","return":"<p class=\"para\">   None.   Note however that the datagraph that was passed is still intact and usable.   Furthermore, if data objects were created and written back to a    table with autogenerated primary keys,    then those primary keys will now be set in the data objects.   If the changes were successfully written,    then the change summary associated with the datagraph will    have been cleared,    so that it is possible to now make further changes to the    data graph and apply those changes in turn.   In this way it is possible to work with the same data graph    and apply changes repeatedly.  <\/p>","versions":"^"},"SDO_DAS_Relational::__construct":{"id":"sdo-das-relational.construct","purpose":"Creates an instance of a Relational Data Access Service","prototype":" SDO_DAS_Relational::__construct(array $database_metadata [, string $application_root_type = '' [, array $SDO_containment_references_metadata = '']])","return":"<p class=\"para\">   Returns an SDO_DAS_Relational object on success.  <\/p>","versions":"^"},"SDO_DAS_Relational::createRootDataObject":{"id":"sdo-das-relational.createrootdataobject","purpose":"Returns the special root object in an otherwise    empty data graph. Used when creating a data graph from scratch","prototype":"SDODataObject SDO_DAS_Relational::createRootDataObject()","return":"<p class=\"para\">   The root object.  <\/p>","versions":"^"},"SDO_DAS_Relational::executePreparedQuery":{"id":"sdo-das-relational.executepreparedquery","purpose":"Executes an SQL query passed as a prepared statement, with a    list of values to substitute for placeholders, and return the    results as a normalised data graph","prototype":"SDODataObject SDO_DAS_Relational::executePreparedQuery(PDO $database_handle, PDOStatement $prepared_statement, array $value_list [, array $column_specifier = ''])","return":"<p class=\"para\">   Returns a data graph.    Specifically, it returns a root object of a special type.   Under this root object will be the data from the result set.   The root object will have a multi-valued containment property    with the same name as the application root type    specified on the constructor,   and that property will contain one or more data objects    of the application root type.  <\/p>  <p class=\"para\">   In the event that the query returns no data,    the special root object will still be returned but    the containment property for the application root type will be empty.  <\/p>","versions":"^"},"SDO_DAS_Relational::executeQuery":{"id":"sdo-das-relational.executequery","purpose":"Executes a given SQL query against a relational database    and returns the results as a normalised data graph","prototype":"SDODataObject SDO_DAS_Relational::executeQuery(PDO $database_handle, string $SQL_statement [, array $column_specifier = ''])","return":"<p class=\"para\">   Returns a data graph.    Specifically, it returns a root object of a special type.   Under this root object will be the data from the result set.   The root object will have a multi-valued containment property    with the same name as the application root type    specified on the constructor,   and that property will contain one or more data objects    of the application root type.  <\/p>  <p class=\"para\">   In the event that the query returns no data,    the special root object will still be returned but    the containment property for the application root type will be empty.  <\/p>","versions":"^"},"SDO_DAS_XML::addTypes":{"id":"sdo-das-xml.addtypes","purpose":"To load a second or subsequent schema file to a SDO_DAS_XML object","prototype":"void SDO_DAS_XML::addTypes(string $xsd_file)","return":"<p class=\"para\">   None if successful, otherwise throws an exception as described below.  <\/p>","versions":"^"},"SDO_DAS_XML::create":{"id":"sdo-das-xml.create","purpose":"To create SDO_DAS_XML object for a given schema file","prototype":"SDO_DAS_XML SDO_DAS_XML::create([mixed $xsd_file = '' [, string $key = '']])","return":"<p class=\"para\">   Returns SDO_DAS_XML object on success otherwise throws an exception as described below.  <\/p>","versions":"^"},"SDO_DAS_XML::createDataObject":{"id":"sdo-das-xml.createdataobject","purpose":"Creates SDO_DataObject for a given namespace URI and type name","prototype":"SDO_DataObject SDO_DAS_XML::createDataObject(string $namespace_uri, string $type_name)","return":"<p class=\"para\">   Returns SDO_DataObject on success.  <\/p>","versions":"^"},"SDO_DAS_XML::createDocument":{"id":"sdo-das-xml.createdocument","purpose":"Creates an XML Document object from scratch, without the need to load a document from a file or string","prototype":"SDO_DAS_XML_Document SDO_DAS_XML::createDocument(string $document_element_name, string $document_element_namespace_URI [, SDO_DataObject $dataobject = ''])","return":"<p class=\"para\">   Returns an SDO_XML_DAS_Document object on success.  <\/p>","versions":"^"},"SDO_DAS_XML::loadFile":{"id":"sdo-das-xml.loadfile","purpose":"Returns SDO_DAS_XML_Document object for a given path to xml instance document","prototype":"SDO_XMLDocument SDO_DAS_XML::loadFile(string $xml_file)","return":"<p class=\"para\">   Returns SDO_DAS_XML_Document object on Success or throws    exception as described.  <\/p>","versions":"^"},"SDO_DAS_XML::loadString":{"id":"sdo-das-xml.loadstring","purpose":"Returns SDO_DAS_XML_Document for a given xml instance string","prototype":"SDO_DAS_XML_Document SDO_DAS_XML::loadString(string $xml_string)","return":"<p class=\"para\">   Returns SDO_DAS_XML_Document object on Success    or throws exception as described.  <\/p>","versions":"^"},"SDO_DAS_XML::saveFile":{"id":"sdo-das-xml.savefile","purpose":"Saves the SDO_DAS_XML_Document object to a file","prototype":"void SDO_DAS_XML::saveFile(SDO_XMLDocument $xdoc, string $xml_file [, int $indent = ''])","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_XML::saveString":{"id":"sdo-das-xml.savestring","purpose":"Saves the SDO_DAS_XML_Document object to a string","prototype":"string SDO_DAS_XML::saveString(SDO_XMLDocument $xdoc [, int $indent = ''])","return":"<p class=\"para\">   xml string.  <\/p>","versions":"^"},"SDO_DAS_XML_Document::getRootDataObject":{"id":"sdo-das-xml-document.getrootdataobject","purpose":"Returns the root SDO_DataObject","prototype":"SDO_DataObject SDO_DAS_XML_Document::getRootDataObject()","return":"<p class=\"para\">   Returns the root SDO_DataObject.  <\/p>","versions":"^"},"SDO_DAS_XML_Document::getRootElementName":{"id":"sdo-das-xml-document.getrootelementname","purpose":"Returns root element's name","prototype":"string SDO_DAS_XML_Document::getRootElementName()","return":"<p class=\"para\">   Returns root element&#039;s name.  <\/p>","versions":"^"},"SDO_DAS_XML_Document::getRootElementURI":{"id":"sdo-das-xml-document.getrootelementuri","purpose":"Returns root element's URI string","prototype":"string SDO_DAS_XML_Document::getRootElementURI()","return":"<p class=\"para\">   Returns root element&#039;s URI string.  <\/p>","versions":"^"},"SDO_DAS_XML_Document::setEncoding":{"id":"sdo-das-xml-document.setencoding","purpose":"Sets the given string as encoding","prototype":"void SDO_DAS_XML_Document::setEncoding(string $encoding)","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_XML_Document::setXMLDeclaration":{"id":"sdo-das-xml-document.setxmldeclaration","purpose":"Sets the xml declaration","prototype":"void SDO_DAS_XML_Document::setXMLDeclaration(bool $xmlDeclatation)","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SDO_DAS_XML_Document::setXMLVersion":{"id":"sdo-das-xml-document.setxmlversion","purpose":"Sets the given string as xml version","prototype":"void SDO_DAS_XML_Document::setXMLVersion(string $xmlVersion)","return":"<p class=\"para\">   None.  <\/p>","versions":"^"},"SimpleXMLElement::addAttribute":{"id":"simplexmlelement.addattribute","purpose":"Adds an attribute to the SimpleXML element","prototype":"void SimpleXMLElement::addAttribute(string $name [, string $value = '' [, string $namespace = '']])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"SimpleXMLElement::addChild":{"id":"simplexmlelement.addchild","purpose":"Adds a child element to the XML node","prototype":"SimpleXMLElement SimpleXMLElement::addChild(string $name [, string $value = '' [, string $namespace = '']])","return":"<p class=\"para\">   The <em>addChild<\/em> method returns a <span class=\"type\">SimpleXMLElement<\/span>   object representing the child added to the XML node.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"SimpleXMLElement::asXML":{"id":"simplexmlelement.asxml","purpose":"Return a well-formed XML string based on SimpleXML element","prototype":"mixed SimpleXMLElement::asXML([string $filename = ''])","return":"<p class=\"para\">   If the <code class=\"parameter\">filename<\/code> isn&#039;t specified, this function   returns a <span class=\"type\">string<\/span> on success and <strong><code>FALSE<\/code><\/strong> on error. If the   parameter is specified, it returns <strong><code>TRUE<\/code><\/strong> if the file was written   successfully and <strong><code>FALSE<\/code><\/strong> otherwise.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLElement::attributes":{"id":"simplexmlelement.attributes","purpose":"Identifies an element's attributes","prototype":"SimpleXMLElement SimpleXMLElement::attributes([string $ns = '' [, bool $is_prefix = '']])","return":"<p class=\"para\">   Returns a <span class=\"classname\">SimpleXMLElement<\/span> object that can be   iterated over to loop through the attributes on the tag.  <\/p>  <p class=\"para\">   Returns <strong><code>NULL<\/code><\/strong> if called on a <span class=\"classname\">SimpleXMLElement<\/span>   object that already represents an attribute and not a tag.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLElement::children":{"id":"simplexmlelement.children","purpose":"Finds children of given node","prototype":"SimpleXMLElement SimpleXMLElement::children([string $ns = '' [, bool $is_prefix = '']])","return":"<p class=\"para\">   Returns a <span class=\"classname\">SimpleXMLElement<\/span> element, whether the node    has children or not.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLElement::__construct":{"id":"simplexmlelement.construct","purpose":"Creates a new SimpleXMLElement object","prototype":" SimpleXMLElement::__construct(string $data [, int $options = '' [, bool $data_is_url = '' [, string $ns = \"\" [, bool $is_prefix = '']]]])","return":"<p class=\"para\">   Returns a <span class=\"type\">SimpleXMLElement<\/span> object representing    <code class=\"parameter\">data<\/code>.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLElement::count":{"id":"simplexmlelement.count","purpose":"Counts the children of an element","prototype":"int SimpleXMLElement::count()","return":"<p class=\"para\">   Returns the number of elements of an element.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SimpleXMLElement::getDocNamespaces":{"id":"simplexmlelement.getdocnamespaces","purpose":"Returns namespaces declared in document","prototype":"array SimpleXMLElement::getDocNamespaces([bool $recursive = '' [, bool $from_root = '']])","return":"<p class=\"para\">   The <em>getDocNamespaces<\/em> method returns an <span class=\"type\">array<\/span>    of namespace names with their associated URIs.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SimpleXMLElement::getName":{"id":"simplexmlelement.getname","purpose":"Gets the name of the XML element","prototype":"string SimpleXMLElement::getName()","return":"<p class=\"para\">   The <em>getName<\/em> method returns as a <span class=\"type\">string<\/span> the    name of the XML tag referenced by the SimpleXMLElement object.  <\/p>","versions":"PHP 5 >= 5.1.3, PHP 7"},"SimpleXMLElement::getNamespaces":{"id":"simplexmlelement.getnamespaces","purpose":"Returns namespaces used in document","prototype":"array SimpleXMLElement::getNamespaces([bool $recursive = ''])","return":"<p class=\"para\">   The <em>getNamespaces<\/em> method returns an <span class=\"type\">array<\/span> of    namespace names with their associated URIs.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7"},"SimpleXMLElement::registerXPathNamespace":{"id":"simplexmlelement.registerxpathnamespace","purpose":"Creates a prefix\/ns context for the next XPath query","prototype":"bool SimpleXMLElement::registerXPathNamespace(string $prefix, string $ns)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"SimpleXMLElement::saveXML":{"id":"simplexmlelement.savexml","purpose":"Alias of SimpleXMLElement::asXML","prototype":" SimpleXMLElement::saveXML()","return":"","versions":"PHP 5 >= 5.2.0, PHP 7"},"SimpleXMLElement::__toString":{"id":"simplexmlelement.tostring","purpose":"Returns the string content","prototype":"string SimpleXMLElement::__toString()","return":"<p class=\"para\">   Returns the string content on success or an empty string on failure.  <\/p>","versions":"PHP 5 >= 5.3.0, PHP 7"},"SimpleXMLElement::xpath":{"id":"simplexmlelement.xpath","purpose":"Runs XPath query on XML data","prototype":"array SimpleXMLElement::xpath(string $path)","return":"<p class=\"para\">   Returns an <span class=\"type\">array<\/span> of SimpleXMLElement objects or <strong><code>FALSE<\/code><\/strong> in   case of an error.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::current":{"id":"simplexmliterator.current","purpose":"Returns the current element","prototype":"mixed SimpleXMLIterator::current()","return":"<p class=\"para\">   Returns the current element as a <span class=\"classname\">SimpleXMLIterator<\/span> object or <strong><code>NULL<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::getChildren":{"id":"simplexmliterator.getchildren","purpose":"Returns the sub-elements of the current element","prototype":"SimpleXMLIterator SimpleXMLIterator::getChildren()","return":"<p class=\"para\">   Returns a <span class=\"classname\">SimpleXMLIterator<\/span> object containing   the sub-elements of the current element.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::hasChildren":{"id":"simplexmliterator.haschildren","purpose":"Checks whether the current element has sub elements","prototype":"bool SimpleXMLIterator::hasChildren()","return":"<p class=\"para\">   <strong><code>TRUE<\/code><\/strong> if the current element has sub-elements, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::key":{"id":"simplexmliterator.key","purpose":"Return current key","prototype":"mixed SimpleXMLIterator::key()","return":"<p class=\"para\">   Returns the XML tag name of the element referenced by the current <span class=\"classname\">SimpleXMLIterator<\/span> object or <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::next":{"id":"simplexmliterator.next","purpose":"Move to next element","prototype":"void SimpleXMLIterator::next()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::rewind":{"id":"simplexmliterator.rewind","purpose":"Rewind to the first element","prototype":"void SimpleXMLIterator::rewind()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"SimpleXMLIterator::valid":{"id":"simplexmliterator.valid","purpose":"Check whether the current element is valid","prototype":"bool SimpleXMLIterator::valid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if the current element is valid, otherwise <strong><code>FALSE<\/code><\/strong>  <\/p>","versions":"PHP 5, PHP 7"},"simplexml_import_dom":{"id":"function.simplexml-import-dom","purpose":"Get a SimpleXMLElement object from a DOM node","prototype":"SimpleXMLElement simplexml_import_dom(DOMNode $node [, string $class_name = \"SimpleXMLElement\"])","return":"<p class=\"para\">   Returns a <span class=\"type\">SimpleXMLElement<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"simplexml_load_file":{"id":"function.simplexml-load-file","purpose":"Interprets an XML file into an object","prototype":"SimpleXMLElement simplexml_load_file(string $filename [, string $class_name = \"SimpleXMLElement\" [, int $options = '' [, string $ns = \"\" [, bool $is_prefix = '']]]])","return":"<p class=\"para\">   Returns an <span class=\"type\">object<\/span> of class <span class=\"type\">SimpleXMLElement<\/span> with   properties containing the data held within the XML document, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"simplexml_load_string":{"id":"function.simplexml-load-string","purpose":"Interprets a string of XML into an object","prototype":"SimpleXMLElement simplexml_load_string(string $data [, string $class_name = \"SimpleXMLElement\" [, int $options = '' [, string $ns = \"\" [, bool $is_prefix = '']]]])","return":"<p class=\"para\">   Returns an <span class=\"type\">object<\/span> of class <span class=\"type\">SimpleXMLElement<\/span> with   properties containing the data held within the xml document, or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <div class=\"warning\"><strong class=\"warning\">Warning<\/strong><p class=\"simpara\">This function mayreturn Boolean <strong><code>FALSE<\/code><\/strong>, but may also return a non-Boolean value whichevaluates to <strong><code>FALSE<\/code><\/strong>. Please read the section on <a href=\"language.types.boolean.html\" class=\"link\">Booleans<\/a> for moreinformation. Use <a href=\"language.operators.comparison.html\" class=\"link\">the ===operator<\/a> for testing the return value of thisfunction.<\/p><\/div>","versions":"PHP 5, PHP 7"},"wddx_add_vars":{"id":"function.wddx-add-vars","purpose":"Add variables to a WDDX packet with the specified ID","prototype":"bool wddx_add_vars(resource $packet_id, mixed $var_name [, mixed $... = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"wddx_deserialize":{"id":"function.wddx-deserialize","purpose":"Unserializes a WDDX packet","prototype":"mixed wddx_deserialize(string $packet)","return":"<p class=\"para\">   Returns the deserialized value which can be a string, a number or an   array. Note that structures are deserialized into associative arrays.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"wddx_packet_end":{"id":"function.wddx-packet-end","purpose":"Ends a WDDX packet with the specified ID","prototype":"string wddx_packet_end(resource $packet_id)","return":"<p class=\"para\">   Returns the string containing the WDDX packet.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"wddx_packet_start":{"id":"function.wddx-packet-start","purpose":"Starts a new WDDX packet with structure inside it","prototype":"resource wddx_packet_start([string $comment = ''])","return":"<p class=\"para\">   Returns a packet ID for use in later functions, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"wddx_serialize_value":{"id":"function.wddx-serialize-value","purpose":"Serialize a single value into a WDDX packet","prototype":"string wddx_serialize_value(mixed $var [, string $comment = ''])","return":"<p class=\"para\">   Returns the WDDX packet, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"wddx_serialize_vars":{"id":"function.wddx-serialize-vars","purpose":"Serialize variables into a WDDX packet","prototype":"string wddx_serialize_vars(mixed $var_name [, mixed $... = ''])","return":"<p class=\"para\">   Returns the WDDX packet, or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"XMLDiff\\Base::__construct":{"id":"xmldiff-base.construct","purpose":"Constructor","prototype":" XMLDiff\\Base::__construct(string $nsname)","return":"<p class=\"para\">     <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\Base::diff":{"id":"xmldiff-base.diff","purpose":"Produce diff of two XML documents","prototype":"mixed XMLDiff\\Base::diff(mixed $from, mixed $to)","return":"<p class=\"para\">   Implementation dependent.  <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\Base::merge":{"id":"xmldiff-base.merge","purpose":"Produce new XML document based on diff","prototype":"mixed XMLDiff\\Base::merge(mixed $src, mixed $diff)","return":"<p class=\"para\">   Implementation dependent.  <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\DOM::diff":{"id":"xmldiff-dom.diff","purpose":"Diff two DOMDocument objects","prototype":"DOMDocument XMLDiff\\DOM::diff(DOMDocument $from, DOMDocument $to)","return":"<p class=\"para\">   DOMDocument with the diff information or NULL.  <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\DOM::merge":{"id":"xmldiff-dom.merge","purpose":"Produce merged DOMDocument","prototype":"DOMDocument XMLDiff\\DOM::merge(DOMDocument $src, DOMDocument $diff)","return":"<p class=\"para\">   Merged DOMDocument or NULL.   <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\Memory::diff":{"id":"xmldiff-memory.diff","purpose":"Diff two XML documents","prototype":"string XMLDiff\\Memory::diff(string $from, string $to)","return":"<p class=\"para\">   String with the XML document containing the diff information or NULL.   <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\Memory::merge":{"id":"xmldiff-memory.merge","purpose":"Produce merged XML document","prototype":"string XMLDiff\\Memory::merge(string $src, string $diff)","return":"<p class=\"para\">   String with the new XML document or NULL.   <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\File::diff":{"id":"xmldiff-file.diff","purpose":"Diff two XML files","prototype":"string XMLDiff\\File::diff(string $from, string $to)","return":"<p class=\"para\">   String with the XML document containing the diff information or NULL.   <\/p>","versions":"PECL xmldiff >= 0.8.0"},"XMLDiff\\File::merge":{"id":"xmldiff-file.merge","purpose":"Produce merged XML document","prototype":"string XMLDiff\\File::merge(string $src, string $diff)","return":"<p class=\"para\">   String with the new XML document or NULL.   <\/p>","versions":"PECL xmldiff >= 0.8.0"},"utf8_decode":{"id":"function.utf8-decode","purpose":"Converts a string with ISO-8859-1 characters encoded with UTF-8   to single-byte ISO-8859-1","prototype":"string utf8_decode(string $data)","return":"<p class=\"para\">   Returns the ISO-8859-1 translation of <code class=\"parameter\">data<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"utf8_encode":{"id":"function.utf8-encode","purpose":"Encodes an ISO-8859-1 string to UTF-8","prototype":"string utf8_encode(string $data)","return":"<p class=\"para\">   Returns the UTF-8 translation of <code class=\"parameter\">data<\/code>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_error_string":{"id":"function.xml-error-string","purpose":"Get XML parser error string","prototype":"string xml_error_string(int $code)","return":"<p class=\"para\">   Returns a string with a textual description of the error   <code class=\"parameter\">code<\/code>, or <strong><code>FALSE<\/code><\/strong> if no description was found.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_get_current_byte_index":{"id":"function.xml-get-current-byte-index","purpose":"Get current byte index for an XML parser","prototype":"int xml_get_current_byte_index(resource $parser)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does   not refer to a valid parser, or else it returns which byte index   the parser is currently at in its data buffer (starting at 0).  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_get_current_column_number":{"id":"function.xml-get-current-column-number","purpose":"Get current column number for an XML parser","prototype":"int xml_get_current_column_number(resource $parser)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does   not refer to a valid parser, or else it returns which column on   the current line (as given by   <span class=\"function\">xml_get_current_line_number<\/span>) the parser is   currently at.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_get_current_line_number":{"id":"function.xml-get-current-line-number","purpose":"Get current line number for an XML parser","prototype":"int xml_get_current_line_number(resource $parser)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does   not refer to a valid parser, or else it returns which line the   parser is currently at in its data buffer.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_get_error_code":{"id":"function.xml-get-error-code","purpose":"Get XML parser error code","prototype":"int xml_get_error_code(resource $parser)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does   not refer to a valid parser, or else it returns one of the error   codes listed in the <a href=\"xml.error-codes.html\" class=\"link\">error codes   section<\/a>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_parse_into_struct":{"id":"function.xml-parse-into-struct","purpose":"Parse XML data into an array structure","prototype":"int xml_parse_into_struct(resource $parser, string $data, array $values [, array $index = ''])","return":"<p class=\"para\">   <span class=\"function\">xml_parse_into_struct<\/span> returns 0 for failure and 1 for   success. This is not the same as <strong><code>FALSE<\/code><\/strong> and <strong><code>TRUE<\/code><\/strong>, be careful with   operators such as ===.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_parse":{"id":"function.xml-parse","purpose":"Start parsing an XML document","prototype":"int xml_parse(resource $parser, string $data [, bool $is_final = ''])","return":"<p class=\"para\">   Returns 1 on success or 0 on failure.  <\/p>  <p class=\"para\">   For unsuccessful parses, error information can be retrieved with   <span class=\"function\">xml_get_error_code<\/span>,   <span class=\"function\">xml_error_string<\/span>,   <span class=\"function\">xml_get_current_line_number<\/span>,   <span class=\"function\">xml_get_current_column_number<\/span> and   <span class=\"function\">xml_get_current_byte_index<\/span>.  <\/p>  <blockquote class=\"note\"><p><strong class=\"note\">Note<\/strong>:    <p class=\"para\">    Some errors (such as entity errors) are reported at the end of the data, thus only if    <code class=\"parameter\">is_final<\/code> is set and <strong><code>TRUE<\/code><\/strong>.   <\/p>  <\/p><\/blockquote>","versions":"PHP 4, PHP 5, PHP 7"},"xml_parser_create_ns":{"id":"function.xml-parser-create-ns","purpose":"Create an XML parser with namespace support","prototype":"resource xml_parser_create_ns([string $encoding = '' [, string $separator = \":\"]])","return":"<p class=\"para\">   Returns a resource handle for the new XML parser.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"xml_parser_create":{"id":"function.xml-parser-create","purpose":"Create an XML parser","prototype":"resource xml_parser_create([string $encoding = ''])","return":"<p class=\"para\">   Returns a resource handle for the new XML parser.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_parser_free":{"id":"function.xml-parser-free","purpose":"Free an XML parser","prototype":"bool xml_parser_free(resource $parser)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does not   refer to a valid parser, or else it frees the parser and returns <strong><code>TRUE<\/code><\/strong>.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_parser_get_option":{"id":"function.xml-parser-get-option","purpose":"Get options from an XML parser","prototype":"mixed xml_parser_get_option(resource $parser, int $option)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does   not refer to a valid parser or if <code class=\"parameter\">option<\/code> isn&#039;t   valid (generates also a <strong><code>E_WARNING<\/code><\/strong>).   Else the option&#039;s value is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_parser_set_option":{"id":"function.xml-parser-set-option","purpose":"Set options in an XML parser","prototype":"bool xml_parser_set_option(resource $parser, int $option, mixed $value)","return":"<p class=\"para\">   This function returns <strong><code>FALSE<\/code><\/strong> if <code class=\"parameter\">parser<\/code> does not   refer to a valid parser, or if the option could not be set.  Else the   option is set and <strong><code>TRUE<\/code><\/strong> is returned.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_character_data_handler":{"id":"function.xml-set-character-data-handler","purpose":"Set up character data handler","prototype":"bool xml_set_character_data_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_default_handler":{"id":"function.xml-set-default-handler","purpose":"Set up default handler","prototype":"bool xml_set_default_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_element_handler":{"id":"function.xml-set-element-handler","purpose":"Set up start and end element handlers","prototype":"bool xml_set_element_handler(resource $parser, callable $start_element_handler, callable $end_element_handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_end_namespace_decl_handler":{"id":"function.xml-set-end-namespace-decl-handler","purpose":"Set up end namespace declaration handler","prototype":"bool xml_set_end_namespace_decl_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"xml_set_external_entity_ref_handler":{"id":"function.xml-set-external-entity-ref-handler","purpose":"Set up external entity reference handler","prototype":"bool xml_set_external_entity_ref_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_notation_decl_handler":{"id":"function.xml-set-notation-decl-handler","purpose":"Set up notation declaration handler","prototype":"bool xml_set_notation_decl_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_object":{"id":"function.xml-set-object","purpose":"Use XML Parser within an object","prototype":"bool xml_set_object(resource $parser, object $object)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_processing_instruction_handler":{"id":"function.xml-set-processing-instruction-handler","purpose":"Set up processing instruction (PI) handler","prototype":"bool xml_set_processing_instruction_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"xml_set_start_namespace_decl_handler":{"id":"function.xml-set-start-namespace-decl-handler","purpose":"Set up start namespace declaration handler","prototype":"bool xml_set_start_namespace_decl_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4 >= 4.0.5, PHP 5, PHP 7"},"xml_set_unparsed_entity_decl_handler":{"id":"function.xml-set-unparsed-entity-decl-handler","purpose":"Set up unparsed entity declaration handler","prototype":"bool xml_set_unparsed_entity_decl_handler(resource $parser, callable $handler)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 4, PHP 5, PHP 7"},"XMLReader::close":{"id":"xmlreader.close","purpose":"Close the XMLReader input","prototype":"bool XMLReader::close()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::expand":{"id":"xmlreader.expand","purpose":"Returns a copy of the current node as a DOM object","prototype":"DOMNode XMLReader::expand([DOMNode $basenode = ''])","return":"<p class=\"para\">   The resulting <span class=\"classname\">DOMNode<\/span> or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::getAttribute":{"id":"xmlreader.getattribute","purpose":"Get the value of a named attribute","prototype":"string XMLReader::getAttribute(string $name)","return":"<p class=\"para\">   The value of the attribute, or <strong><code>NULL<\/code><\/strong> if no attribute with the given   <code class=\"parameter\">name<\/code> is found or not positioned on an element node.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::getAttributeNo":{"id":"xmlreader.getattributeno","purpose":"Get the value of an attribute by index","prototype":"string XMLReader::getAttributeNo(int $index)","return":"<p class=\"para\">   The value of the attribute, or an empty string (before PHP 5.6) or <strong><code>NULL<\/code><\/strong>   (from PHP 5.6 onwards) if no attribute exists at   <code class=\"parameter\">index<\/code> or is not positioned on the element.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::getAttributeNs":{"id":"xmlreader.getattributens","purpose":"Get the value of an attribute by localname and URI","prototype":"string XMLReader::getAttributeNs(string $localName, string $namespaceURI)","return":"<p class=\"para\">   The value of the attribute, or an empty string (before PHP 5.6) or <strong><code>NULL<\/code><\/strong>   (from PHP 5.6 onwards) if no attribute with the given   <code class=\"parameter\">localName<\/code> and <code class=\"parameter\">namespaceURI<\/code> is   found or not positioned of element.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::getParserProperty":{"id":"xmlreader.getparserproperty","purpose":"Indicates if specified property has been set","prototype":"bool XMLReader::getParserProperty(int $property)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::isValid":{"id":"xmlreader.isvalid","purpose":"Indicates if the parsed document is valid","prototype":"bool XMLReader::isValid()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::lookupNamespace":{"id":"xmlreader.lookupnamespace","purpose":"Lookup namespace for a prefix","prototype":"string XMLReader::lookupNamespace(string $prefix)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::moveToAttribute":{"id":"xmlreader.movetoattribute","purpose":"Move cursor to a named attribute","prototype":"bool XMLReader::moveToAttribute(string $name)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::moveToAttributeNo":{"id":"xmlreader.movetoattributeno","purpose":"Move cursor to an attribute by index","prototype":"bool XMLReader::moveToAttributeNo(int $index)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::moveToAttributeNs":{"id":"xmlreader.movetoattributens","purpose":"Move cursor to a named attribute","prototype":"bool XMLReader::moveToAttributeNs(string $localName, string $namespaceURI)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::moveToElement":{"id":"xmlreader.movetoelement","purpose":"Position cursor on the parent Element of current Attribute","prototype":"bool XMLReader::moveToElement()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> if successful and <strong><code>FALSE<\/code><\/strong> if it fails or not positioned on    Attribute when this method is called.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::moveToFirstAttribute":{"id":"xmlreader.movetofirstattribute","purpose":"Position cursor on the first Attribute","prototype":"bool XMLReader::moveToFirstAttribute()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::moveToNextAttribute":{"id":"xmlreader.movetonextattribute","purpose":"Position cursor on the next Attribute","prototype":"bool XMLReader::moveToNextAttribute()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::next":{"id":"xmlreader.next","purpose":"Move cursor to next node skipping all subtrees","prototype":"bool XMLReader::next([string $localname = ''])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::open":{"id":"xmlreader.open","purpose":"Set the URI containing the XML to parse","prototype":"bool XMLReader::open(string $URI [, string $encoding = '' [, int $options = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. If called statically, returns an   <span class=\"classname\">XMLReader<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::read":{"id":"xmlreader.read","purpose":"Move to next node in document","prototype":"bool XMLReader::read()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::readInnerXml":{"id":"xmlreader.readinnerxml","purpose":"Retrieve XML from current node","prototype":"string XMLReader::readInnerXml()","return":"<p class=\"para\">   Returns the contents of the current node as a string. Empty string on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"XMLReader::readOuterXml":{"id":"xmlreader.readouterxml","purpose":"Retrieve XML from current node, including itself","prototype":"string XMLReader::readOuterXml()","return":"<p class=\"para\">   Returns the contents of current node, including itself, as a string. Empty string on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"XMLReader::readString":{"id":"xmlreader.readstring","purpose":"Reads the contents of the current node as a string","prototype":"string XMLReader::readString()","return":"<p class=\"para\">   Returns the content of the current node as a string. Empty string on   failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"XMLReader::setParserProperty":{"id":"xmlreader.setparserproperty","purpose":"Set parser options","prototype":"bool XMLReader::setParserProperty(int $property, bool $value)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::setRelaxNGSchema":{"id":"xmlreader.setrelaxngschema","purpose":"Set the filename or URI for a RelaxNG Schema","prototype":"bool XMLReader::setRelaxNGSchema(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::setRelaxNGSchemaSource":{"id":"xmlreader.setrelaxngschemasource","purpose":"Set the data containing a RelaxNG Schema","prototype":"bool XMLReader::setRelaxNGSchemaSource(string $source)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLReader::setSchema":{"id":"xmlreader.setschema","purpose":"Validate document against XSD","prototype":"bool XMLReader::setSchema(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7"},"XMLReader::XML":{"id":"xmlreader.xml","purpose":"Set the data containing the XML to parse","prototype":"bool XMLReader::XML(string $source [, string $encoding = '' [, int $options = '']])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure. If called statically, returns an   <span class=\"classname\">XMLReader<\/span> or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.0, PHP 7"},"XMLWriter::endAttribute":{"id":"function.xmlwriter-end-attribute","purpose":"End attribute","prototype":"bool XMLWriter::endAttribute(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_attribute":{"id":"function.xmlwriter-end-attribute","purpose":"End attribute","prototype":"bool xmlwriter_end_attribute(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endCdata":{"id":"function.xmlwriter-end-cdata","purpose":"End current CDATA","prototype":"bool XMLWriter::endCdata(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_cdata":{"id":"function.xmlwriter-end-cdata","purpose":"End current CDATA","prototype":"bool xmlwriter_end_cdata(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endComment":{"id":"function.xmlwriter-end-comment","purpose":"Create end comment","prototype":"bool XMLWriter::endComment(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 1.0.0"},"xmlwriter_end_comment":{"id":"function.xmlwriter-end-comment","purpose":"Create end comment","prototype":"bool xmlwriter_end_comment(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 1.0.0"},"XMLWriter::endDocument":{"id":"function.xmlwriter-end-document","purpose":"End current document","prototype":"bool XMLWriter::endDocument(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_document":{"id":"function.xmlwriter-end-document","purpose":"End current document","prototype":"bool xmlwriter_end_document(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endDtdAttlist":{"id":"function.xmlwriter-end-dtd-attlist","purpose":"End current DTD AttList","prototype":"bool XMLWriter::endDtdAttlist(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_dtd_attlist":{"id":"function.xmlwriter-end-dtd-attlist","purpose":"End current DTD AttList","prototype":"bool xmlwriter_end_dtd_attlist(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endDtdElement":{"id":"function.xmlwriter-end-dtd-element","purpose":"End current DTD element","prototype":"bool XMLWriter::endDtdElement(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_dtd_element":{"id":"function.xmlwriter-end-dtd-element","purpose":"End current DTD element","prototype":"bool xmlwriter_end_dtd_element(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endDtdEntity":{"id":"function.xmlwriter-end-dtd-entity","purpose":"End current DTD Entity","prototype":"bool XMLWriter::endDtdEntity(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_dtd_entity":{"id":"function.xmlwriter-end-dtd-entity","purpose":"End current DTD Entity","prototype":"bool xmlwriter_end_dtd_entity(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endDtd":{"id":"function.xmlwriter-end-dtd","purpose":"End current DTD","prototype":"bool XMLWriter::endDtd(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_dtd":{"id":"function.xmlwriter-end-dtd","purpose":"End current DTD","prototype":"bool xmlwriter_end_dtd(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endElement":{"id":"function.xmlwriter-end-element","purpose":"End current element","prototype":"bool XMLWriter::endElement(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_element":{"id":"function.xmlwriter-end-element","purpose":"End current element","prototype":"bool xmlwriter_end_element(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::endPi":{"id":"function.xmlwriter-end-pi","purpose":"End current PI","prototype":"bool XMLWriter::endPi(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_end_pi":{"id":"function.xmlwriter-end-pi","purpose":"End current PI","prototype":"bool xmlwriter_end_pi(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::flush":{"id":"function.xmlwriter-flush","purpose":"Flush current buffer","prototype":"mixed XMLWriter::flush([bool $empty = '', resource $xmlwriter])","return":"<p class=\"para\">   If you opened the writer in memory, this function returns the generated XML buffer,   Else, if using URI, this function will write the buffer and return the number of    written bytes.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 1.0.0"},"xmlwriter_flush":{"id":"function.xmlwriter-flush","purpose":"Flush current buffer","prototype":"mixed xmlwriter_flush([bool $empty = '', resource $xmlwriter])","return":"<p class=\"para\">   If you opened the writer in memory, this function returns the generated XML buffer,   Else, if using URI, this function will write the buffer and return the number of    written bytes.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 1.0.0"},"XMLWriter::fullEndElement":{"id":"function.xmlwriter-full-end-element","purpose":"End current element","prototype":"bool XMLWriter::fullEndElement(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL xmlwriter >= 2.0.4"},"xmlwriter_full_end_element":{"id":"function.xmlwriter-full-end-element","purpose":"End current element","prototype":"bool xmlwriter_full_end_element(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL xmlwriter >= 2.0.4"},"XMLWriter::openMemory":{"id":"function.xmlwriter-open-memory","purpose":"Create new xmlwriter using memory for string output","prototype":"resource XMLWriter::openMemory()","return":"<p class=\"para\">   Object oriented style: Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Procedural style: Returns a new xmlwriter <a href=\"language.types.resource.html\" class=\"link\">resource<\/a> for later use with the   xmlwriter functions on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_open_memory":{"id":"function.xmlwriter-open-memory","purpose":"Create new xmlwriter using memory for string output","prototype":"resource xmlwriter_open_memory()","return":"<p class=\"para\">   Object oriented style: Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Procedural style: Returns a new xmlwriter <a href=\"language.types.resource.html\" class=\"link\">resource<\/a> for later use with the   xmlwriter functions on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::openUri":{"id":"function.xmlwriter-open-uri","purpose":"Create new xmlwriter using source uri for output","prototype":"resource XMLWriter::openUri(string $uri)","return":"<p class=\"para\">   Object oriented style: Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Procedural style: Returns a new xmlwriter <a href=\"language.types.resource.html\" class=\"link\">resource<\/a> for later use with the   xmlwriter functions on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_open_uri":{"id":"function.xmlwriter-open-uri","purpose":"Create new xmlwriter using source uri for output","prototype":"resource xmlwriter_open_uri(string $uri)","return":"<p class=\"para\">   Object oriented style: Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>  <p class=\"para\">   Procedural style: Returns a new xmlwriter <a href=\"language.types.resource.html\" class=\"link\">resource<\/a> for later use with the   xmlwriter functions on success, <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::outputMemory":{"id":"function.xmlwriter-output-memory","purpose":"Returns current buffer","prototype":"string XMLWriter::outputMemory([bool $flush = '', resource $xmlwriter])","return":"<p class=\"para\">   Returns the current buffer as a string.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_output_memory":{"id":"function.xmlwriter-output-memory","purpose":"Returns current buffer","prototype":"string xmlwriter_output_memory([bool $flush = '', resource $xmlwriter])","return":"<p class=\"para\">   Returns the current buffer as a string.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::setIndentString":{"id":"function.xmlwriter-set-indent-string","purpose":"Set string used for indenting","prototype":"bool XMLWriter::setIndentString(string $indentString, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_set_indent_string":{"id":"function.xmlwriter-set-indent-string","purpose":"Set string used for indenting","prototype":"bool xmlwriter_set_indent_string(string $indentString, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::setIndent":{"id":"function.xmlwriter-set-indent","purpose":"Toggle indentation on\/off","prototype":"bool XMLWriter::setIndent(bool $indent, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_set_indent":{"id":"function.xmlwriter-set-indent","purpose":"Toggle indentation on\/off","prototype":"bool xmlwriter_set_indent(bool $indent, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startAttributeNs":{"id":"function.xmlwriter-start-attribute-ns","purpose":"Create start namespaced attribute","prototype":"bool XMLWriter::startAttributeNs(string $prefix, string $name, string $uri, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_attribute_ns":{"id":"function.xmlwriter-start-attribute-ns","purpose":"Create start namespaced attribute","prototype":"bool xmlwriter_start_attribute_ns(string $prefix, string $name, string $uri, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startAttribute":{"id":"function.xmlwriter-start-attribute","purpose":"Create start attribute","prototype":"bool XMLWriter::startAttribute(string $name, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_attribute":{"id":"function.xmlwriter-start-attribute","purpose":"Create start attribute","prototype":"bool xmlwriter_start_attribute(string $name, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startCdata":{"id":"function.xmlwriter-start-cdata","purpose":"Create start CDATA tag","prototype":"bool XMLWriter::startCdata(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_cdata":{"id":"function.xmlwriter-start-cdata","purpose":"Create start CDATA tag","prototype":"bool xmlwriter_start_cdata(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startComment":{"id":"function.xmlwriter-start-comment","purpose":"Create start comment","prototype":"bool XMLWriter::startComment(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 1.0.0"},"xmlwriter_start_comment":{"id":"function.xmlwriter-start-comment","purpose":"Create start comment","prototype":"bool xmlwriter_start_comment(resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 1.0.0"},"XMLWriter::startDocument":{"id":"function.xmlwriter-start-document","purpose":"Create document tag","prototype":"bool XMLWriter::startDocument([string $version = 1.0 [, string $encoding = '' [, string $standalone = '', resource $xmlwriter]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_document":{"id":"function.xmlwriter-start-document","purpose":"Create document tag","prototype":"bool xmlwriter_start_document([string $version = 1.0 [, string $encoding = '' [, string $standalone = '', resource $xmlwriter]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startDtdAttlist":{"id":"function.xmlwriter-start-dtd-attlist","purpose":"Create start DTD AttList","prototype":"bool XMLWriter::startDtdAttlist(string $name, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_dtd_attlist":{"id":"function.xmlwriter-start-dtd-attlist","purpose":"Create start DTD AttList","prototype":"bool xmlwriter_start_dtd_attlist(string $name, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startDtdElement":{"id":"function.xmlwriter-start-dtd-element","purpose":"Create start DTD element","prototype":"bool XMLWriter::startDtdElement(string $qualifiedName, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_dtd_element":{"id":"function.xmlwriter-start-dtd-element","purpose":"Create start DTD element","prototype":"bool xmlwriter_start_dtd_element(string $qualifiedName, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startDtdEntity":{"id":"function.xmlwriter-start-dtd-entity","purpose":"Create start DTD Entity","prototype":"bool XMLWriter::startDtdEntity(string $name, bool $isparam, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_dtd_entity":{"id":"function.xmlwriter-start-dtd-entity","purpose":"Create start DTD Entity","prototype":"bool xmlwriter_start_dtd_entity(string $name, bool $isparam, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startDtd":{"id":"function.xmlwriter-start-dtd","purpose":"Create start DTD tag","prototype":"bool XMLWriter::startDtd(string $qualifiedName [, string $publicId = '' [, string $systemId = '', resource $xmlwriter]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_dtd":{"id":"function.xmlwriter-start-dtd","purpose":"Create start DTD tag","prototype":"bool xmlwriter_start_dtd(string $qualifiedName [, string $publicId = '' [, string $systemId = '', resource $xmlwriter]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startElementNs":{"id":"function.xmlwriter-start-element-ns","purpose":"Create start namespaced element tag","prototype":"bool XMLWriter::startElementNs(string $prefix, string $name, string $uri, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_element_ns":{"id":"function.xmlwriter-start-element-ns","purpose":"Create start namespaced element tag","prototype":"bool xmlwriter_start_element_ns(string $prefix, string $name, string $uri, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startElement":{"id":"function.xmlwriter-start-element","purpose":"Create start element tag","prototype":"bool XMLWriter::startElement(string $name, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_element":{"id":"function.xmlwriter-start-element","purpose":"Create start element tag","prototype":"bool xmlwriter_start_element(string $name, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::startPi":{"id":"function.xmlwriter-start-pi","purpose":"Create start PI tag","prototype":"bool XMLWriter::startPi(string $target, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_start_pi":{"id":"function.xmlwriter-start-pi","purpose":"Create start PI tag","prototype":"bool xmlwriter_start_pi(string $target, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::text":{"id":"function.xmlwriter-text","purpose":"Write text","prototype":"bool XMLWriter::text(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_text":{"id":"function.xmlwriter-text","purpose":"Write text","prototype":"bool xmlwriter_text(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeAttributeNs":{"id":"function.xmlwriter-write-attribute-ns","purpose":"Write full namespaced attribute","prototype":"bool XMLWriter::writeAttributeNs(string $prefix, string $name, string $uri, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_attribute_ns":{"id":"function.xmlwriter-write-attribute-ns","purpose":"Write full namespaced attribute","prototype":"bool xmlwriter_write_attribute_ns(string $prefix, string $name, string $uri, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeAttribute":{"id":"function.xmlwriter-write-attribute","purpose":"Write full attribute","prototype":"bool XMLWriter::writeAttribute(string $name, string $value, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_attribute":{"id":"function.xmlwriter-write-attribute","purpose":"Write full attribute","prototype":"bool xmlwriter_write_attribute(string $name, string $value, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeCdata":{"id":"function.xmlwriter-write-cdata","purpose":"Write full CDATA tag","prototype":"bool XMLWriter::writeCdata(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_cdata":{"id":"function.xmlwriter-write-cdata","purpose":"Write full CDATA tag","prototype":"bool xmlwriter_write_cdata(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeComment":{"id":"function.xmlwriter-write-comment","purpose":"Write full comment tag","prototype":"bool XMLWriter::writeComment(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_comment":{"id":"function.xmlwriter-write-comment","purpose":"Write full comment tag","prototype":"bool xmlwriter_write_comment(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeDtdAttlist":{"id":"function.xmlwriter-write-dtd-attlist","purpose":"Write full DTD AttList tag","prototype":"bool XMLWriter::writeDtdAttlist(string $name, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_dtd_attlist":{"id":"function.xmlwriter-write-dtd-attlist","purpose":"Write full DTD AttList tag","prototype":"bool xmlwriter_write_dtd_attlist(string $name, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeDtdElement":{"id":"function.xmlwriter-write-dtd-element","purpose":"Write full DTD element tag","prototype":"bool XMLWriter::writeDtdElement(string $name, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_dtd_element":{"id":"function.xmlwriter-write-dtd-element","purpose":"Write full DTD element tag","prototype":"bool xmlwriter_write_dtd_element(string $name, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeDtdEntity":{"id":"function.xmlwriter-write-dtd-entity","purpose":"Write full DTD Entity tag","prototype":"bool XMLWriter::writeDtdEntity(string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_dtd_entity":{"id":"function.xmlwriter-write-dtd-entity","purpose":"Write full DTD Entity tag","prototype":"bool xmlwriter_write_dtd_entity(string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeDtd":{"id":"function.xmlwriter-write-dtd","purpose":"Write full DTD tag","prototype":"bool XMLWriter::writeDtd(string $name [, string $publicId = '' [, string $systemId = '' [, string $subset = '', resource $xmlwriter]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_dtd":{"id":"function.xmlwriter-write-dtd","purpose":"Write full DTD tag","prototype":"bool xmlwriter_write_dtd(string $name [, string $publicId = '' [, string $systemId = '' [, string $subset = '', resource $xmlwriter]]])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeElementNs":{"id":"function.xmlwriter-write-element-ns","purpose":"Write full namespaced element tag","prototype":"bool XMLWriter::writeElementNs(string $prefix, string $name, string $uri [, string $content = '', resource $xmlwriter])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_element_ns":{"id":"function.xmlwriter-write-element-ns","purpose":"Write full namespaced element tag","prototype":"bool xmlwriter_write_element_ns(string $prefix, string $name, string $uri [, string $content = '', resource $xmlwriter])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeElement":{"id":"function.xmlwriter-write-element","purpose":"Write full element tag","prototype":"bool XMLWriter::writeElement(string $name [, string $content = '', resource $xmlwriter])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_element":{"id":"function.xmlwriter-write-element","purpose":"Write full element tag","prototype":"bool xmlwriter_write_element(string $name [, string $content = '', resource $xmlwriter])","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writePi":{"id":"function.xmlwriter-write-pi","purpose":"Writes a PI","prototype":"bool XMLWriter::writePi(string $target, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"xmlwriter_write_pi":{"id":"function.xmlwriter-write-pi","purpose":"Writes a PI","prototype":"bool xmlwriter_write_pi(string $target, string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.1.2, PHP 7, PECL xmlwriter >= 0.1.0"},"XMLWriter::writeRaw":{"id":"function.xmlwriter-write-raw","purpose":"Write a raw XML text","prototype":"bool XMLWriter::writeRaw(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL xmlwriter >= 2.0.4"},"xmlwriter_write_raw":{"id":"function.xmlwriter-write-raw","purpose":"Write a raw XML text","prototype":"bool xmlwriter_write_raw(string $content, resource $xmlwriter)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.2.0, PHP 7, PECL xmlwriter >= 2.0.4"},"XSLTProcessor::__construct":{"id":"xsltprocessor.construct","purpose":"Creates a new XSLTProcessor object","prototype":" XSLTProcessor::__construct()","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::getParameter":{"id":"xsltprocessor.getparameter","purpose":"Get value of a parameter","prototype":"string XSLTProcessor::getParameter(string $namespaceURI, string $localName)","return":"<p class=\"para\">   The value of the parameter (as a string), or <strong><code>FALSE<\/code><\/strong> if it&#039;s not set.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::getSecurityPrefs":{"id":"xsltprocessor.getsecurityprefs","purpose":"Get security preferences","prototype":"int XSLTProcessor::getSecurityPrefs()","return":"<p class=\"para\">   A bitmask consisting of <strong><code>XSL_SECPREF_READ_FILE<\/code><\/strong>,   <strong><code>XSL_SECPREF_WRITE_FILE<\/code><\/strong>,   <strong><code>XSL_SECPREF_CREATE_DIRECTORY<\/code><\/strong>,   <strong><code>XSL_SECPREF_READ_NETWORK<\/code><\/strong>,   <strong><code>XSL_SECPREF_WRITE_NETWORK<\/code><\/strong>.  <\/p>","versions":"PHP >= 5.4.0"},"XSLTProcessor::hasExsltSupport":{"id":"xsltprocessor.hasexsltsupport","purpose":"Determine if PHP has EXSLT support","prototype":"bool XSLTProcessor::hasExsltSupport()","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5 >= 5.0.4, PHP 7"},"XSLTProcessor::importStylesheet":{"id":"xsltprocessor.importstylesheet","purpose":"Import stylesheet","prototype":"bool XSLTProcessor::importStylesheet(object $stylesheet)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::registerPHPFunctions":{"id":"xsltprocessor.registerphpfunctions","purpose":"Enables the ability to use PHP functions as XSLT functions","prototype":"void XSLTProcessor::registerPHPFunctions([mixed $restrict = ''])","return":"<p class=\"para\">   No value is returned.  <\/p>","versions":"PHP 5 >= 5.0.4, PHP 7"},"XSLTProcessor::removeParameter":{"id":"xsltprocessor.removeparameter","purpose":"Remove parameter","prototype":"bool XSLTProcessor::removeParameter(string $namespaceURI, string $localName)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::setParameter":{"id":"xsltprocessor.setparameter","purpose":"Set value for a parameter","prototype":"bool XSLTProcessor::setParameter(string $namespace, string $name, string $value, array $options)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::setProfiling":{"id":"xsltprocessor.setprofiling","purpose":"Sets profiling output file","prototype":"bool XSLTProcessor::setProfiling(string $filename)","return":"<p class=\"para\">   Returns <strong><code>TRUE<\/code><\/strong> on success or <strong><code>FALSE<\/code><\/strong> on failure.  <\/p>","versions":"PHP >= 5.3.0"},"XSLTProcessor::setSecurityPrefs":{"id":"xsltprocessor.setsecurityprefs","purpose":"Set security preferences","prototype":"int XSLTProcessor::setSecurityPrefs(int $securityPrefs)","return":"<p class=\"para\">   Returns the old security preferences.  <\/p>","versions":"PHP >= 5.4.0"},"XSLTProcessor::transformToDoc":{"id":"xsltprocessor.transformtodoc","purpose":"Transform to a DOMDocument","prototype":"DOMDocument XSLTProcessor::transformToDoc(DOMNode $doc)","return":"<p class=\"para\">   The resulting <span class=\"classname\">DOMDocument<\/span> or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::transformToUri":{"id":"xsltprocessor.transformtouri","purpose":"Transform to URI","prototype":"int XSLTProcessor::transformToUri(DOMDocument $doc, string $uri)","return":"<p class=\"para\">   Returns the number of bytes written or <strong><code>FALSE<\/code><\/strong> if an error occurred.  <\/p>","versions":"PHP 5, PHP 7"},"XSLTProcessor::transformToXml":{"id":"xsltprocessor.transformtoxml","purpose":"Transform to XML","prototype":"string XSLTProcessor::transformToXml(object $doc)","return":"<p class=\"para\">   The result of the transformation as a string or <strong><code>FALSE<\/code><\/strong> on error.  <\/p>","versions":"PHP 5, PHP 7"},"UI\\Point::at":{"id":"ui-point.at","purpose":"Size Coercion","prototype":"UI\\Point UI\\Point::at(float $point, UI\\Size $size)","return":"<p class=\"para\">   The resulting Point  <\/p>","versions":"PHP 7, UI 1.0.2"},"UI\\Point::__construct":{"id":"ui-point.construct","purpose":"Construct a new Point","prototype":" UI\\Point::__construct(float $x, float $y)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Point::getX":{"id":"ui-point.getx","purpose":"Retrieves X","prototype":"float UI\\Point::getX()","return":"<p class=\"para\">   The current X co-ordinate  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Point::getY":{"id":"ui-point.gety","purpose":"Retrieves Y","prototype":"float UI\\Point::getY()","return":"<p class=\"para\">   The current Y co-ordinate  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Point::setX":{"id":"ui-point.setx","purpose":"Set X","prototype":" UI\\Point::setX(float $point)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Point::setY":{"id":"ui-point.sety","purpose":"Set Y","prototype":" UI\\Point::setY(float $point)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Size::__construct":{"id":"ui-size.construct","purpose":"Construct a new Size","prototype":" UI\\Size::__construct(float $width, float $height)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Size::getHeight":{"id":"ui-size.getheight","purpose":"Retrieves Height","prototype":"float UI\\Size::getHeight()","return":"<p class=\"para\">   The current Height  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Size::getWidth":{"id":"ui-size.getwidth","purpose":"Retrives Width","prototype":"float UI\\Size::getWidth()","return":"<p class=\"para\">   The current Width  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Size::of":{"id":"ui-size.of","purpose":"Point Coercion","prototype":"UI\\Size UI\\Size::of(float $size, UI\\Point $point)","return":"<p class=\"para\">   The resulting Size  <\/p>","versions":"PHP 7, UI 1.0.2"},"UI\\Size::setHeight":{"id":"ui-size.setheight","purpose":"Set Height","prototype":" UI\\Size::setHeight(float $size)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Size::setWidth":{"id":"ui-size.setwidth","purpose":"Set Width","prototype":" UI\\Size::setWidth(float $size)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::add":{"id":"ui-window.add","purpose":"Add a Control","prototype":" UI\\Window::add(UI\\Control $control)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::__construct":{"id":"ui-window.construct","purpose":"Construct a new Window","prototype":" UI\\Window::__construct(string $title, Size $size [, bool $menu = ''])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Window::error":{"id":"ui-window.error","purpose":"Show Error Box","prototype":" UI\\Window::error(string $title, string $msg)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Window::getSize":{"id":"ui-window.getsize","purpose":"Get Window Size","prototype":"UI\\Size UI\\Window::getSize()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::getTitle":{"id":"ui-window.gettitle","purpose":"Get Title","prototype":"string UI\\Window::getTitle()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::hasBorders":{"id":"ui-window.hasborders","purpose":"Border Detection","prototype":"bool UI\\Window::hasBorders()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::hasMargin":{"id":"ui-window.hasmargin","purpose":"Margin Detection","prototype":"bool UI\\Window::hasMargin()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::isFullScreen":{"id":"ui-window.isfullscreen","purpose":"Full Screen Detection","prototype":"bool UI\\Window::isFullScreen()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::msg":{"id":"ui-window.msg","purpose":"Show Message Box","prototype":" UI\\Window::msg(string $title, string $msg)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Window::onClosing":{"id":"ui-window.onclosing","purpose":"Closing Callback","prototype":"int UI\\Window::onClosing()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::open":{"id":"ui-window.open","purpose":"Open Dialog","prototype":"string UI\\Window::open()","return":"<p class=\"para\">   Returns the name of the file selected for opening  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::save":{"id":"ui-window.save","purpose":"Save Dialog","prototype":"string UI\\Window::save()","return":"<p class=\"para\">   Returns the file name selecting for saving  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::setBorders":{"id":"ui-window.setborders","purpose":"Border Use","prototype":" UI\\Window::setBorders(bool $borders)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Window::setFullScreen":{"id":"ui-window.setfullscreen","purpose":"Full Screen Use","prototype":" UI\\Window::setFullScreen(bool $full)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Window::setMargin":{"id":"ui-window.setmargin","purpose":"Margin Use","prototype":" UI\\Window::setMargin(bool $margin)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Window::setSize":{"id":"ui-window.setsize","purpose":"Set Size","prototype":" UI\\Window::setSize(UI\\Size $size)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Window::setTitle":{"id":"ui-window.settitle","purpose":"Window Title","prototype":" UI\\Window::setTitle(string $title)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Control::destroy":{"id":"ui-control.destroy","purpose":"Destroy Control","prototype":" UI\\Control::destroy()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::disable":{"id":"ui-control.disable","purpose":"Disable Control","prototype":" UI\\Control::disable()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::enable":{"id":"ui-control.enable","purpose":"Enable Control","prototype":" UI\\Control::enable()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::getParent":{"id":"ui-control.getparent","purpose":"Get Parent Control","prototype":"UI\\Control UI\\Control::getParent()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::getTopLevel":{"id":"ui-control.gettoplevel","purpose":"Get Top Level","prototype":"int UI\\Control::getTopLevel()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::hide":{"id":"ui-control.hide","purpose":"Hide Control","prototype":" UI\\Control::hide()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::isEnabled":{"id":"ui-control.isenabled","purpose":"Determine if Control is enabled","prototype":"bool UI\\Control::isEnabled()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::isVisible":{"id":"ui-control.isvisible","purpose":"Determine if Control is visible","prototype":"bool UI\\Control::isVisible()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::setParent":{"id":"ui-control.setparent","purpose":"Set Parent Control","prototype":" UI\\Control::setParent(UI\\Control $parent)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Control::show":{"id":"ui-control.show","purpose":"Control Show","prototype":" UI\\Control::show()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::append":{"id":"ui-menu.append","purpose":"Append Menu Item","prototype":"UI\\MenuItem UI\\Menu::append(string $name [, string $type = UI\\MenuItem::class])","return":"<p class=\"para\">   A constructed object of the given type  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::appendAbout":{"id":"ui-menu.appendabout","purpose":"Append About Menu Item","prototype":"UI\\MenuItem UI\\Menu::appendAbout([string $type = UI\\MenuItem::class])","return":"<p class=\"para\">   A constructed About menu item of the given type  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::appendCheck":{"id":"ui-menu.appendcheck","purpose":"Append Checkable Menu Item","prototype":"UI\\MenuItem UI\\Menu::appendCheck(string $name [, string $type = UI\\MenuItem::class])","return":"<p class=\"para\">    A constructed checkable menu item of the given type  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::appendPreferences":{"id":"ui-menu.appendpreferences","purpose":"Append Preferences Menu Item","prototype":"UI\\MenuItem UI\\Menu::appendPreferences([string $type = UI\\MenuItem::class])","return":"<p class=\"para\">   A constructed Preferences menu item of the given type  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::appendQuit":{"id":"ui-menu.appendquit","purpose":"Append Quit Menu Item","prototype":"UI\\MenuItem UI\\Menu::appendQuit([string $type = UI\\MenuItem::class])","return":"<p class=\"para\">   A constructed Quit menu item of the given type  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::appendSeparator":{"id":"ui-menu.appendseparator","purpose":"Append Menu Item Separator","prototype":" UI\\Menu::appendSeparator()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Menu::__construct":{"id":"ui-menu.construct","purpose":"Construct a new Menu","prototype":" UI\\Menu::__construct(string $name)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\MenuItem::disable":{"id":"ui-menuitem.disable","purpose":"Disable Menu Item","prototype":" UI\\MenuItem::disable()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\MenuItem::enable":{"id":"ui-menuitem.enable","purpose":"Enable Menu Item","prototype":" UI\\MenuItem::enable()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\MenuItem::isChecked":{"id":"ui-menuitem.ischecked","purpose":"Detect Checked","prototype":"bool UI\\MenuItem::isChecked()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\MenuItem::onClick":{"id":"ui-menuitem.onclick","purpose":"On Click Callback","prototype":" UI\\MenuItem::onClick()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\MenuItem::setChecked":{"id":"ui-menuitem.setchecked","purpose":"Set Checked","prototype":" UI\\MenuItem::setChecked(bool $checked)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Area::onDraw":{"id":"ui-area.ondraw","purpose":"Draw Callback","prototype":" UI\\Area::onDraw(UI\\Draw\\Pen $pen, UI\\Size $areaSize, UI\\Point $clipPoint, UI\\Size $clipSize)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Area::onKey":{"id":"ui-area.onkey","purpose":"Key Callback","prototype":" UI\\Area::onKey(string $key, int $ext, int $flags)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Area::onMouse":{"id":"ui-area.onmouse","purpose":"Mouse Callback","prototype":" UI\\Area::onMouse(UI\\Point $areaPoint, UI\\Size $areaSize, int $flags)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Area::redraw":{"id":"ui-area.redraw","purpose":"Redraw Area","prototype":" UI\\Area::redraw()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Area::scrollTo":{"id":"ui-area.scrollto","purpose":"Area Scroll","prototype":" UI\\Area::scrollTo(UI\\Point $point, UI\\Size $size)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Area::setSize":{"id":"ui-area.setsize","purpose":"Set Size","prototype":" UI\\Area::setSize(UI\\Size $size)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Executor::__construct":{"id":"ui-executor.construct","purpose":"Construct a new Executor","prototype":" UI\\Executor::__construct(int $microseconds, int $seconds)","return":"","versions":"PHP 7, UI 2.0.0"},"UI\\Executor::kill":{"id":"ui-executor.kill","purpose":"Stop Executor","prototype":"void UI\\Executor::kill()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\Executor::onExecute":{"id":"ui-executor.onexecute","purpose":"Execution Callback","prototype":"void UI\\Executor::onExecute()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\Executor::setInterval":{"id":"ui-executor.setinterval","purpose":"Interval Manipulation","prototype":"bool UI\\Executor::setInterval(int $microseconds, int $seconds)","return":"<p class=\"para\">   Indication of success  <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\Controls\\Tab::append":{"id":"ui-controls-tab.append","purpose":"Append Page","prototype":"int UI\\Controls\\Tab::append(string $name, UI\\Control $control)","return":"<p class=\"para\">   Shall return the index of the appended control, may be 0  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Tab::delete":{"id":"ui-controls-tab.delete","purpose":"Delete Page","prototype":"bool UI\\Controls\\Tab::delete(int $index)","return":"<p class=\"para\">   Indication of success  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Tab::hasMargin":{"id":"ui-controls-tab.hasmargin","purpose":"Margin Detection","prototype":"bool UI\\Controls\\Tab::hasMargin(int $page)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Tab::insertAt":{"id":"ui-controls-tab.insertat","purpose":"Insert Page","prototype":" UI\\Controls\\Tab::insertAt(string $name, int $page, UI\\Control $control)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Tab::pages":{"id":"ui-controls-tab.pages","purpose":"Page Count","prototype":"int UI\\Controls\\Tab::pages()","return":"<p class=\"para\">   The number of pages in this Tab  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Tab::setMargin":{"id":"ui-controls-tab.setmargin","purpose":"Set Margin","prototype":" UI\\Controls\\Tab::setMargin(int $page, bool $margin)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Check::__construct":{"id":"ui-controls-check.construct","purpose":"Construct a new Check","prototype":" UI\\Controls\\Check::__construct(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Check::getText":{"id":"ui-controls-check.gettext","purpose":"Get Text","prototype":"string UI\\Controls\\Check::getText()","return":"<p class=\"para\">   The current text (label)  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Check::isChecked":{"id":"ui-controls-check.ischecked","purpose":"Checked Detection","prototype":"bool UI\\Controls\\Check::isChecked()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Check::onToggle":{"id":"ui-controls-check.ontoggle","purpose":"Toggle Callback","prototype":" UI\\Controls\\Check::onToggle()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Check::setChecked":{"id":"ui-controls-check.setchecked","purpose":"Set Checked","prototype":" UI\\Controls\\Check::setChecked(bool $checked)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Check::setText":{"id":"ui-controls-check.settext","purpose":"Set Text","prototype":" UI\\Controls\\Check::setText(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Button::__construct":{"id":"ui-controls-button.construct","purpose":"Construct a new Button","prototype":" UI\\Controls\\Button::__construct(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Button::getText":{"id":"ui-controls-button.gettext","purpose":"Get Text","prototype":"string UI\\Controls\\Button::getText()","return":"<p class=\"para\">   The current text (label)  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Button::onClick":{"id":"ui-controls-button.onclick","purpose":"Click Handler","prototype":" UI\\Controls\\Button::onClick()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Button::setText":{"id":"ui-controls-button.settext","purpose":"Set Text","prototype":" UI\\Controls\\Button::setText(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\ColorButton::getColor":{"id":"ui-controls-colorbutton.getcolor","purpose":"Get Color","prototype":"UI\\Color UI\\Controls\\ColorButton::getColor()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\ColorButton::onChange":{"id":"ui-controls-colorbutton.onchange","purpose":"Change Handler","prototype":" UI\\Controls\\ColorButton::onChange()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\ColorButton::setColor":{"id":"ui-controls-colorbutton.setcolor","purpose":"Set Color","prototype":" UI\\Controls\\ColorButton::setColor(int $color)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Label::__construct":{"id":"ui-controls-label.construct","purpose":"Construct a new Label","prototype":" UI\\Controls\\Label::__construct(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Label::getText":{"id":"ui-controls-label.gettext","purpose":"Get Text","prototype":"string UI\\Controls\\Label::getText()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Label::setText":{"id":"ui-controls-label.settext","purpose":"Set Text","prototype":" UI\\Controls\\Label::setText(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Entry::__construct":{"id":"ui-controls-entry.construct","purpose":"Construct a new Entry","prototype":" UI\\Controls\\Entry::__construct([int $type = UI\\Controls\\Entry::Normal])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Entry::getText":{"id":"ui-controls-entry.gettext","purpose":"Get Text","prototype":"string UI\\Controls\\Entry::getText()","return":"<p class=\"para\">   The current text  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Entry::isReadOnly":{"id":"ui-controls-entry.isreadonly","purpose":"Detect Read Only","prototype":"bool UI\\Controls\\Entry::isReadOnly()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Entry::onChange":{"id":"ui-controls-entry.onchange","purpose":"Change Handler","prototype":" UI\\Controls\\Entry::onChange()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Entry::setReadOnly":{"id":"ui-controls-entry.setreadonly","purpose":"Set Read Only","prototype":" UI\\Controls\\Entry::setReadOnly(bool $readOnly)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Entry::setText":{"id":"ui-controls-entry.settext","purpose":"Set Text","prototype":" UI\\Controls\\Entry::setText(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::append":{"id":"ui-controls-multilineentry.append","purpose":"Append Text","prototype":" UI\\Controls\\MultilineEntry::append(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::__construct":{"id":"ui-controls-multilineentry.construct","purpose":"Construct a new Multiline Entry","prototype":" UI\\Controls\\MultilineEntry::__construct([int $type = ''])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::getText":{"id":"ui-controls-multilineentry.gettext","purpose":"Get Text","prototype":"string UI\\Controls\\MultilineEntry::getText()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::isReadOnly":{"id":"ui-controls-multilineentry.isreadonly","purpose":"Read Only Detection","prototype":"bool UI\\Controls\\MultilineEntry::isReadOnly()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::onChange":{"id":"ui-controls-multilineentry.onchange","purpose":"Change Handler","prototype":" UI\\Controls\\MultilineEntry::onChange()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::setReadOnly":{"id":"ui-controls-multilineentry.setreadonly","purpose":"Set Read Only","prototype":" UI\\Controls\\MultilineEntry::setReadOnly(bool $readOnly)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\MultilineEntry::setText":{"id":"ui-controls-multilineentry.settext","purpose":"Set Text","prototype":" UI\\Controls\\MultilineEntry::setText(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Spin::__construct":{"id":"ui-controls-spin.construct","purpose":"Construct a new Spin","prototype":" UI\\Controls\\Spin::__construct(int $min, int $max)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Spin::getValue":{"id":"ui-controls-spin.getvalue","purpose":"Get Value","prototype":"int UI\\Controls\\Spin::getValue()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Spin::onChange":{"id":"ui-controls-spin.onchange","purpose":"Change Handler","prototype":" UI\\Controls\\Spin::onChange()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Spin::setValue":{"id":"ui-controls-spin.setvalue","purpose":"Set Value","prototype":" UI\\Controls\\Spin::setValue(int $value)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Slider::__construct":{"id":"ui-controls-slider.construct","purpose":"Construct a new Slider","prototype":" UI\\Controls\\Slider::__construct(int $min, int $max)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Slider::getValue":{"id":"ui-controls-slider.getvalue","purpose":"Get Value","prototype":"int UI\\Controls\\Slider::getValue()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Slider::onChange":{"id":"ui-controls-slider.onchange","purpose":"Change Handler","prototype":" UI\\Controls\\Slider::onChange()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Slider::setValue":{"id":"ui-controls-slider.setvalue","purpose":"Set Value","prototype":" UI\\Controls\\Slider::setValue(int $value)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Progress::getValue":{"id":"ui-controls-progress.getvalue","purpose":"Get Value","prototype":"int UI\\Controls\\Progress::getValue()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Progress::setValue":{"id":"ui-controls-progress.setvalue","purpose":"Set Value","prototype":" UI\\Controls\\Progress::setValue(int $value)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Separator::__construct":{"id":"ui-controls-separator.construct","purpose":"Construct a new Separator","prototype":" UI\\Controls\\Separator::__construct([int $type = UI\\Controls\\Separator::Horizontal])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Combo::append":{"id":"ui-controls-combo.append","purpose":"Append Option","prototype":" UI\\Controls\\Combo::append(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Combo::getSelected":{"id":"ui-controls-combo.getselected","purpose":"Get Selected Option","prototype":"int UI\\Controls\\Combo::getSelected()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Combo::onSelected":{"id":"ui-controls-combo.onselected","purpose":"Selected Handler","prototype":" UI\\Controls\\Combo::onSelected()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Combo::setSelected":{"id":"ui-controls-combo.setselected","purpose":"Set Selected Option","prototype":" UI\\Controls\\Combo::setSelected(int $index)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\EditableCombo::append":{"id":"ui-controls-editablecombo.append","purpose":"Append Option","prototype":" UI\\Controls\\EditableCombo::append(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\EditableCombo::getText":{"id":"ui-controls-editablecombo.gettext","purpose":"Get Text","prototype":"string UI\\Controls\\EditableCombo::getText()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\EditableCombo::onChange":{"id":"ui-controls-editablecombo.onchange","purpose":"Change Handler","prototype":" UI\\Controls\\EditableCombo::onChange()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\EditableCombo::setText":{"id":"ui-controls-editablecombo.settext","purpose":"Set Text","prototype":" UI\\Controls\\EditableCombo::setText(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Radio::append":{"id":"ui-controls-radio.append","purpose":"Append Option","prototype":" UI\\Controls\\Radio::append(string $text)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Radio::getSelected":{"id":"ui-controls-radio.getselected","purpose":"Get Selected Option","prototype":"int UI\\Controls\\Radio::getSelected()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Radio::onSelected":{"id":"ui-controls-radio.onselected","purpose":"Selected Handler","prototype":" UI\\Controls\\Radio::onSelected()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Radio::setSelected":{"id":"ui-controls-radio.setselected","purpose":"Set Selected Option","prototype":" UI\\Controls\\Radio::setSelected(int $index)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Picker::__construct":{"id":"ui-controls-picker.construct","purpose":"Construct a new Picker","prototype":" UI\\Controls\\Picker::__construct([int $type = UI\\Controls\\Picker::Date])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Form::append":{"id":"ui-controls-form.append","purpose":"Append Control","prototype":"int UI\\Controls\\Form::append(string $label, UI\\Control $control [, bool $stretchy = ''])","return":"<p class=\"para\">   Shall return the index of the appended control, may be 0  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Form::delete":{"id":"ui-controls-form.delete","purpose":"Delete Control","prototype":"bool UI\\Controls\\Form::delete(int $index)","return":"<p class=\"para\">   Indication of succcess  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Form::isPadded":{"id":"ui-controls-form.ispadded","purpose":"Padding Detection","prototype":"bool UI\\Controls\\Form::isPadded()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Form::setPadded":{"id":"ui-controls-form.setpadded","purpose":"Set Padding","prototype":" UI\\Controls\\Form::setPadded(bool $padded)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Grid::append":{"id":"ui-controls-grid.append","purpose":"Append Control","prototype":" UI\\Controls\\Grid::append(UI\\Control $control, int $left, int $top, int $xspan, int $yspan, bool $hexpand, int $halign, bool $vexpand, int $valign)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Grid::isPadded":{"id":"ui-controls-grid.ispadded","purpose":"Padding Detection","prototype":"bool UI\\Controls\\Grid::isPadded()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Grid::setPadded":{"id":"ui-controls-grid.setpadded","purpose":"Set Padding","prototype":" UI\\Controls\\Grid::setPadded(bool $padding)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Group::append":{"id":"ui-controls-group.append","purpose":"Append Control","prototype":" UI\\Controls\\Group::append(UI\\Control $control)","return":"","versions":""},"UI\\Controls\\Group::__construct":{"id":"ui-controls-group.construct","purpose":"Construct a new Group","prototype":" UI\\Controls\\Group::__construct(string $title)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Group::getTitle":{"id":"ui-controls-group.gettitle","purpose":"Get Title","prototype":"string UI\\Controls\\Group::getTitle()","return":"<p class=\"para\">   The current title  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Group::hasMargin":{"id":"ui-controls-group.hasmargin","purpose":"Margin Detection","prototype":"bool UI\\Controls\\Group::hasMargin()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Group::setMargin":{"id":"ui-controls-group.setmargin","purpose":"Set Margin","prototype":" UI\\Controls\\Group::setMargin(bool $margin)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Group::setTitle":{"id":"ui-controls-group.settitle","purpose":"Set Title","prototype":" UI\\Controls\\Group::setTitle(string $title)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Box::append":{"id":"ui-controls-box.append","purpose":"Append Control","prototype":"int UI\\Controls\\Box::append(Control $control [, bool $stretchy = ''])","return":"<p class=\"para\">   Shall return the index of the appended control, may be 0  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Box::__construct":{"id":"ui-controls-box.construct","purpose":"Construct a new Box","prototype":" UI\\Controls\\Box::__construct([int $orientation = UI\\Controls\\Box::Horizontal])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Box::delete":{"id":"ui-controls-box.delete","purpose":"Delete Control","prototype":"bool UI\\Controls\\Box::delete(int $index)","return":"<p class=\"para\">   Indication of success  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Box::getOrientation":{"id":"ui-controls-box.getorientation","purpose":"Get Orientation","prototype":"int UI\\Controls\\Box::getOrientation()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Box::isPadded":{"id":"ui-controls-box.ispadded","purpose":"Padding Detection","prototype":"bool UI\\Controls\\Box::isPadded()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Controls\\Box::setPadded":{"id":"ui-controls-box.setpadded","purpose":"Set Padding","prototype":" UI\\Controls\\Box::setPadded(bool $padded)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::clip":{"id":"ui-draw-pen.clip","purpose":"Clip a Path","prototype":" UI\\Draw\\Pen::clip(UI\\Draw\\Path $path)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::fill":{"id":"ui-draw-pen.fill","purpose":"Fill a Path","prototype":" UI\\Draw\\Pen::fill(UI\\Draw\\Path $path, int $with)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::restore":{"id":"ui-draw-pen.restore","purpose":"Restore","prototype":" UI\\Draw\\Pen::restore()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::save":{"id":"ui-draw-pen.save","purpose":"Save","prototype":" UI\\Draw\\Pen::save()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::stroke":{"id":"ui-draw-pen.stroke","purpose":"Stroke a Path","prototype":" UI\\Draw\\Pen::stroke(UI\\Draw\\Path $path, int $with, UI\\Draw\\Stroke $stroke)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::transform":{"id":"ui-draw-pen.transform","purpose":"Matrix Transform","prototype":" UI\\Draw\\Pen::transform(UI\\Draw\\Matrix $matrix)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Pen::write":{"id":"ui-draw-pen.write","purpose":"Draw Text at Point","prototype":" UI\\Draw\\Pen::write(UI\\Point $point, UI\\Draw\\Text\\Layout $layout)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::addRectangle":{"id":"ui-draw-path.addrectangle","purpose":"Draw a Rectangle","prototype":" UI\\Draw\\Path::addRectangle(UI\\Point $point, UI\\Size $size)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::arcTo":{"id":"ui-draw-path.arcto","purpose":"Draw an Arc","prototype":" UI\\Draw\\Path::arcTo(UI\\Point $point, float $radius, float $angle, float $sweep, float $negative)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::bezierTo":{"id":"ui-draw-path.bezierto","purpose":"Draw Bezier Curve","prototype":" UI\\Draw\\Path::bezierTo(UI\\Point $point, float $radius, float $angle, float $sweep, float $negative)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::closeFigure":{"id":"ui-draw-path.closefigure","purpose":"Close Figure","prototype":" UI\\Draw\\Path::closeFigure()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::__construct":{"id":"ui-draw-path.construct","purpose":"Construct a new Path","prototype":" UI\\Draw\\Path::__construct([int $mode = UI\\Draw\\Path::Winding])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::end":{"id":"ui-draw-path.end","purpose":"Finalize Path","prototype":" UI\\Draw\\Path::end()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::lineTo":{"id":"ui-draw-path.lineto","purpose":"Draw a Line","prototype":" UI\\Draw\\Path::lineTo(UI\\Point $point, float $radius, float $angle, float $sweep, float $negative)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::newFigure":{"id":"ui-draw-path.newfigure","purpose":"Draw Figure","prototype":" UI\\Draw\\Path::newFigure(UI\\Point $point)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Path::newFigureWithArc":{"id":"ui-draw-path.newfigurewitharc","purpose":"Draw Figure with Arc","prototype":" UI\\Draw\\Path::newFigureWithArc(UI\\Point $point, float $radius, float $angle, float $sweep, float $negative)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::invert":{"id":"ui-draw-matrix.invert","purpose":"Invert Matrix","prototype":" UI\\Draw\\Matrix::invert()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::isInvertible":{"id":"ui-draw-matrix.isinvertible","purpose":"Invertible Detection","prototype":"bool UI\\Draw\\Matrix::isInvertible()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::multiply":{"id":"ui-draw-matrix.multiply","purpose":"Multiply Matrix","prototype":"UI\\Draw\\Matrix UI\\Draw\\Matrix::multiply(UI\\Draw\\Matrix $matrix)","return":"<p class=\"para\">   The new Matrix  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::rotate":{"id":"ui-draw-matrix.rotate","purpose":"Rotate Matrix","prototype":" UI\\Draw\\Matrix::rotate(UI\\Point $point, float $amount)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::scale":{"id":"ui-draw-matrix.scale","purpose":"Scale Matrix","prototype":" UI\\Draw\\Matrix::scale(UI\\Point $center, UI\\Point $point)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::skew":{"id":"ui-draw-matrix.skew","purpose":"Skew Matrix","prototype":" UI\\Draw\\Matrix::skew(UI\\Point $point, UI\\Point $amount)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Matrix::translate":{"id":"ui-draw-matrix.translate","purpose":"Translate Matrix","prototype":" UI\\Draw\\Matrix::translate(UI\\Point $point)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Color::__construct":{"id":"ui-draw-color.construct","purpose":"Construct new Color","prototype":" UI\\Draw\\Color::__construct([int $color = ''])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Color::getChannel":{"id":"ui-draw-color.getchannel","purpose":"Color Manipulation","prototype":"float UI\\Draw\\Color::getChannel(int $channel)","return":"<p class=\"para\">   The current value of the requested channel  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Color::setChannel":{"id":"ui-draw-color.setchannel","purpose":"Color Manipulation","prototype":"void UI\\Draw\\Color::setChannel(int $channel, float $value)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::__construct":{"id":"ui-draw-stroke.construct","purpose":"Construct a new Stroke","prototype":" UI\\Draw\\Stroke::__construct([int $cap = UI\\Draw\\Line\\Cap::Flat [, int $join = UI\\Draw\\Line\\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10]]]])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::getCap":{"id":"ui-draw-stroke.getcap","purpose":"Get Line Cap","prototype":"int UI\\Draw\\Stroke::getCap()","return":"<p class=\"para\">   UI\\Draw\\Line\\Cap::Flat, UI\\Draw\\Line\\Cap::Round, or UI\\Draw\\Line\\Cap::Square  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::getJoin":{"id":"ui-draw-stroke.getjoin","purpose":"Get Line Join","prototype":"int UI\\Draw\\Stroke::getJoin()","return":"<p class=\"para\">   UI\\Draw\\Line\\Join::Miter, UI\\Draw\\Line\\Join::Round, or UI\\Draw\\Line\\Join::Bevel  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::getMiterLimit":{"id":"ui-draw-stroke.getmiterlimit","purpose":"Get Miter Limit","prototype":"float UI\\Draw\\Stroke::getMiterLimit()","return":"<p class=\"para\">   The current miter limit  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::getThickness":{"id":"ui-draw-stroke.getthickness","purpose":"Get Thickness","prototype":"float UI\\Draw\\Stroke::getThickness()","return":"<p class=\"para\">   The current thickness  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::setCap":{"id":"ui-draw-stroke.setcap","purpose":"Set Line Cap","prototype":" UI\\Draw\\Stroke::setCap(int $cap)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::setJoin":{"id":"ui-draw-stroke.setjoin","purpose":"Set Line Join","prototype":" UI\\Draw\\Stroke::setJoin(int $join)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::setMiterLimit":{"id":"ui-draw-stroke.setmiterlimit","purpose":"Set Miter Limit","prototype":" UI\\Draw\\Stroke::setMiterLimit(float $limit)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Stroke::setThickness":{"id":"ui-draw-stroke.setthickness","purpose":"Set Thickness","prototype":" UI\\Draw\\Stroke::setThickness(float $thickness)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Brush::__construct":{"id":"ui-draw-brush.construct","purpose":"Construct a new Brush","prototype":" UI\\Draw\\Brush::__construct(int $color)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Brush::getColor":{"id":"ui-draw-brush.getcolor","purpose":"Get Color","prototype":"UI\\Draw\\Color UI\\Draw\\Brush::getColor()","return":"<p class=\"para\">   The current color of the brush  <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Brush::setColor":{"id":"ui-draw-brush.setcolor","purpose":"Set Color","prototype":"void UI\\Draw\\Brush::setColor(int $color)","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Brush\\Gradient::addStop":{"id":"ui-draw-brush-gradient.addstop","purpose":"Stop Manipulation","prototype":"int UI\\Draw\\Brush\\Gradient::addStop(float $position, int $color)","return":"<p class=\"para\">   Total number of stops  <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\Draw\\Brush\\Gradient::delStop":{"id":"ui-draw-brush-gradient.delstop","purpose":"Stop Manipulation","prototype":"int UI\\Draw\\Brush\\Gradient::delStop(int $index)","return":"<p class=\"para\">   Total number of stops  <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\Draw\\Brush\\Gradient::setStop":{"id":"ui-draw-brush-gradient.setstop","purpose":"Stop Manipulation","prototype":"bool UI\\Draw\\Brush\\Gradient::setStop(int $index, float $position, int $color)","return":"<p class=\"para\">   Indication of success  <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\Draw\\Brush\\LinearGradient::__construct":{"id":"ui-draw-brush-lineargradient.construct","purpose":"Construct a Linear Gradient","prototype":" UI\\Draw\\Brush\\LinearGradient::__construct(UI\\Point $start, UI\\Point $end)","return":"","versions":"PHP 7, UI 2.0.0"},"UI\\Draw\\Brush\\RadialGradient::__construct":{"id":"ui-draw-brush-radialgradient.construct","purpose":"Construct a new Radial Gradient","prototype":" UI\\Draw\\Brush\\RadialGradient::__construct(UI\\Point $start, UI\\Point $outer, float $radius)","return":"","versions":"PHP 7, UI 2.0.0"},"UI\\Draw\\Text\\Layout::__construct":{"id":"ui-draw-text-layout.construct","purpose":"Construct a new Text Layout","prototype":" UI\\Draw\\Text\\Layout::__construct(string $text, UI\\Draw\\Text\\Font $font, float $width)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Text\\Layout::setColor":{"id":"ui-draw-text-layout.setcolor","purpose":"Set Color","prototype":" UI\\Draw\\Text\\Layout::setColor(int $color [, int $start = '' [, int $end = '']])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Text\\Layout::setWidth":{"id":"ui-draw-text-layout.setwidth","purpose":"Set Width","prototype":" UI\\Draw\\Text\\Layout::setWidth(float $width)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Text\\Font::__construct":{"id":"ui-draw-text-font.construct","purpose":"Construct a new Font","prototype":" UI\\Draw\\Text\\Font::__construct(UI\\Draw\\Text\\Font\\Descriptor $descriptor)","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Text\\Font::getAscent":{"id":"ui-draw-text-font.getascent","purpose":"Font Metrics","prototype":"float UI\\Draw\\Text\\Font::getAscent()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font::getDescent":{"id":"ui-draw-text-font.getdescent","purpose":"Font Metrics","prototype":"float UI\\Draw\\Text\\Font::getDescent()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font::getLeading":{"id":"ui-draw-text-font.getleading","purpose":"Font Metrics","prototype":"float UI\\Draw\\Text\\Font::getLeading()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font::getUnderlinePosition":{"id":"ui-draw-text-font.getunderlineposition","purpose":"Font Metrics","prototype":"float UI\\Draw\\Text\\Font::getUnderlinePosition()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font::getUnderlineThickness":{"id":"ui-draw-text-font.getunderlinethickness","purpose":"Font Metrics","prototype":"float UI\\Draw\\Text\\Font::getUnderlineThickness()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font\\Descriptor::__construct":{"id":"ui-draw-text-font-descriptor.construct","purpose":"Construct a new Font Descriptor","prototype":" UI\\Draw\\Text\\Font\\Descriptor::__construct(string $family, float $size [, int $weight = UI\\Draw\\Text\\Font\\Weight::Normal [, int $italic = UI\\Draw\\Text\\Font\\Italic::Normal [, int $stretch = UI\\Draw\\Text\\Font\\Stretch::Normal]]])","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\Draw\\Text\\Font\\Descriptor::getFamily":{"id":"ui-draw-text-font-descriptor.getfamily","purpose":"Get Font Family","prototype":"string UI\\Draw\\Text\\Font\\Descriptor::getFamily()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font\\Descriptor::getItalic":{"id":"ui-draw-text-font-descriptor.getitalic","purpose":"Style Detection","prototype":"int UI\\Draw\\Text\\Font\\Descriptor::getItalic()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font\\Descriptor::getSize":{"id":"ui-draw-text-font-descriptor.getsize","purpose":"Size Detection","prototype":"float UI\\Draw\\Text\\Font\\Descriptor::getSize()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font\\Descriptor::getStretch":{"id":"ui-draw-text-font-descriptor.getstretch","purpose":"Style Detection","prototype":"int UI\\Draw\\Text\\Font\\Descriptor::getStretch()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font\\Descriptor::getWeight":{"id":"ui-draw-text-font-descriptor.getweight","purpose":"Weight Detection","prototype":"int UI\\Draw\\Text\\Font\\Descriptor::getWeight()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 1.0.3"},"UI\\Draw\\Text\\Font\\fontFamilies":{"id":"function.ui-draw-text-font-fontfamilies","purpose":"Retrieve Font Families","prototype":"array UI\\Draw\\Text\\Font\\fontFamilies()","return":"","versions":"PHP 7, UI 0.9.9"},"UI\\quit":{"id":"function.ui-quit","purpose":"Quit UI Loop","prototype":"void UI\\quit()","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 2.0.0"},"UI\\run":{"id":"function.ui-run","purpose":"Enter UI Loop","prototype":"void UI\\run([int $flags = ''])","return":"<p class=\"para\">     <\/p>","versions":"PHP 7, UI 2.0.0"}}